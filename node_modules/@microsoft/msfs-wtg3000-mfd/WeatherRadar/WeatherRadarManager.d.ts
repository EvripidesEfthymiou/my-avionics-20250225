import { EventBus } from '@microsoft/msfs-sdk';
/**
 * A manager which controls automatic functions of the weather radar.
 */
export declare class WeatherRadarManager {
    private readonly bus;
    private readonly scanActiveCircuitIndex?;
    private readonly scanActiveProcedureIndex?;
    private readonly publisher;
    private keyEventManager?;
    private readonly settingManager;
    private readonly isActiveSetting;
    private readonly operatingModeSettings;
    private readonly isOnGround;
    private isAutoStandbyArmed;
    private readonly isScanActive;
    private readonly scanActiveCircuitSimVar?;
    private readonly isScanActiveCircuitSwitchOn?;
    private scanActiveDebounceOpId;
    private isAlive;
    private isScanActiveCircuitLogicReady;
    private isInit;
    private readonly operatingModeSubs;
    private readonly calibratedGainSubs;
    private activeSub?;
    /**
     * Creates a new instance of WeatherRadarManager.
     * @param bus The event bus.
     * @param scanActiveCircuitIndex The index of the electrical circuit to switch on when the radar is actively
     * scanning. If not defined, then no circuit will be switched on when the radar is actively scanning.
     * @param scanActiveProcedureIndex The index of the `system.cfg` electrical procedure to use the change the active
     * radar scan circuit switch state. The electrical procedure should be configured to set the circuit switch state
     * to OFF. If not defined, then no circuit will be switched on when the radar is actively scanning.
     */
    constructor(bus: EventBus, scanActiveCircuitIndex?: number | undefined, scanActiveProcedureIndex?: number | undefined);
    /**
     * Initializes this manager. Once this manager is initialized, it will control automatic functions of the weather
     * radar until destroyed.
     * @throws Error if this manager has been destroyed.
     */
    init(): void;
    /**
     * Initializes the logic for switching the active radar scan circuit on and off.
     */
    private initActiveScanCircuitLogic;
    /**
     * Sets the state of the active radar scan circuit switch.
     * @param on Whether to set the circuit switch to the ON state.
     */
    private setScanActiveCircuitSwitch;
    /**
     * Responds to when the state of the active radar scan circuit switch changes.
     * @param on Whether the active radar scan circuit switch is ON.
     */
    private onScanActiveCircuitSwitchChanged;
    /**
     * Publishes the active radar scan state.
     * @param isActive The state to publish.
     */
    private publishScanActive;
    /**
     * Destroys this manager. Once destroyed, this manager will no longer control the weather radar.
     */
    destroy(): void;
}
//# sourceMappingURL=WeatherRadarManager.d.ts.map