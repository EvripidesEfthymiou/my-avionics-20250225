/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
/// <reference types="@microsoft/msfs-types/js/common" />
import { AvionicsConfig, AvionicsStatusChangeEvent, WTG3000FsInstrument } from '@microsoft/msfs-wtg3000-common';
import { MfdConfig } from './Config/MfdConfig';
import './WTG3000_MFD.css';
/**
 * A G3000/5000 MFD instrument.
 */
export declare class WTG3000MfdInstrument extends WTG3000FsInstrument {
    private readonly instrumentConfig;
    /** The amount of time between periodic active flight plan calculations, in milliseconds. */
    private static readonly ACTIVE_FLIGHT_PLAN_CALC_PERIOD;
    private readonly logicHost;
    private readonly soundServer2;
    private readonly auralAlertSystem;
    private readonly displayOverlayLayerRef;
    private readonly highlightRef;
    private readonly startupScreenRef;
    private readonly displayPaneContainerRef;
    private readonly mainContentHidden;
    private readonly displayOverlayShow;
    private readonly bootSplashHidden;
    private readonly hEventMap;
    private readonly avionicsStatusManager;
    private readonly obsManager;
    private readonly navComInstrument;
    private readonly apRadioNavInstrument;
    private readonly timerInstrument;
    private readonly fuelTotalizerInstrument;
    protected readonly navSources: import("@microsoft/msfs-wtg3000-common").G3000NavSources;
    protected readonly navIndicators: import("@microsoft/msfs-wtg3000-common").G3000NavIndicators;
    private readonly flightPlanStore;
    private readonly flightPlanListManagers;
    private readonly casSystem;
    private readonly casLegacyAdapter;
    private readonly casMasterAuralAlertManager;
    private readonly auralAlertXmlAdapter;
    private readonly auralAlertWarningAdapter;
    private readonly flightPathCalcManager;
    private readonly comRadioSpacingManager;
    private readonly comRadioTxRxManager;
    private readonly activeNavSourceManager;
    private readonly navRadioMonitorManager;
    private readonly dmeTuneManager;
    private readonly timerManager;
    private readonly gpsSynchronizer;
    private readonly navdataComputer;
    private readonly radarAltimeterDataProvider;
    private readonly gps1DataProvider;
    private readonly gps2DataProvider;
    private readonly navToNavComputer;
    private autopilot?;
    private readonly goAroundManager;
    private readonly headingSyncManager;
    private espDataProvider?;
    private esp?;
    private readonly fmsSpeedManager;
    private readonly windDataProvider;
    private readonly vnavDataProvider;
    private readonly vnavAuralManager;
    private readonly minimumsManager;
    private readonly minimumsUnitsManager;
    private readonly trafficInstrument;
    private readonly xpdrInstrument;
    private readonly trafficAvionicsSystem;
    private readonly trafficSystem;
    private readonly trafficOperatingModeManager;
    private readonly terrainSystemAdcSelector;
    private readonly terrainSystemAhrsSelector;
    private readonly terrainSystemDataProvider;
    private readonly terrainSystem;
    private readonly terrainSystemAuralManager;
    private readonly touchdownCalloutAuralManager;
    private readonly xpdrTcasManager?;
    private readonly weatherRadarManager?;
    private readonly gpsIntegrityDataProvider;
    private readonly vSpeedBugManager;
    private readonly weightFuelComputer;
    private readonly weightBalanceComputer;
    private readonly fmsVSpeedManager;
    private readonly toldManager;
    private readonly toldComputer;
    private toldModule?;
    private readonly mapTerrainWxCompatManagers;
    private readonly altimeterBaroKeyEventHandler;
    private readonly initializationManager;
    private checklistManager?;
    private readonly displayPanesController;
    private readonly displayPaneViewFactory;
    private settingSaveManager?;
    private readonly flightPlanRouteSyncManager;
    private isFlightPlanInit;
    private lastActiveFplCalcTime;
    private avionicsGlobalPowerState;
    private readonly pluginSystem;
    /**
     * Constructor.
     * @param instrument This instrument's parent BaseInstrument.
     * @param config This instrument's general configuration object.
     * @param instrumentConfig This instrument's instrument-specific configuration object.
     */
    constructor(instrument: BaseInstrument, config: AvionicsConfig, instrumentConfig: MfdConfig);
    /** @inheritdoc */
    protected createSystems(): void;
    /**
     * Initializes aural alert user settings.
     */
    private initAuralAlertUserSettings;
    /**
     * Initializes touchdown callout user settings.
     */
    private initTouchdownCalloutUserSettings;
    /**
     * Performs initialization tasks.
     */
    private doInit;
    /**
     * Initializes this instrument's plugins.
     */
    private initPlugins;
    /**
     * Performs initialization tasks after a 500-millisecond wait.
     */
    private doDelayedInit;
    /**
     * Creates an ESP system.
     */
    private createEsp;
    /**
     * Creates a TOLD module.
     */
    private createToldModule;
    /**
     * Creates options with which to configure display pane logic on initial system power-on.
     * @returns Options with which to configure display pane logic on initial system power-on, or `undefined` if default
     * options should be used.
     */
    private createDisplayPanePowerOnOptions;
    /**
     * Creates an initialization process.
     * @returns An initialization process, or `undefined` if one could not be created.
     */
    private createInitializationProcess;
    /**
     * Initializes persistent settings. Loads saved settings and starts auto-save.
     * @param aircraftKey The aircraft key under which persistent settings are saved.
     * @param pluginSettings Persistent settings defined by plugins.
     */
    private initPersistentSettings;
    /**
     * Initializes the flight plan
     */
    private initFlightPlan;
    /**
     * Initializes the primary flight plan.
     */
    private initPrimaryFlightPlan;
    /**
     * Initializes the autopilot.
     * @param lnavComputer The LNAV computer from which the autopilot should source data.
     */
    private initAutopilot;
    /**
     * Initializes the state of the autopilot's selected altitude.
     * @param autopilot The autopilot.
     */
    private initSelectedAltitude;
    /**
     * Initializes the update loop for LNAV, autopilot, and ESP.
     */
    private initNavigationLoop;
    /**
     * Registers display pane views with this instrument's display pane view factory.
     */
    private registerDisplayPaneViews;
    /**
     * Initializes a listener which records the most recent time the active flight plan was calculated.
     */
    private initActiveFplCalcListener;
    /**
     * Renders this instrument's components.
     * @returns This instrument's rendered components, as a VNode.
     */
    private renderComponents;
    /** @inheritdoc */
    protected getBootDuration(): number;
    /** @inheritdoc */
    Update(): void;
    /** @inheritdoc */
    onSoundEnd(soundEventId: Name_Z): void;
    /** @inheritdoc */
    protected onBootFinished(): void;
    /** @inheritdoc */
    protected onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
    /**
     * Responds to changes in the avionics global power state.
     * @param event The event describing the change in the avionics global power state.
     */
    private onGlobalPowerChanged;
    /**
     * Resets all flight plans when the avionics are turned off.
     */
    private resetFlightPlansOnPowerOff;
    /**
     * Responds to when the user confirms the startup screen.
     */
    private onStartupConfirmation;
    /**
     * Responds to changes in whether this instrument's main content is hidden.
     * @param hidden Whether this instrument's main content is hidden.
     */
    private onMainContentHiddenChanged;
    /**
     * Responds to when an H event is received.
     * @param hEvent The event that was received.
     */
    private onHEvent;
    /**
     * Handles a GDU interaction event.
     * @param event The event to handle.
     */
    private onGduInteractionEvent;
}
//# sourceMappingURL=WTG3000MfdInstrument.d.ts.map