import { EventBus } from '@microsoft/msfs-sdk';
import { DisplayPanePowerOnOptions } from './DisplayPanePowerOnOptions';
/**
 * Keeps track of which display pane is being controlled by which GTC.
 */
export declare class DisplayPanesController {
    private readonly bus;
    private readonly pfdCount;
    private readonly displayPanePublisher;
    private readonly enabledControllablePanes;
    private readonly powerOnViewKeys;
    private readonly gtc1SelectedPane;
    private readonly gtc2SelectedPane;
    private readonly gtcSelectedPanes;
    private readonly gtcSelectedPaneState;
    private readonly displayPaneSettingManager;
    private readonly displayPaneVisibleSettings;
    private readonly displayPaneControllerSettings;
    private readonly displayPaneHalfSizeOnlySettings;
    private mfdState;
    /**
     * Creates a new DisplayPanesController.
     * @param bus The event bus.
     * @param pfdCount The number of supported PFD GDUs.
     */
    constructor(bus: EventBus, pfdCount: 1 | 2);
    /**
     * Initializes this controller.
     * @param powerOnOptions Options with which to configure display pane logic on initial system power-on.
     */
    init(powerOnOptions: Readonly<DisplayPanePowerOnOptions> | undefined): void;
    /**
     * Resets this controller's display panes to their default configuration:
     * * MFD in Half Mode.
     * * Navigation Map displayed on both PFD panes and the Left MFD pane.
     * * Traffic Map displayed on the Right MFD pane.
     *
     * This operation leaves PFD Full/Split mode unchanged for both PFDs.
     */
    reset(): void;
    /**
     * Gets an array of indexes of controllable display panes that are available for selection by a
     * display pane-controlling GTC.
     * @param controlGtcIndex The display pane control index of the GTC for which to get available display panes.
     * @returns An array of indexes of controllable display panes that are available to be selected for the specified GTC
     * in ascending order.
     */
    private getAvailablePanes;
    /** Split MFD */
    private splitMfd;
    /** Hide right MFD pane */
    private fullMfdLeft;
    /** Hide left MFD pane */
    private fullMfdRight;
    /**
     * Responds to when a select display pane command is received.
     * @param controlGtcIndex The display pane control index of the GTC that issued the command.
     * @param paneIndex The index of the display pane to select.
     */
    private onSelectDisplayPane;
    /**
     * Responds to when a change selected display pane command is received.
     * @param direction The direction of the change.
     * @param controlGtcIndex The display pane control index of the GTC that issued the command.
     */
    private onChangeSelectedDisplayPane;
    /**
     * Responds to when a toggle PFD split mode command is received.
     * @param pfdIndex The index of the PFD for which the command was issued.
     */
    private onTogglePfdSplit;
    /**
     * Responds to when a toggle MFD split mode command is received.
     * @param controlGtcIndex The display pane control index of the GTC that issued the command.
     */
    private onToggleMfdSplit;
}
//# sourceMappingURL=DisplayPanesController.d.ts.map