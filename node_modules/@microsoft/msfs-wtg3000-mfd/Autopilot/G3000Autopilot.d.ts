import { APStateManager, EventBus, FlightPlanner, MetricAltitudeSettingsManager } from '@microsoft/msfs-sdk';
import { GarminAPConfigInterface, GarminAutopilot, MinimumsDataProvider } from '@microsoft/msfs-garminsdk';
import { AutopilotConfig, G3000FlightPlannerId } from '@microsoft/msfs-wtg3000-common';
/**
 * A G3000 autopilot.
 */
export declare class G3000Autopilot extends GarminAutopilot {
    /**
     * Creates a new instance of G3000Autopilot.
     * @param bus The event bus.
     * @param flightPlanner The autopilot's associated flight planner.
     * @param apConfig The autopilot's configuration.
     * @param stateManager The autopilot's state manager.
     * @param g3000Config A G3000 config which defines options for the autopilot.
     * @param metricAltSettingsManager A manager of metric altitude mode user settings.
     * @param minimumsDataProvider A provider of minimums data.
     */
    constructor(bus: EventBus, flightPlanner: FlightPlanner<G3000FlightPlannerId>, apConfig: GarminAPConfigInterface, stateManager: APStateManager, g3000Config: AutopilotConfig, metricAltSettingsManager: MetricAltitudeSettingsManager, minimumsDataProvider: MinimumsDataProvider);
    /**
     * Creates an input acceleration input rate transformer function for an altitude select manager. The function
     * transforms input rates above a threshold using a logistic curve. Input rates below the threshold are returned
     * unchanged. The logistic curve is parameterized such that the full transformation curve is still smooth (continuous
     * and differentiable) at the threshold.
     * @param accelThreshold The input rate above which a logistic curve is used to transform the rate, in inputs per
     * second.
     * @param maxRate The maximum input rate to be returned by the transformer function, in inputs per second. Must be
     * greater than `accelThreshold`.
     * @param accelRamp The rate at which the transformed input rate approaches `maxRate` as the input rate increases
     * above `accelThreshold`. Must be positive.
     * @returns An input acceleration input rate transformer function for an altitude select manager that respects the
     * specified parameters.
     */
    private static createAltSelectInputRateTransformer;
    /**
     * Transforms a selected altitude input rate. Input rates above a certain threshold are transformed using a logistic
     * function. Input rates below the threshold are returned unchanged.
     * @param U The upper limit of the logistic curve.
     * @param L The lower limit of the logistic curve.
     * @param k The growth rate of the logistic curve.
     * @param x0 The x offset of the logistic curve.
     * @param threshold The input rate above which a logistic curve is used to transform the rate, and below which the
     * rate is returned unchanged.
     * @param inputRate The input rate to transform.
     * @returns The transformed input rate.
     */
    private static altSelectInputRateTransformer;
}
//# sourceMappingURL=G3000Autopilot.d.ts.map