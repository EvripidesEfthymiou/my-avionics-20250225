import { APConfigDirectorEntry, APValues, EventBus, LNavComputer, VNavPathCalculator } from '@microsoft/msfs-sdk';
import { Fms, GarminAPConfig, GarminNavToNavComputer } from '@microsoft/msfs-garminsdk';
import { AvionicsConfig } from '@microsoft/msfs-wtg3000-common';
import { G3000AutopilotPluginOptions } from './G3000AutopilotPluginOptions';
/**
 * A G3000 autopilot configuration.
 */
export declare class G3000APConfig extends GarminAPConfig {
    private readonly pluginOptions;
    /**
     * Creates a new instance of G3000APConfig.
     * @param bus The event bus.
     * @param fms The FMS instance from which to source data.
     * @param lnavComputer The LNAV computer from which to source data.
     * @param verticalPathCalculator The vertical path calculator to use for the autopilot's internal VNAV and glidepath
     * computers.
     * @param navToNavComputer The nav-to-nav computer from which to source data.
     * @param config The avionics configuration object.
     * @param pluginOptions An array of autopilot options defined by plugins. The array should be ordered such that
     * options from plugins that were loaded earlier are positioned before options from plugins that were loaded later.
     */
    constructor(bus: EventBus, fms: Fms, lnavComputer: LNavComputer, verticalPathCalculator: VNavPathCalculator, navToNavComputer: GarminNavToNavComputer, config: AvionicsConfig, pluginOptions: readonly G3000AutopilotPluginOptions[]);
    /** @inheritDoc */
    createLateralDirectors(apValues: APValues): Iterable<Readonly<APConfigDirectorEntry>>;
    /** @inheritDoc */
    createVerticalDirectors(apValues: APValues): Iterable<Readonly<APConfigDirectorEntry>>;
}
//# sourceMappingURL=G3000APConfig.d.ts.map