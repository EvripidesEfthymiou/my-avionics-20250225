import { EventBus, FacilityLoader, FlightPlanner, Subscribable } from '@microsoft/msfs-sdk';
import { GarminSpeedConstraintStore } from '@microsoft/msfs-garminsdk';
import { FmsSpeedsConfig, FmsSpeedUserSettingManager, G3000FlightPlannerId } from '@microsoft/msfs-wtg3000-common';
/**
 * A manager which computes FMS speed targets and syncs those targets with the autopilot when in FMS-managed speed
 * mode.
 */
export declare class FmsSpeedManager {
    private readonly bus;
    private readonly facLoader;
    private readonly flightPlanner;
    private readonly speedConstraintStore;
    private readonly config;
    private readonly settingManager;
    private static readonly KEY_INTERCEPTS;
    private static readonly SOURCE_PRIORITY;
    private static readonly MACH_TO_KIAS_SMOOTHING_TAU;
    private static readonly IAS_MACH_CONVERSION_HYSTERESIS;
    /**
     * The minimum amount of time, in seconds, to anticipate a speed constraint when it potentially reduces the computed
     * target speed.
     */
    private static readonly SPEED_REDUCTION_ANTICIPATION_BASE;
    /**
     * The amount of extra time, in seconds, to anticipate a speed constraint when it potentially reduces the computed
     * target speed for each knot of reduction in speed.
     */
    private static readonly SPEED_REDUCTION_ANTICIPATION_FACTOR;
    private static readonly SPEED_REDUCTION_ANTICIPATION_HYSTERESIS;
    private readonly publisher;
    private keyEventManager?;
    private readonly keyEventManagerReadyPromises;
    private readonly userTargetIas;
    private readonly userTargetMach;
    private readonly userTargetIsMach;
    private readonly climbScheduleIndex;
    private readonly climbIas;
    private readonly climbMach;
    private readonly climbAltitudeCeiling;
    private readonly climbAltitudeIasLimit;
    private readonly cruiseScheduleIndex;
    private readonly cruiseIas;
    private readonly cruiseMach;
    private readonly descentScheduleIndex;
    private readonly descentIas;
    private readonly descentMach;
    private readonly descentAltitudeCeiling;
    private readonly descentAltitudeIasLimit;
    private readonly departureIasLimit;
    private readonly departureAgl;
    private readonly departureRadius;
    private departureIcao;
    private departureFacility;
    private departureElevation;
    private readonly arrivalIasLimit;
    private readonly arrivalAgl;
    private readonly arrivalRadius;
    private arrivalIcao;
    private arrivalFacility;
    private arrivalElevation;
    private readonly configurationLimitSettings;
    private readonly apSelectedAltitude;
    private readonly apFmaData;
    private readonly apSelectedIas;
    private readonly apSelectedMach;
    private readonly apSelectedSpeedIsMach;
    private readonly apSelectedSpeedIsManual;
    private readonly isOnGround;
    private readonly ppos;
    private readonly indicatedAltitude;
    private readonly pressureAltitude;
    private readonly verticalSpeed;
    private readonly lnavIsTracking;
    private readonly lnavLegIndex;
    private readonly lnavLegDistanceRemaining;
    private readonly lnavAlongTrackSpeed;
    private readonly machToKiasSmoother;
    private lastMachToKiasTime;
    private machToKias;
    private readonly cruiseAltitude;
    private readonly vnavState;
    private readonly vnavFlightPhase;
    private readonly vnavTargetAltitude;
    private readonly flapsLeftAngle;
    private readonly flapsRightAngle;
    private readonly gearNosePosition;
    private readonly gearLeftPosition;
    private readonly gearRightPosition;
    private readonly adcIndex;
    private readonly fmsPosIndex;
    private readonly airframeContext;
    private readonly airframeMaxIas;
    private readonly airframeMaxMach;
    private readonly computedSpeedInfo;
    private readonly computedSpeedInfoWithAltitudeLimit;
    private readonly computedSpeedInfoWithNextConstraint;
    private armedAnticipatedConstraint;
    private anticipatedConstraint;
    private isAnticipatedAltitudeLimitArmed;
    private isAnticipatedAltitudeLimitActive;
    private currentSchedule;
    private maxIas;
    private maxIasSource;
    private maxMach;
    private maxMachSource;
    private maxIsMach;
    private publishedCurrentSchedule?;
    private publishedMaxIas?;
    private publishedMaxMach?;
    private publishedMaxIsMach?;
    private publishedMaxSource?;
    private targetIas;
    private targetIasSource;
    private targetMach;
    private targetMachSource;
    private targetIsMach;
    private publishedTargetIas?;
    private publishedTargetMach?;
    private publishedTargetIsMach?;
    private publishedTargetSource?;
    private activeIas;
    private activeMach;
    private activeIsMach;
    private publishedActiveIas?;
    private publishedActiveMach?;
    private publishedActiveIsMach?;
    private isAlive;
    private isInit;
    private keySub?;
    private clockSub?;
    private adcIndexSub?;
    private fmsPosIndexSub?;
    private machToKiasSub?;
    private pposSub?;
    private readonly fplSubs;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param facLoader A facility loader instance.
     * @param flightPlanner The flight planner.
     * @param speedConstraintStore The speed constraint store.
     * @param config A configuration object defining options related to FMS speeds.
     * @param settingManager A manager of FMS speed user settings.
     * @param adcIndex The index of the ADC used by this manager.
     * @param fmsPosIndex The index of the FMS positioning system used by this manager.
     */
    constructor(bus: EventBus, facLoader: FacilityLoader, flightPlanner: FlightPlanner<G3000FlightPlannerId>, speedConstraintStore: GarminSpeedConstraintStore, config: FmsSpeedsConfig, settingManager: FmsSpeedUserSettingManager, adcIndex: number | Subscribable<number>, fmsPosIndex: number | Subscribable<number>);
    /**
     * Waits for this manager's key event manager to be ready.
     * @returns A Promise which will be fulfilled when this manager's key event manager is ready, or rejected if this
     * manager is destroyed before then.
     */
    private awaitKeyEventManagerReady;
    /**
     * Initializes this manager.
     * @returns A Promise which will be fulfilled when this manager is fully initialized, or rejected if this manager is
     * destroyed before then.
     */
    init(): Promise<void>;
    /**
     * Resets the user-defined speed override.
     */
    resetUserOverride(): void;
    /**
     * Fetches and sets this manager's departure facility from a given ICAO string.
     * @param icao The ICAO of the departure facility to fetch.
     */
    private fetchDepartureFacility;
    /**
     * Fetches and sets this manager's arrival facility from a given ICAO string.
     * @param icao The ICAO of the arrival facility to fetch.
     */
    private fetchArrivalFacility;
    /**
     * Updates this manager.
     */
    private update;
    /**
     * Gets the speed limit, in knots, imposed by the aircraft's current flaps/gear configuration.
     * @returns The speed limit, in knots, imposed by the aircraft's current flaps/gear configuration. A negative value
     * indicates there is no such limit.
     */
    private getConfigurationLimit;
    /**
     * Computes a target speed for a given flight phase.
     * @param speedConstraintFlightPhase The current flight phase to use for determining how to follow flight plan speed
     * constraints, or `undefined` if it is unknown.
     * @param scheduleSource The source to use for speeds derived from the active performance schedule.
     * @param scheduleName The name of the currently active performance schedule.
     * @param scheduledIas The indicated airspeed, in knots, defined by the active performance schedule.
     * @param scheduledMach The mach number defined by the active performance schedule.
     * @param altitudeCeiling The altitude ceiling, in feet, for the current flight phase's altitude speed limit.
     * @param altitudeIasLimit The altitude speed limit, in knots, for the current flight phase.
     * @param configurationIasLimit The speed limit, in knots, imposed by the aircraft's current flaps/gear
     * configuration. A negative value indicates there is no such limit.
     */
    private computeTarget;
    /**
     * Gets the current state of the altitude speed limit.
     * @param altitudeCeiling The altitude ceiling, in feet, for the current altitude speed limit.
     * @returns The current state of the altitude speed limit.
     */
    private getAltitudeLimitState;
    /**
     * Computes maximum and target speeds using a given speed constraint.
     * @param scheduleSource The source to use for speeds derived from the active performance schedule.
     * @param scheduledIas The indicated airspeed, in knots, defined by the active performance schedule.
     * @param scheduledMach The mach number defined by the active performance schedule.
     * @param altitudeIasLimit The altitude speed limit, in knots, for the current flight phase, or `undefined` if the
     * altitude speed limit is to be ignored.
     * @param configurationIasLimit The speed limit, in knots, imposed by the aircraft's current flaps/gear
     * configuration. A negative value indicates there is no such limit.
     * @param speedConstraint The speed constraint to use.
     * @param out The object to which to write the results.
     * @returns Computed maximum and target speeds using the specified speed constraint.
     */
    private computeSpeedsWithConstraint;
    /**
     * Checks whether this manager should use the speeds computed for an anticipated limit instead of the ones computed
     * for the non-anticipated limit.
     * @param currentTargetSpeedInfo The computed speeds for the non-anticipated limit.
     * @param anticipatedTargetSpeedInfo The computed speeds for the anticipated limit.
     * @param anticipationTime The time remaining, in seconds, until the anticipated limit becomes active.
     * @param isUsingAnticipated Whether the anticipated limit is currently being used.
     * @returns Whether this manager should use the speeds computed for an anticipated limit instead of the ones computed
     * for the non-anticipated limit.
     */
    private shouldUseAnticipatedSpeed;
    /**
     * Calculates the time remaining, in seconds, to sequence an upcoming speed constraint.
     * @param plan The active flight plan.
     * @param nextConstraint The upcoming speed constraint to query.
     * @param alongTrackSpeed The current along-track speed of the airplane, in knots.
     * @returns The time remaining, in seconds, to sequence the upcoming speed constraint.
     */
    private getSecondsToNextConstraint;
    /**
     * Reconciles this manager's active target speed from the computed target and any existing user overrides.
     * @param configurationIasLimit The speed limit, in knots, imposed by the aircraft's current flaps/gear
     * configuration. A negative value indicates there is no such limit.
     */
    private reconcileActiveTarget;
    /**
     * Publishes this manager's current target speed data to the event bus.
     */
    private publishTargetData;
    /**
     * Syncs this manager's active target speed to the sim's autopilot simvars.
     */
    private setApValues;
    /**
     * Destroys this manager.
     */
    destroy(): void;
    /**
     * Gets the distance remaining to a constraint, in meters.
     * @param plan The active flight plan.
     * @param activeLegIndex The index of the active leg.
     * @param activeLegDistanceRemaining The distance remaining to the end of the active leg, in nautical miles.
     * @param constraintLegIndex The index of the constraint's leg.
     * @returns The distance remaining to the specified constraint, in nautical miles.
     */
    private static getDistanceToConstraint;
}
//# sourceMappingURL=FmsSpeedManager.d.ts.map