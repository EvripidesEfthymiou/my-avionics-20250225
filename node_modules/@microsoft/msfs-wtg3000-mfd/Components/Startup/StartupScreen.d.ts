import { ComponentProps, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { StartupScreenPrebuiltRow, StartupScreenRowFactory } from './StartupScreenRow';
import './StartupScreen.css';
/**
 * Component props for StartupScreen.
 */
export interface StartupScreenProps extends ComponentProps {
    /** The text to display for the airplane name. */
    airplaneName: string;
    /** The path to the airplane logo image asset, or `undefined` if there is no airplane logo to display. */
    airplaneLogoFilePath?: string;
    /** An instance of the event bus. */
    bus: EventBus;
    /**
     * An array of data rows to render on the right side of the screen. Each row is defined by either a function which
     * returns an object describing the row to render, or a pre-built row key. Up to eleven rows can be rendered. The
     * rows will be rendered from top to bottom in the order in which they appear in the array. If not defined, a default
     * set of rows will be rendered.
     */
    rows?: readonly (StartupScreenRowFactory | StartupScreenPrebuiltRow)[];
    /** A callback function which is executed each time the user confirms the startup screen. */
    onConfirmation?: () => void;
}
/**
 * A G3000 MFD startup screen.
 */
export declare class StartupScreen extends DisplayComponent<StartupScreenProps> {
    private static readonly NAV_DATA_REGEX;
    private static EXPIRATION_DATE_FORMATTER;
    private static readonly DEFAULT_ROWS;
    private readonly rootCssClass;
    private readonly simTime;
    private readonly rowDestructors;
    private isAlive;
    private _isAwake;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Checks whether this screen is awake.
     * @returns Whether this screen is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this screen. Once awake, this screen will be visible and will respond to confirmation softkey interaction
     * events.
     * @throws Error if this screen has been destroyed.
     */
    wake(): void;
    /**
     * Puts this screen to sleep. Once asleep, this screen will be hidden and will not respond to softkey interaction
     * events.
     * @throws Error if this screen has been destroyed.
     */
    sleep(): void;
    /**
     * Handles an interaction event.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     * @throws Error if this screen has been destroyed.
     */
    onInteractionEvent(event: string): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this startup screen's data rows.
     * @param rows An array of factories and pre-built row keys defining the rows to render. The rows will be rendered
     * in the order in which they appear in the array.
     * @returns This startup screen's data rows, as a VNode.
     */
    private renderRows;
    /**
     * Gets a row factory for a pre-built row key.
     * @param key The key of the pre-built row.
     * @returns A row factory for the specified pre-built key, or `undefined` if the key is not valid.
     */
    private getPrebuiltRowFactory;
    /**
     * Renders a data row.
     * @param def An object describing the row to render.
     * @returns A data row, as a VNode.
     */
    private renderRow;
    /** @inheritdoc */
    destroy(): void;
    /**
     * Gets the expiration date of the current navigation data, as a UNIX timestamp in milliseconds.
     * @returns The expiration date of the current navigation data, as a UNIX timestamp in milliseconds, or `NaN` if the
     * date could not be determined.
     */
    private static getNavDataExpirationDate;
}
//# sourceMappingURL=StartupScreen.d.ts.map