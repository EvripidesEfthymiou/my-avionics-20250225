import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
import { EspDataProvider, EspModule, EspOperatingMode } from '@microsoft/msfs-garminsdk';
import { G3000EspDefinition } from '@microsoft/msfs-wtg3000-common';
import { G3000EspInterface } from './G3000EspInterface';
/**
 * A G3000 electronic stability and protection (ESP) system.
 */
export declare class G3000Esp implements G3000EspInterface {
    private readonly esp;
    private readonly controlInputManager?;
    private isAvionicsPowered;
    private readonly isEnabled;
    /** @inheritDoc */
    readonly operatingMode: Subscribable<EspOperatingMode>;
    /** @inheritDoc */
    readonly pitchAxisForce: Subscribable<number>;
    /** @inheritDoc */
    readonly rollAxisForce: Subscribable<number>;
    /** @inheritDoc */
    readonly engagementTimeWindow: number;
    /** @inheritDoc */
    readonly engagementTimeFraction: Subscribable<number>;
    /**
     * Creates a new instance of G3000Esp. The system is created in a paused state. Initializing the system and calling
     * `update()` will resume it.
     * @param bus The event bus.
     * @param dataProvider A provider of ESP data.
     * @param def A definition that describes how to create the system.
     */
    constructor(bus: EventBus, dataProvider: EspDataProvider, def: G3000EspDefinition);
    /**
     * Updates the master state of this system.
     */
    private updateMaster;
    /** @inheritDoc */
    getAllModules(): readonly EspModule[];
    /** @inheritDoc */
    getModule(id: string): EspModule | undefined;
    /**
     * Initializes this system. Once the system is initialized, it can be updated by calling `update()`.
     */
    init(): void;
    /**
     * Sets whether avionics are powered.
     * @param powered Whether avionics are powered.
     */
    setAvionicsPowered(powered: boolean): void;
    /** @inheritDoc */
    setInterrupt(interrupt: boolean): void;
    /** @inheritDoc */
    setFailed(failed: boolean): void;
    /**
     * Updates this system.
     */
    update(): void;
    /**
     * Pauses this system. The system will be resumed the next time `update()` is called.
     */
    pause(): void;
}
//# sourceMappingURL=G3000Esp.d.ts.map