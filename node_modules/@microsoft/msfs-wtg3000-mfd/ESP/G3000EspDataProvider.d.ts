import { Accessible, EventBus } from '@microsoft/msfs-sdk';
import { EspData, EspDataProvider } from '@microsoft/msfs-garminsdk';
/**
 * Configuration options for {@link G3000EspDataProvider}.
 */
export type G3000EspDataProviderOptions = {
    /** The number of supported AHRS systems from which the data provider can source data. */
    ahrsCount: number;
    /** The number of supported ADC systems from which the data provider can source data. */
    adcCount: number;
    /**
     * Whether arming is inhibited due to external factors. If not defined, then arming is never inhibited due to
     * external factors.
     */
    isArmingInhibited?: Accessible<boolean>;
};
/**
 * A G3000 provider of ESP data.
 */
export declare class G3000EspDataProvider implements EspDataProvider {
    private readonly bus;
    private readonly simTime;
    private readonly simRate;
    private readonly isArmingInhibited;
    private readonly isOnGround;
    private readonly apMasterStatus;
    private readonly ahrsSelector;
    private readonly pitch;
    private lastPitch;
    private readonly pitchRateSmoother;
    private readonly roll;
    private lastRoll;
    private readonly rollRateSmoother;
    private readonly adcSelector;
    private readonly ias;
    private readonly mach;
    private readonly tas;
    private readonly aoaDataValid;
    private readonly aoa;
    private readonly stallAoa;
    private readonly zeroLiftAoa;
    private readonly gpsAglDataValid;
    private readonly gpsAgl;
    private readonly _data;
    /** @inheritDoc */
    readonly data: Readonly<EspData>;
    private lastUpdateRealTime;
    private isAlive;
    private isInit;
    private readonly subscriptions;
    /**
     * Creates a new instance of G3000EspDataProvider. The data provider is created in a paused state. Initializing the
     * data provider and calling `update()` will resume it.
     * @param bus The event bus.
     * @param options Options with which to configure the data provider.
     */
    constructor(bus: EventBus, options: Readonly<G3000EspDataProviderOptions>);
    /**
     * Initializes this data provider, allowing it to be updated.
     * @throws Error if this data provider has been destroyed.
     */
    init(): void;
    /**
     * Responds to when the index of the AHRS system from which this provider sources data changes.
     * @param index The new index of the AHRS system from which this provider sources data.
     */
    private onAhrsIndexChanged;
    /**
     * Responds to when the index of the ADC system from which this provider sources data changes.
     * @param index The new index of the ADC system from which this provider sources data.
     */
    private onAdcIndexChanged;
    /**
     * Updates this data provider. Has no effect if this data provider is not initialized.
     * @param realTime The current real (operating system) time, as a Javascript timestamp.
     * @throws Error if this data provider has been destroyed.
     */
    update(realTime: number): void;
    /**
     * Updates this provider's attitude data.
     * @param dt The elapsed time since the last update, in milliseconds.
     */
    private updateAttitude;
    /**
     * Updates this provider's airspeed data.
     */
    private updateAirspeed;
    /**
     * Updates this provider's angle of attack data.
     */
    private updateAoa;
    /**
     * Updates this provider's above ground height data.
     */
    private updateAgl;
    /**
     * Pauses this data provider. The provider will be resumed the next time `update()` is called.
     * @throws Error if this data provider has been destroyed.
     */
    pause(): void;
    /**
     * Destroys this data provider.
     */
    destroy(): void;
}
//# sourceMappingURL=G3000EspDataProvider.d.ts.map