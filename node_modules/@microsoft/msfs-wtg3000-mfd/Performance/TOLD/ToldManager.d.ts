import { AirportFacility, EventBus, OneWayRunway, ReadonlySubEvent, Subscribable } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId, ToldResetType } from '@microsoft/msfs-wtg3000-common';
/**
 * A manager of takeoff/landing (TOLD) data. The manager automatically sets the TOLD origin and destination based on
 * changes to the primary flight plan and populates the TOLD runway parameter settings (length, elevation, heading,
 * gradient) with database values when an origin or destination runway is selected. The manager also responds to
 * commands published to event bus topics defined in `ToldControlEvents`.
 */
export declare class ToldManager {
    private readonly bus;
    private readonly fms;
    private readonly toldSettingManager;
    private readonly originIcaoSetting;
    private readonly destinationIcaoSetting;
    private fplOriginIcao;
    private fplDestinationIcao;
    private readonly _originAirport;
    /** The selected TOLD origin airport. */
    readonly originAirport: Subscribable<AirportFacility | null>;
    private readonly _originRunway;
    /** The selected TOLD origin runway. */
    readonly originRunway: Subscribable<OneWayRunway | null>;
    private readonly originOpId;
    private readonly _destinationAirport;
    /** The selected TOLD destination airport. */
    readonly destinationAirport: Subscribable<AirportFacility | null>;
    private readonly _destinationRunway;
    /** The selected TOLD destination airport. */
    readonly destinationRunway: Subscribable<OneWayRunway | null>;
    private readonly destinationOpId;
    private readonly _onReset;
    /** An event that is triggered when this manager is reset. The event's data is the type of reset that was executed. */
    readonly onReset: ReadonlySubEvent<this, ToldResetType>;
    private isAlive;
    private isInit;
    private isResumed;
    private fplOriginDestSub?;
    private fplProcDetailsSub?;
    private originIcaoSub?;
    private destinationIcaoSub?;
    private resetSub?;
    /**
     * Creates a new instance of ToldManager.
     * @param bus The event bus.
     * @param fms The FMS.
     */
    constructor(bus: EventBus, fms: Fms<G3000FlightPlannerId>);
    /**
     * Initializes this manager. Once initialized, the manager will perform its automatic functions unless it is paused.
     * @param paused Whether to initialize this manager as paused. Defaults to `false`.
     * @throws Error if this manager has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Initializes the logic that automatically updates the TOLD origin and destination settings based on the primary
     * flight plan origin and destination.
     */
    private initOriginDestAutoUpdateLogic;
    /**
     * Resumes this manager. Once resumed, this computer will perform its automatic functions.
     * @throws Error if this manager has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this manager. Once paused, this computer will not perform its automatic functions until it is resumed.
     * @throws Error if this manager has been destroyed.
     */
    pause(): void;
    /**
     * Resets this manager. Reverts TOLD origin, destination, and runway parameter settings to their defaults. Has no
     * effect if this manager is not initialized.
     * @param type The type of reset to execute.
     * @throws Error if this manager has been destroyed.
     */
    reset(type: ToldResetType): void;
    /**
     * Responds to when the origin or destination of the primary flight plan changes.
     */
    private onFlightPlanOriginDestChanged;
    /**
     * Responds to when the origin/destination ICAO changes.
     * @param opIdValue A value containing the current operation ID for responding to the ICAO change.
     * @param setting The ICAO setting.
     * @param airportSubject The airport subject associated with the ICAO.
     * @param runwaySubject The runway subject associated with the ICAO.
     * @param icao The new origin/destination ICAO string (V2).
     */
    private onOriginDestIcaoChanged;
    /**
     * Responds to when a takeoff/landing runway changes.
     *
     * If the new runway is `null`, then the associated runway parameters are reset to their uninitialized states. If the
     * new runway is not `null`, then the associated runway parameters are loaded from the database values for the
     * runway.
     * @param isTakeoff Whether the changed runway was the takeoff runway.
     * @param runway The new runway.
     */
    private onRunwayChanged;
    /**
     * Destroys this manager. Once destroyed, this manager will no longer perform its automatic functions and cannot be
     * paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=ToldManager.d.ts.map