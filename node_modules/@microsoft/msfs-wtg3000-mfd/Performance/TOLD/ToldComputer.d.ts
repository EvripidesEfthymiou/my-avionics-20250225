import { EventBus } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId, ToldConfig, ToldModule, VSpeedUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import { FmsVSpeedManager } from './FmsVSpeedManager';
import { ToldManager } from './ToldManager';
/**
 * A computer for TOLD (takeoff/landing) performance calculations.
 */
export declare class ToldComputer {
    private readonly bus;
    private readonly toldManager;
    private readonly fms;
    private readonly adcCount;
    private readonly config;
    private readonly fmsVSpeedManager;
    private readonly vSpeedSettingManager;
    private static readonly CALCULATE_DEBOUNCE_DELAY;
    private static readonly FLAPS_ANGLE_TOLERANCE;
    private readonly toldSettingManager;
    private module?;
    private readonly adcStates;
    private adcIndex?;
    private readonly rat;
    private readonly baroSetting;
    private readonly flapsLeftAngle;
    private readonly flapsRightAngle;
    private readonly isOnGround;
    private readonly originIcaoSetting;
    private readonly takeoffWeightSetting;
    private readonly takeoffRunwaySurfaceSetting;
    private readonly takeoffTemperatureSetting;
    private readonly takeoffUseRatSetting;
    private readonly takeoffPressureSetting;
    private readonly takeoffPressureAltitudeSetting;
    private readonly takeoffFlapsIndexSetting;
    private readonly takeoffAntiIceOnSetting;
    private readonly takeoffThrustReverserSetting;
    private readonly takeoffSpeedsAcceptedSetting;
    private readonly destinationIcaoSetting;
    private readonly landingWeightCanUsePredictedSetting;
    private readonly landingWeightUsePredictedSetting;
    private readonly landingWeightSetting;
    private readonly landingRunwaySurfaceSetting;
    private readonly landingTemperatureSetting;
    private readonly landingPressureSetting;
    private readonly landingPressureAltitudeSetting;
    private readonly landingFlapsIndexSetting;
    private readonly landingAntiIceOnSetting;
    private readonly landingThrustReverserSetting;
    private readonly landingSpeedsAcceptedSetting;
    private readonly zeroFuelWeight;
    private readonly aircraftWeight;
    private readonly landingWeight;
    private readonly takeoffFlapsAngle;
    private fplOriginIcao;
    private fplDestinationIcao;
    private readonly takeoffParams;
    private readonly takeoffResult;
    private readonly lastCalculatedTakeoffResult;
    private isTakeoffResultValid;
    private takeoffCalcRequestTime?;
    private takeoffUpdateRequestTime?;
    private readonly landingParams;
    private readonly landingResult;
    private readonly lastCalculatedLandingResult;
    private isLandingResultValid;
    private landingCalcRequestTime?;
    private landingUpdateRequestTime?;
    private isAlive;
    private isInit;
    private isPaused;
    private fmsConfigMiscompareSub?;
    private useRatSub?;
    private ratPipe?;
    private takeoffWeightSub?;
    private landingWeightCanUsePredictedState?;
    private landingWeightUsePredictedSub?;
    private landingWeightCurrentSub?;
    private landingWeightPredictedSub?;
    private landingWeightDestinationIcaoSub?;
    private takeoffPressurePipe?;
    private takeoffAntiIceTemperatureState?;
    private takeoffThrustReverserState?;
    private landingAntiIceTemperatureState?;
    private landingThrustReverserState?;
    private takeoffSpeedsAcceptedSub?;
    private landingSpeedsAcceptedSub?;
    private loadEmergencyReturnSub?;
    private updateSub?;
    private resetSub?;
    private readonly takeoffParamUpdateSubs;
    private readonly takeoffCalcSubs;
    private readonly takeoffCalcNotAcceptedSubs;
    private readonly takeoffCalcAcceptedSubs;
    private readonly takeoffUpdateSubs;
    private readonly landingParamUpdateSubs;
    private readonly landingCalcSubs;
    private readonly landingCalcNotAcceptedSubs;
    private readonly landingCalcAcceptedSubs;
    private readonly landingUpdateSubs;
    /**
     * Creates a new instance of ToldComputer.
     * @param bus The event bus.
     * @param toldManager A manager of TOLD data.
     * @param fms The FMS.
     * @param adcCount The number of ADC sensors available on the airplane.
     * @param config A TOLD performance calculations configuration object.
     * @param fmsVSpeedManager A manager of FMS-defined V-speed values.
     * @param vSpeedSettingManager A manager of reference V-speed user settings.
     */
    constructor(bus: EventBus, toldManager: ToldManager, fms: Fms<G3000FlightPlannerId>, adcCount: number, config: ToldConfig, fmsVSpeedManager: FmsVSpeedManager, vSpeedSettingManager: VSpeedUserSettingManager);
    /**
     * Initializes this computer.
     * @param module The module to use with this computer.
     * @param paused Whether to initialize this computer as paused. Defaults to `false`.
     * @throws Error if this computer has been destroyed.
     */
    init(module: ToldModule, paused?: boolean): void;
    /**
     * Initializes takeoff performance settings with default values.
     */
    private initDefaultTakeoffSettings;
    /**
     * Initializes landing performance settings with default values.
     */
    private initDefaultLandingSettings;
    /**
     * Initializes the logic that updates the takeoff configuration miscompare flag.
     */
    private initTakeoffConfigLogic;
    /**
     * Initializes the logic that updates takeoff and landing weights.
     */
    private initWeightLogic;
    /**
     * Initializes the listeners that update the takeoff performance calculation parameters.
     */
    private initTakeoffParamUpdateListeners;
    /**
     * Initializes the listeners that determine when takeoff performance calculations need to be invalidated and
     * re-calculated.
     */
    private initTakeoffCalcListeners;
    /**
     * Initializes the listeners that determine when takeoff performance calculations need to be updated after the user
     * has accepted takeoff V-speeds.
     */
    private initTakeoffUpdateListeners;
    /**
     * Initializes the listeners that update the landing performance calculation parameters.
     */
    private initLandingParamUpdateListeners;
    /**
     * Initializes the listeners that determine when landing performance calculations need to be invalidated and
     * re-calculated.
     */
    private initLandingCalcListeners;
    /**
     * Initializes the listeners that determine when landing performance calculations need to be updated after the user
     * has accepted landing V-speeds.
     */
    private initLandingUpdateListeners;
    /**
     * Resumes this computer. Once resumed, this computer will perform calculations and updates as necessary until it is
     * paused or destroyed.
     * @throws Error if this computer has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this computer. Once paused, this computer will not perform any calculations or updates until it is resumed.
     * @throws Error if this computer has been destroyed.
     */
    pause(): void;
    /**
     * Resets this computer. Clears any accepted FMS V-speed values and reverts all user-controllable TOLD performance
     * settings to their defaults.
     * @param manager This computer's parent TOLD manager.
     * @param type The type of reset to execute.
     */
    private reset;
    /**
     * Responds to when the takeoff V-speeds accepted setting changes.
     * @param accepted Whether the takeoff V-speeds have been accepted.
     */
    private onTakeoffSpeedsAccepted;
    /**
     * Responds to when the landing V-speeds accepted setting changes.
     * @param accepted Whether the landing V-speeds have been accepted.
     */
    private onLandingSpeedsAccepted;
    /**
     * Loads takeoff data into landing data for an emergency return.
     */
    private loadEmergencyReturn;
    /**
     * Updates this computer.
     * @param realTime The current real (operating system) time, as a UNIX timestamp in milliseconds.
     */
    private update;
    /**
     * Attempts to calculate takeoff performance values. Invalidates the current set of takeoff performance values if
     * they exist and removes any previously calculated FMS takeoff V-speed values.
     */
    private calculateTakeoff;
    /**
     * Checks whether takeoff performance values can be calculated.
     * @returns Whether takeoff performance values can be calculated.
     */
    private canCalculateTakeoff;
    /**
     * Attempts to update takeoff performance values. If takeoff performance values are successfully updated and are
     * valid, then the FMS takeoff V-speed values will also be updated to reflect the new calculated V-speed values.
     * If the takeoff performance values are invalid, then FMS takeoff V-speed values will be removed.
     */
    private updateTakeoff;
    /**
     * Attempts to calculate landing performance values. Invalidates the current set of landing performance values if
     * they exist and removes any previously calculated FMS landing V-speed values.
     */
    private calculateLanding;
    /**
     * Checks whether landing performance values can be calculated.
     * @returns Whether landing performance values can be calculated.
     */
    private canCalculateLanding;
    /**
     * Attempts to update landing performance values. If landing performance values are successfully updated and are
     * valid, then the FMS landing V-speed values will also be updated to reflect the new calculated V-speed values.
     * If the landing performance values are invalid, then FMS landing V-speed values will be removed.
     */
    private updateLanding;
    /**
     * Sets the FMS-defined values for takeoff V-speeds using a takeoff performance calculation result.
     * @param result The takeoff performance calculation result containing the V-speed values to set.
     * @param isUpdate Whether the values to set are an update of already accepted FMS V-speed values.
     */
    private setFmsTakeoffSpeeds;
    /**
     * Sets the FMS-defined values for landing V-speeds using a landing performance calculation result.
     * @param result The landing performance calculation result containing the V-speed values to set.
     * @param isUpdate Whether the values to set are an update of already accepted FMS V-speed values.
     */
    private setFmsLandingSpeeds;
    /**
     * Destroys this computer. Once destroyed, this computer will no longer perform any calculations or updates, and
     * cannot be paused or resumed.
     */
    destroy(): void;
    /**
     * Gets the pressure altitude at a runway given a runway elevation and QNH setting.
     * @param elevation The runway elevation, in feet.
     * @param qnh The QNH altimeter setting at the runway, in hectopascals.
     * @returns The pressure altitude at the runway, in feet, given the specified elevation and QNH setting.
     */
    private static getRunwayPressureAltitude;
    /**
     * Copies a takeoff performance result object to another.
     * @param source The source object to copy from.
     * @param target The target object to copy to.
     * @returns The target performance result object, after the source has been copied to it.
     */
    private static copyTakeoffPerformanceResult;
    /**
     * Copies a landing performance result object to another.
     * @param source The source object to copy from.
     * @param target The target object to copy to.
     * @returns The landing performance result object, after the source has been copied to it.
     */
    private static copyLandingPerformanceResult;
}
//# sourceMappingURL=ToldComputer.d.ts.map