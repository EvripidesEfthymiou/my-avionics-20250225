import { EventBus } from '@microsoft/msfs-sdk';
import { WeightBalanceConfig, WeightBalanceUserSettingManager } from '@microsoft/msfs-wtg3000-common';
/**
 * A computer for weight and balance calculations.
 */
export declare class WeightBalanceComputer {
    private readonly bus;
    private readonly config;
    private readonly weightBalanceSettingManager;
    private readonly publisher;
    private readonly weightFuelSettingManager;
    private readonly emptyMoment;
    private readonly basicEmptyWeightSetting;
    private readonly crewWeightSetting;
    private readonly cargoWeightSetting;
    private readonly basicOperatingWeight;
    private readonly totalPassengerWeight;
    private readonly zeroFuelWeight;
    private readonly basicEmptyArm;
    private readonly zeroFuelMoment;
    private readonly takeoffWeight;
    private readonly fobWeight;
    private readonly landingFuelWeight;
    private readonly loadStationSettings;
    private readonly takeoffArm;
    private readonly aircraftArm;
    private readonly landingArm;
    private isAlive;
    private isInit;
    private isResumed;
    private updateStaticSub?;
    private updateDynamicSub?;
    /**
     * Creates a new instance of WeightBalanceComputer.
     * @param bus The event bus.
     * @param config A weight and balance configuration object.
     * @param weightBalanceSettingManager A manager for weight and balance user settings.
     */
    constructor(bus: EventBus, config: WeightBalanceConfig, weightBalanceSettingManager: WeightBalanceUserSettingManager);
    /**
     * Publishes a topic to the event bus.
     * @param topic The topic to publish.
     * @param data The data to publish to the topic.
     */
    private publishTopic;
    /**
     * Publishes a nullable topic to the event bus.
     * @param topic The topic to publish.
     * @param data The data to publish to the topic. If the data is equal to `NaN`, then `null` will be published
     * instead.
     */
    private publishNullableTopic;
    /**
     * Initializes this computer.
     * @param paused Whether to initialize this computer as paused. Defaults to `false`.
     * @throws Error if this computer has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this computer. Once resumed, this computer will perform calculations and updates as necessary until it is
     * paused or destroyed.
     * @throws Error if this computer has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this computer. Once paused, this computer will not perform any calculations or updates until it is resumed.
     * @throws Error if this computer has been destroyed.
     */
    pause(): void;
    /**
     * Resets all load station load weights to zero.
     * @throws Error if this computer has been destroyed.
     */
    reset(): void;
    /**
     * Updates weight and balance data that only depend on user-selected values.
     */
    private updateStatic;
    /**
     * Updates weight and balance data that depend on dynamically computed values.
     */
    private updateDynamic;
    /**
     * Destroys this computer. Once destroyed, this computer will no longer perform any calculations or updates, and
     * cannot be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=WeightBalanceComputer.d.ts.map