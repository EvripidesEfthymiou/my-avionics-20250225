import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '@microsoft/msfs-wtg3000-common';
/**
 * A computer for weight and fuel calculations.
 */
export declare class WeightFuelComputer {
    private readonly bus;
    private readonly fms;
    private readonly calculateLoadWeights;
    private static readonly FUEL_BURN_SMOOTHING_TAU;
    private readonly publisher;
    private readonly weightFuelSettingManager;
    private readonly basicEmptyWeightSetting;
    private readonly crewAndStoresWeightSetting;
    private readonly numberOfPassengersSetting;
    private readonly avgPassengerWeightSetting;
    private readonly cargoWeightSetting;
    private readonly initialFobWeightSetting;
    private readonly taxiFuelWeightSetting;
    private readonly reserveFuelSetting;
    private readonly estHoldingTimeMinsSetting;
    private readonly fmsPosIndex;
    private readonly fobHasBeenInitialized;
    private readonly fuelTotalizerRemaining;
    private readonly fuelFlow;
    private readonly isOnGround;
    private readonly lnavIsTracking;
    private readonly distanceToDestination;
    private readonly fmsPosMode;
    private readonly groundSpeed;
    private readonly fuelBurnSmoother;
    private lastFuelBurnTime?;
    private readonly basicOperatingWeight;
    private readonly totalPassengerWeight;
    private readonly zeroFuelWeight;
    private readonly rampWeight;
    private readonly takeoffWeight;
    private readonly fuelOnBoardWeight;
    private readonly aircraftWeight;
    private readonly landingFuel;
    private readonly holdingFuel;
    private readonly excessFuel;
    private readonly landingWeight;
    private readonly calculatedWeights;
    private isAlive;
    private isInit;
    private isPaused;
    private updateSub?;
    /**
     * Creates a new instance of WeightFuelComputer.
     * @param bus The event bus.
     * @param fms The FMS.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this computer's ground speed
     * data.
     * @param calculateLoadWeights Whether this computer calculates loading weights (basic operating weight, total
     * passenger weight, and zero fuel weight).
     */
    constructor(bus: EventBus, fms: Fms<G3000FlightPlannerId>, fmsPosIndex: number | Subscribable<number>, calculateLoadWeights: boolean);
    /**
     * Publishes a topic to the event bus.
     * @param topic The topic to publish.
     * @param data The data to publish to the topic.
     */
    private publishTopic;
    /**
     * Publishes a nullable topic to the event bus.
     * @param topic The topic to publish.
     * @param data The data to publish to the topic. If the data is equal to `NaN`, then `null` will be published
     * instead.
     */
    private publishNullableTopic;
    /**
     * Initializes this computer.
     * @param paused Whether to initialize this computer as paused. Defaults to `false`.
     * @throws Error if this computer has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this computer. Once resumed, this computer will perform calculations and updates as necessary until it is
     * paused or destroyed.
     * @throws Error if this computer has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this computer. Once paused, this computer will not perform any calculations or updates until it is resumed.
     * @throws Error if this computer has been destroyed.
     */
    pause(): void;
    /**
     * Resets the fuel on board setting value to uninitialized and the fuel totalizer's fuel remaining value to zero.
     * Additionally, if this computer is configured to calculate load weights, also resets the cargo weight setting value
     * to zero.
     * @throws Error if this computer has been destroyed.
     */
    reset(): void;
    /**
     * Updates this computer's estimated values based on fuel flow and ground speed.
     * @param activeSimDuration The total amount of simulated time, in milliseconds, that has elapsed since the beginning
     * of the current simulation session.
     */
    private update;
    /**
     * Destroys this computer. Once destroyed, this computer will no longer perform any calculations or updates, and
     * cannot be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=WeightFuelComputer.d.ts.map