import { Accessible, EventBus } from '@microsoft/msfs-sdk';
/**
 * Information describing an altimeter managed by {@link AltimeterBaroKeyEventHandler}.
 */
export type AltimeterBaroInfo = {
    /** The index of the altimeter. */
    index: number;
    /** Whether the altimeter supports baro preselect. */
    supportBaroPreselect: boolean;
    /** Whether the altimeter's baro setting is in metric units. */
    isBaroMetric: boolean | Accessible<boolean>;
};
/**
 * A handler for altimeter barometric setting key events.
 */
export declare class AltimeterBaroKeyEventHandler {
    private readonly bus;
    private static readonly HPA_TO_RAW_KOHLSMAN;
    private static readonly IN_HG_TO_RAW_KOHLSMAN;
    private static readonly MIN_RAW;
    private static readonly MAX_RAW;
    private readonly managedAltimeterInfos;
    private keyEventManager?;
    private isAlive;
    private isInit;
    private readonly keyEventManagerReadyPromises;
    private keyEventSub?;
    /**
     * Creates a new instance of AltimeterBaroKeyEventHandler.
     * @param bus The event bus.
     * @param managedAltimeterInfos Information describing the altimeters to be managed by the handler.
     */
    constructor(bus: EventBus, managedAltimeterInfos: Iterable<Readonly<AltimeterBaroInfo>>);
    /**
     * Waits for this handler's key event manager to be ready.
     * @returns A Promise which will be fulfilled when this handler's key event manager is ready, or rejected if this
     * handler is destroyed before then.
     */
    private awaitKeyEventManagerReady;
    /**
     * Initializes this handler. Once this handler is initialized, it will change the baro setting for this handler's
     * PFD's altimeter in response to baro knob input events.
     * @returns A Promise which will be fulfilled when this handler is fully initialized, or rejected if this handler is
     * destroyed before then.
     */
    init(): Promise<void>;
    /**
     * Gets information on a managed altimeter.
     * @param index The index of the altimeter.
     * @returns Information on the specified managed altimeter, or `undefined` if the altimeter is not managed by this
     * handler.
     */
    private getInfo;
    /**
     * Handles a key event intercept.
     * @param data Data describing the intercepted key event.
     */
    private onKeyIntercepted;
    /**
     * Sets the baro setting for an altimeter. If STD BARO mode is currently on and baro preselect is supported, the
     * preselected baro setting will be changed instead of the active baro setting. If STD BARO mode is currently on
     * and baro preselect is not supported, STD BARO will be deactivated and the active baro setting will be
     * changed.
     * @param info Information on the altimeter to modify.
     * @param value The value to set, in units of raw baro setting pressure (equal to 1/16 hPa).
     */
    private setBaroSetting;
    /**
     * Increments or decrements the baro setting for an altimeter. If STD BARO mode is currently on and baro preselect
     * is supported, the preselected baro setting will be changed instead of the active baro setting. If STD BARO mode
     * is currently on and baro preselect is not supported, STD BARO will be deactivated and the active baro setting will
     * be changed.
     * @param info Information on the altimeter to modify.
     * @param direction The direction to change the baro setting.
     */
    private changeBaroSetting;
    /**
     * Increments or decrements a baro setting value for an altimeter.
     * @param currentValue The baro setting value to change, in raw units.
     * @param direction The direction in which to change the baro setting value.
     * @param isMetric Whether to change the baro setting value in increments of hectopascals instead of hundredths of an
     * inch of mercury.
     * @returns The changed baro setting value, in raw units.
     */
    private changeBaroSettingValue;
    /**
     * Toggles STD BARO mode for an altimeter. If STD BARO is currently off, this will turn on STD BARO mode, set the
     * preselected baro setting to the current active baro setting, and set the active baro setting to 29.92 inches
     * (1013 hPa). If STD BARO is currently on, this will turn off STD BARO mode and set the active baro setting to the
     * current preselected baro setting.
     * @param info Information on the altimeter to modify.
     */
    private toggleBaroStd;
    /**
     * Handles the `BAROMETRIC` key event. For each managed altimeter, if STD BARO mode is currently on and baro
     * preselect is supported, then the preselected baro setting will be changed instead of the active baro setting.
     * If STD BARO mode is currently on and baro preselect is not supported, STD BARO will be deactivated and the active
     * baro setting will be changed.
     */
    private handleBarometric;
    /**
     * Destroys this handler.
     */
    destroy(): void;
}
//# sourceMappingURL=AltimeterBaroKeyEventHandler.d.ts.map