/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
/// <reference types="@microsoft/msfs-types/js/common" />
import { AdcPublisher, AhrsPublisher, AmbientPublisher, AutopilotInstrument, AvionicsSystem, BaseInstrumentPublisher, Clock, ControlSurfacesPublisher, DefaultChecklistStateProvider, EISPublisher, EventBus, FacilityLoader, FacilityRepository, FlightPathCalculator, FlightPlanner, FlightTimerPublisher, FsInstrument, GNSSPublisher, HEventPublisher, InstrumentBackplane, LNavObsSimVarPublisher, MinimumsSimVarPublisher, NavComSimVarPublisher, PluginSystem, SmoothingPathCalculator, Subject, VNavSimVarPublisher } from '@microsoft/msfs-sdk';
import { DefaultMinimumsDataProvider, DefaultTerrainSystemStateDataProvider, Fms, FmsPositionSystemSelector, GarminAPSimVarPublisher, GarminChecklistItemTypeDefMap, GarminNavSimVarPublisher, GarminSpeedConstraintStore, NavEventsPublisher } from '@microsoft/msfs-garminsdk';
import { AvionicsConfig } from './AvionicsConfig/AvionicsConfig';
import { AvionicsStatusChangeEvent } from './AvionicsStatus/AvionicsStatusEvents';
import { AvionicsStatusClient, AvionicsStatusEventClient } from './AvionicsStatus/AvionicsStatusManager';
import { CasPowerStateManager } from './CAS/CasPowerStateManager';
import { G3000ChecklistGroupMetadata, G3000ChecklistMetadata, G3000ChecklistSetDef } from './Checklist/G3000ChecklistDefinition';
import { InstrumentType } from './CommonTypes';
import { DefaultDisplayOverlayController } from './DisplayOverlay/DefaultDisplayOverlayController';
import { FuelTotalizerSimVarPublisher } from './Fuel';
import { G3000Plugin, G3000PluginBinder } from './G3000Plugin';
import { G3000NavIndicator, G3000NavIndicatorName, G3000NavIndicators, G3000NavSource, G3000NavSources } from './NavReference/G3000NavReference';
import { FmsSpeedUserSettingManager } from './Settings/FmsSpeedUserSettings';
import { PfdSensorsUserSettingManager } from './Settings/PfdSensorsUserSettings';
import { VSpeedUserSettingManager } from './Settings/VSpeedUserSettings';
import { WeightBalanceUserSettingManager } from './Settings/WeightBalanceUserSettings';
import './WTG3000_Common.css';
/**
 * A common instrument for the G3000.
 */
export declare abstract class WTG3000FsInstrument implements FsInstrument {
    protected readonly instrumentType: InstrumentType;
    readonly instrument: BaseInstrument;
    protected readonly config: AvionicsConfig;
    private isInstrumentPowered;
    private isPowerValid;
    protected isPowered: boolean | undefined;
    private readonly bootTimer;
    protected readonly displayOverlayController: DefaultDisplayOverlayController;
    protected readonly bus: EventBus;
    protected readonly facRepo: FacilityRepository;
    protected readonly facLoader: FacilityLoader;
    protected readonly hEventPublisher: HEventPublisher;
    protected readonly flightPathCalculator: FlightPathCalculator;
    protected readonly flightPlanner: FlightPlanner<"">;
    protected readonly verticalPathCalculator: SmoothingPathCalculator;
    protected readonly speedConstraintStore: GarminSpeedConstraintStore;
    protected readonly fms: Fms<"">;
    protected readonly avionicsStatusClient: AvionicsStatusClient;
    protected readonly avionicsStatusEventClient: AvionicsStatusEventClient;
    protected readonly avionicsStatusSimVar: string;
    protected readonly avionicsStatus: Subject<Readonly<AvionicsStatusChangeEvent> | undefined>;
    protected readonly backplane: InstrumentBackplane;
    protected readonly clock: Clock;
    protected readonly baseInstrumentPublisher: BaseInstrumentPublisher;
    protected readonly ambientPublisher: AmbientPublisher;
    protected readonly adcPublisher: AdcPublisher;
    protected readonly ahrsPublisher: AhrsPublisher;
    protected readonly gnssPublisher: GNSSPublisher;
    protected readonly garminNavPublisher: GarminNavSimVarPublisher;
    protected readonly lnavObsPublisher: LNavObsSimVarPublisher;
    protected readonly vNavPublisher: VNavSimVarPublisher;
    protected readonly navComSimVarPublisher: NavComSimVarPublisher;
    protected readonly garminAutopilotPublisher: GarminAPSimVarPublisher;
    protected readonly minimumsPublisher: MinimumsSimVarPublisher;
    protected readonly navEventsPublisher: NavEventsPublisher;
    protected readonly eisPublisher: EISPublisher;
    protected readonly controlSurfacesPublisher: ControlSurfacesPublisher;
    protected readonly timerPublisher: FlightTimerPublisher<any>;
    protected readonly fuelTotalizerPublisher: FuelTotalizerSimVarPublisher;
    protected readonly apInstrument: AutopilotInstrument;
    protected readonly systems: AvionicsSystem[];
    protected abstract readonly navSources: G3000NavSources;
    protected abstract readonly navIndicators: G3000NavIndicators;
    protected readonly fmsPositionSystemSelector: FmsPositionSystemSelector;
    protected readonly minimumsDataProvider: DefaultMinimumsDataProvider;
    protected readonly terrainSystemStateDataProvider: DefaultTerrainSystemStateDataProvider;
    protected readonly pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    protected readonly vSpeedSettingManager: VSpeedUserSettingManager;
    protected readonly fmsSpeedsSettingManager?: FmsSpeedUserSettingManager;
    protected readonly weightBalanceSettingManager?: WeightBalanceUserSettingManager;
    protected readonly casPowerStateManager: CasPowerStateManager;
    protected checkListDef?: G3000ChecklistSetDef;
    protected checklistStateProvider?: DefaultChecklistStateProvider<GarminChecklistItemTypeDefMap, G3000ChecklistMetadata, G3000ChecklistGroupMetadata, void, void>;
    /** Whether this instrument has started updating. */
    protected haveUpdatesStarted: boolean;
    /**
     * Constructor.
     * @param instrumentType The type of this instrument.
     * @param instrument This instrument's parent BaseInstrument.
     * @param config This instrument's general configuration object.
     */
    constructor(instrumentType: InstrumentType, instrument: BaseInstrument, config: AvionicsConfig);
    /**
     * Creates this instrument's avionics systems. This method should be called after `this.iauIndex` has been defined.
     */
    protected createSystems(): void;
    /**
     * Initializes power logic for avionics systems that are considered globally powered.
     * @param globalSystemsPower A subject to which to write the power state for globally powered avionics systems.
     */
    private initGlobalSystemsPower;
    /**
     * Creates a navigation reference source collection for this instrument to use.
     * @returns A navigation reference source collection for this instrument to use.
     */
    protected createNavReferenceSourceCollection(): G3000NavSources;
    /**
     * Creates a navigation reference indicator collection for this instrument to use.
     * @returns A navigation reference indicator collection for this instrument to use.
     */
    protected createNavReferenceIndicatorCollection(): G3000NavIndicators;
    /**
     * Creates an array of the navigation reference sources for this instrument to use.
     * @returns An array of the navigation reference sources for this instrument to use.
     */
    protected createNavReferenceSources(): G3000NavSource[];
    /**
     * Creates an array of tuples of the navigation reference indicator names and their associated indicators for this
     * instrument to use.
     * @returns An array of tuples of the navigation reference indicator names and their associated indicators for this
     * instrument to use.
     */
    protected createNavReferenceIndicators(): [G3000NavIndicatorName, G3000NavIndicator][];
    /**
     * Creates a manager for PFD sensors user settings defined by a configuration object.
     * @param config A general configuration object.
     * @returns A manager for PFD sensors user settings defined by the specified configuration object.
     */
    private createPfdSensorsUserSettingManager;
    /**
     * Creates a manager for reference V-speed user settings defined by a configuration object.
     * @param config A general configuration object.
     * @returns A manager for reference V-speed user settings defined by the specified configuration object.
     */
    private createVSpeedUserSettingManager;
    /**
     * Creates a manager for reference V-speed user settings defined by a configuration object.
     * @param config A general configuration object.
     * @returns A manager for reference V-speed user settings defined by the specified configuration object.
     */
    private createFmsSpeedUserSettingManager;
    /**
     * Creates a manager for weight and balance user settings defined by a configuration object.
     * @param config A general configuration object.
     * @returns A manager for weight and balance user settings defined by the specified configuration object.
     */
    private createWeightBalanceUserSettingManager;
    /**
     * Initializes this instrument's checklist system.
     * @param pluginSystem This instrument's plugin system.
     */
    protected initChecklist(pluginSystem: PluginSystem<G3000Plugin, G3000PluginBinder>): Promise<void>;
    /**
     * Initializes this instrument's avionics status listener. Once intialized, the listener will call this instrument's
     * `onAvionicsStatusChanged()` method as appropriate.
     */
    protected initAvionicsStatusListener(): void;
    /**
     * Gets the duration, in milliseconds, required for this instrument to boot on power up.
     * @returns The duration, in milliseconds, required for this instrument to boot on power up.
     */
    protected abstract getBootDuration(): number;
    /** @inheritdoc */
    Update(): void;
    /**
     * Updates this instrument's systems.
     */
    protected updateSystems(): void;
    /** @inheritdoc */
    onInteractionEvent(args: string[]): void;
    /** @inheritdoc */
    onFlightStart(): void;
    /** @inheritdoc */
    onGameStateChanged(oldState: GameState, newState: GameState): void;
    /** @inheritdoc */
    onSoundEnd(soundEventId: Name_Z): void;
    /**
     * A callback which is executed when this instrument transitions from a power-off to power-on state.
     */
    onPowerOn(): void;
    /**
     * A callback which is executed when this instrument transitions from a power-on to power-off state.
     */
    onPowerOff(): void;
    /**
     * Responds to when this instrument's power state changes.
     * @param current The current power state.
     * @param previous The previous power state, or `undefined` if the previous state was invalid.
     */
    protected onPowerChanged(current: boolean, previous: boolean | undefined): void;
    /**
     * Responds to when this instrument is finished booting.
     */
    protected onBootFinished(): void;
    /**
     * Responds to when the avionics status of this instrument changes.
     * @param event The event describing the avionics status change.
     */
    protected onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
}
//# sourceMappingURL=WTG3000FsInstrument.d.ts.map