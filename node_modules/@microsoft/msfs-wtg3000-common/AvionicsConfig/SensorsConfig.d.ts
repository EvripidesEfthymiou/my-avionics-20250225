/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/utils/xmllogic" />
/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Config, ConfigFactory } from '../Config/Config';
import { NumericBusConfigContext, NumericConfigResult } from '../Config/NumericConfig';
/**
 * A definition for an ADC.
 */
export type AdcDefinition = {
    /** The index of the sim airspeed indicator used by this definition's ADC. */
    airspeedIndicatorIndex: number;
    /** The electrical logic for this definition's ADC. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for an AHRS.
 */
export type AhrsDefinition = {
    /** The index of the sim attitude indicator used by this definition's AHRS. */
    attitudeIndicatorIndex: number;
    /** The index of the sim direction indicator used by this definition's AHRS. */
    directionIndicatorIndex: number;
    /** The electrical logic for this definition's AHRS. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for a radar altimeter.
 */
export type RadarAltimeterDefinition = {
    /** The electrical logic for this definition's radar altimeter. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for a marker beacon receiver.
 */
export type MarkerBeaconDefinition = {
    /** The electrical logic for this definition's marker beacon receiver. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for an angle of attack computer.
 */
export type AoaDefinition = {
    /** The electrical logic for this definition's angle of attack computer. */
    electricity?: CompositeLogicXMLElement;
    /**
     * A factory that generates the stall angle of attack value for the angle of attack computer to use, or `undefined`
     * if the computer should use the value provided by the sim.
     */
    stallAoa?: (context: NumericBusConfigContext) => NumericConfigResult;
    /**
     * A factory that generates the zero-lift angle of attack value for the angle of attack computer to use, or
     * `undefined` if the computer should use the value provided by the sim.
     */
    zeroLiftAoa?: (context: NumericBusConfigContext) => NumericConfigResult;
};
/**
 * A definition for a weather radar.
 */
export type WeatherRadarDefinition = {
    /** The angular width, in degrees, of the horizontal scan of this definition's weather radar. */
    horizontalScanWidth: number;
    /** Whether the extended 16-color scale is supported for this definition's weather radar.  */
    supportExtendedColors: boolean;
    /** The minimum gain setting, in dBZ. */
    minGain: number;
    /** The maximum gain setting, in dBZ. */
    maxGain: number;
    /** The electrical logic for this definition's weather radar. */
    electricity?: CompositeLogicXMLElement;
    /** The index of the circuit to switch on when the weather radar is actively scanning. */
    scanActiveCircuitIndex?: number;
    /**
     * The index of the `system.cfg` electrical procedure to use the change the active radar scan circuit switch state.
     * If not defined, then the circuit switch state will be set directly using the `CIRCUIT SWITCH ON` SimVar.
     */
    scanActiveCircuitProcedureIndex?: number;
};
/**
 * A configuration object which defines options related to various aircraft sensors.
 */
export declare class SensorsConfig implements Config {
    /** The number of ADCs supported by the plane. */
    readonly adcCount: number;
    /** The number of AHRS supported by the plane. */
    readonly ahrsCount: number;
    /**
     * ADC definitions. The index of each definition's position in the array corresponds to the index of its ADC.
     */
    readonly adcDefinitions: readonly Readonly<AdcDefinition>[];
    /**
     * AHRS definitions. The index of each definition's position in the array corresponds to the index of its AHRS.
     */
    readonly ahrsDefinitions: readonly Readonly<AhrsDefinition>[];
    /** An angle of attack computer definition. */
    readonly aoaDefinition: Readonly<AoaDefinition>;
    /** An optional radar altimeter definition. */
    readonly radarAltimeterDefinition?: Readonly<RadarAltimeterDefinition>;
    /** Whether this configuration defines a radar altimeter. */
    get hasRadarAltimeter(): boolean;
    /** A marker beacon receiver definition. */
    readonly markerBeaconDefinition: Readonly<MarkerBeaconDefinition>;
    /** An optional weather radar definition. */
    readonly weatherRadarDefinition?: Readonly<WeatherRadarDefinition>;
    /** Whether this configuration defines a weather radar. */
    get hasWeatherRadar(): boolean;
    /**
     * Creates a new SensorsConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined, factory: ConfigFactory);
    /**
     * Parses ADC definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of ADC definitions defined by the configuration document element.
     */
    private parseAdcDefinitions;
    /**
     * Parses AHRS definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of AHRS definitions defined by the configuration document element.
     */
    private parseAhrsDefinitions;
    /**
     * Parses an angle of attack computer definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The angle of attack computer definition defined by the configuration document element, or `undefined` if
     * there is no such definition.
     */
    private parseAoaDefinition;
    /**
     * Parses an angle of attack numeric factory from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The angle of attack numeric factory defined by the configuration document element, or `undefined` if
     * `element` is `null`.
     */
    private parseAoaDefinitionNumericFactory;
    /**
     * Parses a radar altimeter definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The radar altimeter definition defined by the configuration document element, or `undefined` if there is
     * no such definition.
     */
    private parseRadarAltimeterDefinition;
    /**
     * Parses a marker beacon receiver definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The marker beacon receiver definition defined by the configuration document element, or `undefined` if
     * there is no such definition.
     */
    private parseMarkerBeaconDefinition;
    /**
     * Parses a weather radar definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The weather radar definition defined by the configuration document element, or `undefined` if there is
     * no such definition.
     */
    private parseWeatherRadarDefinition;
}
//# sourceMappingURL=SensorsConfig.d.ts.map