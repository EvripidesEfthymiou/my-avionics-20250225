import { FmsVisualApproachOptions } from '@microsoft/msfs-garminsdk';
import { Config } from '../Config/Config';
/**
 * Options for flight path calculations.
 */
export type FmsFlightPathOptions = {
    /** The maximum bank angle, in degrees, to use to calculate turns while outside of low-bank mode. */
    maxBankAngle: number;
    /** The maximum bank angle, in degrees, to use to calculate turns while in low-bank mode. */
    lowBankAngle: number;
};
/**
 * A configuration object which defines FMS options.
 */
export declare class FmsConfig implements Config {
    private static readonly DEFAULT_MAX_BANK_ANGLE;
    private static readonly DEFAULT_LOW_BANK_ANGLE;
    /** Options for flight path calculations. */
    readonly flightPathOptions: FmsFlightPathOptions;
    /** A config which defines options for approaches. */
    readonly approach: FmsApproachConfig;
    /**
     * Creates a new FmsConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
    /**
     * Parses flight path calculation options from a configuration document element.
     * @param element A configuration document element.
     * @returns The flight path calculation options defined by the configuration document element.
     */
    private parseFlightPathOptions;
    /**
     * Parses an approach configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The approach configuration defined by the configuration document element.
     */
    private parseApproachConfig;
}
/**
 * A configuration object which defines FMS approach options.
 */
export declare class FmsApproachConfig implements Config {
    /** Whether RNP (AR) approaches are supported. */
    readonly supportRnpAr: boolean;
    /** Options for visual approach procedures. */
    readonly visualApproachOptions: Readonly<FmsVisualApproachOptions>;
    /**
     * Creates a new FmsApproachConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
    /**
     * Parses a visual approach options from a configuration document element.
     * @param element A configuration document element.
     * @returns The visual approach options defined by the configuration document element.
     */
    private parseVisualApproachOptions;
}
//# sourceMappingURL=FmsConfig.d.ts.map