import { AttitudeAircraftSymbolColor } from '@microsoft/msfs-garminsdk';
import { Config, ConfigFactory } from '../Config/Config';
import { NumericBusConfigContext, NumericConfigResult } from '../Config/NumericConfig';
/**
 * An option for horizon display flight director cue style support.
 */
export type HorizonDirectorCueOption = 'single' | 'dual' | 'both';
/**
 * A definition for horizon display roll limit indicators.
 */
export type HorizonRollLimitIndicatorsDefinition = {
    /** A factory that generates the roll angle magnitude, in degrees, at which to position the left roll limit indicator. */
    leftRollLimit?: (context: NumericBusConfigContext) => NumericConfigResult;
    /** A factory that generates the roll angle magnitude, in degrees, at which to position the right roll limit indicator. */
    rightRollLimit?: (context: NumericBusConfigContext) => NumericConfigResult;
};
/**
 * A definition for a horizon display pitch limit indicator.
 */
export type HorizonPitchLimitIndicatorDefinition = {
    /** A factory that generates the pitch angle, in degrees, at which to position the indicator. */
    pitchLimit?: (context: NumericBusConfigContext) => NumericConfigResult;
    /** A factory that generates the angle of attack value, in degrees, at which to position the indicator. */
    aoaLimit?: (context: NumericBusConfigContext) => NumericConfigResult;
    /** A factory that generates the normalized angle of attack value, at which to position the indicator. */
    normAoaLimit?: (context: NumericBusConfigContext) => NumericConfigResult;
    /**
     * A factory that generates the offset of the airplane's pitch from the indicated pitch limit, in degrees, at which
     * to show the indicator.
     */
    showPitchOffsetThreshold: (context: NumericBusConfigContext) => NumericConfigResult;
    /**
     * A factory that generates the offset of the airplane's pitch from the indicated pitch limit, in degrees, at which
     * to hide the indicator. If not defined, then `showPitchOffsetThreshold` should be used to generate the offset
     * instead.
     */
    hidePitchOffsetThreshold?: (context: NumericBusConfigContext) => NumericConfigResult;
};
/**
 * A configuration object which defines PFD horizon display options.
 */
export declare class HorizonConfig implements Config {
    /** Flight director cue style support. */
    readonly directorCue: HorizonDirectorCueOption;
    /** The color of the symbolic aircraft. */
    readonly symbolColor: AttitudeAircraftSymbolColor;
    /** Whether to show the roll indicator arc. */
    readonly showRollArc: boolean;
    /** Whether to render the roll indicator with a ground pointer or a sky pointer. */
    readonly rollPointerStyle: 'ground' | 'sky';
    /** Whether to support advanced SVT features. */
    readonly advancedSvt: boolean;
    /** A definition for the roll limit indicators, or `undefined` if the roll limit indicators should not be displayed. */
    readonly rollLimitIndicatorsDef?: Readonly<HorizonRollLimitIndicatorsDefinition>;
    /** A definition for the pitch limit indicator, or `undefined` if the pitch limit indicator should not be displayed. */
    readonly pitchLimitIndicatorDef?: Readonly<HorizonPitchLimitIndicatorDefinition>;
    /**
     * Creates a new HorizonConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element | undefined, factory: ConfigFactory);
    /**
     * Parses a roll limit indicators definition from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The roll limit indicators definition defined by the configuration document element.
     */
    private parseRollLimitIndicatorsDef;
    /**
     * Parses a pitch limit indicator definition from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The pitch limit indicator definition defined by the configuration document element.
     */
    private parsePitchLimitIndicatorDef;
    /**
     * Parses a numeric factory from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The numeric factory defined by the configuration document element, or `undefined` if a factory could not
     * be parsed.
     */
    private parseNumericFactory;
}
//# sourceMappingURL=HorizonConfig.d.ts.map