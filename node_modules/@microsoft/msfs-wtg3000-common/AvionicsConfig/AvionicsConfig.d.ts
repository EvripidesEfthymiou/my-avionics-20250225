/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Annunciation } from '@microsoft/msfs-sdk';
import { AutopilotConfig } from '../Autopilot/AutopilotConfig';
import { ChecklistConfig } from '../Checklist/ChecklistConfig';
import { AvionicsType } from '../CommonTypes';
import { MapConfig } from '../Components/Map/MapConfig';
import { EspConfig } from '../ESP/EspConfig';
import { MessageSystemConfig } from '../Message/MessageSystemConfig';
import { PerformanceConfig } from '../Performance/PerformanceConfig';
import { PersistentUserSettingsConfig } from '../Settings/PersistentSettings/PersistentUserSettingsConfig';
import { TerrainSystemConfig } from '../Terrain/TerrainSystemConfig';
import { TrafficConfig } from '../Traffic/TrafficConfig';
import { VSpeedGroup, VSpeedGroupType } from '../VSpeed/VSpeed';
import { AuralAlertsConfig } from './AuralAlertsConfig';
import { FmsConfig } from './FmsConfig';
import { GduDefsConfig } from './GduDefsConfig';
import { HorizonConfig } from './HorizonConfig';
import { IauDefsConfig } from './IauDefsConfig';
import { RadiosConfig } from './RadiosConfig';
import { SensorsConfig } from './SensorsConfig';
import { VNavConfig } from './VNavConfig';
/**
 * A configuration object which defines options for G3000/5000 avionics systems.
 */
export declare class AvionicsConfig {
    private readonly factory;
    /** The G3000/G5000 avionics type defined by this config. */
    readonly type: AvionicsType;
    /** A config which defines options for persistent user settings. */
    readonly persistentUserSettings: PersistentUserSettingsConfig;
    /** A config which defines options for aural alerts. */
    readonly auralAlerts: AuralAlertsConfig;
    /** Whether autothrottle is supported. */
    readonly autothrottle: boolean;
    /** A config which defines FMS options. */
    readonly fms: FmsConfig;
    /** A config which defines options for VNAV. */
    readonly vnav: VNavConfig;
    /** A config which defines options for IAUs. */
    readonly iauDefs: IauDefsConfig;
    /** A config which defines options for sensors. */
    readonly sensors: SensorsConfig;
    /** A config which defines options for GDUs. */
    readonly gduDefs: GduDefsConfig;
    /** A config which defines options for radios. */
    readonly radios: RadiosConfig;
    /** A config which defines options for the autopilot. */
    readonly autopilot: AutopilotConfig;
    /** A config which declares support for and defines options for an electronic stability and protection (ESP) system. */
    readonly esp?: EspConfig;
    /** A map of reference V-speed groups keyed on group type. */
    readonly vSpeedGroups: ReadonlyMap<VSpeedGroupType, VSpeedGroup>;
    /** A config which defines options for the avionics' traffic system. */
    readonly traffic: TrafficConfig;
    /** A config which defines options for the avionics' terrain alerting system. */
    readonly terrain: TerrainSystemConfig;
    /** A config which defines options for maps. */
    readonly map: MapConfig;
    /** A config which defines options for performance calculations. */
    readonly performance: PerformanceConfig;
    /** A config which defines options for the message system. */
    readonly message: MessageSystemConfig;
    /** A config which defines options for electronic checklists. */
    readonly checklist: ChecklistConfig;
    /** A config which defines options for the horizon display. */
    readonly horizon: HorizonConfig;
    /** A config which defines the system annunciations. */
    readonly annunciations: Annunciation[];
    /**
     * Creates an AvionicsConfig from an XML configuration document.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param xmlConfig An XML configuration document.
     */
    constructor(baseInstrument: BaseInstrument, xmlConfig: Document);
    /**
     * Parses an avionics type from a configuration document element.
     * @param element A configuration document element.
     * @returns The avionics type defined by the configuration document element.
     */
    private parseAvionicsType;
    /**
     * Parses a persistent user settings configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The persistent user settings configuration defined by the configuration document element.
     */
    private parsePersistentUserSettings;
    /**
     * Parses an aural alerts configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The aural alerts configuration defined by the configuration document element.
     */
    private parseAuralAlerts;
    /**
     * Parses an FMS configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The FMS configuration defined by the configuration document element.
     */
    private parseFms;
    /**
     * Parses a VNAV configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The VNAV configuration defined by the configuration document element.
     */
    private parseVNav;
    /**
     * Parses the autothrottle option from a configuration document element.
     * @param element A configuration document element.
     * @returns Whether autothrottle is supported.
     */
    private parseAutothrottle;
    /**
     * Parses a sensors configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The sensors configuration defined by the configuration document element.
     */
    private parseSensorsConfig;
    /**
     * Parses an IAU definitions configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The IAU definitions configuration defined by the configuration document element.
     */
    private parseIauDefsConfig;
    /**
     * Parses a GDU definitions configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns Th GDU definitions configuration defined by the configuration document element.
     */
    private parseGduDefsConfig;
    /**
     * Parses a radios configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The radios configuration defined by the configuration document element.
     */
    private parseRadiosConfig;
    /**
     * Parses an autopilot configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The autopilot configuration defined by the configuration document element.
     */
    private parseAutopilotConfig;
    /**
     * Parses an ESP configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The ESP configuration defined by the configuration document element.
     */
    private parseEspConfig;
    /**
     * Parses reference V-speed groups from a configuration document element.
     * @param element A configuration document element.
     * @returns An array of configs defining reference V-speed groups.
     */
    private parseVSpeeds;
    /**
     * Parses a traffic configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The traffic configuration defined by the configuration document element.
     */
    private parseTrafficConfig;
    /**
     * Parses a terrain system configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element that defines the terrain system configuration object.
     * @returns The TAWS configuration defined by the configuration document element.
     */
    private parseTerrainConfig;
    /**
     * Parses a map configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The map configuration defined by the configuration document element.
     */
    private parseMapConfig;
    /**
     * Parses a performance configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The performance configuration defined by the configuration document element.
     */
    private parsePerformanceConfig;
    /**
     * Parses a message system configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The message system configuration defined by the configuration document element.
     */
    private parseMessageConfig;
    /**
     * Parses a checklist configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The checklist configuration defined by the configuration document element.
     */
    private parseChecklistConfig;
    /**
     * Parses a horizon display configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The horizon display configuration defined by the configuration document element.
     */
    private parseHorizonConfig;
}
//# sourceMappingURL=AvionicsConfig.d.ts.map