/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Config } from '../Config/Config';
import { LookupTableConfig } from '../Config/LookupTableConfig';
import { NumericBusConfig, NumericConfig, NumericConfigResult } from '../Config/NumericConfig';
import { FmsAirframeSpeedLimitContext } from '../FmsSpeed/FmsSpeedTypes';
/**
 * A configuration object which defines options related to VNAV.
 */
export declare class VNavConfig implements Config {
    /** Whether advanced VNAV is enabled. */
    readonly advanced: boolean;
    /** A config which defines options for FMS speeds. */
    readonly fmsSpeeds?: FmsSpeedsConfig;
    /**
     * Creates a new VNavConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses the advanced VNAV option from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns Whether advanced VNAV is enabled.
     */
    private parseFmsSpeeds;
}
/**
 * General FMS speed limits.
 */
export type FmsSpeedsGeneralLimits = {
    /** The minimum indicated airspeed, in knots. */
    minimumIas: number;
    /** The maximum indicated airspeed, in knots. */
    maximumIas: number;
    /** The minimum mach number. */
    minimumMach: number;
    /** The maximum mach number. */
    maximumMach: number;
};
/**
 * Airframe FMS speed limits.
 */
export type FmsAirframeSpeedLimits = {
    /** A config which defines the airframe's maximum indicated airspeed limit. */
    ias: FmsAirframeSpeedLimitConfig;
    /** A config which defines the airframe's maximum mach number limit. */
    mach: FmsAirframeSpeedLimitConfig;
};
/**
 * A definition for an FMS aircraft configuration speed limit setting.
 */
export type FmsConfigurationSpeedDefinition = {
    /** The type of configuration limit. */
    type: 'flaps' | 'gear';
    /**
     * The gear or flaps extension threshold required to activate the configuration limit. For gear, the value is
     * expressed as a percent of full extension. For glaps, the value is expressed as an angle in degrees.
     */
    extension: number;
    /** The display name of the configuration limit. */
    name: string;
    /** The configuration limit's minimum allowed value, in knots. */
    minimumValue: number;
    /** The configuration limit's maximum allowed value, in knots. */
    maximumValue: number;
    /** The configuration limit's default value, in knots. */
    defaultValue: number;
};
/**
 * A pre-defined FMS speed schedule.
 */
export type FmsSpeedBaseSchedule = {
    /** The name of this schedule. */
    name: string;
    /** Whether this schedule is a default schedule. */
    isDefault: boolean;
    /** This schedule's target indicated airspeed, in knots. */
    ias: number;
    /** This schedule's target mach number. */
    mach: number;
};
/**
 * A pre-defined FMS climb schedule.
 */
export type FmsSpeedClimbSchedule = FmsSpeedBaseSchedule & {
    /** The type of this schedule. */
    type: 'climb';
};
/**
 * A pre-defined FMS cruise schedule.
 */
export type FmsSpeedCruiseSchedule = FmsSpeedBaseSchedule & {
    /** The type of this schedule. */
    type: 'cruise';
};
/**
 * A pre-defined FMS descent schedule.
 */
export type FmsSpeedDescentSchedule = FmsSpeedBaseSchedule & {
    /** The type of this schedule. */
    type: 'descent';
    /** This schedule's target flight path angle. */
    fpa: number;
};
/**
 * A configuration object which defines options related to FMS speeds.
 */
export declare class FmsSpeedsConfig implements Config {
    /** General speed limits. */
    readonly generalLimits: Readonly<FmsSpeedsGeneralLimits>;
    /** Airframe speed limits. */
    readonly airframeLimits: Readonly<FmsAirframeSpeedLimits>;
    /** Definitions for aircraft configuration speed limits, in order from highest to lowest speed. */
    readonly configurationSpeeds: readonly Readonly<FmsConfigurationSpeedDefinition>[];
    /** Pre-defined climb schedules. */
    readonly climbSchedules: readonly Readonly<FmsSpeedClimbSchedule>[];
    /** Pre-defined cruise schedules. */
    readonly cruiseSchedules: readonly Readonly<FmsSpeedCruiseSchedule>[];
    /** Pre-defined descent schedules. */
    readonly descentSchedules: readonly Readonly<FmsSpeedDescentSchedule>[];
    /**
     * Creates a new FmsSpeedsConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses general speed limits options from a configuration document element.
     * @param element A configuration document element.
     * @param limits The object to which to write the parsed options.
     */
    private parseGeneralLimits;
    /**
     * Parses airframe speed limits options from a configuration document element.
     * @param element A configuration document element.
     * @returns The airframe speed limit options defined by the configuration document element.
     */
    private parseAirframeLimits;
    /**
     * Parses aircraft configuration speed limit definitions from a configuration document element.
     * @param element A configuration document element.
     * @returns The aircraft configuration speed limit definitions defined by the configuration document element.
     */
    private parseConfigurationSpeeds;
    /**
     * Parses climb schedules from a configuration document element.
     * @param element A configuration document element.
     * @returns The climb schedules defined by the configuration document element.
     */
    private parseClimbSchedules;
    /**
     * Parses cruise schedules from a configuration document element.
     * @param element A configuration document element.
     * @returns The cruise schedules defined by the configuration document element.
     */
    private parseCruiseSchedules;
    /**
     * Parses descent schedules from a configuration document element.
     * @param element A configuration document element.
     * @returns The descent schedules defined by the configuration document element.
     */
    private parseDescentSchedules;
}
/**
 * A configuration object which defines a factory for an FMS airframe speed limit value.
 *
 * The speed limit value can be defined as a constant value, a one-dimensional lookup table keyed on pressure altitude,
 * or a value bound to an event bus topic.
 */
export declare class FmsAirframeSpeedLimitConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The value of this config. */
    readonly value: number | LookupTableConfig | NumericBusConfig;
    /**
     * Creates a new FmsAirframeSpeedLimitConfig with a constant speed limit value.
     * @param value A speed limit value.
     */
    constructor(value: number);
    /**
     * Creates a new FmsAirframeSpeedLimitConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritdoc */
    resolve(): (context: FmsAirframeSpeedLimitContext) => NumericConfigResult;
}
//# sourceMappingURL=VNavConfig.d.ts.map