/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/utils/xmllogic" />
/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Config } from '../Config/Config';
/**
 * A definition for a radio.
 */
export type RadioDefinition = {
    /** The electrical logic for this definition's radio. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A configuration object which defines options related to radios.
 */
export declare class RadiosConfig implements Config {
    /** The number of com radios supported by the plane. */
    readonly comCount = 2;
    /** The number of nav radios supported by the plane. */
    readonly navCount = 2;
    /** The number of DME radios supported by the plane. */
    readonly dmeCount: 0 | 1 | 2;
    /** The number of ADF radios supported by the plane. */
    readonly adfCount: 0 | 1 | 2;
    /**
     * Com radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly comDefinitions: readonly Readonly<RadioDefinition>[];
    /**
     * Nav radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly navDefinitions: readonly Readonly<RadioDefinition>[];
    /**
     * DME radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly dmeDefinitions: readonly Readonly<RadioDefinition>[];
    /**
     * ADF radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly adfDefinitions: readonly Readonly<RadioDefinition>[];
    /**
     * Creates a new RadiosConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses com radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of com radio definitions defined by the configuration document element.
     */
    private parseComDefinitions;
    /**
     * Parses nav radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of nav radio definitions defined by the configuration document element.
     */
    private parseNavDefinitions;
    /**
     * Parses DME radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of DME radio definitions defined by the configuration document element.
     */
    private parseDmeDefinitions;
    /**
     * Parses ADF radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of ADF radio definitions defined by the configuration document element.
     */
    private parseAdfDefinitions;
}
//# sourceMappingURL=RadiosConfig.d.ts.map