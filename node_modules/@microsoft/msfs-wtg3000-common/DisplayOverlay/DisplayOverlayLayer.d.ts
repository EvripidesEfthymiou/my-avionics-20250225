import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
import { DisplayOverlayComponent } from './DisplayOverlayComponent';
/**
 * Component props for {@link DisplayOverlayLayer}.
 */
export interface DisplayOverlayLayerProps extends ComponentProps {
    /** Whether to show the layer. */
    show: Subscribable<boolean>;
    /** CSS class(es) to apply to the layer's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An overlay layer that renders UI elements on top of the main content of a G3000 GDU or GTC display.
 */
export declare class DisplayOverlayLayer<P extends DisplayOverlayLayerProps = DisplayOverlayLayerProps> extends DisplayComponent<P> {
    private readonly cssClass;
    protected readonly components: DisplayOverlayComponent[];
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Registers a component with this layer.
     * @param component The component to register.
     */
    protected registerComponent(component: DisplayOverlayComponent): void;
    /**
     * Responds to when the visibility of this layer changes.
     * @param isVisible Whether this layer is visible.
     */
    protected onVisibilityChanged(isVisible: boolean): void;
    /**
     * Handles an interaction event. The event will be routed to each of this layer's {@link DisplayOverlayComponent}
     * descendants in order of render. If this layer is not visible, then the event will not be routed and will remain
     * unhandled.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
    /** @inheritDoc */
    render(): VNode;
}
//# sourceMappingURL=DisplayOverlayLayer.d.ts.map