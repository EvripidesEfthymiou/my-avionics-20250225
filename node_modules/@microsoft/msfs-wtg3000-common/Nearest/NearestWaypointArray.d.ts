import { EventBus, FacilityTypeMap, FacilityWaypoint, GeoPointInterface, NearestSubscription, Subscribable, SubscribableArray, SubscribableArrayHandler, Subscription } from '@microsoft/msfs-sdk';
import { WaypointInfoStore } from '@microsoft/msfs-garminsdk';
import { NearestWaypointFacilityType, NearestWaypointTypeMap } from './NearestWaypoint';
/**
 * A data item describing a nearest waypoint.
 */
export interface NearestWaypointEntry<W extends FacilityWaypoint> {
    /** This data item's waypoint. */
    readonly waypoint: W;
    /** An info store for this data item's waypoint. */
    readonly store: WaypointInfoStore;
    /** The bearing from the airplane to this data item's waypoint, in degrees, relative to the current airplane heading. */
    readonly relativeBearing: Subscribable<number>;
    /** Destroys this data item. */
    destroy(): void;
}
/**
 * A basic implementation of {@link NearestWaypointEntry}.
 */
export declare class BasicNearestWaypointEntry<W extends FacilityWaypoint> implements NearestWaypointEntry<W> {
    readonly waypoint: W;
    /** @inheritdoc */
    readonly store: WaypointInfoStore;
    private readonly _relativeBearing;
    /** @inheritdoc */
    readonly relativeBearing: Subscribable<number>;
    /**
     * Constructor.
     * @param waypoint This data item's waypoint.
     * @param ppos The current airplane position.
     * @param planeHeading The current true heading of the airplane, in degrees.
     */
    constructor(waypoint: W, ppos: Subscribable<GeoPointInterface>, planeHeading: Subscribable<number>);
    /** @inheritdoc */
    destroy(): void;
}
/**
 * An array of nearest waypoints backed by a nearest facilities subscription. Supports GPS data integrity state so that
 * the array will be empty when no GPS position is available. Also supports pausing and resuming automatic updates
 * from the backing nearest facilities subscription.
 */
export declare class NearestWaypointArray<T extends NearestWaypointFacilityType, EntryType extends NearestWaypointEntry<NearestWaypointTypeMap[T]> = NearestWaypointEntry<NearestWaypointTypeMap[T]>> implements SubscribableArray<EntryType> {
    private readonly bus;
    private readonly waypointEntryFactory;
    private readonly isGpsDataFailed;
    private readonly gpsFailClearDelay;
    private readonly facWaypointCache;
    private readonly array;
    /** @inheritdoc */
    get length(): number;
    private readonly gpsFailDebounceTimer;
    private nearestSubscription?;
    private nearestFacilitiesSub?;
    private isGpsDataFailedSub?;
    private isAlive;
    private isInit;
    private isPaused;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param waypointEntryFactory A function which creates nearest waypoint entries for this array.
     * @param isGpsDataFailed Whether GPS data is in a failed state.
     * @param gpsFailClearDelay The delay, in milliseconds, after GPS data enters a failed state before this array is
     * cleared of all waypoints.
     */
    constructor(bus: EventBus, waypointEntryFactory: (waypoint: NearestWaypointTypeMap[T]) => EntryType, isGpsDataFailed: Subscribable<boolean>, gpsFailClearDelay: number);
    /**
     * Initializes this array.
     * @param nearestSubscription The nearest facility subscription that will provide this array's nearest waypoint data.
     * @param paused Whether the array should be paused when initialized.
     * @throws Error if this array has been destroyed.
     */
    init(nearestSubscription: NearestSubscription<FacilityTypeMap[T]>, paused?: boolean): void;
    /**
     * Resumes this array. Once resumed, this array will automatically update its contents until it is paused or
     * destroyed.
     * @throws Error if this array has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this array. Once paused, this array's contents will no longer automatically update until it is resumed.
     * @throws Error if this array has been destroyed.
     */
    pause(): void;
    /** @inheritdoc */
    get(index: number): EntryType;
    /** @inheritdoc */
    tryGet(index: number): EntryType | undefined;
    /** @inheritdoc */
    getArray(): readonly EntryType[];
    /** @inheritdoc */
    sub(handler: SubscribableArrayHandler<EntryType>, initialNotify?: boolean | undefined, paused?: boolean | undefined): Subscription;
    /**
     * Inserts an entry for a facility into this array. The entry will not be inserted if the facility is already
     * represented in this array.
     * @param facility The facility for which to insert an entry.
     */
    private insertEntryForFacility;
    /**
     * Removes an entry for a facility from this array.
     * @param facility The facility for which to remove an entry.
     * @returns The entry that was removed, or `undefined` if the specified facility is not represented in this array.
     */
    private removeEntryForFacility;
    /**
     * Reconciles this array with the array provided by its nearest facilities subscription.
     * @param facilityArray The array provided by this arrya's nearest facilities subscription.
     */
    private reconcileArray;
    /**
     * Clears this page's nearest waypoint data item array.
     */
    private clearArray;
    /**
     * Destroys this array. Once this array is destroyed, it will be emptied and will no longer automatically update
     * its contents and cannot be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=NearestWaypointArray.d.ts.map