import { AirportFacility, EventBus, FacilityLoader, FacilityType, FacilityTypeMap, IntersectionFacility, NdbFacility, NearestSubscription, ReadonlySubEvent, SubEvent, Subscribable, UserFacility, VorFacility } from '@microsoft/msfs-sdk';
/**
 * A G3000 nearest facilities context. Maintains search subscriptions for the nearest airports, VORs, NDBs,
 * intersections, and user waypoints to the airplane's position.
 */
export declare class G3000NearestContext {
    private readonly bus;
    private readonly context;
    private readonly ppos;
    private static INSTANCE?;
    private static readonly instancePromiseResolves;
    /** The nearest airports. */
    readonly airports: NearestSubscription<AirportFacility>;
    /** The nearest VOR stations. */
    readonly vors: NearestSubscription<VorFacility>;
    /** The nearest intersections. */
    readonly intersections: NearestSubscription<IntersectionFacility>;
    /** The nearest NDB stations. */
    readonly ndbs: NearestSubscription<NdbFacility>;
    /** The nearest USR facilities. */
    readonly usrs: NearestSubscription<UserFacility>;
    private readonly _weather;
    /** The nearest airports with weather information. */
    readonly weather: NearestSubscription<AirportFacility>;
    readonly _updateEvent: SubEvent<G3000NearestContext, void>;
    /** A subscribable event which fires when this context is updated. */
    readonly updateEvent: ReadonlySubEvent<G3000NearestContext, void>;
    private readonly fmsPosIndex;
    private readonly nearestAirportSettingManager;
    private readonly comRadioSettingManager;
    private readonly nearestAirportFilterState;
    private readonly fmsPosMode;
    private pposSub?;
    /**
     * Constructor.
     * @param facilityLoader A facility loader.
     * @param bus The event bus.
     * @param context This context's child {@link AdaptiveNearestContext}.
     * @param fmsPosIndex The index of the FMS geo-positioning system used by this context to get the airplane's
     * position.
     * @param ppos A GeoPointSubject to update with the airplane's position.
     */
    private constructor();
    /**
     * Initializes the filters on this context's searches.
     */
    private initFilters;
    /**
     * Gets the airport region letter to use for the first character in waypoint inputs.
     * @returns The airport region letter.
     */
    getRegionLetter(): string | undefined;
    /**
     * Gets the nearest facility for a given type.
     * @param facilityType The type of facility.
     * @returns The nearest facility for a given type.
     */
    getNearest<T extends FacilityType>(facilityType: T): FacilityTypeMap[T] | undefined;
    /**
     * Updates this context.
     */
    update(): Promise<void>;
    /**
     * Gets the G3000NearestContext instance on the local instrument.
     * @returns A Promise which will be fulfilled with the G3000NearestContext instance on the local instrument once
     * it is initialized.
     */
    static getInstance(): Promise<G3000NearestContext>;
    /**
     * Initializes and returns the G3000NearestContext instance on the local instrument. If the instance is already
     * initialized, this method returns the instance without performing any other actions.
     * @param facilityLoader A facility loader.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system used by the context to get the airplane's position.
     * @returns The initialized G3000NearestContext instance on the local instrument.
     */
    static initializeInstance(facilityLoader: FacilityLoader, bus: EventBus, fmsPosIndex: number | Subscribable<number>): G3000NearestContext;
}
//# sourceMappingURL=G3000NearestContext.d.ts.map