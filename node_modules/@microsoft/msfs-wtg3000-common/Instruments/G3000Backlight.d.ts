import { EventBus, IndexedEvents, PublishPacer, SimVarPublisher } from '@microsoft/msfs-sdk';
import { PfdIndex } from '../CommonTypes';
/**
 * Unsuffixed roots for G3000 PFD screen backlight events.
 */
interface G3000PfdBacklightEventsRoot {
    /** The backlight level of a G3000 PFD screen, in the range `[0, 1]`. */
    g3000_backlight_pfd: number;
}
/**
 * Unsuffixed roots for G3000 MFD screen backlight events.
 */
interface G3000MfdBacklightEventsRoot {
    /** The backlight level of a G3000 MFD screen, in the range `[0, 1]`. */
    g3000_backlight_mfd: number;
}
/**
 * Unsuffixed roots for G3000 GTC screen backlight events.
 */
interface G3000GtcBacklightEventsRoot {
    /** The backlight level of a G3000 GTC screen, in the range `[0, 1]`. */
    g3000_backlight_gtc: number;
}
/**
 * Unsuffixed roots for indexed G3000 screen backlight events.
 */
type G3000BacklightIndexedEventsRoot = G3000PfdBacklightEventsRoot & G3000MfdBacklightEventsRoot & G3000GtcBacklightEventsRoot;
/**
 * Events related to Garmin G3000 screen backlight levels.
 */
export interface G3000BacklightEvents extends IndexedEvents<G3000PfdBacklightEventsRoot, PfdIndex>, IndexedEvents<G3000MfdBacklightEventsRoot, 1>, IndexedEvents<G3000GtcBacklightEventsRoot, number> {
    /** The G3000 automatic software backlight level, in the range `[0, 1]`. */
    g3000_backlight_auto_level: number;
}
/**
 * A publisher for G3000 screen backlight levels.
 */
export declare class G3000BacklightPublisher extends SimVarPublisher<G3000BacklightEvents, G3000BacklightIndexedEventsRoot> {
    /**
     * Creates a new instance of G3000BacklightPublisher.
     * @param bus The EventBus to publish to.
     * @param pacer An optional pacer to use to control the rate of publishing.
     */
    constructor(bus: EventBus, pacer?: PublishPacer<G3000BacklightEvents>);
}
/**
 * A utility class for working with G3000 backlight SimVars.
 */
export declare class G3000BacklightUtils {
    /**
     * Gets the backlight level SimVar name for a PFD.
     * @param index A PFD index.
     * @returns The backlight level SimVar name for the specified PFD.
     * @throws Error if {@link index} is not a valid value.
     */
    static getPfdLevelSimVarName(index: PfdIndex): string;
    /**
     * Gets the backlight level SimVar name for the MFD.
     * @returns The backlight level SimVar name for the MFD.
     */
    static getMfdLevelSimVarName(): string;
    /**
     * Gets the backlight level SimVar name for a GTC.
     * @param index A GTC index.
     * @returns The backlight level SimVar name for the specified GTC.
     * @throws Error if {@link index} is not a valid value.
     */
    static getGtcLevelSimVarName(index: number): string;
    /**
     * Gets the automatic software backlight level SimVar name.
     * @returns The automatic software backlight level SimVar name.
     */
    static getAutoLevelSimVarName(): string;
}
export {};
//# sourceMappingURL=G3000Backlight.d.ts.map