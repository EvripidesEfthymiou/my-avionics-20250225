import { EventBus, UserSettingManager } from '@microsoft/msfs-sdk';
import { WeatherRadarUserSettingTypes } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, DisplayPaneIndex } from '../Components/DisplayPanes/DisplayPaneTypes';
/**
 * Aliased names of weather radar settings that are display pane-specific.
 */
type WeatherRadarIndexedUserSettingNames = Exclude<keyof WeatherRadarUserSettingTypes, 'wxrActive'>;
/**
 * True display pane-specific weather radar settings.
 */
export type WeatherRadarDisplayPaneUserSettingTypes<Index extends ControllableDisplayPaneIndex> = {
    [Name in WeatherRadarIndexedUserSettingNames as `${Name}_${Index}`]: WeatherRadarUserSettingTypes[Name];
};
/**
 * All true weather radar settings.
 */
export type WeatherRadarAllUserSettingTypes = Pick<WeatherRadarUserSettingTypes, 'wxrActive'> & WeatherRadarDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfd> & WeatherRadarDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftMfd> & WeatherRadarDisplayPaneUserSettingTypes<DisplayPaneIndex.RightMfd> & WeatherRadarDisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfd>;
/**
 * Utility class for retrieving G3000 weather radar user setting managers.
 */
export declare class WeatherRadarUserSettings {
    private static readonly INDEXED_SETTING_NAMES;
    private static masterInstance?;
    private static readonly displayPaneInstances;
    /**
     * Retrieves a manager for all true weather radar settings.
     * @param bus The event bus.
     * @returns A manager for all true weather radar settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<WeatherRadarAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased weather radar settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased weather radar settings for the specified display pane.
     */
    static getDisplayPaneManager(bus: EventBus, index: ControllableDisplayPaneIndex): UserSettingManager<WeatherRadarUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased display pane-specific weather radar settings.
     * @returns The default values for a full set of aliased display pane-specific weather radar settings.
     */
    private static getDisplayPaneDefaultValues;
    /**
     * Gets an array of definitions for true weather radar settings specific to a single display pane.
     * @param index The index of the display pane.
     * @returns An array of definitions for true weather radar settings specific to the specified display pane.
     */
    private static getDisplayPaneSettingDefs;
    /**
     * Gets a setting name alias mapping for a display pane.
     * @param index The index of the display pane.
     * @returns A setting name alias mapping for the specified display pane.
     */
    private static getDisplayPaneAliasMap;
}
export {};
//# sourceMappingURL=WeatherRadarUserSettings.d.ts.map