import { Consumer, EventBus, UserSetting, UserSettingManager, UserSettingMap, UserSettingRecord, UserSettingValue } from '@microsoft/msfs-sdk';
import { DisplayPaneIndex } from '../Components/DisplayPanes/DisplayPaneTypes';
import { DisplayPaneSettings } from './DisplayPanesUserSettings';
/**
 * An aliased map user setting manager which can switch the true settings from which its aliased settings are sourced.
 * The supported sources are:
 * * Each set of display pane settings.
 */
export declare class DisplayPanesAliasedUserSettingManager implements UserSettingManager<DisplayPaneSettings> {
    private static readonly EMPTY_MAP;
    private readonly displayPaneManagers;
    private readonly aliasedManager;
    /**
     * Constructor.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Switches the source of this manager's settings to a set of display pane settings.
     * @param index The index of the display pane.
     * @returns Itself.
     */
    useDisplayPaneSettings(index: DisplayPaneIndex): DisplayPanesAliasedUserSettingManager;
    /** @inheritdoc */
    tryGetSetting<K extends string>(name: K): K extends keyof DisplayPaneSettings ? UserSetting<DisplayPaneSettings[K]> : undefined;
    /** @inheritdoc */
    getSetting<K extends keyof DisplayPaneSettings & string>(name: K): UserSetting<NonNullable<DisplayPaneSettings[K]>>;
    /** @inheritdoc */
    whenSettingChanged<K extends keyof DisplayPaneSettings & string>(name: K): Consumer<NonNullable<DisplayPaneSettings[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritdoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, DisplayPaneSettings>): UserSettingManager<M & DisplayPaneSettings>;
}
//# sourceMappingURL=DisplayPanesAliasedUserSettingManager.d.ts.map