import { Consumer, EventBus, UserSetting, UserSettingManager, UserSettingMap, UserSettingRecord, UserSettingValue } from '@microsoft/msfs-sdk';
import { GduDefsConfig } from '../AvionicsConfig/GduDefsConfig';
import { SensorsConfig } from '../AvionicsConfig/SensorsConfig';
import { PfdIndex } from '../CommonTypes';
/**
 * Aliased PFD sensors user settings.
 */
export type PfdSensorsUserSettingTypes = {
    /** The index of the ADC used by a PFD. */
    pfdAdcIndex: number;
    /** The index of the AHRS used by a PFD. */
    pfdAhrsIndex: number;
};
/**
 * All true PFD sensors user settings.
 */
export type PfdSensorsAllUserSettingTypes = {
    [Name in keyof PfdSensorsUserSettingTypes as `${Name}_${PfdIndex}`]: PfdSensorsUserSettingTypes[Name];
};
/**
 * A manager for PFD sensors user settings.
 */
export declare class PfdSensorsUserSettingManager implements UserSettingManager<PfdSensorsAllUserSettingTypes> {
    private static readonly INDEXED_SETTING_NAMES;
    /** The number of PFDs supported by this manager. */
    readonly pfdCount: 1 | 2;
    private readonly manager;
    private readonly aliasedManagers;
    /**
     * Creates a new instance of PfdSensorsUserSettingManager.
     * @param bus The event bus.
     * @param gduDefsConfig A configuration object which defines GDU options.
     * @param sensorsConfig A configuration object which defines sensors options.
     */
    constructor(bus: EventBus, gduDefsConfig: GduDefsConfig, sensorsConfig: SensorsConfig);
    /** @inheritdoc */
    tryGetSetting<K extends string>(name: K): K extends keyof PfdSensorsAllUserSettingTypes ? UserSetting<PfdSensorsAllUserSettingTypes[K]> : undefined;
    /** @inheritdoc */
    getSetting<K extends keyof PfdSensorsAllUserSettingTypes & string>(name: K): UserSetting<NonNullable<PfdSensorsAllUserSettingTypes[K]>>;
    /** @inheritdoc */
    whenSettingChanged<K extends keyof PfdSensorsAllUserSettingTypes & string>(name: K): Consumer<NonNullable<PfdSensorsAllUserSettingTypes[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritdoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, PfdSensorsAllUserSettingTypes>): UserSettingManager<M & PfdSensorsAllUserSettingTypes>;
    /**
     * Gets a manager for aliased IAU user settings for an indexed IAU.
     * @param index The index of the IAU for which to get an aliased setting manager.
     * @returns A manager for aliased IAU user settings for the specified IAU.
     * @throws RangeError if `index` is less than 1 or greater than the number of IAUs supported by this manager.
     */
    getAliasedManager(index: PfdIndex): UserSettingManager<PfdSensorsUserSettingTypes>;
    /**
     * Gets a setting name alias mapping for an IAU.
     * @param index The index of the IAU.
     * @returns A setting name alias mapping for the specified IAU.
     */
    private static getAliasMap;
}
//# sourceMappingURL=PfdSensorsUserSettings.d.ts.map