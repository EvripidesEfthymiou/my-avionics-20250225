import { EventBus, UserSettingManager } from '@microsoft/msfs-sdk';
import { ConnextMapUserSettingTypes, MapUserSettingTypes, WeatherMapUserSettingTypes } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, DisplayPaneIndex } from '../Components/DisplayPanes/DisplayPaneTypes';
/**
 * True weather map settings for an indexed controllable display pane.
 */
export type WeatherMapDisplayPaneUserSettingTypes<Index extends ControllableDisplayPaneIndex> = {
    [Name in keyof WeatherMapUserSettingTypes as `${Name}_${Index}`]: WeatherMapUserSettingTypes[Name];
};
/**
 * All true weather map settings.
 */
export type WeatherMapAllUserSettingTypes = WeatherMapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfd> & WeatherMapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftMfd> & WeatherMapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightMfd> & WeatherMapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfd>;
/**
 * Utility class for retrieving G3000 weather map user setting managers.
 */
export declare class WeatherMapUserSettings {
    private static masterInstance?;
    private static readonly displayPaneInstances;
    /**
     * Retrieves a manager for all true weather map settings.
     * @param bus The event bus.
     * @returns A manager for all true weather map settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<WeatherMapAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased weather map settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased weather map settings for the specified display pane.
     */
    static getDisplayPaneManager(bus: EventBus, index: ControllableDisplayPaneIndex): UserSettingManager<WeatherMapUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased weather map settings.
     * @returns The default values for a full set of aliased weather map settings.
     */
    static getDefaultValues(): WeatherMapUserSettingTypes;
    /**
     * Gets an array of definitions for true map settings for a single display pane.
     * @param index The index of the display pane.
     * @returns An array of definitions for true map settings for the specified display pane.
     */
    private static getDisplayPaneSettingDefs;
    /**
     * Gets a setting name alias mapping for a display pane.
     * @param index The index of the display pane.
     * @returns A setting name alias mapping for the specified display pane.
     */
    private static getDisplayPaneAliasMap;
}
/**
 * Names of combined Connext weather map user settings that delegate to another user setting.
 */
export type ConnextMapDelegatedUserSettingNames = 'mapRangeIndex' | 'mapNexradShow' | 'mapNexradRangeIndex';
/**
 * Combined Connext weather map, weather map, and general map user settings.
 */
export type ConnextMapCombinedUserSettingTypes = MapUserSettingTypes & WeatherMapUserSettingTypes & ConnextMapUserSettingTypes;
/**
 * True Connext weather map settings for an indexed controllable display pane.
 */
export type ConnextMapDisplayPaneUserSettingTypes<Index extends ControllableDisplayPaneIndex> = {
    [Name in keyof ConnextMapUserSettingTypes as `${Name}_${Index}`]: ConnextMapUserSettingTypes[Name];
};
/**
 * All true Connext weather map settings.
 */
export type ConnextMapAllUserSettingTypes = ConnextMapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfd> & ConnextMapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftMfd> & ConnextMapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightMfd> & ConnextMapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfd>;
/**
 * Utility class for retrieving G3000 Connext weather map user setting managers.
 */
export declare class ConnextMapUserSettings {
    private static masterInstance?;
    private static readonly displayPaneInstances;
    private static readonly displayPaneCombinedInstances;
    /**
     * Retrieves a manager for all true Connext weather map settings.
     * @param bus The event bus.
     * @returns A manager for all true Connext weather map settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<ConnextMapAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased Connext weather map settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased Connext weather map settings for the specified display pane.
     */
    static getDisplayPaneManager(bus: EventBus, index: ControllableDisplayPaneIndex): UserSettingManager<ConnextMapUserSettingTypes>;
    /**
     * Retrieves a manager for aliased combined Connext weather map settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased combined Connext weather map settings for the specified display pane.
     */
    static getDisplayPaneCombinedManager(bus: EventBus, index: ControllableDisplayPaneIndex): UserSettingManager<ConnextMapCombinedUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased Connext weather map settings.
     * @returns The default values for a full set of aliased Connext weather map settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true map settings for a single display pane.
     * @param index The index of the display pane.
     * @returns An array of definitions for true map settings for the specified display pane.
     */
    private static getDisplayPaneSettingDefs;
    /**
     * Gets a setting name alias mapping for a display pane.
     * @param index The index of the display pane.
     * @returns A setting name alias mapping for the specified display pane.
     */
    private static getDisplayPaneAliasMap;
    /**
     * Gets a combined setting name alias mapping.
     * @returns A combined setting name alias mapping.
     */
    private static getCombinedAliasMap;
}
/**
 * A utility class for working with G3000 weather map user settings.
 */
export declare class G3000WeatherMapUserSettingsUtils {
    /** An array of all G3000 combined Connext weather map user setting names. */
    static readonly CONNEXT_COMBINED_SETTING_NAMES: readonly (keyof ConnextMapCombinedUserSettingTypes)[];
    /** A mapping of delegated Connext weather map user settings to the user setting to which each is delegated. */
    static readonly CONNEXT_DELEGATE_MAP: Record<ConnextMapDelegatedUserSettingNames, keyof ConnextMapCombinedUserSettingTypes>;
}
//# sourceMappingURL=WeatherMapUserSettings.d.ts.map