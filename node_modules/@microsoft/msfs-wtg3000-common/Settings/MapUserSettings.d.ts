import { EventBus, UserSettingDefinition, UserSettingManager } from '@microsoft/msfs-sdk';
import { MapUserSettingTypes } from '@microsoft/msfs-garminsdk';
import { PfdIndex } from '../CommonTypes';
import { ControllableDisplayPaneIndex, DisplayPaneIndex } from '../Components/DisplayPanes/DisplayPaneTypes';
/**
 * Names of map user settings that delegate to a G3000-specific user setting.
 */
export type G3000MapDelegatedUserSettingNames = 'mapAirspaceClassBShow' | 'mapAirspaceClassCShow' | 'mapAirspaceClassDShow' | 'mapAirspaceRestrictedShow' | 'mapAirspaceMoaShow' | 'mapAirspaceOtherShow' | 'mapAirportLargeShow' | 'mapAirportMediumShow' | 'mapAirportSmallShow';
/**
 * Map inset setting modes.
 */
export declare enum MapInsetSettingMode {
    None = "None",
    FlightPlanText = "FlightPlanText",
    VertSituationDisplay = "VertSituationDisplay",
    FlightPlanProgress = "FlightPlanProgress"
}
/**
 * G3000-specific map user settings.
 */
export type G3000SpecificMapUserSettingTypes = {
    /** Whether to show all airspace types. */
    mapAirspaceShow: boolean;
    /** Whether to show all airport types. */
    mapAirportShow: boolean;
    /** The map inset mode. */
    mapInsetMode: MapInsetSettingMode;
    /** Whether the map flight plan text inset shows cumulative data for distance and ETE. */
    mapInsetTextCumulative: boolean;
};
/**
 * G3000 map user settings.
 */
export type G3000MapUserSettingTypes = Omit<MapUserSettingTypes, G3000MapDelegatedUserSettingNames> & G3000SpecificMapUserSettingTypes;
/**
 * True map settings for display pane maps.
 */
export type MapDisplayPaneUserSettingTypes<Index extends ControllableDisplayPaneIndex> = {
    [Name in keyof G3000MapUserSettingTypes as `${Name}_${Index}`]: G3000MapUserSettingTypes[Name];
};
/**
 * Aliased map settings that are split (independent) between the PFD inset/HSI maps and the PFD display pane maps.
 */
type MapSplitUserSettingTypes = Pick<MapUserSettingTypes, 'mapRangeIndex' | 'mapDeclutter' | 'mapTerrainMode' | 'mapTrafficShow' | 'mapNexradShow'>;
/**
 * True map settings for PFD inset/HSI maps that are split (independent) between the PFD maps and the PFD display pane
 * maps.
 */
export type MapPfdSplitUserSettingTypes<Index extends PfdIndex> = {
    [Name in keyof MapSplitUserSettingTypes as `${Name}Pfd_${Index}`]: MapSplitUserSettingTypes[Name];
};
/**
 * True map settings for PFD inset/HSI maps.
 */
export type MapPfdUserSettingTypes<Index extends PfdIndex> = {
    [Name in keyof G3000MapUserSettingTypes as Name extends keyof MapSplitUserSettingTypes ? `${Name}Pfd_${Index}` : `${Name}_${Index extends 1 ? DisplayPaneIndex.LeftPfd : DisplayPaneIndex.RightPfd}`]: G3000MapUserSettingTypes[Name];
};
/**
 * All true map settings.
 */
export type MapAllUserSettingTypes = MapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfd> & MapDisplayPaneUserSettingTypes<DisplayPaneIndex.LeftMfd> & MapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightMfd> & MapDisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfd> & MapPfdSplitUserSettingTypes<1> & MapPfdSplitUserSettingTypes<2>;
/**
 * Utility class for retrieving G3000 map user setting managers.
 */
export declare class MapUserSettings {
    private static readonly SPLIT_SETTING_NAMES;
    private static masterInstance?;
    private static readonly displayPaneInstances;
    private static readonly pfdInstances;
    /**
     * Retrieves a manager for all true map settings.
     * @param bus The event bus.
     * @returns A manager for all true map settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<MapAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased map settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased map settings for the specified display pane.
     */
    static getDisplayPaneManager(bus: EventBus, index: ControllableDisplayPaneIndex): UserSettingManager<G3000MapUserSettingTypes & MapUserSettingTypes>;
    /**
     * Retrieves a manager for aliased map settings for a PFD.
     * @param bus The event bus.
     * @param index The index of the PFD.
     * @returns A manager for aliased map settings for the specified PFD.
     */
    static getPfdManager(bus: EventBus, index: PfdIndex): UserSettingManager<G3000MapUserSettingTypes & MapUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased map settings.
     * @returns The default values for a full set of aliased map settings.
     */
    static getDefaultValues(): G3000MapUserSettingTypes;
    /**
     * Gets an array of user setting definitions for a full set of aliased map settings.
     * @returns An array of user setting definitions for a full set of aliased map settings.
     */
    static getAliasedSettingDefs(): readonly UserSettingDefinition<G3000MapUserSettingTypes[keyof G3000MapUserSettingTypes]>[];
    /**
     * Gets an array of definitions for true map settings for a single display pane.
     * @param index The index of the display pane.
     * @returns An array of definitions for true map settings for the specified display pane.
     */
    private static getDisplayPaneSettingDefs;
    /**
     * Gets an array of definitions for true independent map settings for a PFD.
     * @param index The index of the PFD.
     * @returns An array of definitions for true independent map settings for the specified PFD.
     */
    private static getPfdSettingDefs;
    /**
     * Gets a setting name alias mapping for a display pane.
     * @param index The index of the display pane.
     * @returns A setting name alias mapping for the specified display pane.
     */
    private static getDisplayPaneAliasMap;
    /**
     * Gets a setting name alias mapping for a PFD.
     * @param index The index of the PFD.
     * @returns A setting name alias mapping for the specified PFD.
     */
    private static getPfdAliasMap;
}
/**
 * A utility class for working with G3000 map user settings.
 */
export declare class G3000MapUserSettingUtils {
    /** An array of all G3000 map user setting names. */
    static readonly SETTING_NAMES: readonly (keyof G3000MapUserSettingTypes)[];
    /** An array of names of all G3000-specific map user settings. */
    static readonly SPECIFIC_SETTING_NAMES: readonly (keyof G3000SpecificMapUserSettingTypes)[];
    /** A mapping of delegated map user settings to the user setting to which each is delegated. */
    static readonly DELEGATE_MAP: Record<G3000MapDelegatedUserSettingNames, keyof G3000SpecificMapUserSettingTypes>;
}
export {};
//# sourceMappingURL=MapUserSettings.d.ts.map