import { EventBus, UserSettingManager } from '@microsoft/msfs-sdk';
import { DisplayPaneControlGtcIndex, DisplayPaneIndex } from '../Components/DisplayPanes/DisplayPaneTypes';
/** The index of the controlling GTC or -1 if nothing is controlling it. */
export type DisplayPaneController = -1 | DisplayPaneControlGtcIndex;
/** Generates the UserSettingDefinition type based on the settings object */
export type DisplayPaneSettings = {
    /** Whether a display pane is visible. */
    displayPaneVisible: boolean;
    /** The key of the view currently displayed by the display pane. */
    displayPaneView: string;
    /** The key of the display pane's designated view. */
    displayPaneDesignatedView: string;
    /** The key of the display pane's designated weather view. */
    displayPaneDesignatedWeatherView: string;
    /** The index of the GTC currently controlling the display pane, or `-1` if no GTC is controlling the pane. */
    displayPaneController: DisplayPaneController;
    /** Whether the view currently displayed by the display pane only supports half-size mode. */
    displayPaneHalfSizeOnly: boolean;
    /** Whether the map pointer is active for the display pane. */
    displayPaneMapPointerActive: boolean;
};
/** All possible display pane settings values. */
export type DisplayPaneSettingsValues = DisplayPaneSettings[keyof DisplayPaneSettings];
/**
 * True settings for display pane maps.
 */
export type DisplayPaneUserSettingTypes<Index extends DisplayPaneIndex> = {
    [Name in keyof DisplayPaneSettings as `${Name}_${Index}`]: DisplayPaneSettings[Name];
};
/**
 * All true display pane settings.
 */
export type DisplayPaneAllUserSettingTypes = DisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfdInstrument> & DisplayPaneUserSettingTypes<DisplayPaneIndex.LeftPfd> & DisplayPaneUserSettingTypes<DisplayPaneIndex.LeftMfd> & DisplayPaneUserSettingTypes<DisplayPaneIndex.RightMfd> & DisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfd> & DisplayPaneUserSettingTypes<DisplayPaneIndex.RightPfdInstrument>;
/**
 * Utility class for retrieving G3000 display pane setting managers.
 */
export declare class DisplayPanesUserSettings {
    private static readonly ALIASED_SETTING_NAMES;
    private static masterInstance?;
    private static readonly displayPaneInstances;
    /**
     * Retrieves a manager for all true map settings.
     * @param bus The event bus.
     * @returns A manager for all true map settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<DisplayPaneAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased map settings for a single display pane.
     * @param bus The event bus.
     * @param index The index of the display pane.
     * @returns A manager for aliased map settings for the specified display pane.
     */
    static getDisplayPaneManager(bus: EventBus, index: DisplayPaneIndex): UserSettingManager<DisplayPaneSettings>;
    /**
     * Gets an array of definitions for true map settings for a single display pane.
     * @param index The index of the display pane.
     * @returns An array of definitions for true map settings for the specified display pane.
     */
    private static getDisplayPaneSettingDefs;
    /**
     * Gets a setting name alias mapping for a display pane.
     * @param index The index of the display pane.
     * @returns A setting name alias mapping for the specified display pane.
     */
    private static getDisplayPaneAliasMap;
}
//# sourceMappingURL=DisplayPanesUserSettings.d.ts.map