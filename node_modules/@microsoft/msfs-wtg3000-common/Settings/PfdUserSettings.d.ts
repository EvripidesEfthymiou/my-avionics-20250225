import { EventBus, UserSettingManager } from '@microsoft/msfs-sdk';
import { AltimeterUserSettingTypes, SynVisUserSettingTypes } from '@microsoft/msfs-garminsdk';
import { PfdIndex } from '../CommonTypes';
/**
 * Setting modes for flight director format.
 */
export declare enum FlightDirectorFormatSettingMode {
    Single = "Single",
    Dual = "Dual"
}
/**
 * Flight director user settings.
 */
export type FlightDirectorUserSettingTypes = {
    /** The format of the flight director. */
    flightDirectorFormat: FlightDirectorFormatSettingMode;
};
/**
 * Setting modes for angle of attack indicator display.
 */
export declare enum AoaIndicatorDisplaySettingMode {
    Off = "Off",
    On = "On",
    Auto = "Auto"
}
/**
 * Angle of attack indicator user settings.
 */
export type AoaIndicatorUserSettingTypes = {
    /** The display mode of the angle of attack indicator. */
    aoaDisplayMode: AoaIndicatorDisplaySettingMode;
};
/**
 * Setting modes for wind display options.
 */
export declare enum WindDisplaySettingMode {
    Off = "Off",
    Option1 = "Option1",
    Option2 = "Option2",
    Option3 = "Option3"
}
/**
 * Wind display user settings.
 */
export type WindDisplayUserSettingTypes = {
    /** The display mode of the wind display. */
    windDisplayMode: WindDisplaySettingMode;
};
/**
 * Setting modes for PFD map layout.
 */
export declare enum PfdMapLayoutSettingMode {
    Off = "Off",
    Inset = "Inset",
    Hsi = "Hsi",
    Traffic = "Traffic"
}
/**
 * PFD map layout user settings.
 */
export type PfdMapLayoutUserSettingTypes = {
    /** The layout mode of the PFD map. */
    pfdMapLayout: PfdMapLayoutSettingMode;
};
/**
 * Bearing pointer source modes.
 */
export declare enum PfdBearingPointerSource {
    None = "None",
    Nav1 = "Nav1",
    Nav2 = "Nav2",
    Fms1 = "Fms1",
    Fms2 = "Fms2",
    Adf1 = "Adf1",
    Adf2 = "Adf2"
}
/**
 * PFD map layout user settings.
 */
export type PfdBearingPointerUserSettingTypes = {
    /** The data source of bearing pointer 1. */
    pfdBearingPointer1Source: PfdBearingPointerSource;
    /** The data source of bearing pointer 2. */
    pfdBearingPointer2Source: PfdBearingPointerSource;
};
/**
 * Aliased PFD user settings.
 */
export type PfdAliasedUserSettingTypes = SynVisUserSettingTypes & AltimeterUserSettingTypes & FlightDirectorUserSettingTypes & AoaIndicatorUserSettingTypes & WindDisplayUserSettingTypes & PfdMapLayoutUserSettingTypes & PfdBearingPointerUserSettingTypes;
/**
 * Aliased indexed PFD user settings.
 */
type PfdAliasedIndexedUserSettingTypes = Omit<PfdAliasedUserSettingTypes, 'altMetric'>;
/**
 * Non-indexed PFD user settings.
 */
type PfdNonIndexedUserSettingTypes = Pick<PfdAliasedUserSettingTypes, 'altMetric'>;
/**
 * True indexed PFD user settings for an indexed PFD.
 */
type PfdIndexedUserSettingTypes<Index extends PfdIndex> = {
    [Name in keyof PfdAliasedIndexedUserSettingTypes as `${Name}_${Index}`]: PfdAliasedUserSettingTypes[Name];
};
/**
 * All true PFD user settings.
 */
export type PfdAllUserSettingTypes = PfdIndexedUserSettingTypes<1> & PfdIndexedUserSettingTypes<2> & PfdNonIndexedUserSettingTypes;
/**
 * Utility class for retrieving PFD user setting managers.
 */
export declare class PfdUserSettings {
    private static readonly INDEXED_SETTING_NAMES;
    private static masterInstance?;
    private static readonly aliasedInstances;
    /**
     * Retrieves a manager for all true PFD settings.
     * @param bus The event bus.
     * @returns A manager for all true PFD settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<PfdAllUserSettingTypes>;
    /**
     * Retrieves a manager for aliased PFD settings for a single PFD.
     * @param bus The event bus.
     * @param index The index of the PFD.
     * @returns A manager for aliased PFD settings for the specified PFD.
     */
    static getAliasedManager<Index extends PfdIndex>(bus: EventBus, index: Index): UserSettingManager<PfdAliasedUserSettingTypes>;
    /**
     * Gets an array of definitions for true PFD settings for a single PFD.
     * @param index The index of the display pane.
     * @returns An array of definitions for true PFD settings for the specified PFD.
     */
    private static getIndexedSettingDefs;
    /**
     * Gets an array of definitions for non-indexed PFD settings.
     * @returns An array of definitions for non-indexed PFD settings.
     */
    private static getNonIndexedSettingDefs;
    /**
     * Gets the default values for a full set of aliased indexed PFD settings.
     * @returns The default values for a full set of aliased indexed PFD settings.
     */
    private static getIndexedDefaultValues;
    /**
     * Gets the default values for all non-indexed PFD settings.
     * @returns The default values for all non-indexed PFD settings.
     */
    private static getNonIndexedDefaultValues;
    /**
     * Gets a setting name alias mapping for a PFD.
     * @param index The index of the PFD.
     * @returns A setting name alias mapping for the specified PFD.
     */
    private static getAliasMap;
}
export {};
//# sourceMappingURL=PfdUserSettings.d.ts.map