import { Consumer, EventBus, UserSetting, UserSettingManager, UserSettingMap, UserSettingRecord, UserSettingValue } from '@microsoft/msfs-sdk';
import { FmsConfigurationSpeedDefinition, FmsSpeedClimbSchedule, FmsSpeedCruiseSchedule, FmsSpeedDescentSchedule, FmsSpeedsConfig } from '../AvionicsConfig/VNavConfig';
/**
 * FMS speed user settings.
 */
export type FmsSpeedUserSettingTypes = {
    /** An FMS aircraft configuration speed limit, in knots. */
    [fmsSpeedConfigurationLimit: `fmsSpeedConfigurationLimit_${number}`]: number;
    /** The index of the selected FMS climb schedule. */
    fmsSpeedClimbScheduleIndex: number;
    /** The scheduled FMS climb phase target indicated airspeed, in knots. */
    fmsSpeedClimbIas: number;
    /** The scheduled FMS climb phase target mach number. */
    fmsSpeedClimbMach: number;
    /** The pilot-defined FMS climb phase target indicated airspeed, in knots. */
    fmsSpeedPilotClimbIas: number;
    /** The pilot-defined FMS climb phase target mach number. */
    fmsSpeedPilotClimbMach: number;
    /** The index of the selected FMS cruise schedule. */
    fmsSpeedCruiseScheduleIndex: number;
    /** The scheduled FMS cruise phase target indicated airspeed, in knots. */
    fmsSpeedCruiseIas: number;
    /** The scheduled FMS cruise phase target mach number. */
    fmsSpeedCruiseMach: number;
    /** The pilot-defined FMS cruise phase target indicated airspeed, in knots. */
    fmsSpeedPilotCruiseIas: number;
    /** The pilot-defined FMS cruise phase target mach number. */
    fmsSpeedPilotCruiseMach: number;
    /** The index of the selected FMS descent schedule. */
    fmsSpeedDescentScheduleIndex: number;
    /** The scheduled FMS descent phase target indicated airspeed, in knots. */
    fmsSpeedDescentIas: number;
    /** The scheduled FMS descent phase target mach number. */
    fmsSpeedDescentMach: number;
    /** The scheduled FMS descent phase target flight path angle, in degrees. */
    fmsSpeedDescentFpa: number;
    /** The pilot-defined FMS descent phase target indicated airspeed, in knots. */
    fmsSpeedPilotDescentIas: number;
    /** The pilot-defined FMS descent phase target mach number. */
    fmsSpeedPilotDescentMach: number;
    /** The pilot-defined FMS descent phase target flight path angle, in degrees. */
    fmsSpeedPilotDescentFpa: number;
    /** The FMS climb phase altitude speed limit ceiling, in feet indicated altitude. */
    fmsSpeedClimbAltitudeCeiling: number;
    /** The FMS climb phase altitude speed limit, in knots. */
    fmsSpeedClimbAltitudeLimit: number;
    /** The FMS descent phase altitude speed limit ceiling, in feet indicated altitude. */
    fmsSpeedDescentAltitudeCeiling: number;
    /** The FMS descent phase altitude speed limit, in knots. */
    fmsSpeedDescentAltitudeLimit: number;
    /** The FMS departure terminal area speed limit ceiling, in feet AGL. */
    fmsSpeedDepartureCeiling: number;
    /** The FMS departure terminal area speed limit radius, in nautical miles. */
    fmsSpeedDepartureRadius: number;
    /** The FMS departure terminal area speed limit, in knots. */
    fmsSpeedDepartureLimit: number;
    /** The FMS arrival terminal area speed limit ceiling, in feet AGL. */
    fmsSpeedArrivalCeiling: number;
    /** The FMS arrival terminal area speed limit radius, in nautical miles. */
    fmsSpeedArrivalRadius: number;
    /** The FMS arrival terminal area speed limit, in knots. */
    fmsSpeedArrivalLimit: number;
    /** The user-defined FMS target indicated airspeed override, in knots. */
    fmsSpeedUserTargetIas: number;
    /** The user-defined FMS target mach number override. */
    fmsSpeedUserTargetMach: number;
    /** Whether the user-defined FMS target override is a mach number. */
    fmsSpeedUserTargetIsMach: boolean;
};
/**
 * A manager for FMS speed user settings.
 */
export declare class FmsSpeedUserSettingManager implements UserSettingManager<FmsSpeedUserSettingTypes> {
    /** Definitions for aircraft configuration speed limits, in order from highest to lowest speed. */
    readonly configurationSpeedDefinitions: readonly Readonly<FmsConfigurationSpeedDefinition>[];
    readonly climbSchedules: readonly Readonly<FmsSpeedClimbSchedule>[];
    readonly cruiseSchedules: readonly Readonly<FmsSpeedCruiseSchedule>[];
    readonly descentSchedules: readonly Readonly<FmsSpeedDescentSchedule>[];
    private readonly manager;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param fmsSpeedsConfig Definitions for each aircraft configuration speed limit for which to create
     * a setting.
     */
    constructor(bus: EventBus, fmsSpeedsConfig: FmsSpeedsConfig);
    /** @inheritdoc */
    tryGetSetting<K extends string>(name: K): K extends keyof FmsSpeedUserSettingTypes ? UserSetting<FmsSpeedUserSettingTypes[K]> : undefined;
    /** @inheritdoc */
    getSetting<K extends keyof FmsSpeedUserSettingTypes & string>(name: K): UserSetting<NonNullable<FmsSpeedUserSettingTypes[K]>>;
    /** @inheritdoc */
    whenSettingChanged<K extends keyof FmsSpeedUserSettingTypes & string>(name: K): Consumer<NonNullable<FmsSpeedUserSettingTypes[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritdoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, FmsSpeedUserSettingTypes>): UserSettingManager<M & FmsSpeedUserSettingTypes>;
}
//# sourceMappingURL=FmsSpeedUserSettings.d.ts.map