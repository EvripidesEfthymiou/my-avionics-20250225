import { RadioType } from '@microsoft/msfs-sdk';
import { ComRadio, G3000RadioType, G3000RadioTypeMap, G3000RadioTypeMapReverse, Radio, TunableRadio } from './G3000Radio';
/**
 * A utility class for working with G3000 radios.
 */
export declare class G3000RadioUtils {
    /**
     * Gets the type of a radio.
     * @param radio A radio.
     * @returns The type of the specified radio.
     * @throws Error if `radio` is not a valid radio.
     */
    static getRadioType<R extends Radio>(radio: R): G3000RadioTypeMapReverse[R];
    /**
     * Checks if a radio is of a certain type.
     * @param radio The radio to check.
     * @param type The radio type to check.
     * @returns Whether the specified radio is of the specified type.
     * @throws Error if `radio` is not a valid radio.
     */
    static isRadioType<Type extends G3000RadioType>(radio: Radio, type: Type): radio is G3000RadioTypeMap[Type];
    /**
     * Gets the sim radio type of a radio.
     * @param radio A radio.
     * @returns The sim radio type of the specified radio.
     * @throws Error if `radio` is not a valid radio.
     */
    static getSimRadioType(radio: Radio): RadioType;
    /**
     * Creates a function which formats radio names.
     * @param adfCount The number of ADF radios supported by the airplane.
     * @param dmeCount The number of DME radios supported by the airplane.
     * @returns A function which formats radio names.
     */
    static radioNameFormatter(adfCount: number, dmeCount: number): (radio: Radio) => string;
    /**
     * Sets the transmitting COM radio.
     * @param radio The com radio to set as transmitting.
     * @returns A Promise which is fulfilled when the command to set the transmitting radio has been sent.
     */
    static setComRadioTransmitting(radio: 'COM1' | 'COM2'): Promise<void>;
    /**
     * Sets the receiving state of a COM radio.
     * @param radio The radio to set the receiving state of.
     * @param receive The receiving state to set.
     * @returns A Promise which is fulfilled when the command to set the receiving state has been sent.
     */
    static setComRadioReceiveState(radio: ComRadio, receive: boolean): Promise<void>;
    /**
     * Sets a standby radio frequency.
     * @param radio The radio for which to set the frequency.
     * @param frequencyHz The frequency to set, in hertz.
     * @returns A Promise which is fulfilled when the command to set the frequency has been sent.
     */
    static setStandbyRadioFrequency(radio: TunableRadio, frequencyHz: number): Promise<void>;
    /**
     * Swaps active and standby radio frequencies.
     * @param radio The radio whose frequencies are to be swapped.
     * @returns A Promise which is fulfilled when the command to swap frequencies has been sent.
     */
    static swapRadioFrequency(radio: TunableRadio): Promise<void>;
    /**
     * Increments or decrements a radio's volume.
     * @param radio The radio to adjust the volume of.
     * @param dir Whether to increment or decrement the volume.
     * @returns A Promise which is fulfilled when the command to change the volume has been sent.
     */
    static changeRadioVolume(radio: Radio, dir: 'INC' | 'DEC'): Promise<void>;
    /**
     * Increments or decrements a radio's frequency.
     * @param radio The radio to adjust the frequency of.
     * @param freqComponent Whether to adjust the MHz (WHOLE) or kHz (FRACT) component of the frequency.
     * @param dir Whether to increment or decrement the frequency.
     * @returns A Promise which is fulfilled when the command to change the frequency has been sent.
     */
    static changeRadioFrequency(radio: TunableRadio, freqComponent: 'WHOLE' | 'FRACT', dir: 'INC' | 'DEC'): Promise<void>;
}
//# sourceMappingURL=G3000RadioUtils.d.ts.map