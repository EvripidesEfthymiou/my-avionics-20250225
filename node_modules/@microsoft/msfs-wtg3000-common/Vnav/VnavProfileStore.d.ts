import { AltitudeRestrictionType, EventBus, LegDefinition, NumberUnitInterface, Subscribable, UnitFamily } from '@microsoft/msfs-sdk';
import { VNavDataProvider } from '@microsoft/msfs-garminsdk';
import { FlightPlanLegData, FlightPlanStore } from '../FlightPlan';
/** A store for vnav profile data. */
export declare class VnavProfileStore {
    private readonly bus;
    private readonly store;
    private readonly isAdvancedVnav;
    private readonly vnavDataProvider;
    private readonly selectedAlt;
    private readonly _activeVnavWaypoint;
    private readonly _showCruiseAltitude;
    private readonly _vnavEnabled;
    private readonly _cruiseAltitude;
    private readonly _verticalSpeedTarget;
    private readonly _fpa;
    private readonly _fpaShowClimb;
    private readonly _verticalSpeedRequired;
    private readonly _timeToValue;
    private readonly _verticalDeviation;
    private readonly isPathEditable;
    private readonly _isPathEditButtonEnabled;
    private readonly _altDesc;
    private readonly _altitude1;
    private readonly _altitude2;
    private readonly _displayAltitude1AsFlightLevel;
    private readonly _displayAltitude2AsFlightLevel;
    private readonly _isAltitudeEdited;
    private readonly verticalDataPipes;
    private readonly _isVnavDirectToButtonEnabled;
    private readonly _timeToLabel;
    private readonly _timeToLabelExtended;
    private readonly updateSub;
    /** Whether VNAV is enabled. */
    readonly vnavEnabled: Subscribable<boolean>;
    /** Whether the button(s) to edit the active descent path should be enabled. */
    readonly isPathEditButtonEnabled: Subscribable<boolean>;
    /** The active VNAV waypoint. */
    readonly activeVnavWaypoint: Subscribable<LegDefinition | undefined>;
    /** Whether to show the VNAV cruise altitude in place of the active VNAV waypoint. */
    readonly showCruiseAltitude: Subscribable<boolean>;
    /** The current VNAV cruise altitude. */
    readonly cruiseAltitude: Subscribable<NumberUnitInterface<UnitFamily.Distance, import("@microsoft/msfs-sdk").Unit<UnitFamily.Distance>>>;
    /** The vertical speed target for the active descent path, or `NaN` if there is no active descent path. */
    readonly verticalSpeedTarget: Subscribable<NumberUnitInterface<UnitFamily.Speed, import("@microsoft/msfs-sdk").Unit<UnitFamily.Speed>>>;
    /**
     * The flight path angle for the active descent path, or `NaN` if there is no active descent path. Positive values
     * indicate a descending path.
     */
    readonly fpa: Subscribable<number>;
    /** Whether the active VNAV waypoint defines a CLIMB constraint. */
    readonly fpaShowClimb: Subscribable<boolean>;
    /** The vertical speed required to meet the active VNAV restriction, or `NaN` if there is no such speed. */
    readonly verticalSpeedRequired: Subscribable<NumberUnitInterface<UnitFamily.Speed, import("@microsoft/msfs-sdk").Unit<UnitFamily.Speed>>>;
    /**
     * The vertical deviation from the active descent path, or `NaN` if there is no active descent path. Positive values
     * indicate deviation above the path.
     */
    readonly verticalDeviation: Subscribable<NumberUnitInterface<UnitFamily.Distance, import("@microsoft/msfs-sdk").Unit<UnitFamily.Distance>>>;
    /** The time remaining to TOD/BOD/TOC/BOC, or `NaN` if no such value exists. */
    readonly timeToValue: Subscribable<NumberUnitInterface<UnitFamily.Duration, import("@microsoft/msfs-sdk").SimpleUnit<UnitFamily.Duration>>>;
    /** The label for the time remaining field. */
    readonly timeToLabel: Subscribable<string>;
    /** The label for the time remaining field prefixed by `'Time to '`. */
    readonly timeToLabelExtended: Subscribable<string>;
    readonly altDesc: Subscribable<AltitudeRestrictionType>;
    readonly altitude1: Subscribable<NumberUnitInterface<UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<UnitFamily.Distance>>>;
    readonly altitude2: Subscribable<NumberUnitInterface<UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<UnitFamily.Distance>>>;
    readonly displayAltitude1AsFlightLevel: Subscribable<boolean>;
    readonly displayAltitude2AsFlightLevel: Subscribable<boolean>;
    readonly isAltitudeEdited: Subscribable<boolean>;
    readonly isVnavDirectToButtonEnabled: Subscribable<boolean>;
    private isPaused;
    private readonly pauseable;
    private activeConstraintLegSub?;
    private fpaPipe?;
    /**
     * Creates a new vnav profile store.
     * @param bus The event bus.
     * @param store The flight plan store to use.
     * @param isAdvancedVnav Whether this is advanced vnav or not.
     * @param vnavDataProvider The vnav data provider.
     */
    constructor(bus: EventBus, store: FlightPlanStore, isAdvancedVnav: boolean, vnavDataProvider: VNavDataProvider);
    /** Resumes the store's subscriptions. */
    resume(): void;
    /** Pauses the store's subscriptions. */
    pause(): void;
    /** Updates the store's values. */
    update(): void;
    /**
     * Updates the VNAV cruise altitude.
     */
    private updateCruiseAltitude;
    /**
     * Sets whether to enable the FPA and vertical speed target edit buttons.
     */
    private updatePathEditState;
    /** Updates the vertical deviation field. */
    private updateVerticalDeviation;
    /** Updates the TOD/BOD/TOC/BOC fields. */
    private updateTimeFields;
    /** Updates the vertical speed target field. */
    private updateVsTarget;
    /** Updates the vertical speed required field. */
    private updateVsRequired;
    /**
     * Updates the target waypoint field.
     * @param leg The flight plan leg to which the active VNAV target altitude belongs, or `null` if there is no active
     * VNAV target altitude.
     */
    private updateActiveWaypoint;
    /** Updates the vnav direct to button. */
    private updateVnavDirectTo;
    /**
     * Determines whether a vnav direct to is available.
     * @returns whether a vnav direct to is available.
     */
    private canVnavDirectTo;
    /**
     * Gets the vnav direct to legs.
     * @returns the vnav direct to legs.
     */
    getVnavDirectToLegs(): readonly FlightPlanLegData[];
    /**
     * Determines whether a vnav direct to this leg is allowed.
     * @param legListItem The leg lsit data.
     * @returns whether a vnav direct to this leg is allowed.
     */
    private canVnavDirectToLeg;
    /** Cleans up. */
    destroy(): void;
}
//# sourceMappingURL=VnavProfileStore.d.ts.map