import { EventBus, SpeedUnit, Subscribable } from '@microsoft/msfs-sdk';
import { FmsSpeedUserSettingManager } from '../Settings/FmsSpeedUserSettings';
import { FmsSpeedTargetSource } from './FmsSpeedTypes';
/**
 * An FMS speed value, consisting of a speed and associated unit.
 */
export type FmsSpeedValue = {
    /** The numeric value of the speed. */
    value: number;
    /** The unit of the speed. */
    unit: SpeedUnit;
};
/**
 * A provider of FMS speed target data.
 */
export interface FmsSpeedTargetDataProvider {
    /** The nominal target speed computed by the FMS. The value is negative if there is no nominal target speed. */
    readonly nominalComputedTargetSpeed: Subscribable<FmsSpeedValue>;
    /** The source of the nominal target speed computed by FMS. */
    readonly nominalComputedTargetSpeedSource: Subscribable<FmsSpeedTargetSource>;
    /** Whether a user-defined speed override is active. */
    readonly isUserTargetSpeedActive: Subscribable<boolean>;
    /** The nominal user-defined speed override value. The value is negative if there is no nominal speed override. */
    readonly nominalUserTargetSpeed: Subscribable<FmsSpeedValue>;
}
/**
 * A default implementation of {@link FmsSpeedTargetDataProvider}.
 */
export declare class DefaultFmsSpeedTargetDataProvider implements FmsSpeedTargetDataProvider {
    private readonly bus;
    private readonly fmsSpeedSettingManager;
    private static readonly SPEED_VALUE_EQUALITY;
    private static readonly SPEED_VALUE_MUTATOR;
    private readonly targetIas;
    private readonly targetMach;
    private readonly targetIsMach;
    private readonly targetSource;
    private readonly maxIas;
    private readonly maxMach;
    private readonly maxIsMach;
    private readonly maxSource;
    private readonly userIas;
    private readonly userMach;
    private readonly userIsMach;
    private readonly _hasComputedTargetSpeed;
    private readonly tempSpeedValue;
    private readonly _nominalComputedTargetSpeed;
    /** @inheritdoc */
    readonly nominalComputedTargetSpeed: Subscribable<FmsSpeedValue>;
    private readonly _nominalComputedTargetSpeedSource;
    /** @inheritdoc */
    readonly nominalComputedTargetSpeedSource: Subscribable<FmsSpeedTargetSource>;
    private readonly _isUserTargetSpeedActive;
    /** @readonly */
    readonly isUserTargetSpeedActive: Subscribable<boolean>;
    private readonly _nominalUserTargetSpeed;
    /** @inheritdoc */
    readonly nominalUserTargetSpeed: Subscribable<FmsSpeedValue>;
    private isInit;
    private isAlive;
    private isPaused;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param fmsSpeedSettingManager A manager for FMS speed user settings.
     */
    constructor(bus: EventBus, fmsSpeedSettingManager: FmsSpeedUserSettingManager);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=FmsSpeedTargetDataProvider.d.ts.map