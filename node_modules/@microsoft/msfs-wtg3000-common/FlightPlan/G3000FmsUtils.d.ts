import { ApproachListItem } from '@microsoft/msfs-garminsdk';
import { AirportRunway, ApproachProcedure, ArrivalProcedure, DepartureProcedure, OneWayRunway } from '@microsoft/msfs-sdk';
/**
 * Utility methods for the G3000 FMS.
 */
export declare class G3000FmsUtils {
    private static readonly RUNWAY_DESIGNATOR_PRIORITIES;
    private static readonly APPROACH_TYPE_PRIORITIES;
    /**
     * Gets the sorting order of two runways.
     * @param a The first runway to sort.
     * @param b The second runway to sort.
     * @returns A negative number if runway `a` comes before runway `b`, a positive number if runway `a` comes after
     * runway `b`, or zero if both orderings are equivalent.
     */
    static sortRunway(a: AirportRunway, b: AirportRunway): number;
    /**
     * Gets the sorting order of two one-way runways.
     * @param a The first runway to sort.
     * @param b The second runway to sort.
     * @returns A negative number if runway `a` comes before runway `b`, a positive number if runway `a` comes after
     * runway `b`, or zero if both orderings are equivalent.
     */
    static sortOneWayRunway(a: OneWayRunway, b: OneWayRunway): number;
    /**
     * Gets the sorting order of two departures.
     * @param a The first departure to sort.
     * @param b The second departure to sort.
     * @returns A negative number if departure `a` comes before departure `b`, a positive number if departure `a` comes
     * after departure `b`, or zero if both orderings are equivalent.
     */
    static sortDeparture(a: DepartureProcedure, b: DepartureProcedure): number;
    /**
     * Gets the sorting order of two arrivals.
     * @param a The first arrival to sort.
     * @param b The second arrival to sort.
     * @returns A negative number if arrival `a` comes before arrival `b`, a positive number if arrival `a` comes after
     * arrival `b`, or zero if both orderings are equivalent.
     */
    static sortArrival(a: ArrivalProcedure, b: ArrivalProcedure): number;
    /**
     * Gets the sorting order of two approaches.
     * @param a The first approach to sort.
     * @param b The second approach to sort.
     * @returns A negative number if approach `a` comes before approach `b`, a positive number if approach `a` comes
     * after approach `b`, or zero if both orderings are equivalent.
     */
    static sortApproach(a: ApproachProcedure, b: ApproachProcedure): number;
    /**
     * Gets the sorting order of two approach items.
     * @param a The first approach item to sort.
     * @param b The second approach item to sort.
     * @returns A negative number if approach item `a` comes before approach item `b`, a positive number if approach
     * item `a` comes after approach item `b`, or zero if both orderings are equivalent.
     */
    static sortApproachItem(a: ApproachListItem, b: ApproachListItem): number;
}
//# sourceMappingURL=G3000FmsUtils.d.ts.map