import { AirportFacility, ApproachProcedure, ApproachTransition, EnrouteTransition, EventBus, FlightPlan, FlightPlanSegment, LegDefinition, MappedSubject, NavAngleUnit, NumberUnitInterface, OneWayRunway, Procedure, ReadonlySubEvent, RunwayTransition, SimpleUnit, SubEvent, Subject, Subscribable, UnitFamily } from '@microsoft/msfs-sdk';
import { DirectToState, Fms } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '../CommonTypes';
import { FlightPlanLegData, FlightPlanLegListData } from './FlightPlanLegListData';
import { FlightPlanSegmentData } from './FlightPlanSegmentListData';
/** Listens for flight plan events, and stores data as subjects to be used by the gtc flight plan page. */
export declare class FlightPlanStore {
    readonly bus: EventBus;
    readonly fms: Fms<G3000FlightPlannerId>;
    readonly planIndex: number;
    readonly isAdvancedVnav: boolean;
    private readonly _segmentMap;
    /** Unordered map of FlightPlanSegments to segment list data items.
     * Segments are added/removed to/from this map to match the flight plan. */
    readonly segmentMap: ReadonlyMap<FlightPlanSegment, FlightPlanSegmentData>;
    private readonly _legMap;
    /** Unordered map of leg definitions to leg list data items.
     * Legs are added/removed to/from this map to match the flight plan. */
    readonly legMap: ReadonlyMap<LegDefinition, FlightPlanLegData>;
    private readonly unitsSettingManager;
    private readonly _activePlanIndex;
    readonly activePlanIndex: Subscribable<number | undefined>;
    private readonly _flightPlanName;
    readonly flightPlanName: Subscribable<string | undefined>;
    private readonly _flightPlanLegsChanged;
    /** An event which fires when legs are added to or removed from this store's flight plan. */
    readonly flightPlanLegsChanged: ReadonlySubEvent<void, FlightPlan>;
    private readonly _originIdent;
    readonly originIdent: Subscribable<string | undefined>;
    private readonly _originFacility;
    readonly originFacility: Subscribable<AirportFacility | undefined>;
    private readonly _originRunway;
    readonly originRunway: Subscribable<OneWayRunway | undefined>;
    readonly originRunwayName: import("@microsoft/msfs-sdk").MappedSubscribable<string | undefined>;
    private readonly _departureProcedure;
    readonly departureProcedure: Subscribable<Procedure | undefined>;
    private readonly _departureTransition;
    readonly departureTransition: Subscribable<EnrouteTransition | undefined>;
    readonly departureTransitionName: import("@microsoft/msfs-sdk").MappedSubscribable<string | undefined>;
    private readonly _departureTransitionIndex;
    readonly departureTransitionIndex: Subscribable<number>;
    private readonly _departureRunwayTransitionIndex;
    readonly departureRunwayTransitionIndex: Subscribable<number>;
    readonly departureString: MappedSubject<[AirportFacility | undefined, Procedure | undefined, number, OneWayRunway | undefined], string>;
    readonly departureText1: MappedSubject<[string | undefined, Procedure | undefined, string | undefined], string>;
    readonly departureText2: MappedSubject<[string | undefined, Procedure | undefined, string | undefined, string], string>;
    readonly departureTextOneLine: MappedSubject<[string, string], string>;
    private readonly _departureSegmentData;
    readonly departureSegmentData: Subscribable<FlightPlanSegmentData | undefined>;
    private readonly _destinationIdent;
    readonly destinationIdent: Subscribable<string | undefined>;
    private readonly _destinationFacility;
    readonly destinationFacility: Subscribable<AirportFacility | undefined>;
    private readonly _destinationRunway;
    readonly destinationRunway: Subscribable<OneWayRunway | undefined>;
    readonly destinationRunwayName: import("@microsoft/msfs-sdk").MappedSubscribable<string | undefined>;
    readonly destinationString: MappedSubject<[string | undefined, string | undefined], string>;
    private readonly _arrivalIndex;
    readonly arrivalIndex: Subscribable<number>;
    private readonly _arrivalProcedure;
    readonly arrivalProcedure: Subscribable<Procedure | undefined>;
    private readonly _arrivalTransition;
    readonly arrivalTransition: Subscribable<EnrouteTransition | undefined>;
    private readonly _arrivalTransitionIndex;
    readonly arrivalTransitionIndex: Subscribable<number>;
    private readonly _arrivalRunwayTransition;
    readonly arrivalRunwayTransition: Subscribable<RunwayTransition | undefined>;
    private readonly _arrivalRunway;
    readonly arrivalRunway: Subscribable<OneWayRunway | undefined>;
    private readonly _arrivalFacilityIcao;
    readonly arrivalFacilityIcao: Subscribable<string | undefined>;
    private readonly _arrivalFacility;
    readonly arrivalFacility: Subscribable<AirportFacility | undefined>;
    private readonly _arrivalRunwayTransitionIndex;
    readonly arrivalRunwayTransitionIndex: Subscribable<number>;
    readonly arrivalString: MappedSubject<[AirportFacility | undefined, Procedure | undefined, number, OneWayRunway | undefined], string>;
    readonly arrivalStringFull: import("@microsoft/msfs-sdk").MappedSubscribable<string>;
    private readonly _arrivalSegmentData;
    readonly arrivalSegmentData: Subscribable<FlightPlanSegmentData | undefined>;
    private readonly _visualApproachOneWayRunwayDesignation;
    readonly visualApproachOneWayRunwayDesignation: Subscribable<string | undefined>;
    private readonly _skipCourseReversal;
    readonly skipCourseReversal: Subscribable<boolean | undefined>;
    private readonly _isApproachLoaded;
    readonly isApproachLoaded: Subscribable<boolean>;
    private readonly _approachProcedure;
    readonly approachProcedure: Subscribable<ApproachProcedure | undefined>;
    private readonly _approachForDisplay;
    readonly approachForDisplay: Subscribable<ApproachProcedure | undefined>;
    private readonly _approachIndex;
    readonly approachIndex: Subscribable<number>;
    readonly approachName: import("@microsoft/msfs-sdk").MappedSubscribable<string | undefined>;
    private readonly _approachTransition;
    readonly approachTransition: Subscribable<ApproachTransition | undefined>;
    private readonly _approachTransitionIndex;
    readonly approachTransitionIndex: Subscribable<number>;
    readonly approachStringPrefix: import("@microsoft/msfs-sdk").MappedSubscribable<"VTF Apr – " | "Approach – ">;
    private readonly _approachSegmentData;
    readonly approachSegmentData: Subscribable<FlightPlanSegmentData | undefined>;
    private readonly _isThereAtLeastOneLeg;
    readonly isThereAtLeastOneLeg: Subscribable<boolean>;
    readonly addEnrouteWaypointButtonIsVisible: Subject<boolean>;
    private readonly _activeLegGlobalIndex;
    readonly activeLegGlobalIndex: Subscribable<number | undefined>;
    private readonly _activeLegDtkMag;
    readonly activeLegDtkMag: Subscribable<NumberUnitInterface<"navangle", NavAngleUnit>>;
    private readonly _activeLegDtkTrue;
    readonly activeLegDtkTrue: Subscribable<NumberUnitInterface<"navangle", NavAngleUnit>>;
    private readonly _activeLegDistance;
    readonly activeLegDistance: Subscribable<NumberUnitInterface<UnitFamily.Distance, SimpleUnit<UnitFamily.Distance>>>;
    private readonly _activeLeg;
    readonly activeLeg: Subscribable<LegDefinition | undefined>;
    private readonly _activeLegListData;
    readonly activeLegListData: Subscribable<FlightPlanLegData | undefined>;
    private readonly _activeLegSegmentIndex;
    readonly activeLegSegmentIndex: Subscribable<number | undefined>;
    private readonly _directToData;
    readonly directToData: Subscribable<import("@microsoft/msfs-sdk").FlightPlanLegIndexes>;
    readonly directToState: MappedSubject<[number | undefined, import("@microsoft/msfs-sdk").FlightPlanLegIndexes, LegDefinition | undefined], DirectToState>;
    readonly isDirectToRandomActive: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    readonly isDirectToExistingActive: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    private readonly _directToRandomLegData;
    readonly directToRandomLegData: Subscribable<FlightPlanLegData | undefined>;
    readonly directToRandomLegListData: import("@microsoft/msfs-sdk").MappedSubscribable<FlightPlanLegListData | undefined>;
    private readonly _directToRandomHoldLegData;
    readonly directToRandomHoldLegData: Subscribable<FlightPlanLegData | undefined>;
    readonly directToRandomHoldLegListData: import("@microsoft/msfs-sdk").MappedSubscribable<FlightPlanLegListData | undefined>;
    readonly directToExistingLeg: MappedSubject<[import("@microsoft/msfs-sdk").FlightPlanLegIndexes, DirectToState], LegDefinition | null | undefined>;
    readonly isDirectToRandomActiveWithHold: MappedSubject<[boolean, FlightPlanLegListData | undefined, FlightPlanLegListData | undefined], false | "with-hold" | "no-hold">;
    private readonly _isDirectToRandomHoldLegActive;
    readonly isDirectToRandomHoldLegActive: Subscribable<boolean>;
    private readonly _fromLeg;
    readonly fromLeg: Subscribable<LegDefinition | undefined>;
    readonly fromLegSegment: import("@microsoft/msfs-sdk").MappedSubscribable<FlightPlanSegment | null | undefined>;
    readonly toLeg: MappedSubject<[LegDefinition | undefined, LegDefinition | null | undefined, boolean], FlightPlanLegData | undefined>;
    readonly toLegSegment: import("@microsoft/msfs-sdk").MappedSubscribable<FlightPlanSegment | undefined>;
    private readonly fuelTotalGal;
    private readonly fuelFlowTotalGph;
    private readonly groundSpeedKnots;
    private readonly unixSimTime;
    readonly beforeFlightPlanLoaded: SubEvent<void, FlightPlan>;
    readonly segmentAdded: SubEvent<void, FlightPlanSegmentData>;
    readonly segmentInserted: SubEvent<void, FlightPlanSegmentData>;
    readonly segmentRemoved: SubEvent<void, [FlightPlanSegmentData, number]>;
    readonly segmentChanged: SubEvent<void, [FlightPlanSegmentData, number]>;
    readonly legAdded: SubEvent<void, [FlightPlanLegData, number, number]>;
    readonly legRemoved: SubEvent<void, FlightPlanLegData>;
    private currentAltitude;
    private selectedAltitude;
    private lastProcDetailsEvent?;
    private isInitialized;
    /**
     * Creates a new FlightPlanStore.
     * @param bus The EventBus.
     * @param fms The Fms.
     * @param planIndex Which flight plan index to listen to.
     * @param isAdvancedVnav Whether to use advanced VNAV or not.
     */
    constructor(bus: EventBus, fms: Fms<G3000FlightPlannerId>, planIndex: number, isAdvancedVnav: boolean);
    /**
     * Tells the store to subscribe to the event bus.
     * @throws Error if already initialized.
     */
    init(): void;
    /**
     * Gets the current altitude.
     * @returns The current altitude.
     */
    getCurrentAltitude(): number;
    /**
     * Gets the selected altitude.
     * @returns The selected altitude.
     */
    getSelectedAltitude(): number;
    /**
     * Gets the leg list data items in forward order.
     * @param startIndex The global leg index of the leg with which to start. Defaults to 0.
     * @yields The leg list data items in forward order.
     */
    legItems(startIndex?: number): Generator<FlightPlanLegData, void>;
    /**
     * A callback fired when a new plan is loaded.
     */
    private handleFlightPlanLoaded;
    /**
     * Handles the fplUserDataSet event.
     * @param event The FlightPlanUserDataEvent.
     */
    private readonly handleUserDataSet;
    /**
     * Handles the fplUserDataDelete event.
     * @param event The FlightPlanUserDataEvent.
     */
    private readonly handleUserDataDelete;
    private readonly handleOriginDestChanged;
    private readonly handleProcDetailsChanged;
    /**
     * Handles the segment event.
     * @param segEvent The segment event.
     * @param noUpdates When true, it will not call the extra update functions.
     * @throws Error when received an unexpected event.
     */
    private readonly handleSegmentChange;
    /**
     * Handles the segment added event.
     * @param segEvent The segment event.
     * @throws Error when the segment being added already exists.
     */
    private handleSegmentAdded;
    /**
     * Handles the segment inserted event.
     * @param segEvent The segment event.
     */
    private handleSegmentInserted;
    /**
     * Handles the segment removed event.
     * @param segEvent The segment event.
     * @throws Error when the segment being removed does not exist.
     */
    private handleSegmentRemoved;
    /**
     * Removes a segment data and destroys it.
     * @param segmentData The segment data.
     * @param segmentIndex The index of the segment begin removed.
     */
    private removeSegmentData;
    /**
     * Handles the segment changed event.
     * @param segEvent The segment event.
     * @throws Error when the segment being changed does not exist.
     */
    private handleSegmentChanged;
    /**
     * Updates fields that track certain segment types.
     * @param newSegListData The new segment list data.
     */
    private handleNewSegment;
    /** Iterates through the segments and updates their segment indexes. */
    private updateSegmentIndexes;
    /**
     * Handles the leg event.
     * @param legEvent The leg event.
     * @param noUpdates When true, it will not call the extra update functions.
     * @throws Error when received an unexpected event.
     */
    private readonly handleLegChange;
    /**
     * Handles the leg added event.
     * @param legEvent The leg event.
     */
    private handleLegAdded;
    /**
     * Handles the leg removed event.
     * @param legEvent The leg event.
     */
    private handleLegRemoved;
    /**
     * Removes a leg data and destroys it.
     * @param legData The leg data.
     */
    private removeLegData;
    /**
     * Handles the leg changed event. Effectively when the vertical data object on the leg was modified.
     * @param legEvent The leg event.
     */
    private handleLegChanged;
    /**
     * Handles a leg change in the direct to random plan.
     * @param legEvent The event.
     */
    private handleDirectToRandomLegChange;
    /**
     * Handles the active leg event.
     * @param activeLegEvent The event.
     */
    private readonly handleActiveLegChange;
    private readonly updateLegCount;
    /** Updates flight plan things when segments or legs change. */
    private doUpdates;
    /** Updates the current from leg. */
    private updateFromLeg;
    /**
     * Handles the flight plan calculated event.
     * @param event The event.
     */
    private readonly handleFlightPlanCalculated;
    /**
     * Handles the vnav path calculated event.
     * @param verticalPathCalculator VNavPathCalculator.
     * @param verticalPlanIndex The vertical plan index.
     */
    private readonly handleVnavPathCalculated;
    /**
     * Updates leg list item vnav related fields.
     * @param item The leg list item.
     * @param vnavLeg The vnav leg.
     * @param minAltitude The min altitude.
     * @param maxAltitude The max altitude.
     * @param directToVnavLeg The direct to vnav leg, if applicable.
     */
    private updateLegVnavData;
    /**
     * Handles the fplIndexChanged event.
     * @param event FlightPlanIndicationEvent.
     */
    private readonly handleFlightPlannerActiveIndexChanged;
    /** Handles a new direct to random being created. */
    private readonly handleNewDirectToRandom;
    /** Destroys direct to random leg data. */
    private cleanDirectToRandomData;
    /**
     * Handles the fplDirectToDataChanged event.
     * @param event FlightPlanDirectToDataEvent.
     */
    private readonly handleDirectToDataChanged;
    /** Updates the active leg subject. */
    private updateActiveLeg;
    /**
     * Iterates through the legs in the list, updating their active leg subjects.
     * @throws Error when segment or leg cannot be found, or if something else went wrong.
     */
    private updateActiveLegListItems;
    /** Updates leg data. */
    private updateLegs;
}
//# sourceMappingURL=FlightPlanStore.d.ts.map