import { Subject, FlightPlanSegment, FlightPlan, Subscribable, MappedSubject, NumberUnitSubject } from '@microsoft/msfs-sdk';
import { FlightPlanBaseData, FlightPlanBaseListData } from './FlightPlanDataTypes';
import { FlightPlanListManager } from './FlightPlanListManager';
import { FlightPlanStore } from './FlightPlanStore';
/**
 * Represents a flight plan segment in a list.
 * Wraps a {@link FlightPlanSegmentData} object.
 * Contains fields specific to flight plan lists.
 */
export declare class FlightPlanSegmentListData implements FlightPlanBaseListData {
    readonly segmentData: FlightPlanSegmentData;
    private readonly store;
    private readonly listManager;
    /** @inheritdoc */
    readonly type = "segment";
    /** @inheritdoc */
    readonly isVisible: Subject<boolean>;
    /** Whether the segment is collapsed. */
    readonly isCollapsed: MappedSubject<[boolean, ReadonlySet<FlightPlanSegment>], boolean>;
    readonly airwayText: MappedSubject<[string | undefined, boolean], string>;
    private readonly subs;
    /**
     * Creates a new segment list data object.
     * @param segmentData The flight plan segment data to wrap.
     * @param store The flight plan store this belongs to.
     * @param listManager The list manager that this belongs to.
     */
    constructor(segmentData: FlightPlanSegmentData, store: FlightPlanStore, listManager: FlightPlanListManager);
    /** Call when this segment is rmoved from the plan. */
    destroy(): void;
}
/**
 * Represents a flight plan segment data object.
 * It stores lots of useful info about the segment in handy dandy subscribables.
 */
export declare class FlightPlanSegmentData implements FlightPlanBaseData {
    /** A reference to the segment in the flight plan. */
    readonly segment: FlightPlanSegment;
    readonly planIndex: number;
    private readonly store;
    readonly plan: FlightPlan;
    /** @inheritdoc */
    readonly type = "segment";
    private readonly _airway;
    /** The airway name of the segment, or `undefined` if the segment is not an airway. */
    readonly airway: Subscribable<string | undefined>;
    /** Whether the segment is an airway. */
    readonly isAirway: Subscribable<boolean>;
    private readonly _segmentIndex;
    /** The index of the segment in the flight plan. */
    readonly segmentIndex: Subscribable<number>;
    /** The total distance of all legs in the segment. */
    readonly distance: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** The total estimated time enroute of all legs in the segment. */
    readonly estimatedTimeEnroute: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Duration, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Duration>>;
    private readonly subs;
    /**
     * Creates a new leg list data object.
     * @param segment The containing segment.
     * @param planIndex The index of the flight plan that this leg belongs to.
     * @param store The flight plan store.
     * @param plan The flight plan that this leg exists in.
     */
    constructor(
    /** A reference to the segment in the flight plan. */
    segment: FlightPlanSegment, planIndex: number, store: FlightPlanStore, plan: FlightPlan);
    /**
     * Sets the new segment index.
     * @param segmentIndex The new segment index.
     */
    updateSegmentIndex(segmentIndex: number): void;
    /**
     * Handles the airway changing.
     * @param airway The new airway.
     */
    onAirwayChanged(airway: string | undefined): void;
    /** Call when this leg is rmoved from the plan. */
    destroy(): void;
}
//# sourceMappingURL=FlightPlanSegmentListData.d.ts.map