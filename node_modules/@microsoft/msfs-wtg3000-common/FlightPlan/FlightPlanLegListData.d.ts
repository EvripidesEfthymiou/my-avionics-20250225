import { UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { Subject, AltitudeRestrictionType, NumberUnitSubject, SpeedUnit, SpeedRestrictionType, VerticalFlightPhase, BasicNavAngleSubject, LegDefinition, FlightPlanSegment, FlightPlan, Subscribable, MappedSubject } from '@microsoft/msfs-sdk';
import { FlightPlanBaseData as FlightPlanBaseData, FlightPlanBaseListData } from './FlightPlanDataTypes';
import { FlightPlanSegmentData, FlightPlanSegmentListData } from './FlightPlanSegmentListData';
import { FlightPlanStore } from './FlightPlanStore';
/**
 * Represents a flight plan leg in a list.
 * Wraps a {@link FlightPlanLegData} object.
 * Contains fields specific to flight plan lists.
 */
export declare class FlightPlanLegListData implements FlightPlanBaseListData {
    readonly legData: FlightPlanLegData;
    readonly segmentListData: FlightPlanSegmentListData | undefined;
    private readonly store;
    private readonly unitsSettingManager;
    /** @inheritdoc */
    readonly type = "leg";
    private readonly _isVisible;
    /** @inheritdoc */
    readonly isVisible: Subscribable<boolean>;
    /** Whether this leg is the first visible leg in a segment. */
    readonly isFirstVisibleLegInSegment: Subject<boolean>;
    /** Whether there are hidden airway legs before this one, should only apply to last leg in collapsed airway. */
    readonly hasHiddenAirwayLegsBefore: Subject<boolean>;
    /** Airway exit text. */
    readonly airwayExitText: MappedSubject<[boolean, string | undefined], string>;
    private readonly _isFullyCollapsedAirwayExit;
    readonly isFullyCollapsedAirwayExit: Subscribable<boolean>;
    /** The leg DTK for displaying in certain places like the flight plan page.
     * Changes when this is the active leg and stuff like that. */
    readonly displayDtk: BasicNavAngleSubject;
    private readonly displayDtkSubs;
    /** The leg distance, but meant for display in a list. Can change when active leg, and more.
     * Shows segment distance for collapsed airway exit. */
    readonly displayDistance: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    private readonly displayDistanceSubs;
    /** Estimated time Enroute of the leg, in seconds duration. How long it will take to fly the leg.
     * Shows the segment ETE for collapsed airway exit. */
    readonly displayEte: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Duration, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Duration>>;
    private readonly eteSubs;
    private readonly subs;
    /**
     * FlightPlanLegListData constructor.
     * @param legData The flight plan leg data to wrap.
     * @param segmentListData The segment list data that this leg belong's to. Not required for random direct to leg.
     * @param store The flight plan store this belongs to.
     * @param unitsSettingManager The units setting manager.
     */
    constructor(legData: FlightPlanLegData, segmentListData: FlightPlanSegmentListData | undefined, store: FlightPlanStore, unitsSettingManager: UnitsUserSettingManager);
    /** Updates the leg's visibility. */
    private updateVisibility;
    /**
     * Updates the leg's visibility.
     * @returns Whether the leg should be visible or not. */
    private getVisibility;
    /** Updates the data source for the display dtk. */
    private updateDisplayDtkSubs;
    private readonly updateDistanceSubs;
    private readonly updateEteSubs;
    /** Call when this leg is removed from the list. */
    destroy(): void;
}
/**
 * Represents a flight plan leg data object.
 * It stores lots of useful info about the leg in handy dandy subscribables.
 */
export declare class FlightPlanLegData implements FlightPlanBaseData {
    readonly leg: LegDefinition;
    readonly segment: FlightPlanSegment;
    readonly segmentData: FlightPlanSegmentData | undefined;
    readonly planIndex: number;
    private readonly isAdvancedVnav;
    private readonly store;
    readonly plan: FlightPlan;
    readonly isDirectToRandom: boolean;
    /** @inheritdoc */
    readonly type = "leg";
    /** Whether this leg's flags and leg type allow for the leg to be visible. */
    readonly isVisibleLegType: boolean;
    /** The global index of this leg. */
    readonly globalLegIndex: Subject<number>;
    /** The index of this leg in its segment. */
    readonly segmentLegIndex: Subject<number>;
    /** Whether this leg is the first leg in its segment. */
    readonly isFirstLegInSegment: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    private readonly _isLastLegInSegment;
    /** Whether this leg is the first leg in its segment. */
    readonly isLastLegInSegment: Subscribable<boolean>;
    /** Whether this leg is in the departure segment. */
    readonly isInDepartureSegment: boolean;
    /** Whether this leg is in the approach segment. */
    readonly isInApproachSegment: boolean;
    /** Whether this leg is in the missed approach. */
    readonly isInMissedApproach: boolean;
    /** Whether this leg is a runway. */
    readonly isRunway: boolean;
    /** Whether this leg is a runway in the approach segment. */
    readonly isApproachRunwayLeg: boolean;
    /** Whether this leg is in an airway segment. */
    readonly isInAirwaySegment: Subscribable<boolean>;
    /** Whether this is currently the first leg in the plan. */
    readonly isFirstLegInPlan: Subject<boolean>;
    /** Whether this is the active leg in the flight plan. */
    readonly isActiveLeg: Subject<boolean>;
    /** Whether this leg is before the active leg. */
    readonly isBehindActiveLeg: Subject<boolean>;
    /** Whether this is a direct to leg. */
    readonly isDtoLeg: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    readonly isHoldLeg: boolean;
    readonly isHeadingLeg: boolean;
    /** The altitude restriction type to use for the altitude constraint. */
    readonly altDesc: Subject<AltitudeRestrictionType>;
    /** The altitude 1 to use for the altitude constraint. */
    readonly altitude1: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** The altitude 2 to use for the altitude constraint. */
    readonly altitude2: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** Whether the altitude 1 should be displayed as a flight level. */
    readonly displayAltitude1AsFlightLevel: Subject<boolean>;
    /** Whether the altitude 2 should be displayed as a flight level. */
    readonly displayAltitude2AsFlightLevel: Subject<boolean>;
    /** Whether the altitude constraint is designated or not. */
    readonly isAltitudeDesignated: Subject<boolean>;
    /** Whether this leg's altitude constraint is different from the published constraint. */
    readonly isAltitudeEdited: Subject<boolean>;
    /** Whether this leg's altitude constraint is invalid or not. */
    readonly isAltitudeInvalid: Subject<boolean>;
    /** Whether this leg's altitude constraint is editable. */
    readonly isAltitudeEditable: Subject<boolean>;
    /** Whether this leg's altitude constraint is visible. */
    readonly isAltitudeVisible: Subject<boolean>;
    /** The altitude 1 to use for the altitude constraint, but for display in a list. */
    readonly altitude1Display: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** The altitude 2 to use for the altitude constraint, but for display in a list. */
    readonly altitude2Display: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** Whether this leg's altitude should be display in cyan or not. */
    readonly isAltitudeCyan: MappedSubject<[boolean, import("@microsoft/msfs-sdk").NumberUnitInterface<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>, boolean, boolean], boolean>;
    /** The alt desc, but for display in a list. */
    readonly altDescDisplay: MappedSubject<[boolean, AltitudeRestrictionType, boolean], AltitudeRestrictionType>;
    /** Whether the altitude is edited, but for display in a list. */
    readonly isAltitudeEditedDisplay: MappedSubject<[boolean, boolean], boolean>;
    /** Whether the altitude is invalid, but for display in a list. */
    readonly isAltitudeInvalidDisplay: MappedSubject<[boolean, boolean], boolean>;
    /** Whether to display altitude 1 as a flight level, but for display in a list. */
    readonly displayAltitude1AsFlightLevelDisplay: MappedSubject<[boolean, boolean], boolean>;
    /** Whether to display altitude 2 as a flight level, but for display in a list. */
    readonly displayAltitude2AsFlightLevelDisplay: MappedSubject<[boolean, boolean], boolean>;
    /** Whether the altitude is editable, but for display in a list. */
    readonly isEditableDisplay: MappedSubject<[boolean, boolean], boolean>;
    /** This leg's speed constraint speed. */
    readonly speed: Subject<number>;
    /** This leg's speed constraint units. */
    readonly speedUnit: Subject<SpeedUnit>;
    /** This leg's speed constraint type. */
    readonly speedDesc: Subject<SpeedRestrictionType>;
    /** Whether this leg's speed constraint is different from the published speed. */
    readonly isSpeedEdited: Subject<boolean>;
    /** Whether this leg's speed constraint is invalid or not. */
    readonly isSpeedInvalid: Subject<boolean>;
    /**
     * This leg's flight path angle, in degrees, or `NaN` if there is no defined flight path angle. Positive values
     * indicate a descending path.
     */
    readonly fpa: Subject<number>;
    /** Whether this leg's fpa has been set by the user. */
    readonly isFpaEdited: Subject<boolean>;
    /** Whether this leg's fpa and speed constraint are editable. */
    readonly isFpaSpeedEditable: Subject<boolean>;
    /** The vertical flight phase. */
    readonly vnavPhase: Subject<VerticalFlightPhase>;
    /** Whether to show CLIMB for the fpa. */
    readonly showClimbFpa: MappedSubject<[VerticalFlightPhase, boolean, boolean], boolean>;
    /** The initial DTK of the leg. Magnetic. */
    readonly initialDtk: BasicNavAngleSubject;
    /** The leg course, rounded, and with 0 as 360. */
    readonly courseRounded: number;
    /** The leg's total distance, not cut short by ingress/egress turn radii. Changes when active leg. */
    readonly distance: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** The cumulative distance up to the end of this leg. */
    readonly distanceCumulative: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Distance, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Distance>>;
    /** The estimated fuel remaining at the end of the leg. */
    readonly fuelRemaining: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Weight, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Weight>>;
    /** Estimated time Enroute of the leg, in seconds duration. How long it will take to fly the leg. */
    readonly estimatedTimeEnroute: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Duration, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Duration>>;
    /** Cumulative ETE. How long it would take from the current position to the end of this leg. */
    readonly estimatedTimeEnrouteCumulative: NumberUnitSubject<import("@microsoft/msfs-sdk").UnitFamily.Duration, import("@microsoft/msfs-sdk").SimpleUnit<import("@microsoft/msfs-sdk").UnitFamily.Duration>>;
    /** Estimated Time of Arrival of the leg, in UTC milliseconds from midnight. */
    readonly estimatedTimeOfArrival: Subject<number>;
    private readonly subs;
    /**
     * Creates a new leg data object.
     * @param leg The leg definition.
     * @param segment The containing segment.
     * @param segmentData The containing segment data. Not needed for random direct to.
     * @param planIndex The index of the flight plan that this leg belongs to.
     * @param isAdvancedVnav Whether this is for advanced vnav.
     * @param store The flight plan store.
     * @param plan The flight plan that this leg exists in.
     * @param globalLegIndex The global leg index.
     * @param isDirectToRandom Whether this leg is for a direct to random.
     */
    constructor(leg: LegDefinition, segment: FlightPlanSegment, segmentData: FlightPlanSegmentData | undefined, planIndex: number, isAdvancedVnav: boolean, store: FlightPlanStore, plan: FlightPlan, globalLegIndex: number, isDirectToRandom?: boolean);
    /**
     * Update leg based on it's global leg index.
     * We avoid storing indexes to avoid stale indexes.
     * @param globalLegIndex The global leg index of the leg.
     */
    updateLegPosition(globalLegIndex: number): void;
    /**
     * Updates the altitude visibility and editability.
     * @param globalLegIndex The global leg index of the leg.
     */
    private updateAltitudeVisibility;
    /** Updates the altitude display subjects. */
    private readonly updateAltitudes;
    /**
     * Handles the leg changed event. Effectively when the vertical data object on the leg was modified.
     * @param leg The leg definition.
     */
    handleLegChanged(leg: LegDefinition): void;
    /**
     * Updates a leg list data item's altitude info from the leg's vertical data object.
     */
    updateLegListDataAltitudeStuffFromVerticalData(): void;
    /**
     * Determines if the altitude constraint should be considered edited.
     * @returns Whether the constraint should be considered edited.
     */
    private isAltitudeConstraintEdited;
    /** Call when this leg is removed from the plan. */
    destroy(): void;
}
//# sourceMappingURL=FlightPlanLegListData.d.ts.map