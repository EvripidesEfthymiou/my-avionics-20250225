import { EventBus, FlightPlanSegment, SetSubject, Subject, Subscribable, SubscribableArray } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '../CommonTypes';
import { FlightPlanListData } from './FlightPlanDataTypes';
import { FlightPlanLegData, FlightPlanLegListData } from './FlightPlanLegListData';
import { FlightPlanSegmentData, FlightPlanSegmentListData } from './FlightPlanSegmentListData';
import { FlightPlanStore } from './FlightPlanStore';
/** Tracks flight plan segments and legs and manages them together in a single list. */
export declare class FlightPlanListManager {
    private readonly bus;
    private readonly store;
    private readonly fms;
    private readonly planIndex;
    private readonly loadNewAirwaysCollapsed;
    private readonly _dataList;
    readonly dataList: SubscribableArray<FlightPlanListData>;
    readonly fromLegListIndex: Subject<number | undefined>;
    readonly toLegListIndex: Subject<number | undefined>;
    readonly fromLegVisibleListIndex: Subject<number | undefined>;
    readonly toLegVisibleListIndex: Subject<number | undefined>;
    private readonly legVisibilitySubsMap;
    private readonly legVisibilityChangedDebounceTimer;
    private readonly _segmentDataMap;
    readonly segmentDataMap: ReadonlyMap<FlightPlanSegmentData, FlightPlanSegmentListData>;
    private readonly _legDataMap;
    readonly legDataMap: ReadonlyMap<FlightPlanLegData, FlightPlanLegListData>;
    private readonly unitsSettingManager;
    readonly collapsedAirwaySegments: SetSubject<FlightPlanSegment>;
    private segments;
    private addEnrouteWaypointData?;
    private readonly subs;
    /**
     * Creates a new FlightPlanListManager.
     * @param bus The event bus.
     * @param store The flight plan store to use.
     * @param fms The FMS.
     * @param planIndex The flight plan index to use.
     * @param loadNewAirwaysCollapsed A subscribable indicating whether new airways should be collapsed.
     */
    constructor(bus: EventBus, store: FlightPlanStore, fms: Fms<G3000FlightPlannerId>, planIndex: number, loadNewAirwaysCollapsed: Subscribable<boolean>);
    /** Handles the flight plan loaded event. */
    private clearData;
    /**
     * Handles the segment added event.
     * @param newSegData The new segment data.
     * @throws Error when the segment being added already exists.
     */
    private handleSegmentAdded;
    /**
     * Handles the segment inserted event.
     * @param newSegData The new segment data.
     */
    private handleSegmentInserted;
    /**
     * Handles the segment removed event.
     * @param segData The segment data to remove.
     * @param segmentIndex The index of the segment being removed.
     * @throws Error when the segment being removed does not exist.
     */
    private handleSegmentRemoved;
    /**
     * Removes a segment list data and destroys it.
     * @param segmentListData The segment list data.
     */
    private removeSegmentListData;
    /**
     * Handles the segment changed event.
     * @throws Error when the segment being removed does not exist.
     */
    private handleSegmentChanged;
    /**
     * Handles a new leg.
     * @param newLegData The new leg data.
     * @param segmentIndex The segment index.
     * @param segmentLegIndex The segment leg index.
     */
    private handleLegAdded;
    /**
     * Handles a leg being removed.
     * @param legData The leg data to remove.
     */
    private handleLegRemoved;
    /**
     * Removes a leg list data object and destroys it.
     * @param legListData The leg list data.
     */
    private removeLegListData;
    /**
     * For debugging only.
     * @throws errors if our list doesn't match the flight plan.
     */
    /** Updates the from and to leg list indexes. */
    private readonly updateFromToLegListIndexes;
    /**
     * Gets the leg list item with a given segment index and segment leg index.
     * @param segmentIndex The index of the segment that the leg is in.
     * @param segmentLegIndex The index of the leg in the segment.
     * @returns The leg list data.
     * @throws Error in case it breaks.
     */
    private getLegListItemFromIndex;
    /**
     * Gets the leg list index with a given segment index and segment leg index.
     * @param segmentIndex The index of the segment that the leg is in.
     * @param segmentLegIndex The index of the leg in the segment.
     * @returns The list index of the leg.
     */
    private getListIndexFromLegIndex;
    /**
     * Gets the leg list index with a given leg.
     * @param leg The leg.
     * @returns The list index of the leg.
     */
    private getListIndexFromLeg;
    /**
     * Converts a true list index to a visible one, which takes hidden items into acount.
     * @param listIndex The true list index.
     * @returns The visible list index of the leg.
     */
    private getVisibleListIndexFromListIndex;
    /** Iterates through the segments and updates their visiblity. */
    private updateSegmentVisibility;
    /**
     * Determines if a segment should be visible in the flight plan list.
     * @param segment The segment to check.
     * @param segmentIndex The segment index of the given segment.
     * @returns Whether a segment should be visible in the flight plan list.
     */
    private shouldSegmentBeVisible;
    /**
     * Gets the index of the first normal (non-airway) enroute segment.
     * @returns The index of the first normal (non-airway) enroute segment.
     */
    private getIndexOfFirstNormalEnrouteSegment;
    /** Called when any leg's visibility has changed. */
    private readonly onLegVisibilityChanged;
    /** Called 1 frame after any leg visibility changes. */
    private readonly onLegVisibilityChangedDebounced;
    /** Celans up subscriptions. */
    destroy(): void;
}
//# sourceMappingURL=FlightPlanListManager.d.ts.map