import { Facility } from '@microsoft/msfs-sdk';
import { FlightPlanLegListData } from './FlightPlanLegListData';
import { FlightPlanSegmentListData } from './FlightPlanSegmentListData';
import { FlightPlanListManager } from './FlightPlanListManager';
import { FlightPlanStore } from './FlightPlanStore';
import { FlightPlanListData } from './FlightPlanDataTypes';
/** Data used to update the flight plan text. */
export interface FlightPlanTextData {
    /** Index for the from leg in the flight plan text list, 0, being at the top, -1 if from is outside the list. */
    readonly fromIndex: number | undefined;
    /** Index for the from leg in the flight plan text list, 0, being at the top, 5 if the to leg is outside the list. */
    readonly toIndex: number | undefined;
    /** The flight plan text row data. */
    readonly rows: FlightPlanTextRowData[];
}
/** Leg and segment list data. */
export type FlightPlanTextRowData = FlightPlanSegmentListData | FlightPlanLegListData;
/** Generates the rows to be used in the flight plan text inset. */
export declare class FlightPlanTextUpdater {
    private readonly store;
    private readonly flightPlanListManager;
    private readonly dataListArray;
    /**
     * Creates a new FlightPlanTextUpdater.
     * @param store The flight plan store.
     * @param flightPlanListManager The list manager to use.
     */
    constructor(store: FlightPlanStore, flightPlanListManager: FlightPlanListManager);
    /**
     * Generates the data for the flight plan text inset.
     * @param topRow Reference to the leg or segment list data that should be in the top row.
     * @returns the data for the flight plan text inset.
     */
    getUpdateData(topRow: FlightPlanTextRowData | undefined): FlightPlanTextData;
    /**
     * Gets the rows. If no topRow, will put active leg in center, or just start at the top of the list.
     * @param topRow What to use as the top row.
     * @returns the rows.
     */
    private getRows;
    /**
     * Gets rows using a top row.
     * @param topRow the top row data.
     * @returns the rows.
     */
    private getRowsFromTopRow;
    /**
     * Gets rows when there is no to leg, it will just pull the first 5 items from the list.
     * @returns the rows.
     */
    private getRowsWhenNoToLeg;
    /**
     * Gets rows with the active leg in the center.
     * @param toLeg The active leg.
     * @returns the rows.
     */
    private getRowsAroundToLeg;
    /**
     * Whether an item should be left out of the text rows.
     * @param item the item to check.
     * @param originFacility The current origin facility.
     * @param destinationFacility The current destination facility.
     * @returns True if item should be ignored.
     */
    static shouldIgnoreItem(item: FlightPlanListData, originFacility?: Facility, destinationFacility?: Facility): boolean;
    /** Destroys subs and comps. */
    destroy(): void;
}
//# sourceMappingURL=FlightPlanTextUpdater.d.ts.map