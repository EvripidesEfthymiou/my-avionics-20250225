/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Config } from '../Config/Config';
/**
 * Options for the autopilot ROL director.
 */
export type AutopilotRollOptions = {
    /** The minimum supported bank angle, in degrees. */
    minBankAngle: number;
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot HDG director.
 */
export type AutopilotHdgOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot VOR director.
 */
export type AutopilotVorOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot LOC director.
 */
export type AutopilotLocOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot LNAV director.
 */
export type AutopilotLNavOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot TO director.
 */
export type AutopilotToOptions = {
    /** The target pitch angle, in degrees, commanded by the director. Positive values indicate upward pitch. */
    targetPitchAngle: number;
};
/**
 * Options for the autopilot GA director.
 */
export type AutopilotGaOptions = {
    /** The target pitch angle, in degrees, commanded by the director. Positive values indicate upward pitch. */
    targetPitchAngle: number;
};
/**
 * Options for the autopilot Low Bank Mode.
 */
export type AutopilotLowBankOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot's selected altitude setting.
 */
export type AutopilotSelectedAltitudeOptions = {
    /** The minimum supported selected altitude, in feet. */
    minAltitude: number;
    /** The maximum supported selected altitude, in feet. */
    maxAltitude: number;
    /** The input rate above which input acceleration is active, in inputs per second. */
    accelInputRateThreshold: number;
    /** The maximum accelerated input rate, in inputs per second. */
    accelInputMaxRate: number;
    /**
     * The rate at which the accelerated input rate approaches the maximum rate as the input rate increases above the
     * input acceleration threshold.
     */
    accelInputRateRamp: number;
};
/**
 * A configuration object which defines options related to the autopilot.
 */
export declare class AutopilotConfig implements Config {
    private static readonly DEFAULT_ROLL_MIN_BANK_ANGLE;
    private static readonly DEFAULT_MAX_BANK_ANGLE;
    private static readonly DEFAULT_LOW_BANK_ANGLE;
    private static readonly DEFAULT_TO_PITCH_ANGLE;
    private static readonly DEFAULT_GA_PITCH_ANGLE;
    /** Options for the autopilot ROL director. */
    readonly rollOptions: AutopilotRollOptions;
    /** Options for the autopilot HDG director. */
    readonly hdgOptions: AutopilotHdgOptions;
    /** Options for the autopilot VOR director. */
    readonly vorOptions: AutopilotVorOptions;
    /** Options for the autopilot LOC director. */
    readonly locOptions: AutopilotLocOptions;
    /** Options for the autopilot GPS/FMS director. */
    readonly lnavOptions: AutopilotLNavOptions;
    /** Options for the autopilot TO director. */
    readonly toOptions: AutopilotToOptions;
    /** Options for the autopilot GA director. */
    readonly gaOptions: AutopilotGaOptions;
    /** Options for the autopilot Low Bank Mode. */
    readonly lowBankOptions: AutopilotLowBankOptions;
    /** Options for the autopilot's selected altitude setting. */
    readonly selectedAltitudeOptions: AutopilotSelectedAltitudeOptions;
    /** Whether HDG sync mode is supported. */
    readonly isHdgSyncModeSupported: boolean;
    /** Whether the autopilot should be deactivated when GA mode is armed in response to a TO/GA button press. */
    readonly deactivateAutopilotOnGa: boolean;
    /**
     * Creates a new AutopilotConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses ROL director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The ROL director options defined by the configuration document element.
     */
    private parseRollOptions;
    /**
     * Parses HDG director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The HDG director options defined by the configuration document element.
     */
    private parseHdgOptions;
    /**
     * Parses VOR director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The VOR director options defined by the configuration document element.
     */
    private parseVorOptions;
    /**
     * Parses LOC director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The LOC director options defined by the configuration document element.
     */
    private parseLocOptions;
    /**
     * Parses GPS/FMS director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The GPS/FMS director options defined by the configuration document element.
     */
    private parseLNavOptions;
    /**
     * Parses TO director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The TO director options defined by the configuration document element.
     */
    private parseToOptions;
    /**
     * Parses GA director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The GA director options defined by the configuration document element.
     */
    private parseGaOptions;
    /**
     * Parses Low Bank Mode options from a configuration document element.
     * @param element A configuration document element.
     * @returns The Low Bank Mode options defined by the configuration document element.
     */
    private parseLowBankOptions;
    /**
     * Parses selected altitude options from a configuration document element.
     * @param element A configuration document element.
     * @returns The selected altitude options defined by the configuration document element.
     */
    private parseSelectedAltitudeOptions;
}
//# sourceMappingURL=AutopilotConfig.d.ts.map