import { EventBus, Subscribable, SubscribableArray } from '@microsoft/msfs-sdk';
import { InitializationDataProvider, InitializationTaskData } from './InitializationDataProvider';
/**
 * A default implementation of `InitializationDataProvider`.
 */
export declare class DefaultInitializationDataProvider implements InitializationDataProvider {
    private readonly bus;
    private readonly _id;
    /** @inheritDoc */
    readonly id: Subscribable<string | null>;
    private readonly _isEnabled;
    /** @inheritDoc */
    readonly isEnabled: Subscribable<boolean>;
    private readonly _tasks;
    /** @inheritDoc */
    readonly tasks: SubscribableArray<InitializationTaskData>;
    private readonly _resetMessage;
    /** @inheritDoc */
    readonly resetMessage: Subscribable<string | undefined>;
    private readonly _areAllTasksCompleted;
    /** @inheritDoc */
    readonly areAllTasksCompleted: Subscribable<boolean>;
    private readonly _isAccepted;
    /** @inheritDoc */
    readonly isAccepted: Subscribable<boolean>;
    private isAlive;
    private isInit;
    private isResumed;
    private pendingTaskDefs?;
    private tasksSub?;
    /**
     * Creates a new instance of DefaultInitializationDataProvider.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. Defaults to `false`.
     * @throws Error if this data provider has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider has been destroyed.
     */
    pause(): void;
    /**
     * Responds to when the tasks that comprise the initialization process change.
     * @param tasks The new tasks that comprise the initialization process.
     */
    private onTasksChanged;
    /**
     * Refreshes the initialization tasks tracked by this provider.
     * @param tasks The new initialization tasks to be tracked.
     */
    private refreshTasks;
    /**
     * Updates whether all initialization tasks have been completed.
     */
    private updateAreAllTasksCompleted;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=DefaultInitializationDataProvider.d.ts.map