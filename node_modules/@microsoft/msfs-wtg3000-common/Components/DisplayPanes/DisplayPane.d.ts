import { ComponentProps, DisplayComponent, EventBus, ReadonlyFloat64Array, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { DisplayPaneIndex, DisplayPaneSizeMode } from './DisplayPaneTypes';
import { DisplayPaneView } from './DisplayPaneView';
import { DisplayPaneViewEvent } from './DisplayPaneViewEvents';
import { DisplayPaneViewFactory } from './DisplayPaneViewFactory';
import './DisplayPane.css';
/**
 * The properties for the DisplayPane component.
 */
export interface DisplayPaneProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The index of the display pane. */
    index: DisplayPaneIndex;
    /** The factory to use to create display pane views. */
    displayPaneViewFactory: DisplayPaneViewFactory;
    /** The size mode of the display pane. */
    sizeMode: Subscribable<DisplayPaneSizeMode>;
    /** The size of the pane's content area in full mode, as `[width, height]` in pixels. */
    fullSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of the pane's content area in half mode, as `[width, height]` in pixels. */
    halfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** CSS class(es) to apply to the root element of the pane. */
    class?: string | SubscribableSet<string>;
}
/**
 * The DisplayPane component.
 */
export declare class DisplayPane extends DisplayComponent<DisplayPaneProps> {
    private static readonly RESERVED_CLASSES;
    private readonly displayPaneTitleRef;
    private readonly displayPaneContentRef;
    private readonly rootCssClass;
    private readonly paneTitle;
    private readonly refsMap;
    private readonly activeViewEntry;
    /** The key of the currently active view. */
    readonly activeViewKey: Subscribable<string>;
    /** The currently active view. */
    readonly activeView: Subscribable<DisplayPaneView<import("./DisplayPaneView").DisplayPaneViewProps, DisplayPaneViewEvent<import("./DisplayPaneViewEvents").DisplayPaneViewEventTypes, "display_pane_map_range_inc" | "display_pane_map_range_dec" | "display_pane_map_pointer_active_set" | "display_pane_map_pointer_active_toggle" | "display_pane_map_pointer_move">> | null>;
    private readonly paneSettingsManager;
    private readonly fullSize;
    private readonly halfSize;
    private wasVisible;
    private renderedTitle?;
    private isAlive;
    private _isAwake;
    private cssClassSub?;
    private controllerSub?;
    private sizeModeSub?;
    private fullSizeSub?;
    private halfSizeSub?;
    private viewSub?;
    private eventSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Checks whether this pane is awake.
     * @returns Whether this pane is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this pane. This will resume this pane's active view (if one exists) and resume handling of display pane
     * view events and interaction events.
     * @throws Error if this pane has been destroyed.
     */
    wake(): void;
    /**
     * Puts this pane to sleep. This will pause this pane's active view (if one exists) and suspend handling of display
     * pane view events and interaction events.
     * @throws Error if this pane has been destroyed.
     */
    sleep(): void;
    /**
     * Updates this display pane. Has no effect if this display pane is not visible.
     * @param time The current real (operating system) time, as a UNIX timestamp in milliseconds.
     * @throws Error if this pane has been destroyed.
     */
    update(time: number): void;
    /**
     * Handles an interaction event. The event will be routed to this display pane's active view. If this pane is asleep
     * or hidden, or there is no active view, then the event will not be handled.
     * @param event The interaction event to handle.
     * @returns Whether the event was handled.
     * @throws Error if this pane has been destroyed.
     */
    onInteractionEvent(event: string): boolean;
    /**
     * Opens a view.
     * @param key The key of the view to open.
     */
    private open;
    /**
     * Creates a view.
     * @param type The type string of the view to create.
     * @returns A ViewEntry for the created view.
     */
    private createView;
    /**
     * Resumes a view.
     * @param entry The entry for the view to resume.
     */
    private resumeView;
    /**
     * Pauses a view.
     * @param entry The entry for the view to pause.
     */
    private pauseView;
    /**
     * Clears this pane's rendered title.
     */
    private clearTitle;
    /**
     * Responds to when this pane's size mode changes.
     * @param sizeMode The new size mode.
     */
    private onSizeModeChanged;
    /**
     * Responds to when a display pane view event is received.
     * @param event The received event.
     */
    private onEvent;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=DisplayPane.d.ts.map