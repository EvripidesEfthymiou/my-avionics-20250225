import { ComponentProps, DisplayComponent, EventBus, ReadonlyFloat64Array, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { DisplayPaneIndex } from './DisplayPaneTypes';
import { DisplayPaneViewFactory } from './DisplayPaneViewFactory';
import './DisplayPaneContainer.css';
/**
 * The properties for the DisplayPaneContainer component.
 */
export interface DisplayPaneContainerProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The factory to use to create display pane views. */
    displayPaneViewFactory: DisplayPaneViewFactory;
    /** The index of the left pane. */
    leftIndex: DisplayPaneIndex;
    /** The index of the right pane. */
    rightIndex: DisplayPaneIndex;
    /** The size of the left pane's content area in full mode, as `[width, height]` in pixels. */
    leftPaneFullSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of the left pane's content area in half mode, as `[width, height]` in pixels. */
    leftPaneHalfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of the right pane's content area in full mode, as `[width, height]` in pixels. */
    rightPaneFullSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of the right pane's content area in half mode, as `[width, height]` in pixels. */
    rightPaneHalfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The update frequency of the container's panes. */
    updateFreq: number | Subscribable<number>;
    /** Whether to alternate updates every other update cycle for each pane while both panes are visible. Defaults to `false`. */
    alternateUpdatesInSplitMode?: boolean;
    /** CSS class(es) to apply to the root element of the container. */
    class?: string | SubscribableSet<string>;
}
/**
 * A container for two display panes: a left pane and a right pane. Automatically controls the size of each display
 * pane such that if both are visible, each is sized as a half pane, and if only one is visible, it is sized as a full
 * pane.
 */
export declare class DisplayPaneContainer extends DisplayComponent<DisplayPaneContainerProps> {
    private readonly leftPaneRef;
    private readonly rightPaneRef;
    private readonly leftPaneSettingsManager;
    private readonly rightPaneSettingsManager;
    private readonly leftPaneSizeMode;
    private readonly rightPaneSizeMode;
    private readonly paneState;
    private readonly isSplit;
    private readonly cssClassSet;
    private readonly updateFreq;
    private readonly updateClock;
    private tickCounter;
    private isAlive;
    private _isAwake;
    private cssClassSub?;
    private paneStateSub?;
    private updateFreqSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Checks whether this container is awake.
     * @returns Whether this container is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this container. This will wake this container's child panes and resume updates.
     * @throws Error if this container has been destroyed.
     */
    wake(): void;
    /**
     * Puts this container to sleep. This will put this container's child panes to sleep and pause updates.
     * @throws Error if this container has been destroyed.
     */
    sleep(): void;
    /**
     * Routes an interaction event to one of this container's display panes. If this pane is asleep, then the event will
     * will not be routed and will not be handled.
     * @param pane The pane to which to route the interaction event.
     * @param event The interaction event to route.
     * @returns Whether the event was handled.
     * @throws Error if this container has been destroyed.
     */
    routeInteractionEvent(pane: 'left' | 'right', event: string): boolean;
    /**
     * Updates this container's panes.
     * @param time The current real (operating system) time, as a UNIX timestamp in milliseconds.
     */
    private update;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=DisplayPaneContainer.d.ts.map