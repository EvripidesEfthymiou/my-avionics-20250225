import { ComponentProps, DisplayComponent, Subject, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { DisplayPaneIndex, DisplayPaneSizeMode } from './DisplayPaneTypes';
import { DisplayPaneViewEvent } from './DisplayPaneViewEvents';
/** Properties of DisplayPaneView */
export interface DisplayPaneViewProps extends ComponentProps {
    /** The index of the view's parent pane. */
    index: DisplayPaneIndex;
    /** Whether the view can only be displayed in half-size panes. */
    halfSizeOnly?: boolean;
}
/** A DisplayPaneView component */
export declare abstract class DisplayPaneView<P extends DisplayPaneViewProps = DisplayPaneViewProps, E extends DisplayPaneViewEvent<any> = DisplayPaneViewEvent> extends DisplayComponent<P> {
    protected readonly _title: Subject<string | VNode>;
    /** The title of this display pane view. */
    readonly title: Subscribable<string | VNode>;
    readonly isPfd: boolean;
    /**
     * Called when this view is made visible.
     * @param size The size of this view's parent pane.
     * @param width The width of this view's parent pane, in pixels.
     * @param height The height of this view's parent pane, in pixels.
     */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /**
     * Called when this view is hidden.
     */
    onPause(): void;
    /**
     * Called when this view's parent pane is resized while this view is visible.
     * @param size The size of this view's parent pane.
     * @param width The width of this view's parent pane, in pixels.
     * @param height The height of this view's parent pane, in pixels.
     */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a UNIX timestamp in milliseconds.
     */
    onUpdate(time: number): void;
    /**
     * Called when a display pane view event is received by this view.
     * @param event The event.
     */
    onEvent(event: E): void;
    /**
     * Called when this view receives an interaction event.
     * @param event The interaction event.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
}
//# sourceMappingURL=DisplayPaneView.d.ts.map