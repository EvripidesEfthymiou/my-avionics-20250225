import { EventBus, FacilityLoader, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem, WindDataProvider } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '../../CommonTypes';
import { PfdSensorsUserSettingManager } from '../../Settings/PfdSensorsUserSettings';
import { DisplayPaneSizeMode } from '../DisplayPanes/DisplayPaneTypes';
import { DisplayPaneView, DisplayPaneViewProps } from '../DisplayPanes/DisplayPaneView';
import { DisplayPaneViewEvent } from '../DisplayPanes/DisplayPaneViewEvents';
import { MapConfig } from '../Map/MapConfig';
import { NearestPaneViewEventTypes } from './NearestPaneViewEvents';
import '../Map/CommonMap.css';
/**
 * Component props for NearestPaneView.
 */
export interface NearestPaneViewProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** A facility loader. */
    facLoader: FacilityLoader;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system used by the map to display traffic. */
    trafficSystem: TrafficSystem;
    /** A provider of wind data. Required to display the map wind vector. */
    windDataProvider?: WindDataProvider;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A configuration object defining options for the map. */
    config: MapConfig;
}
/**
 * A display pane view which displays a nearest map.
 */
export declare class NearestPaneView extends DisplayPaneView<NearestPaneViewProps, DisplayPaneViewEvent<NearestPaneViewEventTypes>> {
    private static readonly DATA_UPDATE_FREQ;
    private static readonly TITLE_TEXT;
    private readonly size;
    private readonly facWaypointCache;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeModule;
    private readonly mapWptHighlightModule;
    private readonly mapPointerModule;
    private readonly mapPointerController;
    private readonly mapRangeController;
    private readonly mapNrstRTRController;
    private readonly mapPointerActiveSetting;
    private readonly pfdControllerJoystickEventHandler;
    private isReady;
    private readonly isReadyPromiseResolve;
    private readonly isReadyPromiseReject;
    private readonly isReadyPromise;
    private setWaypointOpId;
    private pointerActivePipe?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onEvent(event: DisplayPaneViewEvent<NearestPaneViewEventTypes>): void;
    /** @inheritDoc */
    onInteractionEvent(event: string): boolean;
    /**
     * Responds to when a map pointer toggle event is commanded by the PFD controller joystick.
     * @returns Whether the event was handled.
     */
    private onJoystickPointerToggle;
    /**
     * Responds to when a map pointer move event is commanded by the PFD controller joystick.
     * @param dx The horizontal displacement, in pixels.
     * @param dy The vertical displacement, in pixels.
     * @returns Whether the event was handled.
     */
    private onJoystickPointerMove;
    /**
     * Responds to when a map range change event is commanded by the PFD controller joystick.
     * @param direction The direction in which to change the map range.
     * @returns Whether the event was handled.
     */
    private onJoystickRangeChange;
    /**
     * Changes this view's map range index.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /**
     * Sets the selected waypoint.
     * @param selectionData Data describing the selected waypoint.
     */
    private setWaypoint;
    /**
     * Waits until this view's map is ready to target selected waypoints.
     * @returns A Promise which will be fulfilled when this view's map is ready to target selected waypoints, or
     * rejected if this view is destroyed before the map is ready.
     */
    private awaitReady;
    /** @inheritdoc */
    render(): VNode | null;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=NearestPaneView.d.ts.map