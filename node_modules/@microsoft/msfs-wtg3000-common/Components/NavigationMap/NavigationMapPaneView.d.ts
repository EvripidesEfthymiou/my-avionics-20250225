import { EventBus, FacilityLoader, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { Fms, TrafficSystem, VNavDataProvider, WindDataProvider } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '../../CommonTypes';
import { FlightPlanListManager, FlightPlanStore } from '../../FlightPlan';
import { PfdSensorsUserSettingManager } from '../../Settings/PfdSensorsUserSettings';
import { DisplayPaneSizeMode } from '../DisplayPanes/DisplayPaneTypes';
import { DisplayPaneView, DisplayPaneViewProps } from '../DisplayPanes/DisplayPaneView';
import { DisplayPaneViewEvent } from '../DisplayPanes/DisplayPaneViewEvents';
import { MapConfig } from '../Map/MapConfig';
import { NavigationMapPaneViewEventTypes } from './NavigationMapPaneViewEvents';
import '../Map/CommonMap.css';
import './NavigationMapPaneView.css';
/**
 * Component props for NavigationMapPaneView.
 */
export interface NavigationMapPaneViewProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** A facility loader. */
    facLoader: FacilityLoader;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system used by the map to display traffic. */
    trafficSystem: TrafficSystem;
    /** The flight plan store. */
    flightPlanStore: FlightPlanStore;
    /** A provider of wind data. Required to display the map wind vector. */
    windDataProvider?: WindDataProvider;
    /** A provider of VNAV data. */
    vnavDataProvider: VNavDataProvider;
    /** The Fms. */
    fms: Fms<G3000FlightPlannerId>;
    /** The flight plan list manager instance for this pane. */
    flightPlanListManager: FlightPlanListManager;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A configuration object defining options for the map. */
    config: MapConfig;
}
/**
 * A display pane view which displays a navigation map.
 */
export declare class NavigationMapPaneView extends DisplayPaneView<NavigationMapPaneViewProps, DisplayPaneViewEvent<NavigationMapPaneViewEventTypes>> {
    private static readonly DATA_UPDATE_FREQ;
    private static readonly VSD_MAP_HEIGHT_PFD;
    private static readonly VSD_MAP_HEIGHT_MFD;
    private static readonly FLIGHT_PLAN_TEXT_MAP_HEIGHT;
    private activeInsetView?;
    private readonly flightPlanTextInset;
    private readonly insetModeToViewMap;
    private readonly rootCssClass;
    private readonly displayPaneSizeMode;
    private readonly paneSize;
    private readonly mapSize;
    private readonly mapSettingManager;
    private readonly drawEntirePrimaryPlan;
    private readonly compiledMap;
    private readonly mapRangeModule;
    private readonly mapPointerModule;
    private readonly mapFocusModule;
    private readonly mapPointerController;
    private readonly mapRangeController;
    private readonly mapPointerActiveSetting;
    private focusedPlanIndex;
    private readonly focusedPlanName;
    private setFocusOpId;
    private readonly mapInsetModeSetting;
    private readonly mapInsetTextCumulativeSetting;
    private readonly insetMode;
    private readonly pfdControllerJoystickEventHandler;
    private pointerActivePipe?;
    private planNameTitlePipe?;
    private planNameSetSub?;
    private planNameDeleteSub?;
    private planOriginDestSub?;
    private mapInsetSettingModeSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this pane's inset mode changes.
     * @param mode The new inset mode.
     */
    private onInsetModeChanged;
    /**
     * Updates the size of this pane's map.
     */
    private updateMapSize;
    /** @inheritDoc */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onEvent(event: DisplayPaneViewEvent<NavigationMapPaneViewEventTypes>): void;
    /** @inheritDoc */
    onInteractionEvent(event: string): boolean;
    /**
     * Responds to when a map pointer toggle event is commanded by the PFD controller joystick.
     * @returns Whether the event was handled.
     */
    private onJoystickPointerToggle;
    /**
     * Responds to when a map pointer move event is commanded by the PFD controller joystick.
     * @param dx The horizontal displacement, in pixels.
     * @param dy The vertical displacement, in pixels.
     * @returns Whether the event was handled.
     */
    private onJoystickPointerMove;
    /**
     * Responds to when a map range change event is commanded by the PFD controller joystick.
     * @param direction The direction in which to change the map range.
     * @returns Whether the event was handled.
     */
    private onJoystickRangeChange;
    /**
     * Changes this view's map range index.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /**
     * Sets the flight plan focus for this view's map.
     * @param data Data defining the flight plan focus to set.
     */
    private setFlightPlanFocus;
    /**
     * Gets the name of a flight plan focus. The name is represented as a string containing the name of the flight plan
     * if the focus has no associated segment or leg, or as a VNode if there is the focus does have an associated segment
     * or leg.
     * @param plan The focused flight plan.
     * @param segmentIndex The index of the flight plan segment associated with the focus, or `-1` if there is no
     * associated segment.
     * @param globalLegIndex The index of the first flight plan leg in the focus, or `-1` if the focus is empty.
     * @returns A Promise which will be fulfilled with the name of the specified flight plan focus.
     */
    private getFlightPlanFocusName;
    /**
     * Gets the displayed name of a flight plan leg as part of a flight plan focus.
     * @param leg A flight plan leg.
     * @returns The displayed name of the specified flight plan leg as part of a flight plan focus, as a VNode.
     */
    private getLegName;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=NavigationMapPaneView.d.ts.map