import { EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem } from '@microsoft/msfs-garminsdk';
import { G3000FlightPlannerId } from '../../CommonTypes';
import { PfdSensorsUserSettingManager } from '../../Settings/PfdSensorsUserSettings';
import { DisplayPaneSizeMode } from '../DisplayPanes/DisplayPaneTypes';
import { DisplayPaneView, DisplayPaneViewProps } from '../DisplayPanes/DisplayPaneView';
import { DisplayPaneViewEvent } from '../DisplayPanes/DisplayPaneViewEvents';
import { MapConfig } from '../Map/MapConfig';
import './TrafficMapPaneView.css';
/**
 * Component props for TrafficMapPaneView.
 */
export interface TrafficMapPaneViewProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system used by the map. */
    trafficSystem: TrafficSystem;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A configuration object defining options for the map. */
    config: MapConfig;
}
/**
 * A display pane view which displays a traffic map.
 */
export declare class TrafficMapPaneView extends DisplayPaneView<TrafficMapPaneViewProps> {
    private static readonly DATA_UPDATE_FREQ;
    private readonly size;
    private readonly rangeEndpoints;
    private readonly trafficSettingManager;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /**
     * Updates the size of the map.
     * @param width The width of the map, in pixels.
     * @param height The height of the map, in pixels.
     */
    private updateSize;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onEvent(event: DisplayPaneViewEvent): void;
    /** @inheritDoc */
    onInteractionEvent(event: string): boolean;
    /** @inheritdoc */
    render(): VNode | null;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=TrafficMapPaneView.d.ts.map