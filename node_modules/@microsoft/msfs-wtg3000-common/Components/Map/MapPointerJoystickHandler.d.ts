/**
 * A direction for a joystick input that controls a map pointer.
 */
export declare enum MapPointerJoystickDirection {
    Left = "Left",
    LeftUp = "LeftUp",
    Up = "Up",
    RightUp = "RightUp",
    Right = "Right",
    RightDown = "RightDown",
    Down = "Down",
    LeftDown = "LeftDown"
}
/**
 * A handler for joystick inputs that control the movement of a map pointer. Consumes inputs and converts them into
 * displacement vectors for the map pointer. Supports input acceleration.
 */
export declare class MapPointerJoystickHandler {
    private readonly accelTimeThreshold;
    /** The base distance moved by the map pointer per input, in pixels. */
    private static readonly STEP;
    /** The maximum time, in milliseconds, between inputs required to trigger acceleration. */
    private static readonly DEFAULT_ACCEL_TIME_THRESHOLD;
    private consecutiveInputs;
    private lastInputTime;
    /**
     * Constructor.
     * @param accelTimeThreshold The maximum time, in milliseconds, between inputs required to trigger acceleration.
     * Defaults to {@link MapPointerJoystickHandler.DEFAULT_ACCEL_TIME_THRESHOLD}.
     */
    constructor(accelTimeThreshold?: number);
    /**
     * Handles a joystick input, converting it into a displacement vector for the map pointer.
     * @param direction The direction of the input.
     * @param out The vector to which to write the result.
     * @returns The displacement vector for the map pointer commanded by the input.
     */
    onInput(direction: MapPointerJoystickDirection, out: Float64Array): Float64Array;
}
//# sourceMappingURL=MapPointerJoystickHandler.d.ts.map