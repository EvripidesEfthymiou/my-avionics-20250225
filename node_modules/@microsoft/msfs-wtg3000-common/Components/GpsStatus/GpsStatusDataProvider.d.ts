import { AvionicsSystemState, EventBus, GeoPointInterface, GPSSatellite, GPSSystemSBASState, GPSSystemState, NumberUnitInterface, ReadonlySubEvent, Subject, Subscribable, SubscribableArray, UnitFamily } from '@microsoft/msfs-sdk';
import { DynamicListData } from '../List/DynamicListData';
/**
 * Data about a GPS satellite from the provider.
 */
export declare class GpsSatelliteData implements DynamicListData {
    readonly sat: GPSSatellite;
    /** @inheritdoc */
    readonly isVisible: Subject<boolean>;
    /**
     * Creates an instance of GpsSatelliteData.
     * @param sat The satellite to track.
     */
    constructor(sat: GPSSatellite);
}
/**
 * A data provider that provides GPS status.
 */
export declare class GpsStatusDataProvider {
    private readonly bus;
    readonly index: number;
    private readonly _receiverState;
    /** The current GPS receiver state. */
    readonly receiverState: Subscribable<AvionicsSystemState>;
    private readonly _systemState;
    /** The current GPS system state. */
    readonly systemState: Subscribable<GPSSystemState>;
    private readonly _sbasState;
    /** The current GPS system SBAS state. */
    readonly sbasState: Subscribable<GPSSystemSBASState>;
    private readonly _activeSatellites;
    /** The current satellites. */
    readonly activeSatellites: SubscribableArray<GpsSatelliteData>;
    private readonly _numInUseSatellites;
    /** The number of active tracking satellites. */
    readonly numInUseSatellites: Subscribable<number>;
    private readonly _positionsCalculated;
    /** An event that fires when the satellite positions are calculated. */
    readonly positionsCalculated: ReadonlySubEvent<this, void>;
    private readonly _pdop;
    /** The current GPS receiver PDOP. */
    readonly pdop: Subscribable<number>;
    private readonly _hdop;
    /** The current GPS receiver HDOP. */
    readonly hdop: Subscribable<number>;
    private readonly _vdop;
    /** The current GPS receiver VDOP. */
    readonly vdop: Subscribable<number>;
    private readonly _position;
    /** The current GPS position. Both lat and lon will be `NaN` if a GPS fix is not available. */
    readonly position: Subscribable<GeoPointInterface>;
    private readonly _time;
    /** The current time, as a UNIX timestamp in milliseconds. */
    readonly time: Subscribable<number>;
    private readonly _altitude;
    /** The current GPS altitude, or `NaN` if a GPS fix is not available. */
    readonly altitude: Subscribable<NumberUnitInterface<UnitFamily.Distance, import("@microsoft/msfs-sdk").Unit<UnitFamily.Distance>>>;
    private readonly _groundSpeed;
    /** The current GPS ground speed, or `NaN` if a GPS fix is not available. */
    readonly groundSpeed: Subscribable<NumberUnitInterface<UnitFamily.Speed, import("@microsoft/msfs-sdk").Unit<UnitFamily.Speed>>>;
    private readonly _groundTrack;
    /** The current GPS ground track, or `NaN` if a GPS fix is not available. */
    readonly groundTrack: Subscribable<NumberUnitInterface<"navangle", import("@microsoft/msfs-sdk").Unit<"navangle">>>;
    private isAlive;
    private isInit;
    private posSub?;
    private gsSub?;
    private trackSub?;
    private magVarSub?;
    private receiverStateSub?;
    private systemStateSub?;
    private sbasStateSub?;
    private satPosCalculatedSub?;
    private satStateSub?;
    private pdopSub?;
    private hdopSub?;
    private vdopSub?;
    /**
     * Creates an instance of the GpsDataProvider.
     * @param bus The event bus to use with this instance.
     * @param index The GPS system index that this provider will track.
     */
    constructor(bus: EventBus, index: number);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @throws Error if this data provider is dead.
     */
    init(): void;
    /**
     * A handler that runs when the state of a satellite changes.
     * @param sat The satellite that changed state.
     */
    private onSatStateChanged;
    /**
     * Destroys the data provider.
     */
    destroy(): void;
}
//# sourceMappingURL=GpsStatusDataProvider.d.ts.map