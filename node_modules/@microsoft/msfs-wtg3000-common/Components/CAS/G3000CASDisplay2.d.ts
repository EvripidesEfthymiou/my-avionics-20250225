import { AnnunciationType, CasActiveMessage, ComponentProps, DisplayComponent, EventBus, MutableSubscribable, Subscribable, SubscribableArray, VNode } from '@microsoft/msfs-sdk';
import { CasDisplay2ScrollState } from '@microsoft/msfs-garminsdk';
import { PfdIndex } from '../../CommonTypes';
/**
 * Component props for {@link G3000CASDisplay2}.
 */
export interface G3000CASDisplay2Props extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The messages to display. */
    messages: SubscribableArray<CasActiveMessage>;
    /** The maximum number of messages that can be displayed simultaneously. */
    maxMessageCount: number | Subscribable<number>;
    /** The maximum number of warning messages that are always displayed and cannot be scrolled. Defaults to `0`. */
    maxUnscrollableWarningCount?: number | Subscribable<number>;
    /** A mutable subscribable to which to write the scroll state of the display. */
    scrollState?: MutableSubscribable<any, Readonly<CasDisplay2ScrollState>>;
    /** The PFD indices of the event bus scroll commands to which the display should respond. */
    pfdIndices: Iterable<PfdIndex>;
}
/**
 * A G3000 scrollable CAS display that supports the event bus scroll commands defined by {@link CASControlEvents}.
 */
export declare class G3000CASDisplay2 extends DisplayComponent<G3000CASDisplay2Props> {
    private readonly displayRef;
    private readonly publisher;
    private readonly scrollState;
    private readonly pfdIndices;
    private canScrollUp;
    private canScrollDown;
    private scrollStatePipe?;
    private readonly controlEventSubs;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the scroll state of the display changes.
     * @param scrollState The new scroll state.
     */
    private onScrollStateChanged;
    /**
     * Responds to when a scroll up command event is received.
     */
    private onScrollUpEvent;
    /**
     * Responds to when a scroll down command event is received.
     */
    private onScrollDownEvent;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
/**
 * Component props for {@link G3000CASMessageCount}.
 */
export interface G3000CASMessageCountProps {
    /** The number of scrollable messages that are positioned above the first scrollable message slot. */
    messageAboveCount: Subscribable<number>;
    /** The number of scrollable messages that are positioned below the last scrollable message slot. */
    messageBelowCount: Subscribable<number>;
    /**
     * The highest message priority among all scrollable messages that are scrolled out of the view, or `null` if there
     * are no out-of-view messages.
     */
    highestPriority: Subscribable<AnnunciationType | null>;
}
/**
 * A component that displays out-of-view CAS message counts for scrollable CAS message displays.
 */
export declare class G3000CASMessageCount extends DisplayComponent<G3000CASMessageCountProps> {
    private readonly labelRef;
    private readonly messageAboveCountText;
    private readonly messageBelowCountText;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the highest out-of-view message priority changes.
     * @param priority The new highest out-of-view message priority, or `null` if there are no out-of-view messages.
     */
    private onHighestPriorityChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
/**
 * Component props for {@link G3000CASScrollBar}.
 */
export interface G3000CASScrollBarProps {
    /** The scroll state of the scroll bar's parent display. */
    scrollState: Subscribable<Readonly<CasDisplay2ScrollState>>;
}
/**
 * A scroll bar for G3000 scrollable CAS message displays.
 */
export declare class G3000CASScrollBar extends DisplayComponent<G3000CASScrollBarProps> {
    private readonly upArrowEnabled;
    private readonly downArrowEnabled;
    private readonly warningShadingHeight;
    private readonly cautionShadingTop;
    private readonly cautionShadingHeight;
    private readonly barTop;
    private readonly barHeight;
    private stateSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the scroll state of this scroll bar's parent display changes.
     * @param state The new scroll state.
     */
    private onScrollStateChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
/**
 * Component props for {@link G3000FullCASDisplay2}.
 */
export interface G3000FullCASDisplay2Props {
    /** The event bus */
    bus: EventBus;
    /** The messages to display. */
    messages: SubscribableArray<CasActiveMessage>;
    /** The maximum number of messages that can be displayed simultaneously. */
    maxMessageCount: number | Subscribable<number>;
    /** The maximum number of warning messages that are always displayed and cannot be scrolled. Defaults to `0`. */
    maxUnscrollableWarningCount?: number | Subscribable<number>;
    /** The PFD indices of the event bus scroll commands to which the display should respond. */
    pfdIndices: PfdIndex[];
    /**
     * The `data-checklist` attribute to set on the display's root element, or `undefined` if the attribute should not be
     * set.
     */
    dataChecklist?: string;
}
/**
 * A G3000 scrollable CAS display that supports the event bus scroll commands defined by {@link CASControlEvents}
 * and includes out-of-view message counts and a scroll bar.
 */
export declare class G3000FullCASDisplay2 extends DisplayComponent<G3000FullCASDisplay2Props> {
    private static readonly PRIORITY_TYPES;
    private thisNode?;
    private readonly scrollState;
    private readonly display;
    private readonly isScrollEnabled;
    private readonly messageAboveCount;
    private readonly messageBelowCount;
    private readonly highestPriority;
    private readonly scrollableFrac;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=G3000CASDisplay2.d.ts.map