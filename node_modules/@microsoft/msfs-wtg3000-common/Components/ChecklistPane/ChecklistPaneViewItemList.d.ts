import { ChecklistSet, ComponentProps, DisplayComponent, NodeInstance, Subscribable, SubscribableArray, VNode } from '@microsoft/msfs-sdk';
import { GarminChecklistItem, GarminChecklistItemTypeDefMap } from '@microsoft/msfs-garminsdk';
import { G3000ChecklistGroupMetadata, G3000ChecklistMetadata } from '../../Checklist/G3000ChecklistDefinition';
import './ChecklistPaneViewItemList.css';
/**
 * Component props for {@link ChecklistPaneViewItemList}.
 */
export interface ChecklistPaneViewItemListProps extends ComponentProps {
    /** The checklist set containing the items rendered by the list. */
    checklistSet: ChecklistSet<GarminChecklistItemTypeDefMap, G3000ChecklistMetadata, G3000ChecklistGroupMetadata, void, void>;
    /** The checklist items to render in the list. */
    items: SubscribableArray<GarminChecklistItem>;
    /**
     * The index of the selected checklist item. If the index is less than zero, then the list will scroll to the top.
     * If the index is greater than or equal to the number of rendered list items, then the list will scroll to the
     * bottom. Otherwise, the list will scroll to keep the selected item in the middle of the visible list area.
     */
    selectedIndex: Subscribable<number>;
}
/**
 * A list that displays checklist items.
 */
export declare class ChecklistPaneViewItemList extends DisplayComponent<ChecklistPaneViewItemListProps> {
    private readonly rootRef;
    private readonly itemContainerRef;
    private readonly itemsArray;
    private dynamicList?;
    private readonly itemsRefreshDebounce;
    private readonly refreshItemsFunc;
    private scrollPosition;
    private readonly scrollTransform;
    private readonly scrollbarTransform;
    private readonly stageRefreshItemStyling;
    private readonly refreshItemStyling;
    private itemsSub?;
    private selectedIndexSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Gets the rendered instance of a data item in this list.
     * @param index The index of the data item for which to get the rendered instance.
     * @returns The rendered instance of the specified data item, or `undefined` if `index` is out of bounds.
     */
    getRenderedItem(index: number): NodeInstance | undefined;
    /**
     * Refreshes this list's styling. This method should be called whenever the list's width or height changes.
     */
    refreshStyling(): void;
    /**
     * Updates this list's scroll position.
     */
    private updateScrollPosition;
    /**
     * Responds to when the items to render in this list change.
     */
    private onItemsChanged;
    /**
     * Refreshes the items rendered in this list.
     */
    private refreshItems;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a checklist item.
     * @param item The item to render.
     * @param index The index of the item to render.
     * @returns The rendered checklist item, as a VNode.
     */
    private renderItem;
    /** @inheritDoc */
    destroy(): void;
}
/**
 * Component props for {@link ChecklistPaneViewItem}.
 */
export interface ChecklistPaneViewItemProps extends ComponentProps {
    /** The checklist set containing the item to display. */
    checklistSet: ChecklistSet<GarminChecklistItemTypeDefMap, G3000ChecklistMetadata, G3000ChecklistGroupMetadata, void, void>;
    /** The index of the checklist item to display. */
    index: number;
    /** The checklist item to display. */
    item: GarminChecklistItem;
    /** The index of the selected checklist item. */
    selectedIndex: Subscribable<number>;
}
/**
 * A display for a checklist item.
 */
export declare class ChecklistPaneViewItem extends DisplayComponent<ChecklistPaneViewItemProps> {
    private readonly rootRef;
    private readonly contentRef;
    /** This display's checklist item. */
    readonly item: GarminChecklistItem;
    private readonly isSelected;
    /**
     * Gets this display's root element.
     * @returns This display's root element.
     * @throws Error if this display has not been rendered to the DOM.
     */
    getRootElement(): HTMLDivElement;
    /**
     * Checks whether this display's item has a user-toggleable state.
     * @returns Whether this display's item has a user-toggleable state.
     * @throws Error if this display has not been rendered to the DOM.
     */
    isToggleable(): boolean;
    /**
     * Gets the indexes of the link target of this display's item.
     * @returns The indexes of the link target of this display's item, or `undefined` if this display's item is not a
     * link item or if the link could not be resolved.
     * @throws Error if this display has not been rendered to the DOM.
     */
    getLinkTargetIndexes(): readonly [groupIndex: number, listIndex: number, branchIndex: number] | undefined;
    /**
     * Stages a refresh of this display's styling. This will pre-compute refreshed styles for this display but will not
     * apply the refreshed styles. Calling `refreshStyling()` after this method will apply the staged refresh. This
     * method should be called whenever the display's width changes.
     */
    stageRefreshStyling(): void;
    /**
     * Applies any currently staged refresh of this display's styling. This method should be called after
     * `stageRefreshStyling()`.
     */
    refreshStyling(): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this display's contents.
     * @returns This display's contents, as a VNode, or `null` if there are no contents to render.
     */
    private renderContent;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=ChecklistPaneViewItemList.d.ts.map