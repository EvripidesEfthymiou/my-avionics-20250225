import { ChecklistBranch, ChecklistGroup, ChecklistItemType, ChecklistList, EventBus, Subscribable } from '@microsoft/msfs-sdk';
import { GarminChecklistItem, GarminChecklistItemTypeDefMap } from '@microsoft/msfs-garminsdk';
import { G3000ChecklistStateProvider } from '../../Checklist/G3000ChecklistStateProvider';
import { DisplayPaneIndex } from '../DisplayPanes/DisplayPaneTypes';
import { ChecklistPaneStateBranchStackEntry } from './ChecklistPaneStateEvents';
/**
 * Type definitions for checklist items that can be selected.
 */
type SelectableChecklistItemDef = GarminChecklistItem<ChecklistItemType.Actionable | ChecklistItemType.Branch | ChecklistItemType.Link | ChecklistItemType.Note>;
/**
 * A manager for the state of a checklist pane view. The manager tracks the view's selected checklist group, checklist,
 * and checklist item and publishes the information to the event bus topics defined in `ChecklistPaneStateEvents`. The
 * view's selections can be changed through the manager using either the event bus topics defined in
 * `ChecklistPaneStateControlEvents` or the methods defined on the manager itself.
 */
export declare class ChecklistPaneStateManager {
    private readonly displayPaneIndex;
    private readonly bus;
    private readonly checklistStateProvider;
    private readonly publisher;
    private readonly _selectedGroupIndex;
    readonly selectedGroupIndex: Subscribable<number>;
    private readonly _selectedGroup;
    readonly selectedGroup: Subscribable<ChecklistGroup<GarminChecklistItemTypeDefMap, unknown, unknown, unknown> | null>;
    private readonly _selectedListIndex;
    readonly selectedListIndex: Subscribable<number>;
    private readonly _selectedList;
    readonly selectedList: Subscribable<ChecklistList<GarminChecklistItemTypeDefMap, unknown, unknown> | null>;
    private readonly _selectedBranchStack;
    readonly selectedBranchStack: Subscribable<readonly Readonly<ChecklistPaneStateBranchStackEntry>[]>;
    readonly selectedBranchIndex: import("@microsoft/msfs-sdk").MappedSubscribable<number>;
    private readonly _selectedBranch;
    readonly selectedBranch: Subscribable<ChecklistBranch<GarminChecklistItemTypeDefMap, unknown> | null>;
    private readonly _selectedItemIndex;
    readonly selectedItemIndex: Subscribable<number>;
    private readonly _selectedItem;
    readonly selectedItem: Subscribable<SelectableChecklistItemDef | null>;
    /**
     * Creates a new instance of ChecklistPaneStateManager.
     * @param displayPaneIndex The index of the parent display pane of the manager's view.
     * @param bus The event bus.
     * @param checklistStateProvider A provider of checklist state.
     */
    constructor(displayPaneIndex: DisplayPaneIndex, bus: EventBus, checklistStateProvider: G3000ChecklistStateProvider);
    /**
     * Deselects zero or more selections tracked by this manager.
     * @param item Whether to deselect the currently selected checklist item.
     * @param branch Whether to deselect the currently selected checklist branch. Defaults to `false`.
     * @param list Whether to deselect the currently selected checklist. Defaults to `false`.
     * @param group Whether to deselect the currently selected checklist group. Defaults to `false`.
     */
    deselect(item: boolean, branch?: boolean, list?: boolean, group?: boolean): void;
    /**
     * Selects a checklist group.
     * @param groupIndex The index of the group to select.
     * @param listIndex The index of the checklist to select after the group is selected. If not defined, then the first
     * checklist in the group will be selected, if one exists. Ignored if a group is not selected.
     * @param branchIndex The index of the checklist branch to select, or `-1` to select the base checklist.
     * @param returnItemIndex The index of the checklist item to select when returning from the branch to select to the
     * previously selected branch or base checklist. Ignored if no checklist or the base checklist is selected.
     * @param itemIndex The index of the checklist item to select after the group's checklist is selected. If not
     * defined, then the first selectable item in the checklist will be selected, if one exists. Ignored if a checklist
     * is not selected.
     */
    selectGroup(groupIndex: number, listIndex?: number, branchIndex?: number, returnItemIndex?: number, itemIndex?: number): void;
    /**
     * Selects a checklist in the currently selected group. This method does nothing if there is no currently selected
     * group.
     * @param listIndex The index of the checklist to select.
     * @param branchIndex The index of the checklist branch to select, or `-1` to select the base checklist.
     * @param returnItemIndex The index of the checklist item to select when returning from the branch to select to the
     * previously selected branch or base checklist. Ignored if no checklist or the base checklist is selected.
     * @param itemIndex The index of the checklist item to select after the checklist is selected. If not defined, then
     * the first selectable item in the checklist will be selected, if one exists. Ignored if a checklist is not
     * selected.
     */
    selectList(listIndex: number, branchIndex: number, returnItemIndex?: number, itemIndex?: number): void;
    /**
     * Selects a checklist branch in the currently selected checklist. This method does nothing if there is no currently
     * selected checklist.
     * @param branchIndex The index of the checklist branch to select, or `-1` to select the base checklist. If the base
     * checklist is selected, then all entries in the selected checklist branch stack will be popped.
     * @param returnItemIndex The index of the checklist item to select when returning from the branch to select to the
     * previously selected branch or base checklist. Ignored if the base checklist is selected.
     * @param itemIndex The index of the checklist item to select after the checklist branch is selected. If not defined,
     * then the first selectable item in the branch will be selected, if one exists.
     */
    selectBranch(branchIndex: number, returnItemIndex?: number, itemIndex?: number): void;
    /**
     * Returns to the previous branch in the selected checklist branch stack. This method does nothing if there is no currently
     * selected checklist or if the base checklist is selected.
     */
    prevBranch(): void;
    /**
     * Selects an item in the currently selected checklist. This method does nothing if there is no currently selected
     * checklist.
     * @param itemIndex The index of the item to select. If the item at the specified index is not selectable, then the
     * current item selection will be retained.
     */
    selectItem(itemIndex: number): void;
    /**
     * Selects the first selectable checklist item in the currently selected checklist branch. This method does nothing
     * if there is no currently selected checklist or if there are no selectable items in the currently selected branch.
     * @returns Whether a checklist item was successfully selected.
     */
    selectFirstItem(): boolean;
    /**
     * Selects the next selectable checklist item in the currently selected checklist branch. If there is no currently
     * selected item, then the first selectable item in the branch will be selected. This method does nothing if there is
     * no currently selected checklist or if there are no selectable items after the currently selected item.
     * @returns Whether a new checklist item was successfully selected.
     */
    selectNextItem(): boolean;
    /**
     * Selects the previous selectable checklist item in the currently selected checklist branch. If there is no currently
     * selected item, then the last selectable item in the branch will be selected. This method does nothing if there is
     * no currently selected checklist or if there are no selectable items before the currently selected item.
     * @returns Whether a new checklist item was successfully selected.
     */
    selectPrevItem(): boolean;
    /**
     * Selects the next checklist in the currently selected checklist group. If there is no currently selected checklist,
     * then the first checklist in the group will be selected. This method does nothing if there is no currently selected
     * group or if there are no checklists after the currently selected checklist.
     * @returns Whether a new checklist was successfully selected.
     */
    selectNextList(): boolean;
    /**
     * Selects the previous checklist in the currently selected checklist group. If there is no currently selected
     * checklist, then the last checklist in the group will be selected. This method does nothing if there is no
     * currently selected group or if there are no checklists before the currently selected checklist.
     * @returns Whether a new checklist was successfully selected.
     */
    selectPrevList(): boolean;
    /**
     * Selects the next checklist group. If there is no currently selected group, then the first group will be selected.
     * This method does nothing if there are no groups after the currently selected group.
     * @returns Whether a new checklist group was successfully selected.
     */
    selectNextGroup(): boolean;
    /**
     * Selects the previous checklist group. If there is no currently selected group, then the last group will be
     * selected. This method does nothing if there are no groups before the currently selected group.
     * @returns Whether a new checklist group was successfully selected.
     */
    selectPrevGroup(): boolean;
    /**
     * Checks whether a checklist item is selectable.
     * @param item The item to check.
     * @returns Whether the specified checklist item is selectable.
     */
    private static isItemSelectable;
}
export {};
//# sourceMappingURL=ChecklistPaneStateManager.d.ts.map