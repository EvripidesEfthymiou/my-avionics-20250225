import { EventBus, VNode } from '@microsoft/msfs-sdk';
import { G3000ChecklistSetDef } from '../../Checklist/G3000ChecklistDefinition';
import { G3000ChecklistStateProvider } from '../../Checklist/G3000ChecklistStateProvider';
import { DisplayPaneView, DisplayPaneViewProps } from '../DisplayPanes/DisplayPaneView';
import { DisplayPaneViewEvent } from '../DisplayPanes/DisplayPaneViewEvents';
import { ChecklistPaneViewEventTypes } from './ChecklistPaneViewEvents';
import './ChecklistPaneView.css';
/**
 * Component props for {@link ChecklistPaneView}.
 */
export interface ChecklistPaneViewProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** The definition for the set of checklists displayed by the pane. */
    checklistDef: G3000ChecklistSetDef;
    /** A provider of checklist state. */
    checklistStateProvider: G3000ChecklistStateProvider;
}
/**
 * A display pane view which displays checklists.
 */
export declare class ChecklistPaneView extends DisplayPaneView<ChecklistPaneViewProps, DisplayPaneViewEvent<ChecklistPaneViewEventTypes>> {
    private static readonly NEXT_CHECKLIST_HIGHLIGHT_DURATION;
    private readonly checklistController;
    private readonly stateManager;
    private readonly headerGroupText;
    private readonly headerListText;
    private readonly headerBranchText;
    private readonly itemListRef;
    private readonly itemListData;
    private readonly itemListSelectedIndex;
    private needRefreshListStyling;
    private readonly isChecklistNotFinished;
    private readonly footerRightText;
    private readonly isFooterRightDisabled;
    private readonly isFooterRightSelected;
    private readonly isFooterRightHighlighted;
    private readonly footerRightHighlightDebounce;
    private readonly removeFooterRightHighlight;
    private checklistFinishedPipe?;
    private autoAdvanceSub?;
    private powerSub?;
    private readonly listItemSubs;
    private readonly pauseableSubs;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(): void;
    /** @inheritdoc */
    onUpdate(): void;
    /** @inheritDoc */
    onEvent(event: DisplayPaneViewEvent<ChecklistPaneViewEventTypes>): void;
    /**
     * Selects the previous element in the pane.
     */
    private selectPrev;
    /**
     * Selects the next element in the pane.
     */
    private selectNext;
    /**
     * Selects the next element in the pane after the currently selected branch item, skipping all branch item link items
     * whose parent branch item is the currently selected item. If the currently selected item is not a branch item, then
     * this method does nothing.
     */
    private selectNextSkipBranchItemLink;
    /**
     * Handles a push event on the currently selected element in the pane.
     */
    private pushSelected;
    /**
     * Returns to the previous branch (or base checklist) in the selected branch stack. If the selected item after
     * returning to the previous branch is a branch item link item whose target branch is completed, then the selection
     * will be advanced to the next element in the pane.
     */
    private goBackToPreviousBranch;
    /**
     * Handles a push event on a selected branch item.
     * @param itemIndex The index of the selected branch item.
     * @param item The selected branch item.
     */
    private pushBranchItem;
    /**
     * Selects a checklist. If the checklist is already selected, then this method does nothing.
     * @param groupIndex The index of the group containing the checklist to select.
     * @param listIndex The index of the checklist to select in its group.
     * @param branchIndex The index of the checklist branch to select, or -1 to select the base checklist.
     * @param returnItemIndex The index of the checklist item to select when returning from the branch to select to the
     * previously selected branch or base checklist. Ignored if no checklist or the base checklist is selected.
     */
    private selectList;
    /**
     * Toggles the state of an actionable item in the currently selected checklist. If the item is completed, then the
     * next selectable checklist item, or the Go to Next Checklist prompt if there are no selectable checklist items
     * after the completed item, will be automatically selected.
     * @param itemIndex The index of the item to toggle in its checklist.
     * @param item The item to toggle.
     */
    private toggleItem;
    /**
     * Selects the checklist or branch linked by a link item. If the link target cannot be resolved, then this method
     * does nothing.
     * @param itemIndex The index of the link item to follow in its checklist.
     * @param item The link item to follow.
     */
    private followLink;
    /**
     * Responds to when this pane's selected checklist branch stack changes.
     */
    private onSelectedBranchStackChanged;
    /**
     * Responds to when the index of this pane's selected checklist item changes.
     * @param index The index of the new selected checklist item.
     */
    private onSelectedItemIndexChanged;
    /**
     * Responds to when whether this pane's right footer prompt is selected changes.
     * @param isSelected Whether the right footer prompt is selected.
     */
    private onFooterRightSelectedChanged;
    /**
     * Responds to when the avionics global power status changes.
     * @param event Event data describing the change in avionics global power status.
     */
    private onAvionicsGlobalPowerChanged;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=ChecklistPaneView.d.ts.map