import { ComponentProps, DisplayComponent, EventBus, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { WeightBalanceConfig } from '../../Performance/WeightBalance/WeightBalanceConfig';
import { WeightBalanceUserSettingManager } from '../../Settings/WeightBalanceUserSettings';
import { WeightFuelUserSettingTypes } from '../../Settings/WeightFuelUserSettings';
import { WeightBalancePaneViewPanel } from './WeightBalancePaneViewPanel';
import './WeightBalancePaneViewGraph.css';
/**
 * Component props for {@link WeightBalancePaneViewGraph}.
 */
export interface WeightBalancePaneViewGraphProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** A weight and balance configuration object. */
    weightBalanceConfig: WeightBalanceConfig;
    /** A manager for weight/fuel user settings. */
    weightFuelSettingManager: UserSettingManager<WeightFuelUserSettingTypes>;
    /** A manager for weight and balance user settings. */
    weightBalanceSettingManager: WeightBalanceUserSettingManager;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * A CG vs weight graph panel for the weight and balance pane.
 */
export declare class WeightBalancePaneViewGraph extends DisplayComponent<WeightBalancePaneViewGraphProps> implements WeightBalancePaneViewPanel {
    private static readonly EMPTY_LINE_DASH;
    private static readonly GRID_LINE_WIDTH;
    private static readonly GRID_LINE_COLOR;
    private static readonly ENVELOPE_LINE_WIDTH;
    private static readonly ENVELOPE_LINE_COLOR;
    private static readonly CG_LINE_WIDTH;
    private static readonly CG_LINE_COLOR;
    private static readonly CG_LINE_CAUTION_COLOR;
    private isPaneInFullMode;
    private readonly weightUnitText;
    private readonly armUnitText;
    private readonly weightScaleLabelText;
    private readonly armScaleLabelText;
    private readonly plotAreaRef;
    private readonly canvasRef;
    private canvasContext;
    private readonly clipBounds;
    private readonly clipPathStream;
    private needRefreshPlot;
    private envelopeDef?;
    private scaleDef?;
    private scaleWidth;
    private scaleHeight;
    private readonly zeroFuelWeightSource;
    private readonly rampWeightSource;
    private readonly zeroFuelMomentSource;
    private readonly takeoffWeightSource;
    private readonly takeoffArmSource;
    private readonly takeoffMarkerMode;
    private readonly takeoffMarkerHidden;
    private readonly takeoffMarkerTransform;
    private readonly currentWeightSource;
    private readonly currentWeight;
    private readonly currentArmSource;
    private readonly currentArm;
    private readonly isCurrentMarkerOffscale;
    private readonly currentMarkerMode;
    private readonly currentMarkerHidden;
    private readonly currentMarkerTransform;
    private readonly landingWeightSource;
    private readonly landingWeight;
    private readonly landingArmSource;
    private readonly landingArm;
    private readonly landingMarkerMode;
    private readonly landingMarkerHidden;
    private readonly landingMarkerTransform;
    private readonly envelopeLegendText;
    private readonly subscriptions;
    private readonly canvasRefreshSubs;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(isPaneInFullMode: boolean): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(): void;
    /**
     * Refreshes this panel's plot parameters.
     */
    private refreshPlotParams;
    /**
     * Refreshes this panel's plot scale labels.
     */
    private refreshScaleLabels;
    /**
     * Refreshes this panel's plot canvas.
     */
    private refreshCanvas;
    /**
     * Draws a path depicting a weight and balance envelope limit to a path stream.
     * @param pathStream The path stream to which to draw.
     * @param def The definition for the envelope to draw.
     * @param scaleDef The definition for the graph scale to use when drawing the path.
     * @param x0 The x-coordinate of the bottom-left corner of the graph.
     * @param y0 The y-coordinate of the bottom-left corner of the graph.
     * @param x1 The x-coordinate of the top-right corner of the graph.
     * @param y1 The x-coordinate of the top-right corner of the graph.
     */
    private drawEnvelopePath;
    /**
     * Draws a path depicting center of gravity moment arm versus weight from ramp weight to zero-fuel weight to a path
     * stream.
     * @param pathStream The path stream to which to draw.
     * @param zeroFuelMoment The center of gravity moment, in pound-inches, at zero-fuel weight.
     * @param zeroFuelWeight The zero-fuel weight, in pounds.
     * @param rampWeight The ramp weight, in pounds.
     * @param scaleDef The definition for the graph scale to use when drawing the path.
     * @param x0 The x-coordinate of the bottom-left corner of the graph.
     * @param y0 The y-coordinate of the bottom-left corner of the graph.
     * @param x1 The x-coordinate of the top-right corner of the graph.
     * @param y1 The x-coordinate of the top-right corner of the graph.
     */
    private drawCgPath;
    /**
     * Resamples a path depicting center of gravity moment arm versus weight between two weights. The algorithm first
     * assumes that the path between the two weights is linear. The midpoint of the path is then checked for deviation
     * from linearity. If the deviation exceeds a certain threshold, then a new vertex for the path is created at the
     * midpoint and the two resulting sub-paths (from the beginning to the midpoint and from the midpoint to the end) are
     * resampled in turn.
     * @param pathStream The path stream to which to draw.
     * @param calcArm A function that calculates a center of gravity moment arm, in inches, for a given weight, in
     * pounds.
     * @param weight0 The first weight.
     * @param weight1 The second weight.
     * @param cgX0 The x-coordinate of the first moment arm.
     * @param cgY0 The y-coordinate of the first weight.
     * @param cgX1 The x-coordinate of the second moment arm.
     * @param cgY1 The y-coordinate of the second weight.
     * @param scaleDef The definition for the graph scale to use when resampling the path.
     * @param x0 The x-coordinate of the bottom-left corner of the graph.
     * @param y0 The y-coordinate of the bottom-left corner of the graph.
     * @param x1 The x-coordinate of the top-right corner of the graph.
     * @param y1 The x-coordinate of the top-right corner of the graph.
     * @param depth The current resampling depth.
     */
    private resampleCgPath;
    /**
     * Updates this panel's markers.
     */
    private updateMarkers;
    /**
     * Updates the position of one of this panel's markers.
     * @param weight The marker's weight, in pounds, or `null` if the value is uninitialized.
     * @param arm The marker's moment arm, in inches, or `null` if the value is uninitialized.
     * @param scaleDef The definition for the graph scale to use when positioning the marker.
     * @param x0 The x-coordinate of the bottom-left corner of the graph.
     * @param y0 The y-coordinate of the bottom-left corner of the graph.
     * @param x1 The x-coordinate of the top-right corner of the graph.
     * @param y1 The x-coordinate of the top-right corner of the graph.
     * @param hidden A mutable subscribable that controls the visibility of the marker.
     * @param transform A CSS transform subject that controls the position of the marker.
     * @param isOffscale A mutable subscribable that determines whether the marker is considered offscale.
     */
    private updateMarkerPosition;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders an SVG path for a takeoff marker icon.
     * @returns An SVG path for a takeoff marker icon, as a VNode.
     */
    private renderTakeoffMarkerPath;
    /**
     * Renders an SVG path for a landing marker icon.
     * @returns An SVG path for a landing marker icon, as a VNode.
     */
    private renderLandingMarkerPath;
    /**
     * Renders an SVG path for a current marker icon.
     * @returns An SVG path for a current marker icon, as a VNode.
     */
    private renderCurrentMarkerPath;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Rounds a nullable numeric value to a given precision.
     * @param precision The precision to which to round.
     * @param value The value to round.
     * @returns The specified value rounded to the specified precision, or `null` if the original value was `null`.
     */
    private static withPrecisionNullable;
}
//# sourceMappingURL=WeightBalancePaneViewGraph.d.ts.map