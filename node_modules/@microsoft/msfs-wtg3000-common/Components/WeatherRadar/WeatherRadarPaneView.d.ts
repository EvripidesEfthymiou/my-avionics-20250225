import { EventBus, VNode } from '@microsoft/msfs-sdk';
import { WeatherRadarDefinition } from '../../AvionicsConfig/SensorsConfig';
import { DisplayPaneSizeMode } from '../DisplayPanes/DisplayPaneTypes';
import { DisplayPaneView, DisplayPaneViewProps } from '../DisplayPanes/DisplayPaneView';
import { DisplayPaneViewEvent } from '../DisplayPanes/DisplayPaneViewEvents';
import './WeatherRadarPaneView.css';
/**
 * Component props for WeatherRadarPaneView.
 */
export interface WeatherRadarPaneViewProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** Configuration options for the weather radar. */
    config: WeatherRadarDefinition;
}
/**
 * A display pane view which displays a weather radar.
 */
export declare class WeatherRadarPaneView extends DisplayPaneView<WeatherRadarPaneViewProps> {
    private static readonly HORIZ_SCAN_PADDING;
    private static readonly VERT_SCAN_PADDING;
    private static readonly OPERATING_MODE_TEXT;
    private readonly radarRef;
    private readonly size;
    private readonly horizontalScanPadding;
    private readonly verticalScanPadding;
    private readonly operatingMode;
    private readonly isDataFailed;
    private readonly weatherRadarSettingManager;
    private readonly rangeSetting;
    private readonly gainSetting;
    private readonly range;
    private readonly gain;
    private readonly modeIndicatorText;
    private readonly scaleHidden;
    private readonly gainText;
    private readonly bannerHidden;
    private readonly bannerText;
    private readonly systemState;
    private readonly isScanActive;
    private readonly modeState;
    private gainPipe?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /**
     * Updates the size of the weather radar display.
     * @param size The size of this view's parent pane.
     * @param width The width of the weather radar, in pixels.
     * @param height The height of the weather radar, in pixels.
     */
    private updateSize;
    /** @inheritdoc */
    onUpdate(): void;
    /** @inheritdoc */
    onEvent(event: DisplayPaneViewEvent): void;
    /** @inheritDoc */
    onInteractionEvent(event: string): boolean;
    /**
     * Changes this pane's weather radar range index setting.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /** @inheritdoc */
    render(): VNode | null;
    /**
     * Renders this pane's color scale.
     * @returns This pane's color scale, as a VNode.
     */
    private renderColorScale;
    /**
     * Renders this pane's information box.
     * @returns This pane's information box, as a VNode.
     */
    private renderInfoBox;
    /**
     * Renders the standard 3-color scale bar and labels.
     * @returns The standard 3-color scale bar and labels, as a VNode.
     */
    private renderStandardColors;
    /**
     * Renders the extended 16-color scale bar and labels.
     * @returns The extended 16-color scale bar and labels, as a VNode.
     */
    private renderExtendedColors;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=WeatherRadarPaneView.d.ts.map