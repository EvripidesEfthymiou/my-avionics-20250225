import { AirportFacility, AirwayData, Facility, FacilitySearchType, IntersectionFacility, OneWayRunway } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
/** A set of functions for modifying a flight plan in the simplest way possible. */
export declare class TestingUtils {
    /**
     * Sets the origin for the flight plan.
     * @param fms The FMS.
     * @param ident The ICAO to set, like 'KDEN'.
     * @returns The origin facility.
     */
    static setOrigin(fms: Fms, ident: string): Promise<AirportFacility>;
    /**
     * Sets the origin for the flight plan.
     * @param fms The FMS.
     * @param origin The origin facility. Get this by calling setOrigin first.
     * @param runwayName The runway to set, like '34L'.
     * @returns The runway.
     * @throws Error if runway couldn't be found with given inputs.
     */
    static setOriginRunway(fms: Fms, origin: AirportFacility, runwayName: string): OneWayRunway;
    /**
     * Sets the destination for the flight plan.
     * @param fms The FMS.
     * @param ident The ICAO to set, like 'KCOS'.
     * @returns The destination facility.
     */
    static setDestination(fms: Fms, ident: string): Promise<AirportFacility>;
    /**
     * Removes the origin.
     * @param fms The FMS.
     */
    static removeOrigin(fms: Fms): void;
    /**
     * Removes the destination.
     * @param fms The FMS.
     */
    static removeDestination(fms: Fms): void;
    /**
     * Sets the destination for the flight plan.
     * @param fms The FMS.
     * @param ident The ident to search for.
     * @param segmentIndex The index of the segment to add the waypoint to.
     * @param segmentLegIndex The index inside the segment to insert the waypoint at (if none, append).
     * @returns The destination facility.
     */
    static insertWaypoint(fms: Fms, ident: string, segmentIndex: number, segmentLegIndex?: number): Promise<Facility>;
    /**
     * Sets the destination for the flight plan.
     * @param fms The FMS.
     * @param airwayName The name of the airway.
     * @param entryIdent The ident for the airway entry.
     * @param exitIdent The ident for the airway exit.
     * @param segmentIndex The index of the segment to add the waypoint to.
     * @param segmentLegIndex The index inside the segment to insert the waypoint at (if none, append).
     * @returns The destination facility.
     */
    static insertAirway(fms: Fms, airwayName: string, entryIdent: string, exitIdent: string, segmentIndex: number, segmentLegIndex: number): Promise<[AirwayData, IntersectionFacility, IntersectionFacility]>;
    /**
     * Checks for an airway at a leg and returns the airway.
     * @param fms The Fms.
     * @param entryIdent The icao of the entry to check.
     * @param airwayName The airway to search for.
     * @returns The airway object.
     */
    static getAirwayFromLeg(fms: Fms, entryIdent: string, airwayName: string): Promise<AirwayData>;
    /**
     * Searches for facilities matching ident, returns the nearest one.
     * @param fms The FMS.
     * @param ident The intersection ident to search for.
     * @returns The selected facility.
     */
    static findNearestIntersectionFromIdent(fms: Fms, ident: string): Promise<IntersectionFacility>;
    /**
     * Searches for facilities matching ident, returns the nearest one.
     * @param fms The FMS.
     * @param ident The ident to search for.
     * @param facilityType The facility type to search for.
     * @returns The selected facility.
     */
    static findNearestFacilityFromIdent(fms: Fms, ident: string, facilityType?: FacilitySearchType): Promise<Facility>;
    /**
     * Loads a departure.
     * @param fms The FMS.
     * @param origin The origin facility. Get this by calling setOrigin first.
     * @param departureName The departure name, like 'BAYLR6'.
     * @param runwayName The name of the runway, like '34L'.
     * @param transitionName The name of the enroute transition, like 'HBU'.
     * @throws Error if something couldn't be found with given inputs.
     */
    static loadDeparture(fms: Fms, origin: AirportFacility, departureName: string, runwayName: string, transitionName?: string): void;
    /**
     * Loads an arrival.
     * @param fms The FMS.
     * @param destination The destination facility. Get this by calling setDestination first.
     * @param arrivalName The name of the arrival, like 'DBRY4'.
     * @param transitionName The name of the arrival transition, like 'ALS'.
     * @param runwayTransitionName The name of the arrival runway transition, like '17R'.
     * @throws Error if something couldn't be found with given inputs.
     */
    static loadArrival(fms: Fms, destination: AirportFacility, arrivalName: string, transitionName?: string, runwayTransitionName?: string): void;
    /**
     * Loads an approach.
     * @param fms The FMS.
     * @param destination The destination facility. Get this by calling setDestination first.
     * @param approachName The name of the approach, like 'ILS 17L'.
     * @param transitionName The name of the approach transition, like 'BRK' or 'ADANE'.
     * @throws Error if something couldn't be found with given inputs.
     */
    static loadApproach(fms: Fms, destination: AirportFacility, approachName: string, transitionName?: string): Promise<void>;
    /**
     * Creates a direct to random to the given ident.
     * @param fms The Fms.
     * @param ident The ident.
     * @param course The magnetic course for the Direct To. If undefined, the Direct To will be initiated from the
     * airplane's present position.
     * @returns The facility matching the ident.
     */
    static directToRandom(fms: Fms, ident: string, course?: number): Promise<Facility>;
}
//# sourceMappingURL=TestingUtils.d.ts.map