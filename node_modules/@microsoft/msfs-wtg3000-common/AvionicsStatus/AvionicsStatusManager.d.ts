import { EventBus } from '@microsoft/msfs-sdk';
import { InstrumentType } from '../CommonTypes';
import { AvionicsStatus } from './AvionicsStatusTypes';
/**
 * A manager for G3000 avionics unit (GDUs and GTCs) status. Processes status updates received from instances of
 * {@link AvionicsStatusClient} and publishes avionics unit status events, including global power state events.
 */
export declare class AvionicsStatusManager {
    private readonly bus;
    private readonly syncPublisher;
    private readonly eventSyncPublisher;
    private readonly clients;
    private currentGlobalPower;
    private previousGlobalPower;
    private isAlive;
    private isInit;
    private syncSub?;
    private eventHandshakeRequestSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes this manager. Once initialized, this manager will keep track of the status of all
     * {@link AvionicsStatusClient} instances and publish them on the event bus, along with the avionics global power
     * state.
     * @throws Error if this manager was destroyed.
     */
    init(): void;
    /**
     * Responds to when a status sync event is received.
     * @param data The event data.
     */
    private onStatusSyncReceived;
    /**
     * Updates the avionics global power state and if it has changed, publishes the change to the event bus.
     */
    private updateGlobalPower;
    /**
     * Responds to when an event client initializes a handshake.
     * @param uid The UID of the event client.
     */
    private onEventHandshakeInitialized;
    /**
     * Destroys this manager. Once destroyed, this manager will no longer keep track of avionics unit statuses or publish
     * events to the event bus.
     */
    destroy(): void;
}
/**
 * A client which tracks and sends the status of a G3000 avionics unit (GDU or GTC) to a central manager for
 * processing.
 */
export declare class AvionicsStatusClient {
    private readonly instrumentType;
    private readonly instrumentIndex;
    private readonly bus;
    private readonly syncPublisher;
    /** The UID of this client's avionics unit. */
    readonly uid: string;
    private status;
    private isAlive;
    private isInit;
    private hasSentInitialSync;
    private syncRequestSub?;
    /**
     * Constructor.
     * @param instrumentType The instrument type of this client's avionics unit.
     * @param instrumentIndex The instrument index of this client's avionics unit.
     * @param bus The event bus.
     */
    constructor(instrumentType: InstrumentType, instrumentIndex: number, bus: EventBus);
    /**
     * Initializes this client. Once initialized, this client will automatically send its status to a central manager.
     * @throws Error if this client was destroyed.
     */
    init(): void;
    /**
     * Sets the status of this client's avionics unit. If this client has been initialized, then the new status will
     * automatically be sent to the client's central manager.
     * @param status The status to set.
     * @throws Error if this client was destroyed.
     */
    setStatus(status: AvionicsStatus): void;
    /**
     * Sends this client's status to a central manager over the event bus.
     * @param isInitial Whether the status is to be sent as an initial sync.
     */
    private sendSyncData;
    /**
     * Destroys this client.
     */
    destroy(): void;
}
/**
 * A client which receives avionics status data from a central manager and publishes the data locally (i.e. only on the
 * client's hosting JS instrument) to the event bus as avionics status events.
 */
export declare class AvionicsStatusEventClient {
    readonly uid: string;
    private readonly bus;
    private readonly publisher;
    private readonly syncPublisher;
    private isAlive;
    private isInit;
    private isHandshakeComplete;
    private handshakeRequestSub?;
    private statusSyncSub?;
    private globalPowerSyncSub?;
    /**
     * Constructor.
     * @param uid This client's unique ID.
     * @param bus The event bus.
     */
    constructor(uid: string, bus: EventBus);
    /**
     * Initializes this client. Once initialized, this client will begin communicating with the central manager and
     * publish avionics status events as appropriate.
     * @throws Error if this client was destroyed.
     */
    init(): void;
    /**
     * Responds to when avionics unit status sync data is received from the central manager.
     * @param data The avionics unit status sync data that was received.
     */
    private onStatusSyncReceived;
    /**
     * Responds to when global power status sync data is received from the central manager.
     * @param data The global power status sync data that was received.
     */
    private onGlobalPowerSyncReceived;
    /**
     * Destroys this client.
     */
    destroy(): void;
}
//# sourceMappingURL=AvionicsStatusManager.d.ts.map