import { ReadonlyFloat64Array } from '@microsoft/msfs-sdk';
import { Config } from '../../Config/Config';
import { PerformanceWeightLimits } from '../PerformanceWeightLimits';
import { WeightBalanceEnvelopeOptions, WeightBalanceFuelStationDef, WeightBalanceLoadStationDef } from './WeightBalanceTypes';
/**
 * A configuration object which defines options related to weight and balance calculations.
 */
export declare class WeightBalanceConfig implements Config {
    /** The unit type in which weights are parsed. */
    private readonly weightUnit;
    /** The unit type in which moment arms are parsed. */
    private readonly armUnit;
    /** The label text to use to describe moment arms. */
    readonly armLabel: string;
    /** The short label text to use to describe moment arms. */
    readonly armLabelShort: string;
    /** The moment arm values, in inches, corresponding to LEMAC and TEMAC, as `[lemac, temac]`. */
    readonly macArm?: ReadonlyFloat64Array;
    /** The aircraft's weight, in pounds, when all load stations are disabled and with no fuel. */
    readonly aircraftEmptyWeight: number;
    /** The aircraft's center-of-gravity moment arm, in inches, when all load stations are disabled and with no fuel. */
    readonly aircraftEmptyArm: number;
    /** An array of definitions for load stations. */
    readonly loadStationDefs: readonly Readonly<WeightBalanceLoadStationDef>[];
    /** Whether at least one load station can be edited. */
    readonly areLoadStationsEditable: boolean;
    /** The definition for the aircraft's fuel station. */
    readonly fuelStationDef: Readonly<WeightBalanceFuelStationDef>;
    /** Options for weight and balance envelopes. */
    readonly envelopeOptions: Readonly<WeightBalanceEnvelopeOptions>;
    /**
     * Creates a new WeightBalanceConfig from a configuration document element.
     * @param element A configuration document element.
     * @param weightLimits Global aircraft weight limits and capacities.
     */
    constructor(element: Element, weightLimits: PerformanceWeightLimits);
    /**
     * Parses a weight value from an optional string input.
     * @param input The input to parse.
     * @returns The weight value parsed from the specified input, in pounds, or `null` if the input was nullish, or
     * `undefined` if the input string could not be parsed into a valid finite weight value.
     */
    private parseWeight;
    /**
     * Parses an array of load station definitions from a configuration document element.
     * @param element A configuration document element.
     * @returns An array containing the load station definitions defined by the configuration document element.
     */
    private parseLoadStationDefs;
    /**
     * Parses a load station definition from a configuration document element.
     * @param element A configuration document element.
     * @param globalArmRange The global range of valid load station moment arm values to enforce, as `[minimum, maximum]`
     * in inches.
     * @returns The load station definition defined by the configuration document element, or `undefined` if a definition
     * could not be parsed.
     */
    private parseLoadStationDef;
    /**
     * Parses a fuel station definition from a configuration document element.
     * @param element A configuration document element.
     * @returns The fuel station definition defined by the configuration document element.
     * @throws Error if `element` is `null`.
     */
    private parseFuelStationDef;
    /**
     * Parses a set of envelope options from a configuration document element.
     * @param element A configuration document element.
     * @param weightLimits Global aircraft weight limits and capacities.
     * @returns A set of envelope options defined by the configuration document element.
     * @throws Error if options could not be parsed.
     */
    private parseEnvelopeOptions;
    /**
     * Parses an envelope definition from a configuration document element.
     * @param element A configuration document element.
     * @param weightLimits Global aircraft weight limits and capacities.
     * @returns The envelope definition defined by the configuration document element, or `undefined` if a definition
     * could not be parsed.
     */
    private parseEnvelopeDef;
    /**
     * Parses an array of envelope moment arm breakpoints from a configuration document element.
     * @param minWeight The minimum envelope weight, in pounds.
     * @param maxWeight The maximum envelope weight, in pounds.
     * @param element A configuration document element.
     * @param macArm The MAC moment arm limits, as `[lemac, temac]` in inches. If defined, then the moment arm
     * breakpoints will be parsed under the assumption that the moment arm values are expressed in units of percent MAC.
     * @returns An array containing the envelope moment arm breakpoints defined by the configuration document element.
     * Each breakpoint is expressed as `[arm (inches), weight (pounds)]`.
     * @throws Error if a valid breakpoint array could not be parsed.
     */
    private parseEnvelopeArmBreakpoints;
    /**
     * Parses an envelope graph scale definition from a configuration document element.
     * @param element A configuration document element.
     * @param macArm The MAC moment arm limits, as `[lemac, temac]` in inches. If defined, then the moment arm
     * breakpoints will be parsed under the assumption that the moment arm values are expressed in units of percent MAC.
     * @returns An envelope graph scale definition defined by the configuration document element, or `undefined` if a
     * definition could not be parsed.
     */
    private parseEnvelopeGraphScaleDef;
}
//# sourceMappingURL=WeightBalanceConfig.d.ts.map