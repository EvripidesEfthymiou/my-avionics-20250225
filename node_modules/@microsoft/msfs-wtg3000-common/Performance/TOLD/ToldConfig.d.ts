import { NumberUnitReadOnly, UnitFamily } from '@microsoft/msfs-sdk';
import { Config, ResolvableConfig } from '../../Config/Config';
import { ToldRunwaySurfaceCondition } from './ToldTypes';
/**
 * A flaps configuration option for TOLD (takeoff/landing) performance calculations.
 */
export type ToldFlapsOption = {
    /** The name of this option. */
    name: string;
    /** The amount of flaps extension, in degrees, associated with this option. */
    extension: number;
};
/**
 * Flaps configuration options for TOLD (takeoff/landing) performance calculations.
 */
export type ToldFlapsOptions = {
    /** The index of the default flaps configuration option. */
    defaultIndex: number;
    /** Flaps configuration options. */
    options: readonly Readonly<ToldFlapsOption>[];
};
/**
 * Anti-ice options for TOLD (takeoff/landing) performance calculations.
 */
export type ToldAntiIceOptions = {
    /** The maximum tempreature at which the anti-ice ON option is selectable. */
    maxTemp: NumberUnitReadOnly<UnitFamily.Temperature>;
};
/**
 * States describing which TOLD (takeoff/landing) performance calculation thrust reverser settings are selectable.
 */
export declare enum ToldThrustReverserSelectable {
    /** Only the `false` thrust reverser setting is selectable. */
    OnlyFalse = "OnlyFalse",
    /** Only the `true` thrust reverser setting is selectable. */
    OnlyTrue = "OnlyTrue",
    /** Both the `true` and `false` thrust reverser settings are selectable. */
    Both = "Both"
}
/**
 * A function which checks which of the TOLD (takeoff/landing) performance calculation thrust reverser settings are
 * selectable for a given set of conditions.
 * @param surface The runway surface condition.
 * @param flaps The name of the flaps setting.
 * @param antiIce Whether anti-ice is on.
 * @returns Which of the TOLD (takeoff/landing) performance calculation thrust reverser settings are selectable for the
 * specified set of conditions.
 */
export type ToldThrustReverserSelectableChecker = (surface: ToldRunwaySurfaceCondition, flaps?: string, antiIce?: boolean) => ToldThrustReverserSelectable;
/**
 * Thrust reverser options for TOLD (takeoff/landing) performance calculations.
 */
export type ToldThrustReverserOptions = {
    /** A configuration object which resolves to a function which checks which thrust reverser settings are selectable. */
    selectable: ResolvableConfig<ToldThrustReverserSelectableChecker>;
};
/**
 * Rolling takeoff options for takeoff performance calculations.
 */
export type ToldRollingTakeoffOptions = {
    /** The default rolling takeoff option. */
    defaultOption: boolean;
};
/**
 * Autothrottle options for TOLD (takeoff/landing) performance calculations.
 */
export type ToldAutothrottleOptions = {
    /** A placeholder. */
    placeHolder: boolean;
};
/**
 * Takeoff performance calculation configuration options.
 */
export type TakeoffPerfConfigurationOptions = {
    /** Flaps configuration options. If not defined, flaps options are not supported. */
    flaps?: Readonly<ToldFlapsOptions>;
    /** Anti-ice options. If not defined, anti-ice options are not supported. */
    antiIce?: Readonly<ToldAntiIceOptions>;
    /** Thrust reverser options. If not defined, thrust reverser options are not supported. */
    thrustReverser?: Readonly<ToldThrustReverserOptions>;
    /** Rolling takeoff options. If not defined, rolling takeoff options are not supported. */
    rolling?: Readonly<ToldRollingTakeoffOptions>;
};
/**
 * Landing performance calculation configuration options.
 */
export type LandingPerfConfigurationOptions = {
    /** Flaps configuration options. If not defined, flaps options are not supported. */
    flaps?: Readonly<ToldFlapsOptions>;
    /** Anti-ice options. If not defined, anti-ice options are not supported. */
    antiIce?: Readonly<ToldAntiIceOptions>;
    /** Thrust reverser options. If not defined, thrust reverser options are not supported. */
    thrustReverser?: Readonly<ToldThrustReverserOptions>;
    /** Autothrottle options. If not defined, autothrottle options are not supported. */
    autothrottle?: Readonly<ToldAutothrottleOptions>;
};
/**
 * A configuration object which defines options related to TOLD (takeoff/landing) performance calculations.
 */
export declare class ToldConfig implements Config {
    /** Takeoff options. */
    readonly takeoff: Readonly<TakeoffPerfConfigurationOptions>;
    /** Landing options. */
    readonly landing: Readonly<LandingPerfConfigurationOptions>;
    /**
     * Creates a new ToldConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /**
     * Parses takeoff options from a configuration document element.
     * @param element A configuration document element.
     * @returns The takeoff options defined by the configuration document element.
     */
    private parseTakeoff;
    /**
     * Parses takeoff options from a configuration document element.
     * @param element A configuration document element.
     * @returns The takeoff options defined by the configuration document element.
     */
    private parseLanding;
    /**
     * Parses flaps options from a configuration document element.
     * @param element A configuration document element.
     * @returns The flaps options defined by the configuration document element, or `undefined` if the element is `null`.
     */
    private parseFlaps;
    /**
     * Parses a single flaps option from a configuration document element.
     * @param element A configuration document element.
     * @returns The flaps option defined by the configuration document element, or `undefined` if the element is malformed.
     */
    private parseFlapsOption;
    /**
     * Parses anti-ice options from a configuration document element.
     * @param element A configuration document element.
     * @returns The anti-ice options defined by the configuration document element, or `undefined` if the element is `null`.
     */
    private parseAntiIce;
    /**
     * Parses thrust reverser options from a configuration document element.
     * @param element A configuration document element.
     * @returns The thrust reverser options defined by the configuration document element, or `undefined` if the element is `null`.
     */
    private parseThrustReverser;
    /**
     * Parses rolling takeoff options from a configuration document element.
     * @param element A configuration document element.
     * @returns The rolling takeoff options defined by the configuration document element, or `undefined` if the element is `null`.
     */
    private parseRollingTakeoff;
    /**
     * Parses autothrottle options from a configuration document element.
     * @param element A configuration document element.
     * @returns The autothrottle options defined by the configuration document element, or `undefined` if the element is `null`.
     */
    private parseAutothrottle;
}
//# sourceMappingURL=ToldConfig.d.ts.map