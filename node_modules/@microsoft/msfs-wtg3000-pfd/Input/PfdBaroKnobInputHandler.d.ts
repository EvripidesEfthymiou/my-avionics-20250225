import { EventBus } from '@microsoft/msfs-sdk';
import { AltimeterDataProvider } from '@microsoft/msfs-garminsdk';
import { PfdIndex } from '@microsoft/msfs-wtg3000-common';
/**
 * Handles baro knob inputs for a PFD to change the baro setting for the PFD's altimeter.
 */
export declare class PfdBaroKnobInputHandler {
    readonly index: PfdIndex;
    private readonly bus;
    private readonly altimeterIndex;
    private readonly dataProvider;
    private readonly supportBaroPreselect;
    private readonly hEventPrefix;
    private readonly tooltipBaroSettingVar;
    private readonly tooltipBaroSetting;
    private keyEventManager?;
    private isAlive;
    private isInit;
    private readonly keyEventManagerReadyPromises;
    private hEventSub?;
    private baroStdSub?;
    private baroSettingPipe?;
    private baroPreselectPipe?;
    /**
     * Constructor.
     * @param index The index of this handler's parent PFD.
     * @param bus The event bus.
     * @param altimeterIndex The index of the sim altimeter controlled by this handler.
     * @param dataProvider A provider of altimeter data for this handler's parent PFD.
     * @param supportBaroPreselect Whether to support baro setting pre-select in STD BARO mode.
     */
    constructor(index: PfdIndex, bus: EventBus, altimeterIndex: number, dataProvider: AltimeterDataProvider, supportBaroPreselect: boolean);
    /**
     * Waits for this handler's key event manager to be ready.
     * @returns A Promise which will be fulfilled when this handler's key event manager is ready, or rejected if this
     * handler is destroyed before then.
     */
    private awaitKeyEventManagerReady;
    /**
     * Initializes this handler. Once this handler is initialized, it will change the baro setting for this handler's
     * PFD's altimeter in response to baro knob input events.
     * @returns A Promise which will be fulfilled when this handler is fully initialized, or rejected if this handler is
     * destroyed before then.
     */
    init(): Promise<void>;
    /**
     * Handles a baro knob input.
     * @param input The key of the input to handle, with the prefix removed.
     */
    private handleBaroKnobInput;
    /**
     * Destroys this handler.
     */
    destroy(): void;
}
//# sourceMappingURL=PfdBaroKnobInputHandler.d.ts.map