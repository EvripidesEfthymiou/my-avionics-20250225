import { AirspeedIndicatorConfig } from '../Components/Airspeed/AirspeedIndicatorConfig';
import { AltimeterConfig } from '../Components/Altimeter/AltimeterConfig';
import { AoaIndicatorConfig } from '../Components/Aoa/AoaIndicatorConfig';
import { CASConfig } from '../Components/CAS/CASConfig';
import { NavStatusBoxConfig } from '../Components/NavStatusBox/NavStatusBoxConfig';
import { VsiConfig } from '../Components/VSI/VsiConfig';
import { PfdLayoutConfig } from './PfdLayoutConfig';
/**
 * A configuration object which defines options for the G3000 PFD.
 */
export declare class PfdConfig {
    private readonly factory;
    /** A config which defines layout options. */
    readonly layout: PfdLayoutConfig;
    /** A config which defines options for the airspeed indicator. */
    readonly airspeedIndicator: AirspeedIndicatorConfig;
    /** A config which defines options for the altimeter. */
    readonly altimeter: AltimeterConfig;
    /** A config which defines options for the vertical speed indicator. */
    readonly vsi: VsiConfig;
    /** A config which defines options for the angle of attack indicator. */
    readonly aoaIndicator: AoaIndicatorConfig;
    /** A config which defines options for the navigation status box. */
    readonly navStatusBox: NavStatusBoxConfig;
    /** A config which defines options for the CAS display. */
    readonly cas: CASConfig;
    /**
     * Creates a PfdConfig from an XML configuration document.
     * @param xmlConfig An XML configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to the config's
     * instrument.
     */
    constructor(xmlConfig: Document, instrumentConfig: Element | undefined);
    /**
     * Parses a PFD layout configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The PFD layout configuration defined by the configuration document, or a default version if the document
     * does not define a valid configuration.
     */
    private parseLayout;
    /**
     * Parses an airspeed indicator configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The airspeed indicator configuration defined by the configuration document, or a default version if the
     * document does not define a valid configuration.
     */
    private parseAirspeedIndicatorConfig;
    /**
     * Parses an altimeter configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The altimeter configuration defined by the configuration document, or a default version if the document
     * does not define a valid configuration.
     */
    private parseAltimeterConfig;
    /**
     * Parses a vertical speed indicator configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The vertical speed indicator configuration defined by the configuration document, or a default version
     * if the document does not define a valid configuration.
     */
    private parseVsiConfig;
    /**
     * Parses an angle of attack indicator configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The angle of attack indicator configuration defined by the configuration document, or a default version
     * if the document does not define a valid configuration.
     */
    private parseAoaIndicatorConfig;
    /**
     * Parses a navigation status box configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The navigation status box configuration defined by the configuration document, or a default version
     * if the document does not define a valid configuration.
     */
    private parseNavStatusBoxConfig;
    /**
     * Parses a CAS display configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The CAR display configuration defined by the configuration document, or a default version if the
     * document does not define a valid configuration.
     */
    private parseCasConfig;
}
//# sourceMappingURL=PfdConfig.d.ts.map