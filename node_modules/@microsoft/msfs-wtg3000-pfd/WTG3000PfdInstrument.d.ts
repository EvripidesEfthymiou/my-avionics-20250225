/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { AvionicsConfig, G3000NavIndicator, G3000NavIndicatorName, G3000NavIndicators, G3000NavSource, G3000NavSources, WTG3000FsInstrument } from '@microsoft/msfs-wtg3000-common';
import { PfdConfig } from './Config/PfdConfig';
import './WTG3000_PFD.css';
/**
 * A G3000/5000 PFD instrument.
 * Primary Flight Display showing the the basic flight instruments.
 */
export declare class WTG3000PfdInstrument extends WTG3000FsInstrument {
    private readonly instrumentConfig;
    private readonly pfdIndex;
    private readonly pfdSensorsAliasedSettingManager;
    private readonly displayOverlayLayerRef;
    private readonly highlightRef;
    private readonly displayPaneContainerRef;
    private readonly mainContentHidden;
    private readonly displayOverlayShow;
    private readonly bootSplashHidden;
    private readonly hEventMap;
    protected readonly navSources: G3000NavSources;
    protected readonly navIndicators: G3000NavIndicators;
    private readonly flightPlanStore;
    private readonly flightPlanListManager;
    private readonly obsAutoSlew;
    private readonly trafficInstrument;
    private readonly trafficAvionicsSystem;
    private readonly trafficSystem;
    private readonly trafficAuralAlertManager;
    private readonly casSystem;
    private readonly displayPaneViewFactory;
    private readonly pfdSettingManager;
    private readonly gpsIntegrityDataProvider;
    private readonly radarAltimeterDataProvider;
    private readonly altimeterDataProvider;
    private readonly windDataProvider;
    private readonly vnavDataProvider;
    private readonly approachPreviewDataProvider;
    private readonly courseKnobHandler;
    private readonly baroKnobHandler;
    private readonly logicHost;
    private readonly pluginSystem;
    /**
     * Constructor.
     * @param instrument This instrument's parent BaseInstrument.
     * @param config This instrument's general configuration object.
     * @param instrumentConfig This instrument's instrument-specific configuration object.
     */
    constructor(instrument: BaseInstrument, config: AvionicsConfig, instrumentConfig: PfdConfig);
    /** @inheritdoc */
    protected createSystems(): void;
    /** @inheritDoc */
    protected createNavReferenceSources(): G3000NavSource[];
    /** @inheritDoc */
    protected createNavReferenceIndicators(): [G3000NavIndicatorName, G3000NavIndicator][];
    /**
     * Performs initialization tasks.
     */
    private doInit;
    /**
     * Initializes this instrument's plugins.
     */
    private initPlugins;
    /**
     * Performs initialization tasks after a 500-millisecond wait.
     */
    private doDelayedInit;
    /**
     * Registers display pane views with this instrument's display pane view factory.
     */
    private registerDisplayPaneViews;
    /**
     * Renders this instrument's components.
     * @returns This instrument's rendered components, as a VNode.
     */
    private renderComponents;
    /** Makes sure that we have the flight plan, requesting sync if needed. */
    private initFlightPlan;
    /** @inheritdoc */
    protected getBootDuration(): number;
    /** @inheritdoc */
    Update(): void;
    /**
     * Responds to changes in whether this instrument's main content is hidden.
     * @param hidden Whether this instrument's main content is hidden.
     */
    private onMainContentHiddenChanged;
    /**
     * Responds to when an H event is received.
     * @param hEvent The event that was received.
     */
    private onHEvent;
    /**
     * Handles a GDU interaction event.
     * @param event The event to handle.
     */
    private onGduInteractionEvent;
}
//# sourceMappingURL=WTG3000PfdInstrument.d.ts.map