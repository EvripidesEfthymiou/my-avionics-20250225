import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
/**
 * A data provider for a temperature information display.
 */
export interface TemperatureInfoDataProvider {
    /** The current outside (static) air temperature, in degrees Celsius. */
    readonly oat: Subscribable<number>;
    /** The current deviation of outside air temperature from ISA, in degrees Celsius. */
    readonly deltaIsa: Subscribable<number>;
    /** Whether this provider's data is in a failed state. */
    readonly isDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link TemperatureInfoDataProvider}.
 */
export declare class DefaultTemperatureInfoDataProvider implements TemperatureInfoDataProvider {
    private readonly bus;
    private readonly _oat;
    /** @inheritdoc */
    readonly oat: Subscribable<number>;
    private readonly isa;
    private readonly _deltaIsa;
    /** @inheritdoc */
    readonly deltaIsa: Subscribable<number>;
    private readonly _isDataFailed;
    /** @inheritdoc */
    readonly isDataFailed: Subscribable<boolean>;
    private readonly adcIndex;
    private readonly adcSystemState;
    private isInit;
    private isAlive;
    private isPaused;
    private adcIndexSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param adcIndex The index of the ADC that is the source of this provider's airspeed data.
     */
    constructor(bus: EventBus, adcIndex: number | Subscribable<number>);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=TemperatureInfoDataProvider.d.ts.map