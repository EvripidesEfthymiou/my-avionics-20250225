import { ComponentProps, DisplayComponent, EventBus, Subscribable, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { DateTimeUserSettingTypes, DmeUserSettingTypes, GpsIntegrityDataProvider, NavStatusBoxDataProvider, UnitsUserSettingManager, WindDataProvider } from '@microsoft/msfs-garminsdk';
import { G3000NavIndicators, PfdAliasedUserSettingTypes, PfdIndex, PfdSensorsUserSettingTypes, RadiosConfig } from '@microsoft/msfs-wtg3000-common';
import { PfdLayoutConfig } from '../../Config/PfdLayoutConfig';
import { NavStatusBoxConfig } from '../NavStatusBox/NavStatusBoxConfig';
import './BottomInfoPanel.css';
/**
 * Component props for BottomInfoPanel.
 */
export interface BottomInfoPanelProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The index of the PFD to which the panel belongs. */
    pfdIndex: PfdIndex;
    /** The PFD layout configuration object. */
    layoutConfig: PfdLayoutConfig;
    /** The radios configuration object. */
    radiosConfig: RadiosConfig;
    /** The configuration object for the navigation status box. */
    navStatusBoxConfig: NavStatusBoxConfig;
    /** The nav indicator collection for the PFD to which the panel belongs. */
    navIndicators: G3000NavIndicators;
    /** A provider of GPS position integrity data. */
    gpsIntegrityDataProvider: GpsIntegrityDataProvider;
    /** A data provider for a navigation status box. */
    navStatusBoxDataProvider: NavStatusBoxDataProvider;
    /** A provider of wind data. */
    windDataProvider: WindDataProvider;
    /** A manager for PFD sensors user settings. */
    pfdSensorsSettingManager: UserSettingManager<PfdSensorsUserSettingTypes>;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdAliasedUserSettingTypes>;
    /** A manager for DME user settings. */
    dmeSettingManager: UserSettingManager<DmeUserSettingTypes>;
    /** A manager for display unit user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** A manager for date/time user settings. */
    dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>;
    /** Whether the panel's parent PFD is in split mode. */
    isInSplitMode: Subscribable<boolean>;
    /** Whether the panel should be decluttered. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3000 PFD bottom information panel.
 *
 * The panel consists of five cells, lettered A through E from left to right. Cell C occupies the center of the panel.
 * Cells B and D (on either side of cell C) are only visible when the PFD is in full mode.
 *
 * Cell A contains some combination of two of the speed, temperature, wind, and time displays. Not all combinations are
 * valid due to space constraints.
 *
 * Cell B contains either (1) the NAV/DME information display, or (2) nothing if NAV/DME information is rendered in a
 * banner instead.
 *
 * Cell C contains either (1) the navigation status box, or (2) the bearing info displays if the navigation status box
 * is rendered in a banner instead.
 *
 * Cell D contains the bearing info displays if cell C contains the navigation status box. If instead the bearing info
 * displays are contained in cell C, cell D contains either (1) the time display, or (2) nothing.
 *
 * Cell E contains the time display or is empty. If the time display is normally contained in cell D, then cell E will
 * contain the time display when the PFD is in half mode.
 */
export declare class BottomInfoPanel extends DisplayComponent<BottomInfoPanelProps> {
    private readonly rootCssClass;
    private readonly speedInfoDataProvider;
    private readonly temperatureInfoDataProvider;
    private readonly timeInfoDataProvider;
    private readonly declutterNavDmeInfo;
    private readonly declutterBearingInfo;
    private thisNode?;
    private declutterSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this panel's separators.
     * @returns This panel's separators, as a VNode.
     */
    private renderSeparators;
    /**
     * Renders this panel's cell A content.
     * @returns This panel's cell A content, as a VNode.
     */
    private renderCellA;
    /**
     * Renders this panel's speed information display.
     * @returns This panel's speed information display, as a VNode.
     */
    private renderSpeedInfo;
    /**
     * Renders this panel's temperature information display.
     * @returns This panel's temperature information display, as a VNode, or `null` if this panel does not have such a
     * display.
     */
    private renderTemperatureInfo;
    /**
     * Renders this panel's wind display.
     * @returns This panel's wind display, as a VNode, or `null` if this panel does not have such a display.
     */
    private renderWindDisplay;
    /**
     * Renders this panel's time information display.
     * @returns This panel's time information display, as a VNode.
     */
    private renderTimeInfo;
    /**
     * Renders this panel's navigation status box.
     * @returns This panel's navigation status box, as a VNode, or `null` if this panel does not have such a
     * display.
     */
    private renderNavStatusBox;
    /**
     * Renders this panel's NAV/DME information display.
     * @returns This panel's NAV/DME information display, as a VNode, or `null` if this panel does not have such a
     * display.
     */
    private renderNavDmeInfo;
    /**
     * Renders this panel's bearing info displays.
     * @returns This panel's bearing info displays, as a VNode.
     */
    private renderBearingInfos;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=BottomInfoPanel.d.ts.map