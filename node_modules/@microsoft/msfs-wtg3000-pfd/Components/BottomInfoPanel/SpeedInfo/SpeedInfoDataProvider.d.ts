import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
/**
 * A data provider for a speed information display.
 */
export interface SpeedInfoDataProvider {
    /** The current true airspeed, in knots. */
    readonly tasKnots: Subscribable<number>;
    /** The current ground speed, in knots. */
    readonly gsKnots: Subscribable<number>;
    /** Whether air data is in a failed state. */
    readonly isAirDataFailed: Subscribable<boolean>;
    /** Whether GPS position is in dead reckoning mode. */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** Whether GPS data is in a failed state. */
    readonly isGpsDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link SpeedInfoDataProvider}.
 */
export declare class DefaultSpeedInfoDataProvider implements SpeedInfoDataProvider {
    private readonly bus;
    private readonly _tasKnots;
    /** @inheritdoc */
    readonly tasKnots: Subscribable<number>;
    private readonly _gsKnots;
    /** @inheritdoc */
    readonly gsKnots: Subscribable<number>;
    private readonly _isAirDataFailed;
    /** @inheritdoc */
    readonly isAirDataFailed: Subscribable<boolean>;
    private readonly fmsPosMode;
    /** @inheritdoc */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** @inheritdoc */
    readonly isGpsDataFailed: Subscribable<boolean>;
    private readonly adcIndex;
    private readonly adcSystemState;
    private readonly fmsPosIndex;
    private isInit;
    private isAlive;
    private isPaused;
    private adcIndexSub?;
    private fmsPosIndexSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param adcIndex The index of the ADC that is the source of this provider's airspeed data.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this provider's ground speed
     * data.
     */
    constructor(bus: EventBus, adcIndex: number | Subscribable<number>, fmsPosIndex: number | Subscribable<number>);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=SpeedInfoDataProvider.d.ts.map