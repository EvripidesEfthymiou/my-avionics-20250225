import { ComponentProps, DisplayComponent, EventBus, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { AirspeedIndicatorDataProvider } from '@microsoft/msfs-garminsdk';
import { VSpeedUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import { AirspeedIndicatorConfig } from './AirspeedIndicatorConfig';
import './G3000AirspeedIndicator.css';
/**
 * Component props for {@link G3000AirspeedIndicator}.
 */
export interface G3000AirspeedIndicatorProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The configuration object for the indicator. */
    config: AirspeedIndicatorConfig;
    /** A data provider for the altimeter. */
    dataProvider: AirspeedIndicatorDataProvider;
    /** A manager for reference V-speed settings. */
    vSpeedSettingManager: VSpeedUserSettingManager;
    /** Whether the indicator should be decluttered due to unusual attitudes. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3000 airspeed indicator.
 */
export declare class G3000AirspeedIndicator extends DisplayComponent<G3000AirspeedIndicatorProps> {
    private readonly ref;
    private readonly vSpeedAnnunciationDataProvider?;
    private isAlive;
    private isAwake;
    /**
     * Creates a new instance of G3000AirspeedIndicator.
     * @param props The properties of the component.
     */
    constructor(props: G3000AirspeedIndicatorProps);
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Wakes this indicator. While awake, this indicator will automatically update its appearance.
     * @throws Error if this indicator is dead.
     */
    wake(): void;
    /**
     * Puts this indicator to sleep. While asleep, this indicator will not automatically update its appearance.
     * @throws Error if this indicator is dead.
     */
    sleep(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=G3000AirspeedIndicator.d.ts.map