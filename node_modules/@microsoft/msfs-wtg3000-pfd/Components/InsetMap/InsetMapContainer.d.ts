import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem } from '@microsoft/msfs-garminsdk';
import { DisplayPaneSizeMode, DisplayPaneViewEvent, G3000FlightPlannerId, MapConfig, PfdIndex, PfdMapLayoutUserSettingTypes, PfdSensorsUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import './InsetMapContainer.css';
/**
 * Component props for InsetMapContainer.
 */
export interface InsetMapContainerProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system used by the map to display traffic. */
    trafficSystem: TrafficSystem;
    /** The index of the PFD to which the map belongs. */
    pfdIndex: PfdIndex;
    /** A configuration object defining options for the map. */
    config: MapConfig;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** Manager for PFD map layout user settings. */
    pfdMapLayoutSettingManager: UserSettingManager<PfdMapLayoutUserSettingTypes>;
}
/**
 * A container for the PFD inset map and traffic inset map.
 */
export declare class InsetMapContainer extends DisplayComponent<InsetMapContainerProps> {
    private readonly navMapRef;
    private readonly trafficMapRef;
    private readonly rootStyle;
    private readonly rootCssClass;
    private readonly mapSize;
    private readonly mapLayoutSetting;
    private activeMap;
    private readonly displayPaneSizeMode;
    private readonly mapLayoutState;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when this container's parent display pane is resized.
     * @param size The size of the parent display pane.
     */
    onResize(size: DisplayPaneSizeMode): void;
    /**
     * Responds to when this container's parent display pane view is updated.
     * @param time The current real time, as a UNIX timestamp in milliseconds.
     */
    onUpdate(time: number): void;
    /**
     * Responds to events sent to this container's parent display pane view.
     * @param event A display pane view event.
     */
    onEvent(event: DisplayPaneViewEvent): void;
    /**
     * Handles an interaction event.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=InsetMapContainer.d.ts.map