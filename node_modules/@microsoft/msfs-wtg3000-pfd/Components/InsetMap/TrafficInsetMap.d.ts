import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, ReadonlyFloat64Array, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem } from '@microsoft/msfs-garminsdk';
import { DisplayPaneViewEvent, G3000FlightPlannerId, MapConfig, PfdIndex, PfdSensorsUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import './TrafficInsetMap.css';
/**
 * Component props for TrafficInsetMap.
 */
export interface TrafficInsetMapProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system used by the map to display traffic. */
    trafficSystem: TrafficSystem;
    /** The index of the PFD to which the map belongs. */
    pfdIndex: PfdIndex;
    /** The projected size of the map. */
    projectedSize: Subscribable<ReadonlyFloat64Array>;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A configuration object defining options for the map. */
    config: MapConfig;
}
/**
 * A PFD traffic inset map.
 */
export declare class TrafficInsetMap extends DisplayComponent<TrafficInsetMapProps> {
    private static readonly UPDATE_FREQ;
    private static readonly UPDATE_PERIOD;
    private static readonly DATA_UPDATE_FREQ;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    private lastUpdateTime;
    private isInit;
    private isAwake;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Wakes this map.
     */
    wake(): void;
    /**
     * Wakes this map.
     */
    sleep(): void;
    /**
     * Updates this map.
     * @param time The current real time, as a UNIX timestamp in milliseconds.
     */
    update(time: number): void;
    /**
     * Responds to display pane view events.
     * @param event A display pane view event.
     */
    onEvent(event: DisplayPaneViewEvent): void;
    /**
     * Handles an interaction event.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=TrafficInsetMap.d.ts.map