import { DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { G3000FlightPlannerId } from '@microsoft/msfs-wtg3000-common';
import { AfcsStatusBoxPluginOptions } from './AfcsStatusBoxPluginOptions';
import './FmaMasterSlot.css';
import './FmaModeSlot.css';
import './Fma.css';
/**
 * Component props for Fma.
 */
export interface FmaProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** Whether the FMA supports autothrottle. */
    supportAutothrottle: boolean;
    /**
     * An array of options defined by plugins. The array should be ordered such that options defined by plugins that
     * were loaded earlier are positioned before options defined by plugins that were loaded later.
     */
    pluginOptions: readonly AfcsStatusBoxPluginOptions[];
}
/**
 * The G3000 FMA (aka AFCS status box).
 */
export declare class Fma extends DisplayComponent<FmaProps> {
    private static readonly MACH_FORMATTER;
    private readonly verticalModeTargetArrowStyle;
    private readonly autothrottleActiveCssClass;
    private readonly autothrottleIasCssClass;
    private readonly autothrottleMachCssClass;
    private readonly lastData;
    private lastVNavPathMode;
    private readonly fmaData;
    private readonly vnavPathMode;
    private readonly isApMasterActive;
    private readonly isYdMasterActive;
    private readonly apSlotState;
    private readonly ydSlotState;
    private readonly tempSlotActiveData;
    private readonly lateralSlotActiveData;
    private readonly verticalSlotActiveData;
    private readonly lateralArmedText;
    private readonly verticalArmedText;
    private readonly verticalApproachArmedText;
    private readonly vnavActiveText;
    private readonly vnavArmedText;
    private verticalModeTargetType;
    private readonly altitudeCaptureValue;
    private readonly selectedVs;
    private readonly selectedVsSign;
    private readonly isSelectedSpeedInMach;
    private readonly selectedIas;
    private readonly selectedMach;
    private readonly verticalModeTargetNumber;
    private readonly verticalModeTargetUnit;
    private readonly autothrottleFmaData;
    private readonly atSlotState;
    private readonly autothrottleArmedModeText;
    private readonly autothrottleActiveModeText;
    private readonly autothrottleTargetIasText;
    private readonly autothrottleTargetMachText;
    private readonly pluginLateralActiveLabels;
    private readonly pluginLateralArmedLabels;
    private readonly pluginVerticalActiveLabels;
    private readonly pluginVerticalArmedLabels;
    private isFdActiveSub?;
    private altitudeCaptureValuePipe?;
    private selectedVsPipe?;
    private selectedVsSignSub?;
    private isSelectedSpeedInMachSub?;
    private selectedIasPipe?;
    private selectedMachPipe?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Initializes the mode labels defined by plugins for this status box.
     */
    private initPluginModeLabels;
    /**
     * Updates this FMA from a specific set of data.
     * @param data The FMA data from which to update.
     * @param vnavPathMode The VNAV path mode.
     * @param lastData The previous FMA data.
     * @param lastVNavPathMode The previous VNAV path mode.
     */
    private updateFromFmaData;
    /**
     * Sets the vertical mode target type. The vertical mode target display will be automatically updated with the
     * appropriate information based on the target type.
     * @param type A vertical mode target type.
     */
    private setVerticalModeTargetType;
    /**
     * Gets the display text for an active autopilot vertical mode given a specific altitude capture mode.
     * @param mode An active autopilot vertical mode.
     * @param altCapMode An altitude capture mode.
     * @returns The display text for the specified active autopilot vertical mode and altitude capture mode.
     */
    private getVerticalActiveString;
    /**
     * Gets the display text for an armed autopilot vertical mode given a specific active vertical mode, armed altitude
     * capture mode, and VNAV path mode.
     * @param mode An armed autopilot vertical mode.
     * @param activeMode An active autopilot vertical mode.
     * @param isAltCapArmed Whether altitude capture mode is armed.
     * @param altCapMode An altitude capture mode.
     * @param vnavPathMode A VNAV path mode.
     * @returns The display text for the specified armed autopilot vertical mode, active vertical mode, armed altitude
     * capture mode, and VNAV path mode.
     */
    private getVerticalArmedString;
    /**
     * Gets the display text for an armed autopilot vertical approach mode given a specific armed vertical mode and
     * altitude capture mode arm state.
     * @param mode An armed autopilot vertical approach mode.
     * @param verticalArmedMode An armed autopilot vertical mode.
     * @param isAltCapArmed Whether altitude capture mode is armed.
     * @returns The display text for the specified armed autopilot vertical approach mode, armed vertical mode and
     * altitude capture mode arm state.
     */
    private getVerticalApproachArmedString;
    /**
     * Gets the display text for an active autopilot lateral mode.
     * @param mode An active autopilot lateral mode.
     * @returns The display text for the specified active autopilot lateral mode.
     */
    private getLateralActiveString;
    /**
     * Gets the display text for an armed autopilot lateral mode.
     * @param mode An armed autopilot lateral mode.
     * @returns The display text for the specified armed autopilot lateral mode.
     */
    private getLateralArmedString;
    /**
     * Updates this FMA from a specific set of autothrottle data.
     * @param data The autothrottle FMA data from which to update.
     */
    private updateFromAutothrottleFmaData;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=Fma.d.ts.map