import { ComponentProps, DisplayComponent, EventBus, ReadonlyFloat64Array, Subscribable, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { TcasRaCommandDataProvider, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { HorizonConfig, PfdAliasedUserSettingTypes, PfdIndex, PfdSensorsUserSettingTypes } from '@microsoft/msfs-wtg3000-common';
import './ArtificialHorizon.css';
import './AttitudeAircraftSymbol.css';
import './FlightDirectorDualCue.css';
import './FlightDirectorSingleCue.css';
import './FlightPathMarker.css';
import './HorizonDisplay.css';
import './PitchLadder.css';
import './PitchLimitIndicator.css';
import './RollIndicator.css';
import './RollLimitIndicators.css';
import './TcasRaPitchCueLayer.css';
/**
 * Component props for {@link HorizonDisplay}.
 */
export interface HorizonDisplayProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The index of the PFD to which the horizon display belongs. */
    pfdIndex: PfdIndex;
    /** The configuration object for the display. */
    config: HorizonConfig;
    /** The projected size of the horizon display, as `[width, height]` in pixels. */
    projectedSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The projected offset of the center of the projection, as `[x, y]` in pixels. */
    projectedOffset: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The bank angle limit, in degrees, in low-bank mode. */
    lowBankAngle: number;
    /** A provider of TCAS-II resolution advisory vertical speed command data. Required to display TCAS RA pitch cues. */
    tcasRaCommandDataProvider?: TcasRaCommandDataProvider;
    /** A manager for PFD sensors user settings. */
    pfdSensorsSettingManager: UserSettingManager<PfdSensorsUserSettingTypes>;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdAliasedUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether to declutter the display. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3000 PFD horizon display.
 */
export declare class HorizonDisplay extends DisplayComponent<HorizonDisplayProps> {
    private readonly ref;
    private readonly isSvtEnabled;
    private readonly flightDirectorFormat;
    private readonly numericConfigResults;
    private isAwake;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Wakes this horizon display. While awake, this display will be updated.
     * @throws Error if this horizon display is dead.
     */
    wake(): void;
    /**
     * Puts this horizon display to sleep. While asleep, this display will not be updated.
     * @throws Error if this horizon display is dead.
     */
    sleep(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Gets pitch ladder styling options for a normal field of view.
     * @returns Pitch ladder styling options for a normal field of view.
     */
    private static getNormalFovPitchLadderStyles;
    /**
     * Gets pitch ladder styling options for an extended field of view.
     * @returns Pitch ladder styling options for an extended field of view.
     */
    private static getExtendedFovPitchLadderStyles;
}
//# sourceMappingURL=HorizonDisplay.d.ts.map