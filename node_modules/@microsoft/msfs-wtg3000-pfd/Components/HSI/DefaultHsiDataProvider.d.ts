import { EventBus, GeoPointInterface, Subscribable } from '@microsoft/msfs-sdk';
import { G3000NavIndicator } from '@microsoft/msfs-wtg3000-common';
import { HsiDataProvider } from './HsiDataProvider';
/**
 * A default implementation of {@link HsiDataProvider}.
 */
export declare class DefaultHsiDataProvider implements HsiDataProvider {
    private readonly bus;
    readonly activeNavIndicator: G3000NavIndicator;
    readonly approachPreviewIndicator: G3000NavIndicator;
    readonly bearing1Indicator: G3000NavIndicator;
    readonly bearing2Indicator: G3000NavIndicator;
    private readonly _headingMag;
    /** @inheritdoc */
    readonly headingMag: Subscribable<number>;
    private readonly _turnRate;
    /** @inheritdoc */
    readonly turnRate: Subscribable<number>;
    private readonly isOnGround;
    private readonly trackMagSource;
    /** @inheritdoc */
    readonly trackMag: Subscribable<number>;
    private readonly _position;
    /** @inheritdoc */
    readonly position: Subscribable<GeoPointInterface>;
    private readonly _magVar;
    /** @inheritdoc */
    readonly magVar: Subscribable<number>;
    private readonly _selectedHeadingMag;
    /** @inheritdoc */
    readonly selectedHeadingMag: Subscribable<number>;
    private readonly _isHdgSyncModeActive;
    /** @inheritdoc */
    readonly isHdgSyncModeActive: Subscribable<boolean>;
    private readonly isLNavTracking;
    private readonly lnavXtkSource;
    /** @inheritdoc */
    readonly lnavXtk: Subscribable<number | null>;
    private readonly obsSuspDataProvider;
    /** @inheritdoc */
    readonly obsSuspMode: Subscribable<import("@microsoft/msfs-garminsdk").ObsSuspModes>;
    /** @inheritdoc */
    readonly obsCourse: Subscribable<number>;
    private readonly isHeadingDataValid;
    /** @inheritdoc */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    private readonly fmsPosMode;
    /** @inheritdoc */
    readonly isGpsDataFailed: Subscribable<boolean>;
    private readonly ahrsIndex;
    private readonly fmsPosIndex;
    private readonly pauseable;
    private isInit;
    private isAlive;
    private isPaused;
    private ahrsIndexSub?;
    private fmsPosIndexSub?;
    private positionSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param ahrsIndex The index of the ADC that is the source of this provider's data.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this provider's data.
     * @param activeNavIndicator The nav indicator for the active nav source.
     * @param approachPreviewIndicator The nav indicator for the approach course preview.
     * @param bearing1Indicator The nav indicator for bearing pointer 1.
     * @param bearing2Indicator The nav indicator for bearing pointer 2.
     */
    constructor(bus: EventBus, ahrsIndex: number | Subscribable<number>, fmsPosIndex: number | Subscribable<number>, activeNavIndicator: G3000NavIndicator, approachPreviewIndicator: G3000NavIndicator, bearing1Indicator: G3000NavIndicator, bearing2Indicator: G3000NavIndicator);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=DefaultHsiDataProvider.d.ts.map