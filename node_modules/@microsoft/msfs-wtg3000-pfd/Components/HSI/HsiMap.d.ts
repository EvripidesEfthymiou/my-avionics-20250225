import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { DisplayPaneViewEvent, G3000FlightPlannerId, MapConfig, PfdIndex, PfdSensorsUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import { HsiDataProvider } from './HsiDataProvider';
import './HsiMap.css';
/**
 * Component props for HsiMap.
 */
export interface HsiMapProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system. */
    trafficSystem: TrafficSystem;
    /** The index of the PFD to which the HSI map belongs. */
    pfdIndex: PfdIndex;
    /** A configuration object defining options for the map. */
    config: MapConfig;
    /** A provider of HSI data. */
    dataProvider: HsiDataProvider;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether the map should be visible. */
    show: Subscribable<boolean>;
}
/**
 * An HSI component with a moving map.
 */
export declare class HsiMap extends DisplayComponent<HsiMapProps> {
    private static readonly UPDATE_FREQ;
    private static readonly UPDATE_PERIOD;
    private static readonly DATA_UPDATE_FREQ;
    private readonly compassRef;
    private readonly activeNavNeedleRef;
    private readonly approachPreviewNeedleRef;
    private readonly turnRateIndicatorRef;
    private readonly bearingPointer1Ref;
    private readonly bearingPointer2Ref;
    private readonly rootStyle;
    private readonly compassRotationStyle;
    private readonly headingBugStyle;
    private readonly deviationStyle;
    private readonly triangleDeviationStyle;
    private readonly diamondDeviationStyle;
    private readonly previewDeviationStyle;
    private readonly navSensitivityStyle;
    private readonly obsSuspStyle;
    private readonly deviationCssClass;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    private readonly headingState;
    private readonly headingValue;
    private readonly magVarCorrection;
    private readonly nominalHeading;
    private readonly compassRotation;
    private readonly nominalSelectedHeading;
    private readonly headingBugRotation;
    private readonly deviationTranslate;
    private readonly previewDeviationTranslate;
    private readonly deviationType;
    private readonly noDeviationText;
    private readonly navSourceText;
    private readonly isNavSensitivityVisible;
    private readonly navSensitivityText;
    private readonly isXtkVisible;
    private readonly lnavXtkPrecision;
    private readonly lnavXtk;
    private readonly isObsSuspLabelVisible;
    private readonly obsSuspText;
    private showSub?;
    private magVarCorrectionPipe?;
    private navAngleUnitsSub?;
    private turnRateSub?;
    private isHeadingDataFailedSub?;
    private lateralDeviationSub?;
    private toFromSub?;
    private previewDeviationSub?;
    private navSensitivityPipe?;
    private lnavXtkPipe?;
    private lnavXtkPrecisionSub?;
    private lastUpdateTime;
    private isInit;
    /**
     * A callback called when the component finishes rendering.
     */
    onAfterRender(): void;
    /**
     * Updates this map.
     * @param time The current real time, as a UNIX timestamp in milliseconds.
     */
    update(time: number): void;
    /**
     * Responds to display pane view events.
     * @param event A display pane view event.
     */
    onEvent(event: DisplayPaneViewEvent): void;
    /**
     * Handles an interaction event.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
    /**
     * Renders the HSIMap component.
     * @returns The rendered component VNode.
     */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=HsiMap.d.ts.map