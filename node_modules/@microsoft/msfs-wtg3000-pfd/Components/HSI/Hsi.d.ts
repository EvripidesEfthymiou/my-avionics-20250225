import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, Subscribable, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystem, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { DisplayPaneViewEvent, G3000FlightPlannerId, MapConfig, PfdIndex, PfdMapLayoutUserSettingTypes, PfdSensorsUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import { HsiDataProvider } from './HsiDataProvider';
import './Hsi.css';
/** Properties on the HSI component. */
export interface HSIProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the flight planner. */
    flightPlanner: FlightPlanner<G3000FlightPlannerId>;
    /** The traffic system. */
    trafficSystem: TrafficSystem;
    /** The index of the PFD to which the HSI belongs. */
    pfdIndex: PfdIndex;
    /** A configuration object defining options for the HSI map. */
    mapConfig: MapConfig;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** Manager for PFD map layout user settings. */
    pfdMapLayoutSettingManager: UserSettingManager<PfdMapLayoutUserSettingTypes>;
    /** A data provider for the HSI. */
    dataProvider: HsiDataProvider;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether the HSI should be decluttered. */
    declutter: Subscribable<boolean>;
}
/** The HSI component of the PFD. */
export declare class Hsi extends DisplayComponent<HSIProps> {
    private readonly hdgRef;
    private readonly crsRef;
    private readonly roseRef;
    private readonly mapRef;
    private readonly rootCssClass;
    private readonly hdgCrsHidden;
    private readonly hdgSyncModeHidden;
    private readonly showMap;
    private readonly selectedHeadingState;
    private readonly selectedHeadingValue;
    private readonly dtkCrsMag;
    private readonly dtkCrsState;
    private readonly dtkCrsValue;
    private readonly dtkCrsSourceState;
    private readonly dtkCrsTitleText;
    private readonly isAwake;
    private isAlive;
    private cdiSourceSub?;
    private navCoursePipe?;
    private obsCoursePipe?;
    private headingDataFailedSub?;
    private gpsDataFailedSub?;
    private declutterSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Wakes this HSI. When this HSI is awake, it will automatically update its appearance and respond to interaction
     * events.
     * @throws Error if this HSI has been destroyed.
     */
    wake(): void;
    /**
     * Puts this HSI to sleep. When this HSI is asleep, it will not be visible and will not respond to interaction
     * events.
     * @throws Error if this HSI has been destroyed.
     */
    sleep(): void;
    /**
     * Responds to when this HSI's parent display pane view is updated.
     * @param time The current real time, as a UNIX timestamp in milliseconds.
     */
    onUpdate(time: number): void;
    /**
     * Responds to events sent to this container's parent display pane view.
     * @param event A display pane view event.
     */
    onEvent(event: DisplayPaneViewEvent): void;
    /**
     * Handles an interaction event.
     * @param event The interaction event to handle.
     * @returns Whether the interaction event was handled.
     */
    onInteractionEvent(event: string): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=Hsi.d.ts.map