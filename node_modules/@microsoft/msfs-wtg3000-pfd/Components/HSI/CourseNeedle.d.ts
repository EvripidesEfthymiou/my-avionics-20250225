import { ComponentProps, DisplayComponent, ObjectSubject, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { G3000NavIndicator } from '@microsoft/msfs-wtg3000-common';
/**
 * Component props for CourseNeedle.
 */
export interface CourseNeedleProps extends ComponentProps {
    /** Whether the bearing pointer should use the HSI map style. */
    hsiMap: boolean;
    /** The nav indicator to use. */
    navIndicator: G3000NavIndicator;
    /** The magnetic variation correction to apply to the needle's magnetic course, in degrees. */
    magVarCorrection: Subscribable<number>;
    /** Whether heading data is in a failure state. */
    isHeadingDataFailed: Subscribable<boolean>;
    /**
     * The magnitude of the maximum allowed deflection of the CDI, scaled such that 1 is equal to full-scale (2 dots)
     * deflection. Defaults to 1.
     */
    maxCdiDeflection?: number;
    /** Whether the course needle should actively update. */
    isActive: Subscribable<boolean>;
}
/**
 * A course needle for an HSI.
 *
 * The course needle recognizes a total of four separate active NAV sources: two of type NAV (radio) and two of type
 * GPS. A CSS class is added to the needle's root element (e.g. `hsi-course-needle-nav1`) based on which source is
 * currently active.
 */
export declare abstract class CourseNeedle extends DisplayComponent<CourseNeedleProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly ANIMATION_RATE;
    private readonly rotationStyle;
    private readonly toFromStyle;
    private readonly deviationStyle;
    private readonly rootCssClass;
    private readonly maxCdiDeflection;
    private readonly nominalCourse;
    private readonly targetRotation;
    private readonly animator;
    private readonly deviationTranslate;
    private sourceSub?;
    private deviationSub?;
    private toFromSub?;
    private isHeadingDataFailedSub?;
    private isActiveSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Gets the CSS class(es) to apply to this needle's root element.
     * @returns The CSS class(es) to apply to this needle's root element.
     */
    protected getRootCssClass(): string;
    /**
     * Renders needles for an HSI rose.
     * @returns Needles for an HSI rose, as a VNode.
     */
    protected abstract renderRoseNeedle(rotationStyle: ObjectSubject<any>, deviationStyle: ObjectSubject<any>, toFromStyle: ObjectSubject<any>): VNode;
    /**
     * Renders needles for an HSI map.
     * @returns Needles for an HSI map, as a VNode.
     */
    protected abstract renderMapNeedle(rotationStyle: ObjectSubject<any>): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=CourseNeedle.d.ts.map