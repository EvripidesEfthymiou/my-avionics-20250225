import { ComponentProps, DisplayComponent, EventBus, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { G3000NavIndicator } from '@microsoft/msfs-wtg3000-common';
import './BearingInfo.css';
/**
 * Component props for BearingInfo.
 */
export interface BearingInfoProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The index of the bearing pointer associaed with the display. */
    index: 1 | 2;
    /** The number of supported ADF radios. */
    adfRadioCount: 0 | 1 | 2;
    /** The nav indicator associated with the bearing info display. */
    indicator: G3000NavIndicator;
    /** A manager for display unit user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether the display should be decluttered. */
    declutter: Subscribable<boolean>;
    /** The mode to display. */
    mode: 'center' | 'offset';
    /** The side on which the display is located. Ignored if `mode` is `offset`. Defaults to `left`. */
    side?: 'left' | 'right';
}
/**
 * A G3000 bearing info display.
 */
export declare class BearingInfo extends DisplayComponent<BearingInfoProps> {
    private readonly sourceFormatter;
    private readonly distanceRef;
    private readonly bearingRef;
    private readonly rootStyle;
    private readonly brgDisStyle;
    private readonly sourceText;
    private readonly identText;
    private readonly identState;
    private readonly isBrgDisVisible;
    private readonly distance;
    private readonly bearing;
    private readonly magVar;
    private readonly bearingState;
    private declutterSub?;
    private sourceSub?;
    private identSub?;
    private distancePipe?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this display's bearing pointer arrow icon.
     * @returns This display's bearing pointer arrow icon, as a VNode.
     */
    private renderArrows;
    /**
     * Renders this display's source field.
     * @returns This display's source field, as a VNode.
     */
    private renderSource;
    /**
     * Renders this display's ident field.
     * @returns This display's ident field, as a VNode.
     */
    private renderIdent;
    /**
     * Renders this display's distance field.
     * @returns This display's distance field, as a VNode.
     */
    private renderDistance;
    /**
     * Renders this display's bearing field.
     * @returns This display's bearing field, as a VNode.
     */
    private renderBearing;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=BearingInfo.d.ts.map