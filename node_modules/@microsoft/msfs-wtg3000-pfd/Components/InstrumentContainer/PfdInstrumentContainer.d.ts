import { CasSystem, EventBus, PluginSystem, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { AltimeterDataProvider, Fms, GpsIntegrityDataProvider, MinimumsDataProvider, RadarAltimeterDataProvider, TerrainSystemStateDataProvider, TrafficSystem, VNavDataProvider, WindDataProvider } from '@microsoft/msfs-garminsdk';
import { AvionicsConfig, DisplayPaneSizeMode, DisplayPaneView, DisplayPaneViewEvent, DisplayPaneViewProps, G3000NavIndicators, PfdAliasedUserSettingTypes, PfdSensorsUserSettingManager, VSpeedUserSettingManager } from '@microsoft/msfs-wtg3000-common';
import { PfdConfig } from '../../Config/PfdConfig';
import { G3000PfdPlugin, G3000PfdPluginBinder } from '../../G3000PFDPlugin';
import './PfdInstrumentContainer.css';
/**
 * Component props for PfdInstrumentContainer.
 */
export interface PfdInstrumentContainerProps extends DisplayPaneViewProps {
    /** The event bus. */
    bus: EventBus;
    /** The FMS. */
    fms: Fms;
    /** The traffic system. */
    trafficSystem: TrafficSystem;
    /** The configuration object for the pane's parent avionics system. */
    config: AvionicsConfig;
    /** The configuration object for the pane's parent PFD instrument. */
    instrumentConfig: PfdConfig;
    /** A collection of all navigation indicators. */
    navIndicators: G3000NavIndicators;
    /** A provider of GPS position integrity data. */
    gpsIntegrityDataProvider: GpsIntegrityDataProvider;
    /** A provider of altimeter data. */
    altimeterDataProvider: AltimeterDataProvider;
    /** A provider of radar altimeter data. If not defined, the radar altimeter display will not be rendered. */
    radarAltimeterDataProvider?: RadarAltimeterDataProvider;
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
    /** A provider of wind data. */
    windDataProvider: WindDataProvider;
    /** A provider of VNAV data. */
    vnavDataProvider: VNavDataProvider;
    /** A provider of terrain alerting system state data. */
    terrainSystemStateDataProvider: TerrainSystemStateDataProvider;
    /** A reference to this instrument's CAS system. */
    casSystem: CasSystem;
    /** A manager for all PFD sensors user settings. */
    pfdSensorsSettingManager: PfdSensorsUserSettingManager;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdAliasedUserSettingTypes>;
    /** A manager for reference V-speed user settings. */
    vSpeedSettingManager: VSpeedUserSettingManager;
    /** The plugin system for the pane's parent PFD instrument. */
    pluginSystem: PluginSystem<G3000PfdPlugin, G3000PfdPluginBinder>;
}
/**
 * A container for the main PFD instrument display.
 */
export declare class PfdInstrumentContainer extends DisplayPaneView<PfdInstrumentContainerProps> {
    private thisNode?;
    private readonly horizonRef;
    private readonly airspeedIndicatorRef;
    private readonly altimeterRef;
    private readonly hsiRef;
    private readonly insetMapRef;
    private readonly pfdIndex;
    private readonly pfdSensorsAliasedSettingManager;
    private readonly isInSplitMode;
    private readonly softKeyMenuSystem;
    private readonly softKeyEventMapper;
    private readonly horizonSize;
    private readonly horizonOffset;
    private readonly rootCssClass;
    private readonly altitudeAlerter;
    private readonly minimumsAlerter;
    private readonly aoaDataProvider;
    private readonly airspeedIndicatorDataProvider;
    private readonly hsiDataProvider;
    private readonly vdiDataProvider;
    private readonly waypointAlertComputer;
    private readonly navStatusDataProvider;
    private readonly obsSuspDataProvider;
    private readonly tcasAdvisoryDataProvider;
    private readonly tcasRaCommandDataProvider;
    private readonly markerBeaconDataProvider;
    private readonly declutterManager;
    private readonly trafficAlertMapManager;
    private readonly navDmeBannerPosition;
    private readonly declutterNavDmeBanner;
    private readonly declutterBearingInfoBanner;
    private readonly isHsiMapEnabled;
    private readonly hsiGpsIntegrityAnnuncMode;
    private readonly auralAlertPublisher;
    private auralAlertManager?;
    private readonly auralVoice;
    /**
     * Creates a new instance of PfdInstrumentContainer.
     * @param props The component props for the new instance.
     */
    constructor(props: PfdInstrumentContainerProps);
    /**
     * Initializes this container's softkey menu, if one exists.
     */
    private initSoftKeyMenu;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Initializes the altitude alert aural.
     */
    private initAltitudeAlertAural;
    /**
     * Initializes the minimums aural.
     */
    private initMinimumsAural;
    /** @inheritDoc */
    onResume(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritDoc */
    onResize(size: DisplayPaneSizeMode, width: number, height: number): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Updates the size of this container.
     * @param size The size of this container.
     * @param width The width of this container, in pixels.
     * @param height The height of this container, in pixels.
     */
    private updateSize;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onEvent(event: DisplayPaneViewEvent): void;
    /** @inheritDoc */
    onInteractionEvent(event: string): boolean;
    /**
     * Responds to when the status of this container's parent avionics unit changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=PfdInstrumentContainer.d.ts.map