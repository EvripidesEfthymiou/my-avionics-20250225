import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
import { GlidepathServiceLevel, VNavDataProvider, VdiDataProvider } from '@microsoft/msfs-garminsdk';
import { G3000NavIndicator } from '@microsoft/msfs-wtg3000-common';
/**
 * A default G3000 implementation of `VdiDataProvider`.
 */
export declare class DefaultVdiDataProvider implements VdiDataProvider {
    private readonly bus;
    private readonly vnavDataProvider;
    private readonly activeNavIndicator;
    private readonly gsPreviewNavIndicator;
    private readonly _hasGs;
    /** @inheritdoc */
    readonly hasGs: Subscribable<boolean>;
    private readonly _gsDeviation;
    /** @inheritdoc */
    readonly gsDeviation: Subscribable<number | null>;
    private readonly _gsDeviationIsPreview;
    /** @inheritdoc */
    readonly gsDeviationIsPreview: Subscribable<boolean>;
    private readonly _hasGp;
    /** @inheritdoc */
    readonly hasGp: Subscribable<boolean>;
    private readonly _gpServiceLevel;
    /** @inheritdoc */
    readonly gpServiceLevel: Subscribable<GlidepathServiceLevel>;
    private readonly _gpDeviation;
    /** @inheritdoc */
    readonly gpDeviation: Subscribable<number | null>;
    private readonly _gpDeviationIsPreview;
    /** @inheritdoc */
    readonly gpDeviationIsPreview: Subscribable<boolean>;
    private readonly _gpDeviationScale;
    /** @inheritdoc */
    readonly gpDeviationScale: Subscribable<number | null>;
    private readonly _hasVNav;
    /** @inheritdoc */
    readonly hasVNav: Subscribable<boolean>;
    private readonly _vnavDeviation;
    /** @inheritdoc */
    readonly vnavDeviation: Subscribable<number | null>;
    private readonly flightPhase;
    private readonly _isPastFaf;
    /** @inheritdoc */
    readonly isPastFaf: Subscribable<boolean>;
    private readonly gpServiceLevelSource;
    private readonly gpApproachGuidanceMode;
    private readonly ahrsIndex;
    private readonly isHeadingDataValid;
    private readonly headingMagSource;
    private readonly headingMag;
    private readonly isCourseInRange;
    private readonly activeNavHasGp;
    private readonly gpIsPreview;
    private readonly activeNavHasGs;
    private isInit;
    private isAlive;
    private isPaused;
    private ahrsIndexSub?;
    private gpDeviationPipe?;
    private gpIsPreviewSub?;
    private gpServiceLevelPipe?;
    private gpDeviationScalePipe?;
    private gsDeviationPipe?;
    private gsPreviewDeviationPipe?;
    private activeNavHasGpSub?;
    private activeNavIsGpsSub?;
    private activeNavHasGsSub?;
    private gsPreviewHasGsSub?;
    private isGpCourseInRangeSub?;
    private isGsCourseInRangeSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param ahrsIndex The index of the AHRS that is the source of this provider's heading data.
     * @param vnavDataProvider A provider of VNAV data.
     * @param activeNavIndicator The nav indicator for the active nav source.
     * @param gsPreviewNavIndicator The nav indicator for the glideslope preview.
     */
    constructor(bus: EventBus, ahrsIndex: number | Subscribable<number>, vnavDataProvider: VNavDataProvider, activeNavIndicator: G3000NavIndicator, gsPreviewNavIndicator: G3000NavIndicator);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=DefaultVdiDataProvider.d.ts.map