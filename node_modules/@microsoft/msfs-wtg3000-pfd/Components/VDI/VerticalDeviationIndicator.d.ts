import { ComponentProps, DisplayComponent, EventBus, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { VdiDataProvider } from '@microsoft/msfs-garminsdk';
import './VerticalDeviationIndicator.css';
/**
 * Component props for VerticalDeviationIndicator.
 */
export interface VerticalDeviationIndicatorProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** A data provider for the indicator. */
    dataProvider: VdiDataProvider;
    /** Whether the indicator should be decluttered. */
    declutter: Subscribable<boolean>;
    /**
     * Whether the indicator should support vertical deviation limit indicators for LNAV/VNAV glidepaths. Defaults to
     * `false`.
     */
    supportLimitIndicators?: boolean;
}
/**
 * A G3000 vertical deviation indicator.
 */
export declare class VerticalDeviationIndicator extends DisplayComponent<VerticalDeviationIndicatorProps> {
    /** The scale's maximum absolute deviation, as a factor of full-scale deflection. */
    private static readonly SCALE_MAX;
    /** The scale denoted by the vertical deviation limit indicators, in feet. */
    private static readonly LIMIT_INDICATOR_SCALE;
    private readonly vnavBugRef;
    private readonly gpBugRef;
    private readonly gsBugRef;
    private readonly rootStyle;
    private readonly upperDot1Style;
    private readonly lowerDot1Style;
    private readonly centerLineStyle;
    private readonly noSignalStyle;
    private readonly limitIndicatorContainerStyle;
    private readonly limitIndicatorTopStyle;
    private readonly limitIndicatorBottomStyle;
    private readonly rootCssClass;
    private readonly supportLimitIndicators;
    private readonly labelText;
    private readonly noSignalText;
    private readonly primaryType;
    private readonly showVNavBug;
    private readonly showGpBug;
    private readonly showGsBug;
    private readonly vnavBugDeviation;
    private readonly gpBugDeviation;
    private readonly gsBugDeviation;
    private readonly showNoSignal;
    private readonly showLimitIndicator;
    private readonly limitIndicatorOffset;
    private readonly isGpOutsideLimits;
    private readonly isVisible;
    private declutterSub?;
    private vnavSub?;
    private gpSub?;
    private gsSub?;
    private gpNoSignalSub?;
    private gpPreviewSub?;
    private gsPreviewSub?;
    private gsNoSignalSub?;
    private gsPreviewNoSignalSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Calculates the vertical position on this indicator's scale at which a particular vertical speed is located, with
     * `0` at the top of the scale and `1` at the bottom.
     * @param deviation A vertical speed, in feet per minute.
     * @returns The vertical position on this indicator's scale at which the specified vertical speed is located, with
     * `0` at the top of the scale and `1` at the bottom.
     */
    private calculateScalePosition;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=VerticalDeviationIndicator.d.ts.map