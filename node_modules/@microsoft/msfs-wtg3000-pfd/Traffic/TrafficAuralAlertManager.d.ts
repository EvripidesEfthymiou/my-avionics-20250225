import { EventBus } from '@microsoft/msfs-sdk';
import { TrafficSystem } from '@microsoft/msfs-garminsdk';
/**
 * A manager which handles registration and activation of aural alerts in response to traffic and resolution
 * advisories.
 */
export declare class TrafficAuralAlertManager {
    private readonly bus;
    private readonly trafficSystem;
    private static readonly BEARING_AURAL_IDS;
    private static readonly ALTITUDE_AURAL_IDS;
    private static readonly DISTANCE_AURAL_IDS;
    private static readonly RA_CORRECTIVE_AURAL_IDS;
    private readonly publisher;
    private readonly auralRegistrationManager;
    private readonly airplaneHeadingTrue;
    private readonly taIntruders;
    private readonly voice;
    private isAlive;
    private isInit;
    private readonly subscriptions;
    /**
     * Creates a new instance of TrafficAuralAlertManager.
     * @param bus The event bus.
     * @param trafficSystem The traffic system.
     */
    constructor(bus: EventBus, trafficSystem: TrafficSystem);
    /**
     * Initializes this manager. Once this manager is initialized, it will automatically trigger aural alerts in response
     * to traffic and resolution advisories.
     * @throws Error if this manager has been destroyed.
     */
    init(): void;
    /**
     * Responds to when the alert level of an intruder changes.
     * @param intruder The intruder whose alert level changed.
     */
    private onIntruderAlertChanged;
    /**
     * Responds to when an intruder is removed.
     * @param intruder The removed intruder.
     */
    private onIntruderRemoved;
    /**
     * Responds to when a new traffic advisory is issued.
     * @param intruder The intruder for which the traffic advisory was issued.
     */
    private onTrafficAdvisoryIssued;
    /**
     * Responds to when a traffic advisory is canceled.
     * @param intruder The intruder for which the traffic advisory was canceled.
     */
    private onTrafficAdvisoryCanceled;
    /**
     * Generates a sound atom sequence for a traffic advisory.
     * @param intruder The intruder for which the traffic advisory was issued.
     * @returns The sound atom sequence and timeout for a traffic advisory for the specified intruder.
     */
    private generateTrafficAdvisoryAlertSequence;
    /**
     * Responds to when a new resolution advisory is issued.
     * @param raHost A host for information on the resolution advisory.
     */
    private onResolutionAdvisoryIssued;
    /**
     * Responds to when an existing resolution advisory is updated.
     * @param raHost A host for information on the resolution advisory.
     */
    private onResolutionAdvisoryUpdated;
    /**
     * Responds to when a resolution advisory is canceled.
     */
    private onResolutionAdvisoryCanceled;
    /**
     * Generates a sound atom sequence for a resolution advisory.
     * @param raHost A host containing information on the resolution advisory.
     * @returns The sound atom sequence and timeout for a traffic advisory for the specified resolution advisory.
     */
    private generateResolutionAdvisorySequence;
    /**
     * Destroys this manager.
     */
    destroy(): void;
    /**
     * Gets an aural alert alias for a traffic advisory.
     * @param intruder The intruder for which the traffic advisory was issued.
     * @returns An aural alert alias for a traffic advisory for the specified intruder.
     */
    private static getTrafficAdvisoryAlias;
}
//# sourceMappingURL=TrafficAuralAlertManager.d.ts.map