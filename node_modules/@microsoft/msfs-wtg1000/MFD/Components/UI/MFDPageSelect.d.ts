import { PluginSystem, VNode } from '@microsoft/msfs-sdk';
import { G1000AvionicsPlugin, G1000PluginBinder } from '../../../Shared';
import { FmsHEvent } from '../../../Shared/UI/FmsHEvent';
import { UiView, UiViewProps } from '../../../Shared/UI/UiView';
import './MFDPageSelect.css';
/**
 * The definition of an individual item from a menu selection list.
 */
type PageListItemDef = {
    /** The name of the page for the menu. */
    name: string;
    /** The key of UI view to open when selected. */
    key: string;
};
/**
 * The definition for a menu page group, containing a list of items.
 */
type PageListDef = {
    /** The text label for the page list */
    label: string;
    /** The items in the page list */
    items: (PageListItemDef | undefined)[];
};
/**
 * Component props for MFDPageSelect.
 */
export interface MFDPageSelectProps extends Omit<UiViewProps, 'upperKnobCanScroll'> {
    /** Whether to support the weather radar page. */
    supportWeatherRadarPage: boolean;
    /** The menu system. */
    menuSystem: PageSelectMenuSystem;
    /** The plugin system, for sending initialization info. */
    pluginSystem: PluginSystem<G1000AvionicsPlugin, G1000PluginBinder>;
}
/**
 * A class that manages the data and logic for the MFD page selection menu system.
 */
export declare class PageSelectMenuSystem {
    private pageSelectView?;
    private pageListDefs;
    private lastSelectedIndex;
    /**
     * Attach a rendered page select menu to this controller.
     * @param mfdPageSelect The page select element.
     */
    attachPageSelectView(mfdPageSelect: MFDPageSelect): void;
    /**
     * Get the page list definitions for a page list index.
     * @param index The index to retrieve.
     * @returns The definition at the given index.
     */
    getPageList(index: number): PageListDef;
    /**
     * Set the contents of a page list index.
     * @param index The index to set.
     * @param pageList The new pagelist for this index.
     */
    setPageList(index: number, pageList: PageListDef): void;
    /**
     * Remove a page list from the menu system.
     * @param index The index to remove.
     * @returns True if that index was found and removed, false otherwise.
     */
    removePageList(index: number): boolean;
    /**
     * Insert a page list at a given index in the menu system.
     * @param index The index to insert at.
     * @param pageList The list to insert.
     */
    addPageList(index: number, pageList: PageListDef): void;
    /**
     * Push a new page list to the end of the menu system.
     * @param pageList The list to push.
     */
    pushPageList(pageList: PageListDef): void;
    /**
     * Return the full collection page lists
     * @returns A list of page lists.
     */
    getPageLists(): PageListDef[];
    /**
     * Re-compute the page select menu
     */
    compute(): void;
}
/**
 * A pop-up which allows the user to select the open MFD page.
 */
export declare class MFDPageSelect extends UiView<MFDPageSelectProps> {
    private static readonly OPEN_TIME;
    private readonly listRef;
    private tabRefs;
    private tabListRef;
    private readonly pageGroups;
    private listItemDefs;
    private readonly listDataSub;
    private activeGroupIndex;
    private ignoreSelection;
    private openTimer;
    /** @inheritdoc */
    constructor(props: MFDPageSelectProps);
    onAfterRender(): void;
    /**
     * Compute the content of the menu based upon the menu definition data.
     */
    compute(): void;
    onInteractionEvent(evt: FmsHEvent): boolean;
    protected processScrollEvent(evt: FmsHEvent): boolean;
    /**
     * Cycles through the list of page groups to set the active page group.
     * @param delta The direction in which to cycle through the groups.
     */
    private cycleActiveGroup;
    /**
     * Sets the active page group.
     * @param groupIndex The index of the new active group.
     * @param itemIndex The index of the group list item to which to initially scroll. Defaults to 0.
     */
    private setActiveGroup;
    protected onViewOpened(): void;
    protected onViewClosed(): void;
    /**
     * Resets the open timer.
     */
    private resetOpenTimer;
    /**
     * Clears the open timer.
     */
    private clearOpenTimer;
    /**
     * Builds a MenuItemDefinition from a page list item definition.
     * @param def A page list item definition.
     * @returns A MenuItemDefinition.
     */
    private buildListItemDefinition;
    /**
     * Renders a list item.
     * @param d The item definition.
     * @param registerFn The register function.
     * @returns The rendered list item.
     */
    private renderListItem;
    /**
     * A callback which is called when a list item is selected.
     * @param d The selected item.
     * @param element The control associated with the selected item.
     * @param index The index of the selected item.
     */
    private onListItemSelected;
    render(): VNode;
}
export {};
//# sourceMappingURL=MFDPageSelect.d.ts.map