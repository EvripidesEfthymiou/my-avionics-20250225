import { ControlPublisher, EventBus, Facility, FacilityLoader, NearestSubscription, VNode } from '@microsoft/msfs-sdk';
import { Fms, TrafficAdvisorySystem } from '@microsoft/msfs-garminsdk';
import { FmsHEvent } from '../../../../Shared/UI/FmsHEvent';
import { G1000UiControl } from '../../../../Shared/UI/G1000UiControl';
import { SoftKeyMenuSystem } from '../../../../Shared/UI/Menus/SoftKeyMenuSystem';
import { UiPageProps } from '../../../../Shared/UI/UiPage';
import { MFDUiPage } from '../MFDUiPage';
import { MFDViewService } from '../MFDViewService';
import { FacilitiesGroup } from './FacilitiesGroup';
/** The properties on the flight plan popout component. */
export interface MFDNearestPageProps extends UiPageProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An FMS state manager. */
    fms: Fms;
    /** The MenuSystem. */
    menuSystem: SoftKeyMenuSystem;
    /** A facility loader. */
    loader: FacilityLoader;
    /** A ControlPublisher */
    publisher: ControlPublisher;
    /** The G1000 traffic advisory system. */
    tas: TrafficAdvisorySystem;
    /** The MFD view service. */
    viewService: MFDViewService;
}
/**
 * A component that display a list of the nearest facilities with accompanying information
 * and a map indicating the facilities location.
 */
export declare abstract class MFDNearestPage<T extends Facility, P extends MFDNearestPageProps = MFDNearestPageProps> extends MFDUiPage<P> {
    private static readonly UPDATE_FREQ;
    protected readonly unitsSettingManager: import("@microsoft/msfs-garminsdk").UnitsUserSettingManager<import("@microsoft/msfs-garminsdk").UnitsUserSettingTypes>;
    protected readonly uiRoot: import("@microsoft/msfs-sdk").NodeReference<G1000UiControl<import("../../../../Shared/UI/G1000UiControl").G1000UiControlProps>>;
    protected readonly facilitiesGroup: import("@microsoft/msfs-sdk").NodeReference<FacilitiesGroup<T>>;
    protected readonly data: NearestSubscription<T>;
    private readonly locGeoPoint;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeModule;
    private readonly mapHighlightModule;
    private readonly mapPointerModule;
    private readonly mapRangeController;
    private readonly mapPointerController;
    private readonly planeHeading;
    private readonly positionSub;
    /**
     * Creates an instance of a nearest facilities page.
     * @param props The props.
     */
    constructor(props: P);
    /** @inheritdoc */
    onViewOpened(): void;
    /** @inheritdoc */
    onViewClosed(): void;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    processHEvent(evt: FmsHEvent): boolean;
    /**
     * Changes the MFD map range index setting.
     * @param delta The change in index to apply.
     */
    private changeMapRangeIndex;
    /** Gets the title that should be displayed above the facility selection group. */
    protected abstract getFacilityGroupTitle(): string;
    /** Gets the class to add to the page display for the groups. */
    protected abstract getPageClass(): string;
    /** Gets the currently selected focus control group from the page. */
    protected abstract getSelectedGroup(): G1000UiControl;
    /** Builds a nearest subscription applicable for this nearest facilities page. */
    protected abstract buildNearestSubscription(): NearestSubscription<T>;
    /** Renders the other groups to display on the page. */
    protected abstract renderGroups(): VNode;
    /** Sets the filter on the nearest subscription, if any. */
    protected setFilter(): void;
    /**
     * A callback called when a facility is selected from the nearest facilities group.
     * @param facility The facility that was selected.
     */
    protected onFacilitySelected(facility: T | null): void;
    /**
     * Handle a GPS update.
     * @param pos The current LatLongAlt
     */
    private onGps;
    /**
     * Render the component.
     * @returns a VNode
     */
    render(): VNode;
}
//# sourceMappingURL=MFDNearestPage.d.ts.map