import { Facility, GeoPoint, NearestSubscription, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { G1000UiControl, G1000UiControlProps } from '../../../../Shared/UI/G1000UiControl';
import { ViewService } from '../../../../Shared/UI/ViewService';
import { UnitsUserSettingManager } from '../../../../Shared/Units/UnitsUserSettings';
import './FacilitiesGroup.css';
/** Props on the FacilitiesGroup component. */
export interface FacilitiesGroupProps<T extends Facility> extends G1000UiControlProps {
    /** The view service. */
    viewService: ViewService;
    /** A user setting manager for measurement units. */
    unitsSettingManager: UnitsUserSettingManager;
    /** The nearest facility subscription for this display group. */
    data: NearestSubscription<T>;
    /** An event that fires when a facility is selected on this display. */
    onSelected: (facility: T | null) => void;
    /** The title to give this facilities group in this display. */
    title: string;
    /** The facility waypoint cache used by the item. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** A subscribable which provides the airplane's current true heading. */
    planeHeading: Subscribable<number>;
}
/**
 * A component that displays the facility selection pane of a MFD
 * nearest facilites page.
 */
export declare class FacilitiesGroup<T extends Facility> extends G1000UiControl<FacilitiesGroupProps<T>> {
    private readonly facilityList;
    private currentPosition;
    private currentlySelected;
    /**
     * Builds a nearest facilities list item for display in the nearest
     * facilites list.
     * @param data The data to display.
     * @returns The constructed VNode.
     */
    buildNearestItem(data: T): VNode;
    /**
     * A callback called to handle when a facility is selected in the nearest facilites list.
     * @param control The control that was selected.
     */
    private onSelected;
    /**
     * Updates the nearest facility list.
     * @param pos The current aircraft position.
     */
    update(pos: GeoPoint): void;
    /**
     * Orders the facilities in the display.
     * @param a The first facility to compare.
     * @param b The second facility to compare.
     * @returns Positive if the first facility is further, 0 if equal, negative if closer.
     */
    private orderFacilities;
    /** @inheritdoc */
    render(): VNode;
}
/** Props on the FacilityItem component */
export interface FacilityItemProps<T extends Facility> extends G1000UiControlProps {
    /** The view service. */
    viewService: ViewService;
    /** A user setting manager for measurement units. */
    unitsSettingManager: UnitsUserSettingManager;
    /** The data to display on this nearest airports row. */
    facility: T;
    /** The current aircraft position. */
    currentPosition: GeoPoint;
    /** The facility waypoint cache used by the item. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** A subscribable which provides the airplane's current true heading. */
    planeHeading: Subscribable<number>;
}
/**
 * A component that displays a row on the MFD nearest facilities
 * facility selection pane.
 */
export declare class FacilityItem<T extends Facility> extends G1000UiControl<FacilityItemProps<T>> {
    private readonly bearing;
    private readonly distance;
    private readonly arrowEl;
    private readonly icaoEl;
    private readonly waypointIcon;
    private readonly facilityPos;
    /**
     * Creates an instance of an FacilityItem.
     * @param props The props on the FacilityItem component.
     */
    constructor(props: FacilityItemProps<T>);
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Updates the distance and bearing information.
     * @param pos The position to calculate the distance and bearing from.
     */
    updateDistanceAndBearing(pos: GeoPoint): void;
    /**
     * Sets the airport item to a selected status, showing the selected facility arrow.
     * @param selected Whether or not this facility is selected.
     */
    setSelected(selected: boolean): void;
    /** @inheritdoc */
    protected onFocused(): void;
    /** @inheritdoc */
    protected onBlurred(source: G1000UiControl): void;
    /** @inheritdoc */
    onEnter(): boolean;
    /** @inheritdoc */
    onDirectTo(): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=FacilitiesGroup.d.ts.map