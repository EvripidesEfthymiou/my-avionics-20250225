import { AirportFacility, AirportRunway, ScrollDirection, VNode } from '@microsoft/msfs-sdk';
import { G1000UiControl, G1000UiControlProps } from '../../../../../Shared/UI/G1000UiControl';
import { UnitsUserSettingManager } from '../../../../../Shared/Units/UnitsUserSettings';
import './RunwaysGroup.css';
/** Props on the RunwaysGroup control. */
interface NearestAirportRunwaysGroupProps extends G1000UiControlProps {
    /** A user setting manager for measurement units. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether or not the inner knob is the only scroll controller. */
    innerScrollOnly?: boolean;
}
/**
 * A component that displays runway information on the MFD nearest
 * airports page.
 */
export declare class NearestAirportRunwaysGroup extends G1000UiControl<NearestAirportRunwaysGroupProps> {
    private readonly content;
    private readonly runwaySelector;
    private readonly surface;
    private readonly runwayWidth;
    private readonly runwayLength;
    /**
     * Sets the currently displayed set of runways for the given airport.
     * @param facility The airport facility to display runways for.
     */
    set(facility: AirportFacility | null): void;
    /**
     * A callback called when a runway is selected from the runway selector.
     * @param runway The runway that was selected.
     */
    private onRunwaySelected;
    /** @inheritdoc */
    render(): VNode;
}
/**
 * Properties on the RunwaySelector component.
 */
interface RunwaySelectorProps extends G1000UiControlProps {
    /** A callback called when a runway is selected. */
    onSelected: (runway: AirportRunway) => void;
    /** Whether or not the inner knob is the only scroll controller. */
    innerScrollOnly?: boolean;
}
/**
 * A component that allows a user to select the runway to show information for
 * on the runway group of the MFD nearest airports page.
 */
export declare class RunwaySelector extends G1000UiControl<RunwaySelectorProps> {
    private readonly rightArrow;
    private readonly leftArrow;
    private readonly nameEl;
    private runwayIndex;
    private facility;
    private runwayName;
    /**
     * Sets the currently selected facility to load runways from.
     * @param facility The airport facility to set.
     */
    set(facility: AirportFacility | null): void;
    /** @inheritdoc */
    onUpperKnobInc(): boolean;
    /** @inheritdoc */
    onUpperKnobDec(): boolean;
    /** @inheritdoc */
    protected onScroll(direction: ScrollDirection): boolean;
    /** @inheritdoc */
    protected onFocused(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onBlurred(source: G1000UiControl): void;
    /**
     * Selects a runway by the given runway index in the facility runway list.
     * @param index The index of the runway.
     * @returns True if the index was in range, false otherwise.
     */
    private selectRunway;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=RunwaysGroup.d.ts.map