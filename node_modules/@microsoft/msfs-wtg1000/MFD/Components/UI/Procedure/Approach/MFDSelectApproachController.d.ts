import { FlightPathCalculator, FlightPlan, Subject } from '@microsoft/msfs-sdk';
import { ApproachListItem, Fms, TransitionListItem } from '@microsoft/msfs-garminsdk';
import { FlightPlanFocus } from '../../../../../Shared/UI/FPL/FPLTypesAndProps';
import { SelectApproachController } from '../../../../../Shared/UI/Procedure/Approach/SelectApproachController';
import { SelectControl2 } from '../../../../../Shared/UI/UiControls2/SelectControl';
import { ViewService } from '../../../../../Shared/UI/ViewService';
import { MFDSelectApproachStore } from './MFDSelectApproachStore';
/**
 * Controller for MFDSelectApproach component.
 */
export declare class MFDSelectApproachController extends SelectApproachController<MFDSelectApproachStore> {
    private readonly procedurePlan;
    private readonly transitionPlan;
    private readonly focus;
    /**
     * Creates an instance of select approach controller.
     * @param store The store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms Instance of FMS.
     * @param calculator The flight path calculator used by this controller to build preview flight plans.
     * @param viewService The view service used by this controller.
     * @param fplKey The FPL ViewService Key.
     * @param procedurePlan A subject to provide the procedure preview flight plan.
     * @param transitionPlan A subject to provide the procedure transition preview flight plan.
     * @param focus A subject to provide the flight plan focus for the selected approach.
     */
    constructor(store: MFDSelectApproachStore, selectNextCb: () => void, fms: Fms, calculator: FlightPathCalculator, viewService: ViewService, fplKey: string, procedurePlan: Subject<FlightPlan | null>, transitionPlan: Subject<FlightPlan | null>, focus: Subject<FlightPlanFocus>);
    /**
     * Refreshes the procedure and transition preview plan subjects.
     */
    refreshPreviewPlans(): void;
    /** @inheritdoc */
    protected onApproachSelectionClosed(source: SelectControl2<ApproachListItem>, selectionMade: boolean): Promise<void>;
    /** @inheritdoc */
    protected onApproachSelected(index: number, item: ApproachListItem, isRefresh: boolean): void;
    /** @inheritdoc */
    protected onApproachFocused(item: ApproachListItem): Promise<void>;
    /** @inheritdoc */
    protected onTransSelected(index: number, item: TransitionListItem, isRefresh: boolean): Promise<void>;
    /** @inheritdoc */
    protected onTransFocused(item: TransitionListItem): Promise<void>;
    /**
     * Responds to changes in the selected approach leg sequence.
     */
    private onSequenceChanged;
    private transitionPreviewOpId;
    /**
     * Builds a transition preview flight plan.
     * @param airport The airport of the approach containing the transitions to preview.
     * @param approach The approach containing the transitions to preview.
     * @param transition The currently selected transition.
     */
    private buildTransitionPreviewPlan;
}
//# sourceMappingURL=MFDSelectApproachController.d.ts.map