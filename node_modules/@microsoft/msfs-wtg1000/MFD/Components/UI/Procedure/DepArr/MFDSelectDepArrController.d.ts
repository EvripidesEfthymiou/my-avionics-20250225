import { ArrivalProcedure, DepartureProcedure, EnrouteTransition, FlightPathCalculator, FlightPlan, RunwayTransition, Subject } from '@microsoft/msfs-sdk';
import { Fms, ProcedureType } from '@microsoft/msfs-garminsdk';
import { FlightPlanFocus } from '../../../../../Shared/UI/FPL/FPLTypesAndProps';
import { SelectDepArrController } from '../../../../../Shared/UI/Procedure/DepArr/SelectDepArrController';
import { SelectDepArrStore } from '../../../../../Shared/UI/Procedure/DepArr/SelectDepArrStore';
import { SelectControl2 } from '../../../../../Shared/UI/UiControls2/SelectControl';
/**
 * A data store for MFD departure/arrival selection components.
 */
export interface MFDSelectDepArrStore<T extends DepartureProcedure | ArrivalProcedure> extends SelectDepArrStore<T> {
    /** A subject which provides the transition preview flight plan. */
    transitionPreviewPlan: Subject<FlightPlan | null>;
}
/**
 * A controller for MFD departure/arrival selection components.
 */
export declare abstract class MFDSelectDepArrController<T extends DepartureProcedure | ArrivalProcedure, S extends MFDSelectDepArrStore<T> = MFDSelectDepArrStore<T>> extends SelectDepArrController<T, S> {
    protected readonly procedurePlan: Subject<FlightPlan | null>;
    protected readonly transitionPlan: Subject<FlightPlan | null>;
    protected readonly focus: Subject<FlightPlanFocus>;
    /**
     * Constructor.
     * @param store A data store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms The FMS instance.
     * @param calculator The flight path calculator used by this controller to build preview flight plans.
     * @param procedurePlan A subject to provide the procedure preview flight plan.
     * @param transitionPlan A subject to provide the procedure transition preview flight plan.
     * @param focus A subject to provide the flight plan focus for the selected approach.
     * @param procType The procedure type for this controller.
     */
    constructor(store: S, selectNextCb: () => void, fms: Fms, calculator: FlightPathCalculator, procedurePlan: Subject<FlightPlan | null>, transitionPlan: Subject<FlightPlan | null>, focus: Subject<FlightPlanFocus>, procType: ProcedureType.DEPARTURE | ProcedureType.ARRIVAL);
    /**
     * Refreshes the procedure and transition preview plan subjects.
     */
    refreshPreviewPlans(): void;
    /** @inheritdoc */
    protected onProcSelectionClosed(source: SelectControl2<T>, selectionMade: boolean): Promise<void>;
    /** @inheritdoc */
    protected onRwyTransSelectionClosed(source: SelectControl2<RunwayTransition>, selectionMade: boolean): Promise<void>;
    /** @inheritdoc */
    protected onProcSelected(index: number, item: T, isRefresh: boolean): void;
    /** @inheritdoc */
    protected onProcFocused(departure: T): Promise<void>;
    /** @inheritdoc */
    protected onRunwaySelected(index: number, item: RunwayTransition, isRefresh: boolean): Promise<void>;
    /** @inheritdoc */
    protected onRunwayFocused(trans: RunwayTransition): Promise<void>;
    /** @inheritdoc */
    protected onTransSelected(index: number, item: EnrouteTransition, isRefresh: boolean): Promise<void>;
    /** @inheritdoc */
    protected onTransFocused(trans: EnrouteTransition): Promise<void>;
    /**
     * Responds to changes in the selected approach leg sequence.
     */
    private onSequenceChanged;
    private transitionPreviewOpId;
    /**
     * Updates the transition preview plan.
     * @param airport The airport of the procedure for which to preview transitions.
     * @param procIndex The index of the procedure for which to preview transitions.
     * @param transitionIndex The index of the currently selected transition.
     * @param rwyTransIndex The index of the runway transition of the procedure for which to preview transitions.
     */
    private buildTransitionPreviewPlan;
}
//# sourceMappingURL=MFDSelectDepArrController.d.ts.map