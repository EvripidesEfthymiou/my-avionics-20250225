import { ArraySubject, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { MenuItemDefinition } from '../../../../Shared/UI/Dialogs/PopoutMenuItem';
import { FmsHEvent } from '../../../../Shared/UI/FmsHEvent';
import { List } from '../../../../Shared/UI/List';
import { UiControl } from '../../../../Shared/UI/UiControl';
import { UiView, UiViewProps } from '../../../../Shared/UI/UiView';
import './MFDProc.css';
/** The properties on list menu popout component. */
interface MFDProcProps extends UiViewProps {
    /** An instance of the fms. */
    fms: Fms;
    /** A css class to apply to the dialog. */
    class?: string;
}
/**
 * The PFD procedures popout.
 */
export declare class MFDProc extends UiView<MFDProcProps> {
    protected listRef: import("@microsoft/msfs-sdk").NodeReference<List>;
    protected listContainerRef: import("@microsoft/msfs-sdk").NodeReference<HTMLElement>;
    private menuItems;
    protected readonly menuItemsSubject: ArraySubject<MenuItemDefinition>;
    private readonly arrival;
    private readonly departure;
    private readonly destinationAirportSub;
    private readonly approachSub;
    /**
     * A local method to get the ident from an ICAO.
     * @param icao is icao to get the ident from.
     * @returns an ident string or an empty string.
     */
    private getIdent;
    /** @inheritdoc */
    onViewOpened(): void;
    /**
     * Sets the menu items for the list menu dialog.
     * @param items The items to set into the menu.
     */
    setMenuItems(items: MenuItemDefinition[]): void;
    /**
     * Method to dynamically build the menu list
     * @returns an array of menu item definitions
     */
    buildMenuList(): MenuItemDefinition[];
    /** @inheritdoc */
    protected buildMenuItems(): MenuItemDefinition[];
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * A callback called to render the menu items.
     * @param d is the menu item
     * @param registerFn The register function.
     * @returns a vnode for display in the menu
     */
    protected renderItem: (d: MenuItemDefinition, registerFn: (ctrl: UiControl) => void) => VNode;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=MFDProc.d.ts.map