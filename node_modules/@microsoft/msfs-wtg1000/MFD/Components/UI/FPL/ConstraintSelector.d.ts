import { Subscribable, VNode } from '@microsoft/msfs-sdk';
import { G1000UiControl, G1000UiControlProps } from '../../../../Shared/UI/G1000UiControl';
import { FmsHEvent } from '../../../../Shared//UI/FmsHEvent';
/** Props on the ConstraintSelector component. */
interface ConstraintSelectorProps extends G1000UiControlProps {
    /** The data for this component to display. */
    data: Subscribable<number>;
    /** Whether or not the constraint is invalid. */
    isInvalid: Subscribable<boolean>;
    /** Whether or not the constraint has been edited. */
    isEdited: Subscribable<boolean>;
    /** Whether or not the constraint should be hidden. */
    isHidden: Subscribable<boolean>;
    /** A callback called when a new value is selected on the control. */
    onSelected: (altitude: number) => void;
    /** A callback called when an altitude constraint in removed. */
    onRemoved: () => void;
}
/**
 * A component that allows one to select a constraint in the flight plan.
 */
export declare class ConstraintSelector extends G1000UiControl<ConstraintSelectorProps> {
    private readonly value;
    private readonly isEdited;
    private readonly el;
    private readonly failedBoxRef;
    private readonly digitValues;
    private readonly digitRefs;
    private isEditing;
    private focusedDigit;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /**
     * Extracts a specific digit from a number.
     * @param value The number to extract from.
     * @param digit The digit to extract, zero indexed.
     * @returns The extracted digit.
     */
    private extractDigit;
    /** @inheritdoc */
    onUpperKnobInc(): boolean;
    /** @inheritdoc */
    onUpperKnobDec(): boolean;
    /**
     * Sets whether or not the control is presently in an edit state.
     * @param isEditing Whether or not the control is editing.
     * @param notify Whether or not to notify of the new value when changing state.
     * @param focusFirst Whether or not to focus the first digit when entering edit mode. Focuses last digit when false
     */
    private setEditing;
    /**
     * Sets all the individual digit controls disabled or enabled.
     * @param areDisabled Whether or not the controls are disabled.
     */
    private setChildrenDisabled;
    /** @inheritdoc */
    onClr(): boolean;
    /** @inheritdoc */
    onEnter(): boolean;
    /** @inheritdoc */
    onUpperKnobPush(): boolean;
    /**
     * A callback called when a specific digit is focused.
     * @param digit The digit that was focused, zero indexed.
     */
    private onDigitFocused;
    /**
     * A callback called when a specific digit is blurred.
     * @param digit The digit that was blurred, zero indexed.
     */
    private onDigitBlurred;
    /**
     * A callback called when a specific digit is increased.
     * @param digit The digit that was focused, zero indexed.
     * @returns True as the event is always handled.
     */
    private onDigitIncreased;
    /**
     * A callback called when a specific digit is decreased.
     * @param digit The digit that was blurred, zero indexed.
     * @returns True as the event is always handled.
     */
    private onDigitDecreased;
    /** @inheritdoc */
    protected onFocused(): void;
    /** @inheritdoc */
    protected onBlurred(): void;
    /** @inheritDoc */
    consolidateKeyboardHEvent(source: G1000UiControl, evt: FmsHEvent): boolean;
    /**
     * Handles a digit input from consolidated FMSHEvents.
     * @param digit The digit that was input.
     * @returns True as the event is always handled.
     */
    private handleDigitInput;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=ConstraintSelector.d.ts.map