import { VNode, XMLDoubleVerticalGaugeProps, XMLHostedLogicGauge, XMLVerticalGaugeProps } from '@microsoft/msfs-sdk';
import { BaseGauge } from './BaseGauge';
import './Gauge.css';
/** A vertical bar gauge with two sets of values. */
export declare class XMLDoubleVerticalGauge extends BaseGauge<Partial<XMLDoubleVerticalGaugeProps> & XMLHostedLogicGauge> {
    private svgRef;
    private titleRef;
    private value1Ref;
    private value2Ref;
    private labelRef;
    private lineGroupRef;
    private maxValue;
    private minValue;
    private geometry;
    /** The X location of the left column. */
    private readonly column1X;
    /** The X location of the right column. */
    private readonly column2X;
    /** The X location of the labels. */
    private readonly labelX;
    /** The Y location of the base of the columns. */
    private readonly baseY;
    /** The height of the columns, in pixels. */
    private readonly height;
    /** The Y offset for the labels, for centering on the tickmarks */
    private readonly labelOffset;
    /**
     * Create a vertical gauge.
     * @param props The properties for the gauge.
     */
    constructor(props: Partial<XMLDoubleVerticalGaugeProps> & XMLHostedLogicGauge);
    /**
     * Initialize the rendered gauge.
     */
    protected initGauge(): void;
    /** Draw our labels */
    drawLabels(): void;
    /**
     * Render a horizontal bar gauge
     * @returns A VNode
     */
    protected renderGauge(): VNode;
}
/** A single vertical bar gauge. */
export declare class XMLVerticalGauge extends BaseGauge<Partial<XMLVerticalGaugeProps> & XMLHostedLogicGauge> {
    private svgRef;
    private titleRef;
    private unitRef;
    private valueRef;
    private labelRef;
    private lineGroupRef;
    private maxValue;
    private minValue;
    private geometry;
    /** The X location of the left column. */
    private readonly columnX;
    /** The Y location of the base of the columns. */
    private readonly baseY;
    /** The height of the columns, in pixels. */
    private readonly height;
    /**
     * Create a vertical gauge.
     * @param props The properties for the gauge.
     */
    constructor(props: Partial<XMLDoubleVerticalGaugeProps> & XMLHostedLogicGauge);
    /** Initialize the rendered gauge */
    protected initGauge(): void;
    /**
     * Render a single vertical gauge.
     * @returns a VNode
     */
    protected renderGauge(): VNode;
}
//# sourceMappingURL=VerticalBarGauge.d.ts.map