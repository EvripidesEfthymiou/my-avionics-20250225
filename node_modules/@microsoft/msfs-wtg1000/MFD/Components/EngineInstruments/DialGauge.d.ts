import { VNode, XMLCircularGaugeProps, XMLHostedLogicGauge } from '@microsoft/msfs-sdk';
import { BaseGauge } from './BaseGauge';
import './Gauge.css';
/** A cartesian coordinate pair. */
type Cartesian = {
    /** X, indexed from top left. */
    x: number;
    /** Y, indexed from top left. */
    y: number;
};
/** A new circular gauge */
export declare class XMLCircleGauge extends BaseGauge<Partial<XMLCircularGaugeProps> & XMLHostedLogicGauge> {
    private readonly origin;
    private readonly arcRadius;
    private readonly bandRadius;
    private geometry;
    private titleRef;
    private unitsRef;
    private valueRef;
    private startRef;
    private endRef;
    private arcRef;
    private ticksRef;
    private svgRef;
    private needleRef;
    private containerDiv;
    private maxValue;
    private minValue;
    private beginAngle;
    private endAngle;
    private arcDegrees;
    private quantum;
    private precision;
    /**
     * Create an XMLCircleGaugue.
     * @param props The properties for the gauge.
     */
    constructor(props: Partial<XMLCircularGaugeProps> & XMLHostedLogicGauge);
    /** Draw our ticks. */
    private drawTicks;
    /**
     * Initialize the rendered gauge.
     */
    protected initGauge(): void;
    /**
     * Update the value.
     * @param value The new value to set.
     */
    updateValue(value: number): void;
    /**
     * Update the maximum value.
     * @param max The new max value.
     */
    updateMaxValue(max: number): void;
    /**
     * Update the minimum value.
     * @param min The new min value.
     */
    updateMinValue(min: number): void;
    /**
     * Handle changes in the alert state.
     * @param alerting True if alerting.
     */
    private setAlertState;
    /**
     * Given a cartesian origin and a set of polar coordinates, find the cartesian
     * point that represents the polar location in the cartesian grid.
     * @param center The cartesian center.
     * @param radius The radiun in pixels.
     * @param azimuth The angle coordinate in degrees.
     * @returns The cartesian point represented by the polar one.
     */
    static polarToCartesian(center: Cartesian, radius: number, azimuth: number): Cartesian;
    /**
     * Construct an SVG path string for a given arc based on its coordinates and radius.
     @param center The cartesian center of the arc.
     * @param radius The radius in pixels.
     * @param startAngle The starting azimuth of the arc in degrees.
     * @param endAngle The final azimuth of the arc in degrees.
     * @returns A string describing an SVG path.
     */
    static describeArc(center: Cartesian, radius: number, startAngle: number, endAngle: number): string;
    /**
     * Determine the height "below the line" of the arc in pixels.
     @param center The cartesian center of the arc.
     * @param radius The radius in pixels.
     * @param startAngle The starting azimuth of the arc in degrees.
     * @param endAngle The final azimuth of the arc in degrees
     * @returns An integer with the pixels.
     */
    static heightOfArc(center: Cartesian, radius: number, startAngle: number, endAngle: number): number;
    /**
     * Determine how far from the Y origin a cartesian point is.
     * @param center The cartesian center.
     * @param radius The radius in pixels.
     * @param angle The angle in degrees.
     * @returns The distance from the origin in pixels.
     */
    static distanceFromYOrigin(center: Cartesian, radius: number, angle: number): number;
    /**
     * Render a circle gauge
     * @returns A VNode
     */
    protected renderGauge(): VNode;
}
export {};
//# sourceMappingURL=DialGauge.d.ts.map