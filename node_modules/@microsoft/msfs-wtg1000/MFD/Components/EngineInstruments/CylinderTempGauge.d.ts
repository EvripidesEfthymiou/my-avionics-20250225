/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/utils/xmllogic" />
import { ComponentProps, CompositeLogicXMLHost, ComputedSubject, DisplayComponent, EventBus, VNode, XMLCylinderGaugeProps, XMLCylinderGaugeStyle, XMLHostedLogicGauge } from '@microsoft/msfs-sdk';
import { BaseGauge } from './BaseGauge';
import './Gauge.css';
/**
 * Props for a set of cylinder columns representing one engine.
 */
interface CylinderSetProps extends ComponentProps {
    /** The number of columns in this set. */
    numColumns: CompositeLogicXMLElement;
    /** THe number of blocks in each column. */
    numRows: CompositeLogicXMLElement;
    /** The minimum value. */
    minimum: CompositeLogicXMLElement;
    /** The maximum value. */
    maximum: CompositeLogicXMLElement;
    /** The value component. */
    value: CompositeLogicXMLElement;
    /** The event bus. */
    bus: EventBus;
    /** A logic host. */
    logicHost: CompositeLogicXMLHost;
    /** A subject for the peak temperature. */
    peakTempSubject: ComputedSubject<number, string>;
    /** A subject for the delta from peak. */
    peakDeltaSubject: ComputedSubject<number, string>;
    /** The cylinders ordered by temperature. */
    tempOrder: Array<number>;
    /** Styling details. */
    style: Partial<XMLCylinderGaugeStyle>;
}
/**
 * The Cylinder Temp Gauge component.
 *
 * Refactor suggestion:  I would like to see this component broken up so that each
 * cylinder has its own component, and the gauge itself just holds and manages
 * those.  Unfortunately, due to the iterative way in which the layout was created
 * and animated, the mask and peak elements are not in the same container as the
 * actual temperature bars, which means they can't be cleanly broken out
 * individually.  It's not worth the time now to fix that, but an ambitious soul
 * looking for something to optimize might want to think about it.
 */
export declare class CylinderSet extends DisplayComponent<Partial<CylinderSetProps>> {
    private container;
    private maskContainer;
    private peakContainer;
    private columnMap;
    private minimum;
    private maximum;
    private numColumns;
    private numRows;
    private redLine;
    private leanAssist;
    private selectedCyl;
    private tempOrder;
    private leaningPeak;
    private leaningPriorTemp;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * Turn our temp order prop into a safe list to use.
     * @returns An array of cylinder numbers matching our cylinder count.
     */
    private getSafeTempOrder;
    /**
     * Get the hottest cylinder.
     * @returns The hottest cylinder's index.
     */
    private getHottestCylinder;
    /**
     * Set the selected cylinder.
     * @param num The index of the cylinder to select.
     */
    private setSelectedCylinder;
    /**
     * Cycling through the cylinders
     * @param state Cylinder select state
     */
    private changeCylSlct;
    /**
     * Update the value of the gauge.
     * @param value The new value.
     */
    private updateValue;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
/**
 * A temp gauge.
 */
export declare class CylinderTempGauge extends BaseGauge<Partial<XMLCylinderGaugeProps> & XMLHostedLogicGauge & ComponentProps> {
    private peakRef;
    private quantum;
    private leanAssist;
    private peakTemp;
    private peakDelta;
    /**
     * Initialize the rendered gauge.
     */
    protected initGauge(): void;
    /**
     * Render the gauge.
     * @returns a VNode
     */
    protected renderGauge(): VNode;
}
/**
 * A temp gauge.
 */
export declare class CylinderTempGaugeTwin extends BaseGauge<Partial<XMLCylinderGaugeProps> & XMLHostedLogicGauge & ComponentProps> {
    private peakRef;
    private quantum;
    private leanAssist;
    private peakTemp1;
    private peakDelta1;
    private peakTemp2;
    private peakDelta2;
    /**
     * Initialize the rendered gauge.
     */
    protected initGauge(): void;
    /**
     * Render the gauge.
     * @returns a VNode
     */
    protected renderGauge(): VNode;
}
export {};
//# sourceMappingURL=CylinderTempGauge.d.ts.map