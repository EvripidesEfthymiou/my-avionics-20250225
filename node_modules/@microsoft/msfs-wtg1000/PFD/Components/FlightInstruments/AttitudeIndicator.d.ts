import { ComponentProps, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { PlaneStateInfo } from './PrimaryHorizonDisplay';
import './AttitudeIndicator.css';
/**
 * The properties on the Attitude component.
 */
interface AttitudeIndicatorProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** Whether this instance of the G1000 has a Radio Altimeter. */
    hasRadioAltimeter: boolean;
}
/**
 * The PFD attitude indicator.
 */
export declare class AttitudeIndicator extends DisplayComponent<AttitudeIndicatorProps> {
    private static readonly vec2Cache;
    private scroll_increment;
    private pxPerDegY;
    private pitchIncrements;
    private numberIncrements;
    private pitchIncrementsDistance;
    private currentPitch;
    private cutoutElement;
    private pitchLinesContainer;
    private pitchLinesGroup;
    private bankElement;
    private innerBankElement;
    private zeroPitchLine;
    private ahrsAlign;
    private containerRef;
    private pitchNumbersLeft;
    private pitchNumbersRight;
    private turnCoordinatorElement;
    private lastPitchOffset;
    private displayState;
    /**
     * Builds pitch tick marks on the attitude indicator.
     */
    private buildPitchLines;
    /**
     * Builds the pitch value numbers for the attitude indicator.
     */
    private buildPitchNumbers;
    /**
     * Rebuilds the attitude ladder.
     */
    private rebuildAttitudeLadder;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onAhrsStateChanged;
    /**
     * Sets the display state of the attitude display.
     * @param state The state to set the display to.
     */
    private setDisplayState;
    /**
     * Updates attitude indicator.
     * @param planeState The plane state information.
     */
    update(planeState: PlaneStateInfo): void;
    /**
     * A callback called when the pitch updates from the event bus.
     * @param pitch The current pitch value.
     * @param forceRedraw An override for the redraw.
     */
    private onUpdatePitch;
    /**
     * A callback called when the ADC updates from the event bus.
     * @param roll The current ADC roll value.
     */
    private onUpdateRoll;
    /**
     * Updates pitch lines position.
     * @param pitch The current pitch value.
     */
    private updateLinesPos;
    /**
     * Updates pitch number positions.
     * @param pitch The current pitch value.
     * @param offset The current scroll increment offset.
     */
    private updatePitchNumbers;
    /**
     * A callback called when the ADC updates from the event bus.
     * @param turnCoordinator The current ADC turn_coordinator_ball value.
     */
    private onUpdateTurnCoordinator;
    /**
     * Sets whether SVT scales are active or not.
     * @param svt The toggle for SVT.
     */
    private updateSVTDisplay;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=AttitudeIndicator.d.ts.map