import { ComponentProps, DisplayComponent, EventBus, ReadonlyFloat64Array, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { PlaneStateInfo } from './PrimaryHorizonDisplay';
import './G1000SynVis.css';
/**
 * Component props for G1000SynVis.
 */
export interface G1000SynVisProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** A unique ID to assign to the synthetic vision component's Bing instance. */
    bingId: string;
    /**
     * A subscribable which provides the internal resolution for the synthetic vision's Bing component.
     */
    resolution: Subscribable<ReadonlyFloat64Array>;
    /** A subscribable which provides whether synthetic vision is active. */
    isActive: Subscribable<boolean>;
}
/**
 * G1000 syn vis component
 */
export declare class G1000SynVis extends DisplayComponent<G1000SynVisProps> {
    private containerRef;
    private horizonRef;
    private readonly settingManager;
    /**
     * Ctor
     * @param props the props.
     */
    constructor(props: G1000SynVisProps);
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Callback when the Hdg label setting is changed.
     * @param v true if hdg label is active, false otherwise.
     */
    private onHdgLblActiveChanged;
    /**
     * Responds to changes in whether synthetic vision is active.
     * @param active Whether synthetic vision is active.
     */
    private onIsActiveChanged;
    /**
     * Creates a full Bing component earth color array for SVT which is darker than the regular topo map.
     * @returns a full Bing component earth color array for SVT absolute terrain colors.
     */
    private createSVTEarthColors;
    /**
     * Updates the components of the g1000 syn vis.
     * @param planeState The current plane state info.
     */
    update(planeState: PlaneStateInfo): void;
    /**
     * Renders the syn vis component.
     * @returns A component VNode.
     */
    render(): VNode;
}
//# sourceMappingURL=G1000SynVis.d.ts.map