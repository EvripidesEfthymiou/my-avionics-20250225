import { DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController } from '@microsoft/msfs-garminsdk';
import './VerticalSpeedIndicator.css';
/**
 * The properties for the VSI component.
 */
interface VerticalSpeedIndicatorProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the NavIndicatorController. */
    navIndicatorController: NavIndicatorController;
}
/**
 * The PFD vertical speed indicator.
 */
export declare class VerticalSpeedIndicator extends DisplayComponent<VerticalSpeedIndicatorProps> {
    private containerRef;
    private verticalSpeedPointer;
    private desiredSpeedPointer;
    private selectedVerticalSpeed;
    private selectedVSBug;
    private previousVSNumber;
    private verticalSpeedValue;
    private verticalSpeedVisible;
    private selectedVsVisibility;
    private selectedVsValue;
    private vnavDisplayMode;
    private gpDisplayMode;
    private selectedVsValueTransform;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onAdcStateChanged;
    /**
     * Sets if the display should be failed or not.
     * @param isFailed True if failed, false otherwise.
     */
    private setFailed;
    /**
     * Updates the vertical speed indicator when the vertical speed changes.
     * @param vs The new vertical speed.
     */
    private updateVerticalSpeed;
    /**
     * Updates the transform of the vertical speed pointer
     * @param vs The vertical speed
     */
    private updateVerticalSpeedPointer;
    /**
     * Updates the transform of the selected vertical speed bug
     */
    private updateSelectedVSBug;
    /**
     * Updates the transform of the desired speed pointer
     * @param requiredVs The required Vertical Speed from VNAV.
     */
    private updateDesiredSpeedPointer;
    /**
     * Updates the visibility of the desired speed pointer.
     */
    private updateDesiredSpeedPointerVisibility;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=VerticalSpeedIndicator.d.ts.map