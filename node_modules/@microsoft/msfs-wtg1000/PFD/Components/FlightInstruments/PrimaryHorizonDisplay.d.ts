import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import './PrimaryHorizonDisplay.css';
/**
 * The properties on the primary horizon display component.
 */
interface PrimaryHorizonDisplayProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** Whether this instance of the G1000 has a Radio Altimeter. */
    hasRadioAltimeter: boolean;
    /** The flight planner. */
    flightPlanner: FlightPlanner;
    /** The fms. */
    fms: Fms;
}
/**
 * Structure to hold the current roll,pitch,heading and altitude situation of the plane.
 */
export interface PlaneStateInfo {
    /** The current roll of the plane. */
    roll: number;
    /** The current pitch of the plane. */
    pitch: number;
    /** The current heading of the plane. */
    heading: number;
    /** The current track of the plane. */
    track: number;
    /** The current altitude of the plane in feet. */
    altitude: number;
    /** The current ground speed of the plane in knots. */
    gs: number;
    /** The current vertical speed of the plane in feet per minute. */
    vs: number;
    /** The current angle of attack of the plane. */
    aoa: number;
}
/**
 * The PFD primary horizon display.
 */
export declare class PrimaryHorizonDisplay extends DisplayComponent<PrimaryHorizonDisplayProps> {
    private readonly artificalHorizonRef;
    private readonly attitudeIndicatorRef;
    private readonly flightPathMarkerRef;
    private readonly synVisRef;
    private readonly horizonContainer;
    private readonly isSvtActiveSub;
    private planeState;
    private shouldUpdate;
    private lastUpdateTime;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A callback called when the pitch updates from the event bus.
     * @param pitch The current pitch value.
     */
    private onUpdatePitch;
    /**
     * A callback called when the roll updates from the event bus.
     * @param roll The current ADC roll value.
     */
    private onUpdateRoll;
    /**
     * A callback called when the altitude updates from the event bus.
     * @param alt The current ADC altitude.
     */
    private onUpdateAltitude;
    /**
     * A callback called when the true heading updates from the event bus.
     * @param hdg The current ADC true heading value.
     */
    private onUpdateHeading;
    /**
     * A callback called when the true track updates from the event bus.
     * @param track The current ADC true track value.
     */
    private onUpdateTrack;
    /**
     * A callback called when the ground speed updates from the event bus.
     * @param gs The current ADC ground speed value.
     */
    private onUpdateGroundSpeed;
    /**
     * A callback called when the vertical speed updates from the event bus.
     * @param vs The current ADC vertical speed value.
     */
    private onUpdateVerticalSpeed;
    /**
     * A callback called when the angle of attack updates from the event bus.
     * @param aoa The current angle of attack.
     */
    private onUpdateAoA;
    /**
     * A callback called when the AHRS system state changes.
     * @param state The state of the system.
     */
    private onAhrsState;
    /**
     * A callback called when the frame updates.
     * @param realTime The current real timestamp
     */
    private onFrameUpdate;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=PrimaryHorizonDisplay.d.ts.map