import { DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { G1000ControlPublisher } from '../../../Shared/G1000Events';
import { AltitudeAlertController } from './AltitudeAlertController';
import './Altimeter.css';
/**
 * The properties of the altitude indicator component.
 */
interface AltimeterProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The g1000 control event bus publisher. */
    g1000Publisher: G1000ControlPublisher;
    /** Whether this instance of the G1000 has a Radio Altimeter. */
    hasRadioAltimeter: boolean;
}
/**
 * The PFD airspeed indicator with speed tape.
 */
export declare class Altimeter extends DisplayComponent<AltimeterProps> {
    protected readonly controller: AltitudeAlertController;
    private altitudeBoxElement;
    private altitudeMetricBoxElement;
    private altitudeTenThousandsDataElement;
    private altitudeThousandsDataElement;
    private altitudeHundredsDataElement;
    private altitudeTensDataElement;
    private altitudeTapeTickElement;
    private altitudeScrollerValues;
    private altitudeScrollerZeroes;
    private kohlsmanSetting;
    private baroUnits;
    private altitudeBugRef;
    private minimumsBugRef;
    private minimumsBugColor;
    private altitudeTrendVector;
    private selectedAltitudeTensSubject;
    private selectedAltitudeTensRef;
    private selectedAltitudeHundredsSubject;
    private selectedAltitudeHundredsRef;
    private vnavTargetAltSubject;
    private vnavTargetAltRef;
    private alerterBoxRef;
    private alerterTextRef;
    private alerterSVGBugRef;
    private alerterMetricBoxRef;
    private containerRef;
    private readonly tenThousandsSvg;
    private readonly thousandsSvg;
    private readonly hundredsSvg;
    private readonly tensSvg;
    private isSelectedAltitudeSet;
    private selectedAltitude;
    private readonly indicatedAltitudeSub;
    private readonly selectedAltitudeSub;
    private readonly indicatedAltitudeConsumer;
    private readonly decisionHeight;
    private readonly decisionAltitude;
    private readonly minimumsMode;
    private readonly radioAltitudeFeet;
    private currentBaro;
    private readonly vnavPathMode;
    private readonly approachGuidanceMode;
    private readonly activeNavSource;
    private readonly vnavTrackingPhase;
    private readonly vnavTodIndex;
    private readonly vnavTodDistance;
    private readonly vnavBodDistance;
    private readonly groundSpeed;
    private vnavState;
    private vnavConstraintDetails;
    private storedBaroIn;
    private currentDrawnAlt;
    private minimumsAltitude;
    private isFailed;
    private readonly updateTapeEvent;
    private readonly isGroundLineVisible;
    private readonly timeToTod;
    private readonly closeToTod;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onAdcStateChanged;
    /**
     * Sets if the display should be failed or not.
     * @param isFailed True if failed, false otherwise.
     */
    private setFailed;
    /**
     * Set the Kohlsman setting directly.
     * @param baroMbar The new barometer setting in millibars.
     */
    private static setKohlsmanMbar;
    /**
     * Convenience function to set the Kohlsman in inHg, since that's the main unit we use here.
     * @param baroIn The new barometer setting in inHg.
     */
    private static setKohlsman;
    /**
     * Handle when the G1000 detects that the user pressed the 'B' key to set the barometric pressure.
     */
    private handleBaroSetEvent;
    /**
     * Handle when the vnav constraint changes or the vnav state changes.
     */
    private manageVnavConstraintAltitudeDisplay;
    /**
     * A method called when a minimums altitude value changes from the event bus.
     * @param mins The minimums altitude value.
     */
    private updateMinimums;
    /**
     * A method called to update the location of the Minimums Bug on the altitude tape.
     */
    private updateMinimumsBug;
    /**
     * Updates the displayed selected altitude..
     */
    private updateSelectedAltitude;
    /**
     * Updates the position of the Selected Altitude Bug on the altitude tape.
     */
    private updateSelectedAltitudeBugPosition;
    /**
     * Updates the visibility of the selected altitude bug.
     */
    private updateSelectedAltitudeBugVisibility;
    /**
     * A method called when the alt alerter state is changed.
     * @param state is the altitude alerter state
     */
    private onAlerterStateChanged;
    /**
     * Updates the kohlsman value based on knob input.
     * @param increase a bool to determine whether to increcement up or down the current baro setting.
     */
    private onbaroKnobTurn;
    /**
     * Updates the kohlsman value when it changes.
     * @param baroUnits The new selected altitude value.
     */
    private updateBaroUnits;
    /**
     * Updates the kohlsman value when it changes.
     * @param baroStd The new selected altitude value.
     */
    private updateBaroStd;
    /**
     * Updates the kohlsman value when it changes.
     * @param kohlsmanSetting The new selected altitude value.
     */
    private updateKohlsmanSetting;
    /**
     * Updates the metric display.
     * @param isMetricVisible whether the metric display options should be shown.
     */
    private updateMetricDisplay;
    /**
     * Updates the kohlsman display value.
     */
    private updateBaroDisplay;
    private readonly altTenThousandsTranslation;
    private readonly altThousandsTranslation;
    private readonly altHundredsTranslation;
    private readonly altTensTranslation;
    /**
     * Updates the altitude indicator when the altitude changes.
     * @param indicatedAlt The indicated altitude, in feet.
     */
    private updateAltitude;
    /**
     * Updates the Altitude Trend Vector when the vertical speed changes.
     * @param vs The new vertical speed.
     */
    private updateVerticalSpeed;
    /**
     * Builds a numerical scroller with dual numbers for the altimeter window.
     * @param startYValue The starting Y value in the svg to start number at.
     * @returns A collection of text elements for the numerical scroller.
     */
    private buildDoubleScroller;
    /**
     * Builds a numerical scroller for the altimeter window.
     * @param startYValue The starting Y value in the svg to start number at.
     * @returns A collection of text elements for the numerical scroller.
     */
    private buildSingleScroller;
    /**
     * Builds the tick marks on the altitude tape.
     * @returns A collection of tick mark line elements.
     */
    private buildAltitudeTapeTicks;
    /**
     * Builds the altitude numbers for the altimeter tape.
     * @returns A collection of airspeed number text elements.
     */
    private buildAltitudeTapeNumbers;
    /**
     * Builds the zeroes for the altitude tape.
     * @returns A collection of zeroes text elements.
     */
    private buildAltitudeTapeZeros;
    /**
     * Calculates the absolute vertical position on the tape at which a particular altitude is located, with `0` at the
     * top of the tape and `1` at the bottom.
     * @param indicatedAlt An altitude, in feet.
     * @param clamp Whether the altitude should be clamped to the range defined by this tape's minimum and maximum
     * representable altitudes. Defaults to `false`.
     * @returns The absolute vertical position on the tape at which the specified altitude is located, with `0` at the
     * top of the tape and `1` at the bottom.
     */
    private calculateAbsoluteTapePosition;
    /**
     * Render the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=Altimeter.d.ts.map