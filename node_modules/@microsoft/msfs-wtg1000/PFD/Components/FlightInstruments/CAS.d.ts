import { Annunciation, ComponentProps, CompositeLogicXMLHost, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { AlertMessage } from '../UI';
import './CAS.css';
/**
 * An alerts level on the G1000 NXi.
 */
export declare enum G1000AlertsLevel {
    None = 0,
    Advisory = 1,
    Caution = 2,
    Warning = 3
}
/**
 * CAS events specific to the G1000 NXi.
 */
export interface G1000CasEvents {
    /** Synchronizes the current CAS unacknowledged alerts level with the Alerts component. */
    'cas_unacknowledged_alerts_level': G1000AlertsLevel;
}
/**
 * An alerts message to be associated with a specified CAS.
 */
export interface CasAssociatedMessage {
    /** The ID of the CAS alert. */
    casUid: string;
    /** The alert message to display when the CAS alert is active. */
    message: AlertMessage;
}
/** The props for a CAS element. */
interface CASProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** Our logic handler. */
    logicHandler: CompositeLogicXMLHost;
    /** The configured annunciations. */
    annunciations: Array<Annunciation>;
    /** The ID string for the caution sound. */
    cautionSoundId?: string;
    /** The ID string for the warning sound. */
    warningSoundId?: string;
}
/** A G1000 PFD CAS display. */
export declare class CAS extends DisplayComponent<CASProps> {
    /** The overall container for the CAS elements. */
    private divRef;
    /** The div for new, unacked annunciations. */
    /** The well little div for the divider bar beween acked and unacked. */
    private dividerRef;
    private readonly soundController;
    private readonly casSystem;
    private readonly casLegacyAdapater;
    private readonly newMessages;
    private readonly ackedMessages;
    private readonly newMessageCounts;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Handles when unacknowledged message counts have changed.
     * @param counts The message counts.
     */
    private onMessageCountsChanged;
    /**
     * Handles when the CAS messages are changed.
     */
    private onMessagesChanged;
    /**
     * Orders CAS messages as required.
     * @param a The first CAS message to compare.
     * @param b The second CAS message to compare.
     * @returns Negative if b is before a, zero if equal, positive otherwise.
     */
    private orderMessages;
    /**
     * Acknowledges CAS messages.
     */
    private acknowledgeMessages;
    /**
     * Handles when the CAS master caution active state changes.
     * @param isActive True if master caution is active, false otherwise.
     */
    private onCautionActive;
    /**
     * Handles when the CAS master warning active state changes.
     * @param isActive True if master warning is active, false otherwise.
     */
    private onWarningActive;
    /**
     * Render the CAS.
     * @returns A VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=CAS.d.ts.map