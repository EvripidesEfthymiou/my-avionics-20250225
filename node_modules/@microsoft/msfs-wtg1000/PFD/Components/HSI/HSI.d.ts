import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController, TrafficAdvisorySystem, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import './HSI.css';
/**
 * Properties on the HSI component.
 */
interface HSIProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the flight planner. */
    flightPlanner: FlightPlanner;
    /** An instance of the nav indicator controller. */
    navIndicatorController: NavIndicatorController;
    /** The G1000 traffic advisory system. */
    tas: TrafficAdvisorySystem;
    /** A user setting manager for distance units. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * The HSI component of the PFD.
 */
export declare class HSI extends DisplayComponent<HSIProps> {
    private readonly roseRef;
    private readonly mapRef;
    private readonly minimumsContainerRef;
    private readonly gpsMessage;
    readonly hsiController: NavIndicatorController;
    private readonly dtkBoxLabelSubj;
    private readonly dtkBoxValue;
    private readonly dtkBoxValueSubj;
    private readonly minsValueRef;
    private readonly minimumsValue;
    private readonly minimumsUnit;
    private readonly headingSelectValue;
    private readonly minimumsMode;
    private readonly minimumsModeDisplay;
    private readonly decisionHeight;
    private readonly decisionAltitude;
    private altitude;
    private radioAltitude;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * Updates the heading indicator when the heading changes.
     * @param selHdg deg The new heading value.
     */
    private updateSelectedHeadingDisplay;
    /**
     * Updates whether or not the minimums box should be shown.
     */
    private updateMinimumsShown;
    /**
     * Sets the minimums color based on altitude distance from minimums.
     * @param distanceFromMins The distance, in feet, from the minimums target.
     */
    private setMinsColor;
    /**
     * Updates the dtk/obs-crs ref box.
     */
    updateDtkBox: () => void;
    /**
     * Registers relevant components with the HSI Controller.
     */
    private registerComponents;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=HSI.d.ts.map