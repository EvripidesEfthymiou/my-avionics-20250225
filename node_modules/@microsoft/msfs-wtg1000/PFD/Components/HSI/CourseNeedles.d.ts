import { ComponentProps, DisplayComponent, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController } from '@microsoft/msfs-garminsdk';
import './CourseNeedles.css';
/**
 * The props on the CourseNeedles component.
 */
interface CourseNeedlesProps extends ComponentProps {
    /** A prop to define whether this is for the map or rose. */
    hsiMap: boolean;
    /** An instance of the HSI controller. */
    controller: NavIndicatorController;
}
/**
 * The course needles component on the HSI.
 */
export declare class CourseNeedles extends DisplayComponent<CourseNeedlesProps> {
    private readonly nav1Needle;
    private readonly nav2Needle;
    private readonly gpsNeedle;
    private readonly el;
    private nav1Course;
    private nav2Course;
    private gpsDTK;
    /**
     * A callback called after rendering is complete.
     */
    onAfterRender(): void;
    /**
     * A method called from Hsi that commands an update to the format of the needles
     */
    updateSourceSensitivity(): void;
    /**
     * A method called from Hsi that commands an update to the data driving the needles
     */
    updateData(): void;
    /**
     * Rotates the course needles component to the specified value in degrees.
     * @param val The value to rotate the course needles component to.
     */
    rotateComponent(val: number): void;
    /**
     * Handles setting to/from flag and whether to display the deviation needle.
     * @param toFrom The value to rotate the course needles component to.
     */
    private onToFrom;
    /**
     * Handles when the CDI source is selected.
     * @param source The CDI source event information.
     */
    private onCDISelect;
    /**
     * Handles when the OBS setting is changed.
     * @param setting The OBS setting to handle.
     */
    private onOBSSet;
    /**
     * Sets the default visibility of the course needles.
     */
    private setDefaultVisibility;
    /**
     * Sets the rotations of the course needles.
     * @param val The heading value to set the rotation to.
     */
    private setNeedleRotations;
    /**
     * Sets a nav needle as visible.
     * @param index The nav radio index to set visible.
     */
    private setNavVisible;
    /**
     * Sets the GPS needle as visible.
     */
    private setGpsVisible;
    /**
     * Renders the course needles component.
     * @returns The rendered VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=CourseNeedles.d.ts.map