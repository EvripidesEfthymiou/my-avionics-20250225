import { ComponentProps, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController } from '@microsoft/msfs-garminsdk';
import { UnitsUserSettingManager } from '../../../Shared/Units/UnitsUserSettings';
import './HSIRose.css';
/**
 * Properties on the HSI component.
 */
interface HSIRoseProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the HSI Controller. */
    controller: NavIndicatorController;
    /** A settings manager for xtk distance unit. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * The HSI component of the PFD.
 */
export declare class HSIRose extends DisplayComponent<HSIRoseProps> {
    private readonly el;
    private readonly compassRoseComponent;
    private headingElement;
    private headingRotateElement;
    private courseNeedlesElement;
    private headingBugElement;
    private turnRateIndicator;
    private bearingPointer1Element;
    private bearingPointer2Element;
    private navSourceText;
    private trackBug;
    private xtkInfo;
    private hdgValueSubj;
    private readonly navSourceSubject;
    private readonly navSensitivitySubject;
    private xtkDistance;
    private obsLabel;
    private onGround;
    private isFailed;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onAhrsStateChanged;
    /**
     * Sets if the display should be failed or not.
     * @param isFailed True if failed, false otherwise.
     */
    private setFailed;
    /**
     * Sets whether or not the standard HSI is visible.
     * @param isVisible Whether or not the HSI is visible.
     */
    setVisible(isVisible: boolean): void;
    /**
     * Updates the HSI indicator rotation when the heading changes.
     * @param hdgDeg deg The new heading value.
     */
    private updateHeadingRotation;
    /**
     * Updates the heading indicator when the heading changes.
     * @param selHdg deg The new heading value.
     */
    private updateSelectedHeadingDisplay;
    /**
     * Updates the ground track bug.
     * @param trkDeg The ground track in degrees magnetic.
     */
    private updateTrackBug;
    /**
     * Builds the 4 tick marks on the outside of the compass rose.
     * @param radius The radius of the circle to build around.
     * @returns A collection of tick mark line elements.
     */
    buildRoseOuterTicks(radius?: number): SVGLineElement[];
    /**
     * Updates the Source and Sensitivity Fields.
     */
    updateSourceSensitivity(): void;
    /**
     * Registers the course needles instance with the HSI Controller.
     */
    private registerWithController;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=HSIRose.d.ts.map