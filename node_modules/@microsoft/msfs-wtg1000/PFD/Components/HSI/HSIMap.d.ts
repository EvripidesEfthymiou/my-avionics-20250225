import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController, TrafficAdvisorySystem } from '@microsoft/msfs-garminsdk';
import './HSIMap.css';
/**
 * Props for the HSIMap component.
 */
interface HSIMapProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the flight planner. */
    flightPlanner: FlightPlanner;
    /** An instance of the HSI Controller. */
    controller: NavIndicatorController;
    /** The G1000 traffic advisory system. */
    tas: TrafficAdvisorySystem;
}
/**
 * An HSI component with a moving map.
 */
export declare class HSIMap extends DisplayComponent<HSIMapProps> {
    private static readonly UPDATE_FREQ;
    private static readonly DATA_UPDATE_FREQ;
    private readonly containerRef;
    private readonly rotatingEl;
    private readonly compassRoseComponent;
    private headingElement;
    private turnRateIndicator;
    private headingBugElement;
    private courseNeedlesElement;
    private bearingPointer1Element;
    private bearingPointer2Element;
    private deviationElement;
    private readonly mapSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    private isFailed;
    /**
     * A callback called when the component finishes rendering.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onAhrsStateChanged;
    /**
     * Sets if the display should be failed or not.
     * @param isFailed True if failed, false otherwise.
     */
    private setFailed;
    /**
     * Updates the rotating elements container.
     * @param heading The heading to rotate to.
     */
    updateRotatingElements: (heading: number) => void;
    /**
     * A callback which is called when an interaction event occurs.
     * @param hEvent An interaction event.
     */
    private onInteractionEvent;
    /**
     * Changes the MFD map range index setting.
     * @param delta The change in index to apply.
     */
    private changeMapRangeIndex;
    /**
     * Updates the heading indicator when the heading changes.
     * @param selHdg deg The new heading value.
     */
    private updateSelectedHeadingDisplay;
    /**
     * Sets whether or not the HSI with map is visible.
     * @param isVisible Whether or not the component is visible.
     */
    setVisible(isVisible: boolean): void;
    /**
     * Registers the course needles instance with the HSI Controller.
     */
    private registerWithController;
    /**
     * Renders the HSIMap component.
     * @returns The rendered component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=HSIMap.d.ts.map