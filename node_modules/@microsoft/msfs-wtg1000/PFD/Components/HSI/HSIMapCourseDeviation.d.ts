import { ComponentProps, DisplayComponent, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController } from '@microsoft/msfs-garminsdk';
import './HSIMapCourseDeviation.css';
/**
 * The props on the CourseNeedles component.
 */
interface HSIMapCourseDeviationProps extends ComponentProps {
    /** An instance of the hsi controller. */
    controller: NavIndicatorController;
}
/**
 * The course needles component on the HSI.
 */
export declare class HSIMapCourseDeviation extends DisplayComponent<HSIMapCourseDeviationProps> {
    private readonly el;
    private readonly diamondIndicatorDiv;
    private readonly triangleIndicatorDiv;
    private readonly diamondIndicatorPath;
    private readonly triangleIndicatorPath;
    private readonly hsiMapDeviation;
    private readonly hideableObjects;
    private readonly noSignalDiv;
    private readonly suspDiv;
    private currentDeviation;
    private noSignalStr;
    private xtkStr;
    private xtkUnit;
    private sensitivityStr;
    private sensitivityRef;
    private sourceStr;
    private sourceRef;
    /**
     * A callback called after rendering is complete.
     */
    onAfterRender(): void;
    /**
     * A method called from Hsi Controller that commands an update on a change in any relevant value
     */
    updateData(): void;
    /**
     * Sets the deviation indicator when there is no DTK.
     * @param value is a bool of whether to set 'no dtk' or remove 'no dtk'
     */
    private setNoSignal;
    /**
     * Sets the to/from orientation of the triangle.
     * @param toFrom is the to/from object to be processed
     */
    private setFromTo;
    /**
     * Sets the deviation of the course needle.
     * @param deviation The deviation of the course needle.
     */
    setDeviation(deviation: number): void;
    /**
     * Updates the Source and Sensitivity Fields.
     */
    updateSourceSensitivity(): void;
    /**
     * Sets whether or not the course needle is visible.
     * @param ref is the node reference to adjust
     * @param isVisible The visibility of the course needle.
     */
    setVisible(ref: any, isVisible: boolean): void;
    /**
     * Renders the course needles component.
     * @returns The rendered VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=HSIMapCourseDeviation.d.ts.map