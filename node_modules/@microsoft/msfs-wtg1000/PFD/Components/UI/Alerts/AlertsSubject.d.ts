import { AnnunciationType, EventBus, SubscribableArray, SubscribableArrayHandler, Subscription } from '@microsoft/msfs-sdk';
/**
 * A message to be displayed in the Alerts pane.
 */
export interface AlertMessage {
    /** The key of the message. */
    key: string;
    /** The title of the message to display. */
    title: string;
    /** The body of the message. */
    message: string;
    /** The optional priority of the message. */
    priority?: AnnunciationType;
}
/**
 * Events for the G1000 alert system.
 */
export interface AlertMessageEvents {
    /** An alert has been pushed. */
    'alerts_push': AlertMessage;
    /** An alert has been removed. */
    'alerts_remove': string;
    /** Whether or not there are any alerts currently avaiable to read. */
    'alerts_available': boolean;
}
/**
 * A subject that tracks G1000 alert messages.
 */
export declare class AlertsSubject implements SubscribableArray<AlertMessage> {
    private readonly data;
    private readonly timestamps;
    private readonly sortedData;
    private readonly publisher;
    /**
     * Creates an instance of a AlertsSubject.
     * @param bus An instance of the event bus.
     */
    constructor(bus: EventBus);
    /**
     * Orders the alert messages.
     * @param a The first message to order.
     * @param b The second message to order.
     * @returns Negative if b comes before a, zero if equal, positive if b comes after a.
     */
    private orderAlerts;
    /**
     * A callback called when an alert is pushed on the bus.
     * @param message The alert message that was pushed.
     */
    private onAlertPushed;
    /**
     * A callback called when an alert is removed from the bus.
     * @param key The key of the alert that was removed.
     */
    private onAlertRemoved;
    /** @inheritdoc */
    get length(): number;
    /** @inheritdoc */
    get(index: number): AlertMessage;
    /** @inheritdoc */
    tryGet(index: number): AlertMessage | undefined;
    /** @inheritdoc */
    getArray(): readonly AlertMessage[];
    /** @inheritdoc */
    sub(handler: SubscribableArrayHandler<AlertMessage>, initialNotify?: boolean, paused?: boolean): Subscription;
}
//# sourceMappingURL=AlertsSubject.d.ts.map