import { EventBus, FlightPlanSegment, HardwareUiControl, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FPLDetailsController } from '../../../../Shared/UI/FPL/FPLDetailsController';
import { FPLDetailsStore } from '../../../../Shared/UI/FPL/FPLDetailsStore';
import { FlightPlanFocus, FlightPlanSelection } from '../../../../Shared/UI/FPL/FPLTypesAndProps';
import { G1000ControlList, G1000UiControl, G1000UiControlProps } from '../../../../Shared/UI/G1000UiControl';
import { ViewService } from '../../../../Shared/UI/ViewService';
import { FPLSection } from './FPLSection';
/** The properties of the FPL scrollable element.*/
export interface FPLDetailProps extends G1000UiControlProps {
    /** The event bus for flight plan events. */
    bus: EventBus;
    /** The view service. */
    viewService: ViewService;
    /** An FMS state manager. */
    fms: Fms;
}
/**
 * FPLDetails holds the core logic of the flight plan display and interacts with button events.
 */
export declare class FPLDetails<P extends FPLDetailProps = FPLDetailProps> extends G1000UiControl<P> {
    protected readonly store: FPLDetailsStore;
    protected readonly controller: FPLDetailsController;
    protected isExtendedView: boolean;
    /** The complete flight plan container, including origin and destination info. */
    fplnContainer: import("@microsoft/msfs-sdk").NodeReference<HTMLElement>;
    /** The departure through arrival phases, all of the FPLSections. */
    protected fplDetailsContainer: import("@microsoft/msfs-sdk").NodeReference<HTMLElement>;
    protected sectionListRef: import("@microsoft/msfs-sdk").NodeReference<G1000ControlList<FlightPlanSegment>>;
    /**
     * Constructor
     * @param props the props
     */
    constructor(props: P);
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /** Called when the fpl view is resumed. */
    fplViewResumed(): void;
    /**
     * Called when the FPL view is opened.
     * @param focusActiveLeg Whether or not to focus the active leg.
     */
    fplViewOpened(focusActiveLeg: boolean): void;
    /** @inheritdoc */
    protected onFocused(): void;
    /** @inheritdoc */
    protected onBlurred(): void;
    /**
     * Scrolls to the active leg in the flight plan.
     * @param focusActiveLeg Whether to focus the active leg.
     */
    scrollToActiveLeg(focusActiveLeg: boolean): void;
    /** @inheritdoc */
    onMenu(): boolean;
    /**
     * Responds to menu button press events.
     * @returns Whether the event was handled.
     */
    openDetailsMenu(): boolean;
    /**
     * Gets the top location of the list element for the specified segment and leg.
     * @param segmentIndex The segment index.
     * @param legIndex The leg index.
     * @returns list element y coordinate
     */
    protected getListElementTopLocation: (segmentIndex: number, legIndex: number) => number;
    /**
     * Responds to flight plan section registered events.
     * @param section The section that was registered.
     */
    protected onSectionRegistered(section: FPLSection): void;
    /**
     * Responds to flight plan element selections.
     * @param selection The selection that was made.
     */
    protected onFlightPlanElementSelected(selection: FlightPlanSelection): void;
    /**
     * Responds to flight plan focus selections.
     * @param focus The focus selection that was made.
     */
    protected onFlightPlanFocusSelected(focus: FlightPlanFocus): void;
    protected readonly sectionRegisteredHandler: (source: HardwareUiControl) => void;
    protected readonly flightPlanElementSelectedHandler: (selection: FlightPlanSelection) => void;
    protected readonly flightPlanFocusSelectedHandler: (focus: FlightPlanFocus) => void;
    /**
     * Renders a section in the flight plan.
     * @param data The data object for this section.
     * @param index The index.
     * @returns The rendered VNode.
     */
    protected renderItem(data: FlightPlanSegment, index: number): VNode;
    /**
     * Render the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
//# sourceMappingURL=FPLDetails.d.ts.map