import { ArraySubject, ConsumerSubject, FlightPlan, FlightPlanSegment, LegDefinition, NodeReference, Subject, VNavConstraint, VNavLeg, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { SelectAirwayInputData } from '../../../../Shared/UI/Controllers/SelectAirwayController';
import { FPLDetailsController } from '../../../../Shared/UI/FPL/FPLDetailsController';
import { FPLEmptyRow } from '../../../../Shared/UI/FPL/FPLEmptyRow';
import { FPLHeader } from '../../../../Shared/UI/FPL/FPLHeader';
import { FacilityInfo, FixLegInfo, FlightPlanFocus, FlightPlanSelection } from '../../../../Shared/UI/FPL/FPLTypesAndProps';
import { G1000ControlList, G1000UiControl, G1000UiControlProps } from '../../../../Shared/UI/G1000UiControl';
import { ViewService } from '../../../../Shared/UI/ViewService';
import { FixInfo } from '../../../../Shared/UI/FPL/FixInfo';
import type { MenuItemDefinition } from '../../../../Shared/UI/Dialogs/PopoutMenuItem';
import { FmsHEvent } from '../../../../MFD';
/** The properties of an FPL detail section item. */
export interface FPLSectionProps extends G1000UiControlProps {
    /** The view service. */
    viewService: ViewService;
    /** Info about origin and destination facilities */
    facilities: FacilityInfo;
    /** The flight plan segment associated with this section. */
    segment: FlightPlanSegment;
    /** The flight management system. */
    fms: Fms;
    /** The container to scroll when elements are highlighted. */
    scrollContainer?: NodeReference<HTMLElement>;
    /** If the fpl waypoint list is an extended view or not */
    isExtendedView?: boolean;
    /** Instance of the details controller */
    detailsController?: FPLDetailsController;
    /**
     * A function to call when a flight plan element was selected in this section.
     * @param selection The selection that was made.
     */
    onFlightPlanElementSelected?(selection: FlightPlanSelection): void;
    /**
     * A function to call when a flight plan focus was selected in this section.
     * @param focus The focus selection that was made.
     */
    onFlightPlanFocusSelected?(focus: FlightPlanFocus): void;
}
/**
 * An interface to define interaction event handling on FPL sections
 */
export interface FPLInteractive {
    /**
     * Event that is called when the MENU button is pressed.
     * @returns A booleans indicating that the event was handled.
     */
    onMenu(): boolean;
    /**
     * Event that is called when the DTO button is pressed.
     * @returns A booleans indicating that the event was handled.
     */
    onDirectTo(): boolean;
}
/**
 * A flight plan detail section, representing a single phase of flight.
 *
 * Individual sections that need to render a dynamic list of fixes can extend
 * this for useful functionality.  They will need to, at the minimum, define
 * the type of segment they are by storing a FlightPlanSegmentType in the
 * segmentType variable.
 *
 * An additional hook is provided for a callback that can be used to render
 * the header for the section dynamically based on the section's needs, since
 * that is something that varies by section type.
 *
 * Descendents must remember to call super.onAfterRender() in their own
 * onAfterRender if they want the magic to happen.
 */
export declare abstract class FPLSection extends G1000UiControl<FPLSectionProps> implements FPLInteractive {
    /** A reference to the header line for the section. */
    protected headerRef: NodeReference<FPLHeader<import("../../../../MFD").FPLHeaderProps>>;
    protected emptyRowRef: NodeReference<FPLEmptyRow>;
    readonly segment: FlightPlanSegment;
    protected legs: ArraySubject<Subject<FixLegInfo>>;
    protected listRef: NodeReference<G1000ControlList<Subject<FixLegInfo>>>;
    protected readonly activeLegDistance: ConsumerSubject<number>;
    protected readonly activeLegDtk: ConsumerSubject<number>;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /**
     * Gets the ref to the list component for the section.
     * @returns list ref
     */
    getListRef(): NodeReference<G1000ControlList<Subject<FixLegInfo>>>;
    /**
     * Gets the empty row visbility
     * @returns true if empty row should be visible, false otherwise
     */
    protected abstract getEmptyRowVisbility(): boolean;
    /**
     * Focuses the active leg.
     */
    focusActiveLeg(): void;
    /**
     * An event called when the dto button is pressed.
     * @returns True if the event was handled in this section.
     */
    onDirectTo(): boolean;
    /**
     * An event called when the VNav Direct Softkey is pressed.
     * @returns True if the event was handled in this section.
     */
    onVnavDirect(): boolean;
    /**
     * Responds to menu button press events.
     * @returns Whether the event was handled.
     */
    onMenu(): boolean;
    /**
     * Creates a Hold At Waypoint page menu item.
     * @param plan The selected flight plan.
     * @param isLegSelected Whether a flight plan leg is selected.
     * @returns A Hold At Waypoint page menu item.
     */
    protected createHoldAtWaypointMenuItem(plan: FlightPlan, isLegSelected: boolean): MenuItemDefinition;
    /**
     * Checks if a hold-at-waypoint can be inserted after a flight plan leg.
     * @param leg A flight plan leg.
     * @returns Whether a hold-at-waypoint can be inserted after the flight plan leg.
     */
    protected canHoldAtWaypoint(leg: LegDefinition): boolean;
    /**
     * Checks if there is a highlighted element in this section
     * @protected
     * @returns A boolean indicating if an element is highlighted in this section.
     */
    hasSelection(): boolean;
    /**
     * Adds a leg to the flight plan display segment.
     * @param index The index to add at.
     * @param leg The leg to add.
     */
    addLeg(index: number, leg: FixLegInfo): void;
    /**
     * Removes a leg from the flight plan display segment.
     * @param index The index to remove at.
     */
    removeLeg(index: number): void;
    /**
     * Refreshes this section's header.
     */
    updateHeader(): void;
    /**
     * Updates the visibility of this section's empty row.
     */
    updateEmptyRowVisibility(): void;
    /**
     * A callback which responds to changes in the active flight plan leg.
     * @param activeSegmentIndex The index of the active leg segment.
     * @param activeLegIndex The index of the active leg in its segment.
     */
    onActiveLegChanged(activeSegmentIndex: number, activeLegIndex: number): void;
    /**
     * Updates this section's leg information visibility based on the current active flight plan leg.
     * @param activeSegmentIndex The index of the active leg segment.
     * @param activeLegIndex The index of the active leg in its segment.
     */
    private updateLegInfoVisibility;
    /**
     * Sets the active leg in the flight plan display segment.
     * @param index The index of the leg to set as active.
     */
    setActiveLeg(index: number): void;
    /**
     * Cancels an active leg display in the flight plan display segment.
     * @param index The index of the leg to set as inactive.
     */
    cancelActiveLeg(index: number): void;
    /**
     * Cancels all active leg displays in section.
     */
    cancelAllActiveLegs(): void;
    /**
     * Returns the index of the active leg in this section.
     * @returns the index of the active lege, otherwise -1
     */
    getActiveLegIndex(): number;
    /**
     * Scrolls to the active leg.
     */
    resetActiveLegFocusPath(): void;
    /**
     * Ensures the active leg is in view.
     */
    ensureActiveLegInView(): void;
    /**
     * Updates a given leg's row from the leg's current calculations.
     * @param index The index of the leg.
     */
    updateFromLegCalculations(index: number): void;
    /**
     * Sets the leg altitude for a given leg.
     * @param index The index of the leg.
     * @param vnavLeg The vnav leg data.
     * @param revisedAltitude The optional replacement display altitude.
     */
    setLegAltitude(index: number, vnavLeg: VNavLeg, revisedAltitude?: number): void;
    /**
     * Gets the active leg distance.
     * @returns The Active Leg Distance in meters.
     */
    getActiveLegDistance(): number;
    /**
     * Gets the active leg magnetic dtk.
     * @returns The Active Leg dtk.
     */
    getActiveLegDtk(): number;
    /**
     * Sets whether or not this constraint is a user defined constraint.
     * @param index The index of the leg.
     * @param isUserConstraint Whether or not this is a user defined constraint.
     */
    setIsUserConstraint(index: number, isUserConstraint: boolean): void;
    /**
     * Gets the number of legs in this section.
     * @returns the number of legs in this section.
     */
    getLegsLength(): number;
    /**
     * Creates the SelectAirwayInputData when insert airway is selected.
     * @param segmentIndex The index of the segment.
     * @param selectedIndex The selected item index.
     * @param emptyRowSelected Whether the empty row is selected.
     * @returns the SelectAirwayInputData object
     */
    protected getAirwayInsertData(segmentIndex: number, selectedIndex: number, emptyRowSelected: boolean): SelectAirwayInputData;
    /**
     * Checks whether an airway can be inserted from this selected index.
     * @param segmentIndex The index of the segment.
     * @param isEmptyRowSelected If an empty row is selected.
     * @returns the SelectAirwayInputData object
     */
    protected canAirwayInsert(segmentIndex: number, isEmptyRowSelected: boolean): boolean;
    /**
     * Gets the loaded approach name.
     * @param plan The Flight Plan.
     * @returns The approach name as a string.
     */
    protected renderApproachName(plan: FlightPlan): VNode;
    /**
     * Checks if the header of this section is selected.
     * @protected
     * @returns A boolean indicating if the header is selected.
     */
    protected isHeaderSelected(): boolean;
    /**
     * Checks if the empty row of this section is selected.
     * @protected
     * @returns A boolean indicating if the empty row is selected.
     */
    protected isEmptyRowSelected(): boolean;
    /** @inheritdoc */
    consolidateKeyboardHEvent(source: G1000UiControl, evt: FmsHEvent): boolean;
    /**
     * Callback for when UpperKnob event happens on a leg.
     * @param source The FixInfo element.
     * @returns True if the control handled the event.
     */
    protected readonly onUpperKnobLegBase: (source: G1000UiControl) => boolean;
    /**
     * Callback to onUpperKnob on legs for override by sections
     * @param sender The FixInfo element.
     * @returns True if the control handled the event.
     */
    protected onUpperKnobLeg: (sender: G1000UiControl) => boolean;
    /**
     * Callback for when CLR event happens on a leg.
     * @param node The FixInfo element.
     * @returns A boolean indicating if the CLR was handled.
     */
    protected readonly onClrLegBase: (node: FixInfo) => boolean;
    /**
     * Callback to onClr on legs for override by sections
     * @param sender The FixInfo element.
     * @returns A boolean indicating if the CLR was handled.
     */
    protected onClrLeg: (sender: G1000UiControl) => boolean;
    /**
     * Open the WaypointInfo popup
     * @param source Source element
     */
    private openWaypointSelectionView;
    /**
     * A callback which is called when a leg selection changes.
     * @param item The selected item.
     */
    protected onLegItemSelected(item: Subject<FixLegInfo> | null): void;
    /**
     * Gets a flight plan focus from a selected flight plan leg.
     * @param leg The selected flight plan leg.
     * @returns The flight plan focus given the selected leg.
     */
    protected getFlightPlanFocusFromLeg(leg: LegDefinition): FlightPlanFocus;
    /**
     * A callback which is called when this section's header is focused.
     */
    protected onHeaderFocused(): void;
    /**
     * A callback which is called when this section's empty row is focused.
     */
    protected onEmptyRowFocused(): void;
    /**
     * Gets a flight plan focus when empty.
     * @returns A flight plan focus.
     */
    protected getFlightPlanFocusWhenEmpty(): FlightPlanFocus;
    /**
     * Method called to collapse or uncollapse this section.
     * @param setHidden is whether to set the legs hidden or not
     */
    abstract collapseLegs(setHidden: boolean): void;
    /**
     * A method called to get the offset leg index if there is a direct to in the segment.
     * @param index The leg index within the segment.
     * @returns The correct segment leg index for this leg.
     */
    private getPlanSegmentLegIndex;
    /**
     * A callback called when a user constraint is set on a leg.
     * @param index The leg index within the segment.
     * @param alt The altitude to set the user constraint.
     */
    private onAltitudeSet;
    /**
     * A callback called when a user constraint is removed from a leg.
     * @param index The leg index within the segment.
     */
    private onAltitudeRemoved;
    /**
     * Renders this section's list of flight plan legs.
     * @returns This section's list of flight plan legs, as a VNode.
     */
    protected renderLegList(): VNode;
    /**
     * Renders a Leg in the flight plan.
     * @param data The data object for this leg.
     * @returns The rendered VNode.
     */
    protected renderItem: (data: Subject<FixLegInfo>) => VNode;
    /**
     * Renders the vertical direct vnode (when we need to pass HTML).
     * @param constraint The VNAV Constraint.
     * @returns A VNode to be rendered in the MessageDialog.
     */
    protected renderVerticalDirectDialogContent: (constraint: VNavConstraint) => VNode;
}
//# sourceMappingURL=FPLSection.d.ts.map