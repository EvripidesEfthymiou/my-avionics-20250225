import { EventBus } from '@microsoft/msfs-sdk';
/**
 * Timer modes enum.
 */
export declare enum TimerMode {
    UP = 0,
    DOWN = 1
}
/**
 * This is a timer that can count up or down based on the mode.
 */
export declare class Timer {
    private onModeChanged;
    private onValueChanged;
    private _mode;
    private _timerRunning;
    private _worldTime;
    private _timerValue;
    private _startTime;
    private _canReset;
    private g1000Publisher;
    /**
     * Get method for timer mode.
     * @returns this._mode value
     */
    get mode(): TimerMode;
    /**
     * Get method for timer mode.
     * @param mode new mode value
     */
    set mode(mode: TimerMode);
    /**
     * Get method for timer state (running or not true/false).
     * @returns this._timerValue value
     */
    get timerRunning(): boolean;
    /**
     * Set method for timer state (running or not true/false).
     * @param state the state to set the timer (true = running, false = stopped).
     */
    set timerRunning(state: boolean);
    /**
     * Get the timer value in seconds.
     * @returns this._timerValue value
     */
    get timerValue(): number;
    /**
     * Set method for setting whether the timer can be reset.
     * @param state (true = stopped, can be reset, false = has been reset).
     */
    set canReset(state: boolean);
    /**
     * Set method for setting whether the timer can be reset.
     * @returns this._canReset value
     */
    get canReset(): boolean;
    /**
     * Builds an instance of a Timer
     * @param bus is the EventBus
     * @param onModeChanged is the onModeChanged callback when the timer mode changes
     * @param onValueChanged is the onValuaChanged callback when the timer value changes
     */
    constructor(bus: EventBus, onModeChanged: (newMode: TimerMode) => void, onValueChanged: (time: number) => void);
    /**
     * Method to update the timer based on mode and current utc time.
     */
    private updateTimer;
    /**
     * Method to set timer value
     * @param time is the time to set the timer in seconds
     */
    setTimerValue(time: number): void;
    /**
     * Method to reset all timer values
     */
    resetTimer(): void;
    /**
     * Utility method to get H:M:S values from seconds.
     * @param totalSeconds is the value in seconds
     * @returns an object of hours minutes and seconds as numbers
     */
    static SecondsToHMMSS(totalSeconds: number): any;
}
//# sourceMappingURL=Timer.d.ts.map