import { EventBus, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from '../../../../Shared/UI/FmsHEvent';
import { UiView, UiViewProps } from '../../../../Shared/UI/UiView';
import { UnitsUserSettingManager } from '../../../../Shared/Units/UnitsUserSettings';
import { VSpeedUserSettingManager } from '../../../../Shared/VSpeed/VSpeedUserSettings';
import { Timer } from './Timer';
import './TimerRef.css';
/**
 * The properties on the timer ref popout component.
 */
interface TimerRefProps extends UiViewProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** A manager for reference V-speed user settings. */
    vSpeedSettingManager: VSpeedUserSettingManager;
    /** A user setting manager. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether this instance of the G1000 has a Radio Altimeter. */
    hasRadioAltimeter: boolean;
}
/**
 * The PFD timer ref popout.
 */
export declare class TimerRef extends UiView<TimerRefProps> {
    private static readonly VSPEED_GROUP_COMPARATOR;
    popoutRef: import("@microsoft/msfs-sdk").NodeReference<UiView<UiViewProps, any, any>>;
    private readonly containerRef;
    private readonly minsToggleComponent;
    private readonly minsInputComponent;
    private readonly vSpeedGroups;
    private readonly vSpeedRowData;
    private readonly menuItems;
    private readonly minsRef;
    private readonly timerComponentRef;
    private readonly upDownItems;
    private readonly buttonRef;
    private readonly upDownControlRef;
    private timerButtonSubject;
    private controlPub;
    /**
     * Callback to handle when Timer changes the mode after reaching 0.
     * @param mode is the TimerMode
     */
    private onTimerModeChanged;
    /**
     * Callback to handle when Timer value changes.
     * @param seconds is the new timer time value in seconds.
     */
    private onTimerValueChanged;
    timer: Timer;
    private readonly minimumsSubscriber;
    private readonly decisionHeight;
    private readonly decisionAltitude;
    private readonly minimumsSubject;
    private readonly minimumsUnit;
    private minsToggleOptions;
    /** @inheritDoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * An event called when the menu button is pressed.
     * @returns True if the event was handled in this section.
     */
    onMenu(): boolean;
    /** @inheritDoc */
    onAfterRender(node: VNode): void;
    private handleMinimumsTypeSet;
    /**
     * Resets V-speeds to their default values.
     * @param groupName The name of the V-speed group containing the V-speeds to reset. If not defined, then the change
     * will be applied to all V-speeds in every group.
     */
    private resetVSpeeds;
    /**
     * Sets whether to show V-speed bugs.
     * @param show Whether to show the bugs.
     * @param groupName The name of the V-speed group containing the V-speeds to show or hide. If not defined, then the
     * change will be applied to all V-speeds in every group.
     */
    private setShowVSpeedBugs;
    /**
     * Callback to handle when Timer Button is Pressed.
     */
    onTimerButtonPressed: () => void;
    private onMinimumsRefOptionSelected;
    private updateMinimumsValue;
    private onUpDownMenuSelected;
    private buildUpDownMenuItems;
    /** @inheritDoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=TimerRef.d.ts.map