import { AirportFacility, VNode, Subject, Subscribable } from '@microsoft/msfs-sdk';
import { GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { NearbyAirport } from '../../../Shared/UI/Controllers/NearestStore';
import { UiControlGroup, UiControlGroupProps } from '../../../Shared/UI/UiControlGroup';
/**
 * The properties for the Nearest Airport component.
 */
interface NearestAirportItemProps extends UiControlGroupProps {
    /**
     * The actual data object for this fix
     * @type {NearbyAirport}
     */
    data: Subject<NearbyAirport>;
    /** The facility waypoint cache used by the item. */
    facWaypointCache: GarminFacilityWaypointCache;
    /**
     * A subscribable which provides the airplane's current true heading.
     */
    planeHeading: Subscribable<number>;
    /**
     * A function which handles DRCT input events on the nearest airport item's ident control.
     * @param airport The airport facility associated with the control.
     * @returns Whether the event was handled.
     */
    directToHandler(airport: AirportFacility | null): boolean;
    /**
     * A function which handles ENTER input events on the nearest airport item's frequency control.
     * @param freq The frequency associated with the control.
     * @returns Whether the event was handled.
     */
    frequencyHandler(freq: string): boolean;
}
/** The Nearest Airport component. */
export declare class NearestAirportItem extends UiControlGroup<NearestAirportItemProps> {
    private readonly fixEl;
    private readonly ident;
    private readonly bearing;
    private readonly distance;
    private readonly approach;
    private readonly freqType;
    private readonly frequency;
    private readonly rwyLength;
    private readonly frequencyControlRef;
    private isVisible;
    /**
     * Gets a boolean indicating if this control is able to be focused.
     * @returns true
     */
    getIsFocusable(): boolean;
    /**
     * Hide this after render, until we get our first update, to avoid showing empty fields.
     */
    onAfterRender(): void;
    /** @inheritdoc */
    getHighlightElement(): Element | null;
    /**
     * Update our data when the subbed item changes.
     * @param v The new data.
     */
    private updateData;
    /**
     * Sets the visibility of this item.
     * @param value Whether this item should be visible.
     */
    private setVisibility;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=NearestAirportItem.d.ts.map