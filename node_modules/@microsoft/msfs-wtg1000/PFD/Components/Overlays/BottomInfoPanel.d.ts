import { ControlPublisher, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import { UnitsUserSettingManager } from '../../../Shared/Units/UnitsUserSettings';
import './BottomInfoPanel.css';
/**
 * The properties on the Attitude component.
 */
interface BottomInfoPanelProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the control publisher. */
    controlPublisher: ControlPublisher;
    /** A user setting manager. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * The PFD attitude indicator.
 */
export declare class BottomInfoPanel extends DisplayComponent<BottomInfoPanelProps> {
    private static readonly FORMAT_SETTING_MAP;
    private oatValue;
    private bearing1DistSubject;
    private bearing2DistSubject;
    private timerStr;
    private hdg;
    private bearingPointerAdf;
    private bearingPointerDirection;
    private av1StateOn;
    private av2StateOn;
    private isMfdPowered;
    private bearing1Container;
    private bearing2Container;
    private bearing1SrcElement;
    private bearing2SrcElement;
    private bearing1DistElement;
    private bearing1DistUnits;
    private bearing2DistElement;
    private bearing2DistUnits;
    private bearing1DirElement;
    private bearing2DirElement;
    private bearing1IdentElement;
    private bearing2IdentElement;
    private tempBox;
    private oatHide;
    private currentBearing1Source;
    private currentBearing2Source;
    private mfdPowerOnSub?;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     *
     * Handles when the MFD has powered on.
     * @param isPowered Whether or not the MFD is finished powering on.
     */
    private onMfdPowerOn;
    /**
     * A callback called when the pitch updates from the event bus.
     * @param temp The current pitch value.
     */
    private onUpdateOAT;
    /**
     * Handle an updated bearing source.
     * @param data The new bearing source info.
     */
    private onUpdateBearingSrc;
    /**
     * updates the bearing 1 boxes
     * @param passed The new bearing source info.
     */
    private updateBearing1FailedBoxes;
    /**
     * updates the bearing 2 boxes
     * @param passed The new bearing source info.
     */
    private updateBearing2FailedBoxes;
    /**
     * will make sure that error boxes to not occure on GPS and Adf settings
     * while also showing the information needed if data is present
     * @param bearingSource The new bearing source info.
     */
    private dontShowFailedBoxesAndShowNavTypeSpecifics;
    /**
     * Handle hiding or showing the entire bearing needle data element.
     * @param display Whether to show thhe bearing needle data element or not.
     * @param index is the index of the bearing source
     */
    private onShowBearingDataElement;
    /**
     * Handle an updated bearing distance.
     * @param data The BearingDistance message.
     */
    private onUpdateBearingDist;
    /**
     * Handle an updated bearing heading..
     * @param data The BearingDirection message.
     */
    private onUpdateBearingDir;
    /**
     * Handle an updated bearing ident.
     * @param data The BearingIdent message.
     */
    private onUpdateBearingIdent;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=BottomInfoPanel.d.ts.map