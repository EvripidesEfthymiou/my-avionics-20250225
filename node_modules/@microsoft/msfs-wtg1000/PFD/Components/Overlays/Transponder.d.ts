import { ControlPublisher, DisplayComponent, EventBus, VNode } from '@microsoft/msfs-sdk';
import './Transponder.css';
/**
 * The properties on the Attitude component.
 */
interface TransponderProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** An instance of the control publisher. */
    controlPublisher: ControlPublisher;
}
/**
 * The PFD attitude indicator.
 */
export declare class Transponder extends DisplayComponent<TransponderProps> {
    private xpdrCodeElement;
    private xpdrModeElement;
    private xpdrIdentElement;
    private codeEdit;
    private readonly xpdrCodeSubject;
    private readonly xpdrModeSubject;
    private readonly isOnGround;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * A method to handle XPDR-related Control Pad HEvents.
     * @param evt the name of the HEvent.
     */
    private handleXpdrHEvent;
    /**
     * Changes the second two digits of the xpdr code by one (tens and ones).
     * @param increment whether to increment or decrement the code.
     */
    private changeCodeByOne;
    /**
     * Changes the first two digits of the xpdr code by one (thousands and hundreds).
     * @param increment whether to increment or decrement the code.
     */
    private changeCodeByHundreds;
    /**
     * A method called when the soft menu sends a G1000 Control Event to edit the xpdr code.
     * @param edit is a bool of whether to edit the code or stop editing the code.
     */
    private updateCodeEdit;
    /**
     * A method called when the soft menu sends a digit from the xpdr code menu via the g1000 event bus.
     * @param value is the digit sent (0-7; -1 is a backspace).
     */
    private editCode;
    /**
     * A method called when the navcom publisher sends a new xpdr code.
     * @param code is the new xpdr code
     */
    private onXpdrCodeSimUpdate;
    /**
     * A method called to update the displayed xpdr code.
     * @param code is the new xpdr code
     */
    private onXpdrCodeUpdate;
    /**
     * A method called when the navcom publisher sends a new xpdr code.
     * @param mode is the new xpdr mode.
     */
    private onXpdrModeUpdate;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=Transponder.d.ts.map