import { ComponentProps, DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
/** The properties for the {@link NdInfomation} component. */
export interface PathwaysInformationProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The flight planner. */
    flightPlanner: FlightPlanner;
    /** The fms. */
    fms: Fms;
}
/** The NdInfomation component. */
export declare class Pathways extends DisplayComponent<PathwaysInformationProps> {
    private readonly pathwaysUpdateRate;
    private readonly dataProvider;
    private readonly pathwaysBkgCanvas;
    private pathwaysContainerWidth;
    private halfPathwaysContainerWidth;
    private pathwaysContainerHeight;
    private halfPathwaysContainerHeight;
    private canvasStyle;
    private lineWidth;
    private outlineFactor;
    private cssColors;
    private clockSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Configure all size related variables.
     */
    setCanvasSize(): void;
    /** Called by the update ticker at a fix rate */
    private update;
    /** Drawing method for the canvas.   */
    drawCanvas(): void;
    /**
     * Draw a box with the raw data provided.
     * @param ctx context
     * @param ulx upper left x on the screen
     * @param uly upper left y on the screen
     * @param llx lower left x on the screen
     * @param lly lower left y on the screen
     * @param lrx lower right x on the screen
     * @param lry lower right y on the screen
     * @param urx upper right x on the screen
     * @param ury upper right y on the screen
     * @param hasPointers float 64 array with pointer corners
     * @param pulx upper left pointer x on the screen
     * @param puly upper left pointer y on the screen
     * @param pllx lower left pointer x on the screen
     * @param plly lower left pointer y on the screen
     * @param plrx lower right pointer x on the screen
     * @param plry lower right pointer y on the screen
     * @param purx upper right pointer x on the screen
     * @param pury upper right pointer y on the screen
     */
    private drawBox;
    /**
     * Translate the normalized x to screen x.
     * @param normalizedX Normalized (as rendered) x
     * @returns the screen x coordinate.
     */
    private normalizedToScreenX;
    /**
     * Translate the normalized y to screen y.
     * @param normalizedY Normalized (as rendered) y
     * @returns the screen y coordinate.
     */
    private normalizedToScreenY;
    /** @inheritDoc */
    render(): VNode;
}
//# sourceMappingURL=Pathways.d.ts.map