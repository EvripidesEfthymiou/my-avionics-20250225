import { DisplayComponent, EventBus, FlightPlanner, VNode } from '@microsoft/msfs-sdk';
import { NavIndicatorController } from '@microsoft/msfs-garminsdk';
import { FmaLegIcon } from '../FmaLegIcon';
import './Fma.css';
/**
 * The properties on the airspeed component.
 */
interface FmaProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** A flight planner. */
    planner: FlightPlanner;
    /** The nav indicator controller. */
    navController: NavIndicatorController;
}
/**
 * The PFD FMA.
 */
export declare class Fma extends DisplayComponent<FmaProps> {
    private apVerticalSpeedArrow;
    private fromWptElement;
    private toWptElement;
    iconComponentRef: import("@microsoft/msfs-sdk").NodeReference<FmaLegIcon>;
    private planActive;
    private distanceSubject;
    private bearingSubject;
    private autopilotModes;
    private selectedVs;
    private selectedFLC;
    private lateralActiveModeSubject;
    private lateralArmedModeSubject;
    private verticalActiveSubject;
    private verticalArmedSubject;
    private verticalApproachArmedSubject;
    private verticalValueSubject;
    private verticalValueUnitSubject;
    private vnavAltCapType;
    private vnavPathMode;
    private approachMode;
    private lateralModeFailed;
    private verticalModeFailed;
    private obsActive;
    private obsValue;
    private flightDirectorOn;
    private apMaster;
    private ydActive;
    private fdNotInstalled;
    private readonly apVsArrowDirectionIsUp;
    private readonly apVsArrowIsVisible;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /**
     * Gets the FMA display string from an AP Vertical Active Mode.
     * @param v The computed subject input value.
     * @returns the string to display on the FMA
     */
    private getVerticalActiveString;
    /**
     * Gets the FMA display string from an AP Vertical Armed Mode.
     * @param v The computed subject input value.
     * @returns the string to display on the FMA
     */
    private getVerticalArmedString;
    /**
     * Gets the FMA display string from an AP Vertical Approach Armed Mode.
     * @param v The computed subject input value.
     * @returns the string to display on the FMA
     */
    private getVerticalApproachArmedString;
    /**
     * Gets the FMA display string from an AP Lateral Active Mode.
     * @param v The computed subject input value.
     * @returns the string to display on the FMA
     */
    private getLateralActiveString;
    /**
     * Gets the FMA display string from an AP Lateral Armed Mode.
     * @param v The computed subject input value.
     * @returns the string to display on the FMA
     */
    private getLateralArmedString;
    /**
     * A callback called when the active VNAV path mode changes.
     * @param mode The new path mode.
     * @param type The new alt capture type.
     * @param approachMode The new approach mode.
     */
    private onVNavUpdate;
    /**
     * Callback called when the VS arrow direction changes.
     * @param isUp True if the arrow is pointing up.
     */
    private apVsArrowDirectionIsUpChangedHandler;
    /**
     * Callback called when the VS arrow visibility changes.
     * @param isVisible True if the arrow is visible.
     */
    private apVsArrowIsVisibleChangedHandler;
    /**
     * Handles the vertical value subjects on inputs from the event bus.
     */
    private handleVerticalValueChanged;
    /**
     * A callback called when the FD State changes from the event bus.
     * @param fdState The current FD State value.
     */
    private onFdChange;
    /**
     * A callback called when the flight plan changes.
     * @param change is the flightplanactivelegevent
     */
    private onLegChange;
    /**
     * Returns the fix type string from the flag.
     * @param fixTypeFlag is the flag.
     * @returns a string.
     */
    private getFixType;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=Fma.d.ts.map