import { EventBus } from '@microsoft/msfs-sdk';
/**
 * Manages backlight levels for the PFD and MFD screens and softkeys.
 */
export declare class BacklightManager {
    readonly display: 'pfd' | 'mfd';
    private static readonly RESPONSE_MIN;
    private static readonly RESPONSE_MAX;
    private static readonly RESPONSE_FACTOR;
    private static readonly RESPONSE_SCALE;
    private static readonly AUTO_UPDATE_REALTIME_FREQ;
    private static readonly AUTO_UPDATE_SIMTIME_THRESHOLD;
    private static readonly AUTO_MAX_INTENSITY;
    private static readonly AUTO_MIN_INTENSITY;
    private static readonly AUTO_INTENSITY_RANGE;
    private static readonly AUTO_MAX_SOLAR_ANGLE;
    private static readonly AUTO_MIN_SOLAR_ANGLE;
    private static readonly AUTO_MAX_SOLAR_ANGLE_SIN;
    private static readonly AUTO_MIN_SOLAR_ANGLE_SIN;
    private static readonly AUTO_SOLAR_ANGLE_RANGE_SIN;
    private static readonly EPOCH;
    private static readonly DAY;
    private static tempVec3;
    private readonly settingManager;
    private readonly MODE_SETTING_NAME;
    private readonly INTENSITY_SETTING_NAME;
    private readonly LVAR_NAME;
    private readonly screenIntensitySetting;
    private simTime;
    private readonly ppos;
    private needRecalcAuto;
    private readonly simTimeSub;
    private readonly pposSub;
    /**
     * Constructor.
     * @param display The display to manage. Either the PFD or the MFD.
     * @param bus The event bus.
     */
    constructor(display: 'pfd' | 'mfd', bus: EventBus);
    /**
     * Initializes this manager. Once this manager is initialized, it will automatically set backlight levels in response
     * to changes in their settings.
     */
    init(): void;
    /**
     * A callback which is called when the backlight mode changes.
     * @param mode The new backlight mode.
     */
    private onBacklightModeChanged;
    /**
     * A callback which is called when the screen intensity value changes.
     * @param simvar The simvar to adjust.
     * @param intensity The new intensity value.
     */
    private onScreenIntensityChanged;
    /**
     * A callback which is called when the sim time changes.
     * @param time The new sim time.
     */
    private onSimTimeChanged;
    /**
     * A callback which is called when the sim time changes.
     * @param ppos The new plane position.
     */
    private onPPosChanged;
    /**
     * This method runs once per update cycle.
     */
    private onUpdate;
    /**
     * Updates backlight intensity according to the auto setting algorithm.
     */
    private updateAutoBacklightIntensity;
    /**
     * Calculates the subsolar point (the point on Earth's surface directly below the Sun, where solar zenith angle = 0)
     * given a specific time.
     * @param time A UNIX timestamp in milliseconds.
     * @param out A Float64Array object to which to write the result.
     * @returns the subsolar point at the specified time.
     */
    private static calculateSubSolarPoint;
}
//# sourceMappingURL=BacklightManager.d.ts.map