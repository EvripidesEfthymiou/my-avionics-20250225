import { EventBus } from '@microsoft/msfs-sdk';
/** Simvars to publish. */
export declare enum FuelComputerSimVars {
    Remaining = "L:WT1000_Fuel_GalRemaining",
    Burned = "L:WT1000_Fuel_GalBurned",
    Endurance = "L:WT1000_Fuel_Endurance",
    Range = "L:WT1000_Fuel_Range"
}
/** Fuel remaining adjustment parameters. */
export type FuelRemaingAdjustment = {
    /** The direction in which to make the adjustment. */
    direction: 'add' | 'remove' | 'set';
    /** The amount to adjust by. */
    amount: number;
};
/** Simvars for the fuel computer to monitor. */
export interface FuelSimVars {
    /** The amount of fuel remaining. */
    fuelQty: number;
    /** The flow on engine 1. */
    fuelFlow1: number;
    /** The flow on engine 2. */
    fuelFlow2: number;
}
/** Simvars for the fuel totalizer to publish. */
export interface FuelTotalizerSimVars {
    /** The amount of fuel remaining in the fuel totalizer. */
    remainingFuel: number;
    /** The amount of fuel burned in the fuel totalizer. */
    burnedFuel: number;
    /** The fuel endurance calculated by the fuel totalizer. */
    fuelEndurance: number;
    /** The fuel range calculated by the fuel totalizer. */
    fuelRange: number;
}
/**
 * An instrument that tracks fuel state for use by the G1000 systems page.
 */
export declare class FuelComputer {
    private readonly bus;
    private simVarPublisher;
    private simVarSubscriber;
    private controlSubscriber;
    private totalizer;
    private totalizerSimVarPublisher;
    private readonly controlPublisher;
    /**
     * Create a fuel computer.
     * @param bus An event bus
     */
    constructor(bus: EventBus);
    /** Intialize the instrument. */
    init(): void;
    /**
     * Perform events for the update loop.
     */
    onUpdate(): void;
}
//# sourceMappingURL=FuelComputer.d.ts.map