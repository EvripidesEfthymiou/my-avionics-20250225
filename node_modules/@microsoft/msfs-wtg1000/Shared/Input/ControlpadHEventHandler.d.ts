import { FmsHEvent } from '../UI/FmsHEvent';
export declare enum ControlPadKeyOperations {
    None = 0,
    InsertCharacter = 1,
    ApplyBackSpace = 2,
    ReverseSign = 3
}
/**
 *
 */
interface KeyboardEventTranslationResult {
    /** The operation found by the evaluation */
    KeyboardOperation: ControlPadKeyOperations;
    /** Pressed key as string, to be inserted e.g. into InputComponent */
    ReceivedKey: string | null;
}
/**
 * Handling the raw H-events, coming from the control pad (e.g. of the SR22).
 * This provides an abstraction for the 40 raw events, which are translated into three operations:
 * - insert character
 * - backspace
 * - signReversal (+/-)
 */
export declare class ControlpadHEventHandler {
    private static prefetchedCharacter;
    private static readonly touchPadKeyMap;
    /**
     * Checks an FmsHEvent whether it represents a character key from the controlpad keyboard
     * @param evt FmsHEvent, which needs to be checked
     * @returns boolean result of check
     */
    static isKeyboardTextInput(evt: FmsHEvent): boolean;
    /**
     * Translate an FmsHEvent into one of the keyboard operations insert character, backspace or +/-
     * @param evt FmsHEvent, which needs to be translated
     * @returns the found keyboard input operation and the key as string argument if available
     */
    static evaluateKeyboardInput(evt: FmsHEvent): KeyboardEventTranslationResult;
    /**
     * This static method returns the character, which was evaluated the last time, when evaluateKeyboardInput was called.
     * @returns prefetched character.
     */
    static getPrefetchedCharacter(): string | undefined;
    /** This static method clears the character, which was evaluated when evaluateKeyboardInput was called the last time.   */
    static clearPrefetchedCharacter(): void;
}
export {};
//# sourceMappingURL=ControlpadHEventHandler.d.ts.map