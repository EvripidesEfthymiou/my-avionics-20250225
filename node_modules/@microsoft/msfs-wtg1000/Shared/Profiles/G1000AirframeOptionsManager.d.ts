/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { Annunciation, EventBus, Warning, XMLExtendedGaugeConfig } from '@microsoft/msfs-sdk';
import { VSpeedGroup } from '../VSpeed/VSpeed';
import { AirspeedIndicatorConfig } from './AirspeedIndicator/AirspeedIndicatorConfig';
import { AutopilotConfig } from './Autopilot/AutopilotConfig';
/**
 * A manager for G1000 airframe options.
 */
export declare class G1000AirframeOptionsManager {
    private readonly configFactory;
    private _hasRadioAltimeter;
    private _hasWeatherRadar;
    private _gaugeConfig;
    private _annunciationConfig;
    private _warningConfig;
    private instrument;
    private gaugeFactory;
    private annunciationFactory;
    private warningFactory;
    /**
     * Create an G1000 options manager.
     * @param instrument The base instrument we're configuring.
     * @param bus An event bus.
     */
    constructor(instrument: BaseInstrument, bus: EventBus);
    /**
     * Get whether radar altimeter is enabled.
     * @returns Radar altimeter state as a bool.
     */
    get hasRadioAltimeter(): boolean;
    /**
     * Get whether weather radar is enabled.
     * @returns Weather radar state as a bool.
     */
    get hasWeatherRadar(): boolean;
    /**
     * Get the XML-based EIS gauge configuration.
     * @returns The gauge config object.
     */
    get gaugeConfig(): XMLExtendedGaugeConfig;
    /**
     * Get the XML-based annunciation configuration.
     * @returns The annunciation config object.
     */
    get annunciationConfig(): Annunciation[];
    /**
     * Get the XML-based warning configuration.
     * @returns The warning config object.
     */
    get warningConfig(): Warning[];
    private _autopilotConfig?;
    /** A config which defines options for the autopilot. */
    get autopilotConfig(): AutopilotConfig;
    private _vSpeedGroups?;
    /** Definitions for reference V-speeds. */
    get vSpeedGroups(): ReadonlyMap<string, VSpeedGroup>;
    private _airspeedIndicatorConfig?;
    /** A config which defines options for the airspeed indicator. */
    get airspeedIndicatorConfig(): AirspeedIndicatorConfig;
    /**
     * Parse the plane's EIS configuation.
     * @param document The configuration as an XML document.
     * @returns The parsed EIS configuration.
     */
    private parseGaugeConfig;
    /**
     * Parse the plane's annunciation configuration.
     * @param document The configuration as an XML document.
     * @returns The parsed annunciation configuration.
     */
    private parseAnnunciationConfig;
    /**
     * Parse the plane's warning configuration.
     * @param document The configuration as an XML document.
     * @returns The parsed warning configuration.
     */
    private parseWarningConfig;
    /**
     * Parse the panel.xml for airframe specific options.
     */
    parseConfig(): void;
    /**
     * Parses an autopilot configuration object from a configuration document. If none can be found or parsed without
     * error, then this method will return a default configuration object.
     * @param config The root of the configuration document.
     * @returns The autopilot configuration defined by the configuration document, or a default version if the document
     * does not define a valid configuration.
     */
    private parseAutopilotConfig;
    /**
     * Parses reference V-speed definitions from a configuration document. If none can be found or parsed without error,
     * then this method will return a default set of V-speed definitions.
     * @param config The root of the configuration document.
     * @returns Reference V-speed definitions defined by the configuration document, or a default version if the document
     * does not define a valid configuration.
     */
    private parseVSpeedGroups;
    /**
     * Gets a set of default reference V-speed definitions. The set contains definitions for the following V-speeds (in
     * order):
     *
     * 1. V-speed name: `glide`, label: `GLIDE`
     * 2. V-speed name: `r`, label: `Vr`
     * 3. V-speed name: `x`, label: `Vx`
     * 4. V-speed name: `y`, label: `Vy`
     *
     * The default values for the V-speeds are derived from the corresponding entries in the aircraft configuration
     * files.
     * @returns An array containing a set of default reference V-speed definitions.
     */
    private getDefaultVSpeedGroups;
    /**
     * Parses an airspeed indicator configuration object from a configuration document. If none can be found or parsed
     * without error, then this method will return a default configuration object.
     * @param config The root of the configuration document.
     * @returns The airspeed indicator configuration defined by the configuration document, or a default version if the
     * document does not define a valid configuration.
     */
    private parseAirspeedIndicatorConfig;
}
//# sourceMappingURL=G1000AirframeOptionsManager.d.ts.map