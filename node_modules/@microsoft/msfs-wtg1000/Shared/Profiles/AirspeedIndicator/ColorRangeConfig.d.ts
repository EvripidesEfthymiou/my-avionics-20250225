import { AirspeedIndicatorColorRange, AirspeedIndicatorColorRangeColor, AirspeedIndicatorColorRangeWidth } from '@microsoft/msfs-garminsdk';
import { ConfigFactory, ResolvableConfig } from '../../Config/Config';
import { NumericConfig } from '../../Config/NumericConfig';
/**
 * A configuration object which defines an airspeed tape color range.
 */
export declare class ColorRangeConfig implements ResolvableConfig<AirspeedIndicatorColorRange> {
    readonly isResolvableConfig = true;
    /** The width of this config's color range. */
    readonly width: AirspeedIndicatorColorRangeWidth;
    /** The color of this config's color range. */
    readonly color: AirspeedIndicatorColorRangeColor;
    /** The config which defines the minimum airspeed value of this config's color range. */
    readonly minimum: NumericConfig;
    /** The config which defines the maximum airspeed value of this config's color range. */
    readonly maximum: NumericConfig;
    /**
     * Creates a new ColorRangeConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /**
     * Parses an endpoint numeric config from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The numeric config defined by the specified element, or `undefined` if one could not be created.
     */
    private parseEndpoint;
    /** @inheritdoc */
    resolve(): AirspeedIndicatorColorRange;
}
//# sourceMappingURL=ColorRangeConfig.d.ts.map