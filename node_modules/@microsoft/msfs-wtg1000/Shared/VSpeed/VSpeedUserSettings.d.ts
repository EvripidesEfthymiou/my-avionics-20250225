import { Consumer, EventBus, UserSetting, UserSettingManager, UserSettingMap, UserSettingRecord, UserSettingValue } from '@microsoft/msfs-sdk';
import { VSpeedUserSettingTypes } from '@microsoft/msfs-garminsdk';
import { VSpeedGroup } from './VSpeed';
/**
 * A manager for reference V-speed user settings.
 */
export declare class VSpeedUserSettingManager implements UserSettingManager<VSpeedUserSettingTypes> {
    /** An map of groups (keyed on group type) containing the reference V-speeds for which this manager contains settings. */
    readonly vSpeedGroups: ReadonlyMap<string, VSpeedGroup>;
    private readonly manager;
    /**
     * Creates a new instance of VSpeedUserSettingManager.
     * @param bus The event bus.
     * @param vSpeedGroups Definitions for each reference V-speed for which to create settings, organized into groups.
     */
    constructor(bus: EventBus, vSpeedGroups: ReadonlyMap<string, VSpeedGroup>);
    /** @inheritdoc */
    tryGetSetting<K extends string>(name: K): K extends keyof VSpeedUserSettingTypes ? UserSetting<VSpeedUserSettingTypes[K]> : undefined;
    /** @inheritdoc */
    getSetting<K extends keyof VSpeedUserSettingTypes & string>(name: K): UserSetting<NonNullable<VSpeedUserSettingTypes[K]>>;
    /** @inheritdoc */
    whenSettingChanged<K extends keyof VSpeedUserSettingTypes & string>(name: K): Consumer<NonNullable<VSpeedUserSettingTypes[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritdoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, VSpeedUserSettingTypes>): UserSettingManager<M & VSpeedUserSettingTypes>;
}
//# sourceMappingURL=VSpeedUserSettings.d.ts.map