import { ComponentProps, DisplayComponent, Subject } from '@microsoft/msfs-sdk';
import { FmsHEvent } from './FmsHEvent';
import { ScrollController } from './ScrollController';
import { UiControl } from './UiControl';
import { ScrollableControl } from './UiView';
/** Ui control group props */
export interface UiControlGroupProps extends ComponentProps {
    onRegister?(ctrl: ScrollableControl, unregister?: boolean): void;
    /** If 'true' the list will also be scrollable using the upper knob */
    upperKnobCanScroll?: boolean;
    /**
     * A function to call when the control group is focused.
     * @param sender The control group.
     */
    onFocused?(sender: UiControlGroup): void;
    /**
     * A function to call when the control group is blurred.
     * @param sender The control group.
     */
    onBlurred?(sender: UiControlGroup): void;
}
/** The direction of entry to the control when focusing on the control group */
export type EntryDirection = 'top' | 'bottom';
/** Ui control group */
export declare abstract class UiControlGroup<T extends UiControlGroupProps = UiControlGroupProps> extends DisplayComponent<T> {
    protected scrollController: ScrollController;
    protected focusSubject: Subject<boolean>;
    /** @inheritdoc */
    constructor(props: T);
    /** @inheritdoc */
    onBeforeRender(): void;
    /**
     * Method to focus this control group
     * @param dir The direction of entry.
     */
    focus(dir?: EntryDirection): void;
    /** Method to unfocus this control group */
    blur(): void;
    /** Method to check if this UiControlGroup is in focus
     * @returns true if the control group is in focus, false otherwise
     */
    getIsFocused(): boolean;
    /**
     * Gets a boolean indicating if this control is able to be focused.
     * @returns true
     */
    getIsFocusable(): boolean;
    /**
     * A method called when the control group scroll is toggled.
     * @param enabled if the scroll is enabled.
     */
    protected onScrollToggled(enabled: boolean): void;
    /**
     * Toggles the scroll highlighting
     */
    toggleScroll(): void;
    /**
     * Sets the scroll enabled state
     * @param enabled indicating if scrolling should be enabled
     */
    setScrollEnabled(enabled: boolean): void;
    /**
     * This is just a dummy that exists here to be compatible
     * with the union type of ScrollableControl
     * @returns null
     */
    getHighlightElement(): Element | null;
    /**
     * Handles HEvents and routes them to the subdialog when existant.
     * @param evt The received event.
     * @returns true if the event was handled in this control group, false otherwise.
     */
    processHEvent(evt: FmsHEvent): boolean;
    /**
     * Routes an interaction event to a UiControl.
     * @param evt An interaction event.
     * @param control The UiControl to which to route the event.
     * @returns Whether the event was handled by the UiControl.
     */
    protected routeEventToControl(evt: FmsHEvent, control: UiControl): boolean;
    /**
     * Attempts to handle scroll events.
     * @param evt The received event.
     * @returns whether the event was handled.
     */
    protected processScrollEvent(evt: FmsHEvent): boolean;
    /**
     * Handler for interaction events to be handled by the view.
     * @param evt The HEvenet.
     * @returns true if the event was handled in this group
     */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** Register/Unregisters a UiControl with the scroll controller.
     * @param ctrl The UiControl to register.
     * @param unregister Indicates if the UiControl should be unregistered.
     */
    protected register: (ctrl: ScrollableControl, unregister?: boolean) => void;
    /**
     * A callback which is called when this control group is focused.
     */
    protected onFocused(): void;
    /**
     * A callback which is called when this control group is blurred.
     */
    protected onBlurred(): void;
}
//# sourceMappingURL=UiControlGroup.d.ts.map