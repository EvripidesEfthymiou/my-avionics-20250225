import { Subject, VNode } from '@microsoft/msfs-sdk';
import { FixLegInfo } from './FPLTypesAndProps';
import { G1000UiControl, G1000UiControlProps } from '../G1000UiControl';
import { ViewService } from '../ViewService';
/**
 * The properties for the FixInfo component.
 */
interface FixInfoProps extends G1000UiControlProps {
    /**
     * The actual data object for this fix
     * @type {Subject<FixLegInfo>}
     * @memberof FixInfoComponentProps
     */
    data: Subject<FixLegInfo>;
    /** whether this is an extended view including altitude */
    isExtended?: boolean;
    /** An instance of the view service. */
    viewService: ViewService;
    /** A callback called when a user changes the VNAV altitude. */
    onAltitudeChanged: (altitude: number) => void;
    /** A callback called when an altitude is removed. */
    onAltitudeRemoved: () => void;
    /** A callback called to get the active leg distance remaining. */
    getActiveLegDistance: () => number;
    /** A callback called to get the active leg desired track. */
    getActiveLegDtk: () => number;
}
/** The FixInfo component. */
export declare class FixInfo extends G1000UiControl<FixInfoProps> {
    private static viewableLegTypes;
    private readonly fixEl;
    private readonly highlightElementRef;
    private readonly altitudeRef;
    private readonly ACTIVE_WPT_CLASS;
    private readonly isUserConstraint;
    private readonly hasInvalidAltitude;
    private readonly isAltitudeHidden;
    private _dtk;
    private _distance;
    private _altitude;
    private _altitudeUnits;
    private _fixType;
    /**
     * Sets the leg distance.
     * @param leg The FixLegInfo Object
     */
    private setDistance;
    /**
     * Resets highlight animation when the leg goes to/from active so the right color variable is used.
     * We need to trigger a reflow so the browser parses the animation again.
     */
    private resetHighlightAnimation;
    /**
     * Gets the container element location
     * @returns An array of x,y.
     */
    getContainerElementLocation(): [number, number];
    /** @inheritdoc */
    getHighlightElement(): Element | null;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /** @inheritdoc */
    onEnter(): boolean;
    /**
     * Sets whether or not the FixInfo control is visible.
     * @param isVisible Whether or not the control is visible.
     */
    private setIsVisible;
    /** @inheritdoc */
    protected onNameFocused(): void;
    /** @inheritdoc */
    protected onNameBlurred(): void;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=FixInfo.d.ts.map