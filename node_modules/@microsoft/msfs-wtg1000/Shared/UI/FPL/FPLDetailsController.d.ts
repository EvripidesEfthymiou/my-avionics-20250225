import { EventBus, NodeReference } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FPLSection } from '../../../PFD/Components/UI/FPL/FPLSection';
import { FPLOrigin } from '../../../PFD/Components/UI/FPL/FPLSectionOrigin';
import { FplActiveLegArrow } from '../UIControls/FplActiveLegArrow';
import { FPLDetailsStore } from './FPLDetailsStore';
/**
 * The scroll mode for FPL.
 */
export declare enum ScrollMode {
    MANUAL = 0,
    AUTO = 1
}
/**
 * Controller for FPLDetails
 */
export declare class FPLDetailsController {
    private readonly store;
    private readonly fms;
    private readonly bus;
    private readonly scrollToActiveLegCb;
    readonly sectionRefs: NodeReference<FPLSection>[];
    readonly originRef: NodeReference<FPLOrigin>;
    readonly legArrowRef: NodeReference<FplActiveLegArrow>;
    hasVnav: boolean;
    private isInitialized;
    airwaysCollapsed: boolean;
    scrollMode: ScrollMode;
    /** First time this view is loaded, we need to force scroll to the active leg */
    private didInitScroll;
    /**
     * Constructor
     * @param store the store instance
     * @param fms the fms
     * @param bus the bus
     * @param scrollToActiveLegCb the callback for scroll to active leg
     */
    constructor(store: FPLDetailsStore, fms: Fms, bus: EventBus, scrollToActiveLegCb: () => void);
    /** Initializes fpldetails controller */
    initialize(): void;
    /**
     * A method to initialize the active leg.
     * TODO: REMOVE THIS WHEN THE ROOT PROBLEM IS FIXED
     */
    initActiveLeg(): void;
    /**
     * A method to initialize the dto leg.
     * TODO: REMOVE THIS WHEN THE ROOT PROBLEM IS FIXED
     */
    initDtoLeg(): void;
    /**
     * A callback fired when a proc details event is received from the bus.
     * @param e The event that was captured.
     */
    private onProcDetailsChanged;
    /**
     * A callback fired when a vnav updated message is recevied from the bus.
     * @param planIndex The index of the vertical plan that was updated by the path calculator.
     */
    private onVnavUpdated;
    /**
     * A callback fired when the Vertical Direct softkey is pressed.
     * @param state The event value was captured.
     */
    private onVerticalDirect;
    /**
     * A callback fired when a new plan is loaded.
     * @param e The event that was captured.
     */
    private onFlightPlanLoaded;
    /**
     * A callback fired when the plan index changes (used for handling direct to display).
     * @param e The event that was captured.
     */
    private onPlanIndexChanged;
    /**
     * A callback fired when the plan is calculated.
     * @param e The event that was captured.
     */
    private onPlanCalculated;
    /**
     * A callback fired when the origin or destination is updated.
     * @param e The event that was captured.
     */
    private onOriginDestChanged;
    /**
     * Manages the state of the active/direct leg indications based on the store.activeLegState subject state.
     */
    private onActiveLegStateChange;
    /**
     * Updates the active leg state subjects.
     */
    private updateActiveLegState;
    /**
     * A callback fired when a flight plan leg changes.
     * @param e The event that was captured.
     */
    private onLegChange;
    /**
     * A callback fired when a flight plan segment changes.
     * @param e The event that was captured.
     */
    private onSegmentChange;
    /**
     * Updates all section headers and empty rows.
     */
    private updateSectionsHeaderEmptyRow;
    /**
     * A method called to collapse the airways.
     */
    collapseAirways(): void;
    /**
     * A method called to manage collapsed airways when the active segment changes.
     * @param plan is the flight plan
     */
    private manageCollapsedAirways;
    /**
     * Notifies this controller's sections of the flight plan's active leg state.
     * @param plan The flight plan.
     */
    private notifyActiveLegState;
    /**
     * Sets all legs in the displayed plan to inactive.
     */
    private clearActiveWaypoints;
}
//# sourceMappingURL=FPLDetailsController.d.ts.map