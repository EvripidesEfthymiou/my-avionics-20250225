import { SetSubject, SubEvent, Subject } from '@microsoft/msfs-sdk';
import { SoftKeyMenuSystem } from './SoftKeyMenuSystem';
/**
 * A softkey menu item.
 */
export interface MenuItem {
    /** The label for the menu item. */
    label: Subject<string>;
    /** The handler to invoke when the menu item is pressed. */
    handler?: (menu: SoftKeyMenu) => void;
    /** Whether or not this menu item is disabled. */
    disabled: Subject<boolean>;
    /** An event that fires when this menu item is pressed. */
    pressed: SubEvent<SoftKeyMenu, undefined>;
    /** The value of the menu item, if any. */
    value: Subject<boolean | string | undefined>;
    /** Whether or not the menu item is highlighted. */
    highlighted: Subject<boolean>;
    /** Additional CSS classes to add to the menu item display. */
    additionalClasses: SetSubject<string>;
}
/**
 * A softkey menu instance.
 */
export declare class SoftKeyMenu {
    protected menuSystem: SoftKeyMenuSystem;
    /** The menu items in this menu. */
    private readonly menuItems;
    /**
     * Creates an instance of a SoftKeyMenu.
     * @param menuSystem The menu system that will manage this menu.
     */
    constructor(menuSystem: SoftKeyMenuSystem);
    /**
     * Adds a menu item to the softkey menu.
     * @param index The softkey index to add the menu item to.
     * @param label The label of the menu item.
     * @param handler The handler to call when the menu item is selected.
     * @param value The value of the menu item, if any.
     * @param disabled Whether or not the menu item is disabled.
     */
    addItem(index: number, label: string, handler?: (menu: SoftKeyMenu) => void, value?: boolean | string, disabled?: boolean): void;
    /**
     * Removes a menu item from the menu.
     * @param index The softkey index to remove the menu item from.
     */
    removeItem(index: number): void;
    /**
     * Gets a menu item.
     * @param index The index of the menu item.
     * @returns The requested menu item.
     */
    getItem(index: number): MenuItem;
    /**
     * Handles a back menu action.
     */
    handleBack(): void;
    /**
     * Iterates over the menu items.
     * @param each The function to run over each menu item.
     */
    forEach(each: (menuItem: MenuItem, index: number) => void): void;
    /**
     * Handles when a menu item is pressed.
     * @param index The index of the menu item that was pressed.
     */
    handleItemPressed(index: number): void;
    /** An empty menu item. */
    static EmptyMenuItem: MenuItem;
}
//# sourceMappingURL=SoftKeyMenu.d.ts.map