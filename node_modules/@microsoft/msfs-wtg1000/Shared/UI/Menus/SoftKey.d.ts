import { ComponentProps, DisplayComponent, VNode } from '@microsoft/msfs-sdk';
import { MenuItem } from './SoftKeyMenu';
import './SoftKey.css';
/**
 * Soft key props
 */
interface SoftKeyProps extends ComponentProps {
    /** The menu item this softkey is bound to */
    menuItem: MenuItem;
}
/**
 * A softkey tab in the soft key bar interface.
 */
export declare class SoftKey extends DisplayComponent<SoftKeyProps> {
    private menuItem;
    private readonly rootEl;
    private readonly labelEl;
    private readonly indicatorEl;
    private readonly valueEl;
    private readonly classList;
    private readonly menuItemSubs;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /**
     * Sets and binds a menu item to this soft key.
     * @param item the menu item
     */
    setMenuItem(item: MenuItem): void;
    /**
     * Unsubscribes from change events on the menu item.
     * @param item the menu item
     */
    private unsubscribeFromMenuItem;
    /**
     * Menu item value changed handler.
     * @param v the new value
     */
    private menuItemValueChangedHandler;
    /**
     * Shows or hides the active/inactive indicator.
     * @param isShown Whether or not the indicator is shown.
     */
    private showIndicator;
    /**
     * Activates or inactivates the indicator.
     * @param isIndicating Whether or not the indicator is indicating.
     */
    private indicate;
    /**
     * Sets the css class to make the soft key look disabled.
     * @param isDisabled Whether or not the soft key is disabled.
     */
    private setDisabled;
    /**
     * Sets the css class to make the soft key look pressed.
     */
    private setPressed;
    /**
     * Sets the text of this soft key.
     * @param text the text
     */
    private setLabel;
    /**
     * Sets whether or not the soft key is highlighted.
     * @param isHighlighted Whether or not the softkey is highlighted.
     */
    private setHighlighted;
    /**
     * Sets additional classes on the soft key item.
     * @param set The full current set of additional classes.
     * @param type The type of event.
     * @param key The key that was changed.
     */
    private setAdditionalClasses;
    /**
     * Renders the component.
     * @returns The rendered component VNode.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=SoftKey.d.ts.map