import { UserSettingManager, UserSettingRecord, UserSettingValueFilter } from '@microsoft/msfs-sdk';
import { SoftKeyMenu } from './SoftKeyMenu';
/**
 * A controller which binds a status bar softkey to a user setting that takes a boolean value. Once bound, each press
 * of the softkey will toggle the value of the setting.
 */
export declare class SoftKeyBooleanUserSettingController<T extends UserSettingRecord, K extends keyof UserSettingValueFilter<T, boolean> & string> {
    private readonly softkeyMenu;
    private readonly softkeyIndex;
    private readonly softkeyLabel;
    private readonly settingManager;
    private readonly settingName;
    private readonly setting;
    private readonly settingHandler;
    private isInit;
    private settingSub?;
    /**
     * Constructor.
     * @param softkeyMenu The softkey menu to which this controller's bound softkey belongs.
     * @param softkeyIndex The index in the softkey menu at which this controller's bound softkey is located.
     * @param softkeyLabel The text label of this controller's bound softkey.
     * @param settingManager This controller's setting manager.
     * @param settingName The name of this controller's setting.
     */
    constructor(softkeyMenu: SoftKeyMenu, softkeyIndex: number, softkeyLabel: string, settingManager: UserSettingManager<T>, settingName: K);
    /**
     * Initializes this controller. This will create a softkey menu item and bind it to this controller's setting.
     */
    init(): void;
    /**
     * Destroys this controller. This will remove the softkey menu item bound to this controller's setting.
     */
    destroy(): void;
}
/**
 * A controller which binds a value indicator softkey to a user setting. Once bound, each press of the softkey will
 * cycle through possible user setting values.
 */
export declare class SoftKeyEnumUserSettingController<T extends UserSettingRecord, K extends keyof T & string> {
    private readonly softkeyMenu;
    private readonly softkeyIndex;
    private readonly softkeyLabel;
    private readonly settingManager;
    private readonly settingName;
    private readonly textMap;
    private readonly nextFunc;
    private readonly setting;
    private readonly settingHandler;
    private isInit;
    private settingSub?;
    /**
     * Constructor.
     * @param softkeyMenu The softkey menu to which this controller's bound softkey belongs.
     * @param softkeyIndex The index in the softkey menu at which this controller's bound softkey is located.
     * @param softkeyLabel The text label of this controller's bound softkey.
     * @param settingManager This controller's setting manager.
     * @param settingName The name of this controller's setting.
     * @param textMap A function which maps setting values to their text representations.
     * @param nextFunc A function which gets the next setting value given the current setting value.
     */
    constructor(softkeyMenu: SoftKeyMenu, softkeyIndex: number, softkeyLabel: string, settingManager: UserSettingManager<T>, settingName: K, textMap: (value: NonNullable<T[K]>) => string, nextFunc: (currentValue: NonNullable<T[K]>) => NonNullable<T[K]>);
    /**
     * Initializes this controller. This will create a softkey menu item and bind it to this controller's setting.
     */
    init(): void;
    /**
     * Destroys this controller. This will remove the softkey menu item bound to this controller's setting.
     */
    destroy(): void;
}
/**
 * A definition for a status bar softkey bound to a user setting used by MultipleSoftKeyUserSettingController.
 */
export type MultipleSoftkeyUserSettingDef<V> = {
    /** The index of the softkey. */
    index: number;
    /** The label of the softkey. */
    label: string;
    /** The setting value bound to the softkey. */
    value: V;
};
/**
 * A controller which binds one or more status bar softkeys to a user setting. Each softkey is bound to a specific
 * setting value. Once bound, each press of the softkey will set the setting to its bound value.
 */
export declare class MultipleSoftKeyUserSettingController<T extends UserSettingRecord, K extends keyof T & string> {
    private readonly softkeyMenu;
    private readonly settingManager;
    private readonly settingName;
    private readonly softkeyDefs;
    private readonly setting;
    private readonly settingHandler;
    private isInit;
    private settingSub?;
    /**
     * Constructor.
     * @param softkeyMenu The softkey menu to which this controller's bound softkeys belong.
     * @param settingManager This controller's setting manager.
     * @param settingName The name of this controller's setting.
     * @param softkeyDefs The definitions for the softkeys bound to this controller's setting.
     */
    constructor(softkeyMenu: SoftKeyMenu, settingManager: UserSettingManager<T>, settingName: K, softkeyDefs: MultipleSoftkeyUserSettingDef<NonNullable<T[K]>>[]);
    /**
     * Initializes this controller. This will create softkey menu items and bind them to this controller's setting.
     */
    init(): void;
    /**
     * Destroys this controller. This will remove the softkey menu items bound to this controller's setting.
     */
    destroy(): void;
}
//# sourceMappingURL=SoftKeyUserSettingControllers.d.ts.map