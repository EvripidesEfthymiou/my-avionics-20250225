import { EventBus, NodeReference, Subscribable, Subscription, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from './FmsHEvent';
import { UiPage } from './UiPage';
import { UiView } from './UiView';
/** A view entry. */
type ViewEntry<T extends UiView = UiView> = {
    /** The key of the view. */
    key: string;
    /** A reference to the view. */
    ref: NodeReference<T>;
    /** A subscription to the view's `onClose` event. */
    onCloseSub?: Subscription;
};
/**
 * A service to manage views.
 */
export declare abstract class ViewService {
    protected readonly bus: EventBus;
    private readonly registeredViews;
    private readonly refsMap;
    private openViews;
    private readonly openPageEntrySub;
    /** The key of the currently open page. */
    readonly openPageKey: Subscribable<string>;
    /** The currently open page. */
    readonly openPage: Subscribable<UiPage<import("./UiPage").UiPageProps> | null>;
    private readonly activeViewEntrySub;
    /** The key of the currently active view. */
    readonly activeViewKey: Subscribable<string>;
    /** The currently active view. */
    readonly activeView: Subscribable<UiView<import("./UiView").UiViewProps, any, any> | null>;
    protected readonly pageHistory: ViewEntry[];
    protected ignorePageHistory: boolean;
    /** override in child class */
    protected readonly fmsEventMap: Map<string, FmsHEvent>;
    private viewClosedHandler;
    /**
     * Constructs the view service.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Routes the HEvents to the views.
     * @param hEvent The event identifier.
     * @returns whether the event was handled
     */
    protected onInteractionEvent(hEvent: string): boolean;
    /**
     * Routes an interaction to the active view, and if it is not handled, re-routes the interaction to the currently
     * open page if it exists and is not the active view.
     * @param evt An interaction event.
     * @returns Whether the event was handled.
     */
    protected routeInteractionEventToViews(evt: FmsHEvent): boolean;
    /**
     * Gets an array of all currently open views.
     * @returns an array of all currently open views.
     */
    getOpenViews(): readonly UiView[];
    /**
     * Registers a view with the service.
     * @param [type] The type of the view.
     * @param vnodeFn A function creating the VNode.
     */
    registerView(type: string, vnodeFn: () => VNode): void;
    /**
     * Opens a view. The opened view can be a page, regular view, or subview. Opening a page will close all other views,
     * including the currently open page. Opening a regular view will close all other views except the currently open
     * page. Opening a subview does not close any other views. The opened view will immediately become the active view,
     * and the previously active view (if one exists) will be paused.
     * @param type The type of the view to open.
     * @param isSubView A boolean indicating if the view to be opened is a subview.
     * @returns The view that was opened.
     * @throws Error if the view type is not registered with this service.
     */
    open<T extends UiView = UiView>(type: string, isSubView?: boolean): T;
    /**
     * Creates a view.
     * @param type The type string of the view to create.
     * @returns A NodeReference to the created view.
     * @throws When type of view is not registered.
     */
    private createView;
    /**
     * Handles views that got closed, removing them from the stack.
     * @param closedView The view that was closed.
     */
    private handleViewClosed;
    /**
     * Opens the page that was most recently closed.
     * @returns The page that was opened.
     */
    openLastPage(): UiPage | null;
    /**
     * Clears this view service's page history.
     */
    clearPageHistory(): void;
    /**
     * Closes the currently active view.
     */
    closeActiveView(): void;
    /**
     * Closes all open views except for the currently open page, if one exists.
     */
    closeAllViews(): void;
    /**
     * Closes all open views and clears the stack.
     * @param closePage Whether to close the currently open page, if one exists.
     */
    protected clearStack(closePage: boolean): void;
}
export {};
//# sourceMappingURL=ViewService.d.ts.map