import { VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from '../FmsHEvent';
import { G1000ControlList } from '../G1000UiControl';
import { UiView, UiViewProps } from '../UiView';
import './ContextMenuDialog.css';
/** The context menu position. */
export declare enum ContextMenuPosition {
    BOTTOM = 1,
    LEFT = 2,
    CENTER = 4
}
/**
 * The MenuItemDefinition interface.
 */
export interface ContextMenuItemDefinition {
    /** An optional ID to assign to the menu item. */
    id?: string;
    /**
     * Renders the content of the menu item.
     * @returns the rendered content of the menu item as a VNode.
     */
    renderContent(): VNode;
    /** Whether the menu item is enabled. True by default. */
    isEnabled?: boolean;
    /** The action to execute when this item is selected. */
    onSelected?(): void;
    /** The action to execute when this item is focused. */
    onFocused?(): void;
    /** The action to execute when this item is blurred. */
    onBlurred?(): void;
    /** Whether the context menu dialog should be closed when the menu item is selected. True by default. */
    closeAfterAction?: boolean;
    /** The estimated width of the rendered menu item, in pixels. */
    estimatedWidth: number;
}
/** Context menu options */
export interface ContextMenuOptions {
    /** The menu item definitions */
    items: ContextMenuItemDefinition[];
    /** The position of the popout menu. */
    position: ContextMenuPosition;
    /** The reference html element */
    element: HTMLElement;
    /** The container html element this context menu belongs to */
    outerContainer: HTMLElement;
    /** The initial scroll position for the list, if provided */
    initialScrollPosition?: number;
}
/** A dialog that displays a context menu. */
export declare class ContextMenuDialog extends UiView<UiViewProps, number, ContextMenuOptions> {
    static readonly CHAR_WIDTH = 12;
    protected readonly listRef: import("@microsoft/msfs-sdk").NodeReference<G1000ControlList<ContextMenuItemDefinition>>;
    private readonly listContainerRef;
    private readonly popoutContainerBgRef;
    private readonly menuItemsSubject;
    private assumedWidth;
    private assumedHeight;
    private containerRect;
    private viewport;
    private readonly SAFETY_MARGIN;
    private readonly CHAR_WIDTH;
    private readonly ROW_HEIGHT;
    private readonly MAX_WIDTH;
    private readonly MAX_HEIGHT;
    /**
     * Constructor
     * @param props The view props.
     */
    constructor(props: UiViewProps);
    /** @inheritdoc */
    protected onInputDataSet(data: ContextMenuOptions | undefined): void;
    /**
     * Sets and clamps the left position of the container.
     * @param left The desired left position.
     * @param data The context menu options data.
     */
    private setContainerLeftPos;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * Responds to when an item is selected.
     * @param def The definition of the selected item.
     */
    private onItemSelected;
    /**
     * A callback called to render the menu items.
     * @param def is the menu item
     * @returns a vnode for display in the menu
     */
    private renderItem;
    /** @inheritdoc */
    render(): VNode;
}
//# sourceMappingURL=ContextMenuDialog.d.ts.map