import { SubEventInterface, Subject } from '@microsoft/msfs-sdk';
import { FmsHEvent } from './FmsHEvent';
import { UiControl } from './UiControl';
import { UiControlGroup, UiControlGroupProps } from './UiControlGroup';
import './UiView.css';
import type { ViewService } from './ViewService';
/** They type for elements that can be scrolled. */
export type ScrollableControl = UiControl | UiControlGroup;
/** Properties on the UiView component. */
export interface UiViewProps extends UiControlGroupProps {
    /** The view service to which this page belongs. */
    viewService: ViewService;
    /** The title of the component. */
    title: string;
    /** Whether to show the title or not (is this a main menu or a child for example the page menu). */
    showTitle: boolean;
    /** If this UIView is in the MFD */
    isMfd?: boolean;
}
/** A UiView component. */
export declare abstract class UiView<T extends UiViewProps = UiViewProps, RV = any, IV = any> extends UiControlGroup<T> {
    protected readonly viewContainerRef: import("@microsoft/msfs-sdk").NodeReference<HTMLDivElement>;
    viewResult: RV | undefined;
    inputData: Subject<IV | undefined>;
    onOpen: SubEventInterface<this, void>;
    onClose: SubEventInterface<this, void>;
    onAccept: SubEventInterface<this, RV | undefined>;
    /**
     * Shows the view.
     * @param isSubView Whether the view is being displayed as a subview.
     * @param zIndex The z-index to assign on the view container.
     */
    open(isSubView: boolean, zIndex?: number): void;
    /**
     * Closes the view.
     * @param quickclose bool stating whether to quickclose the child.
     */
    close(quickclose?: boolean): void;
    /**
     * Sets this view's z-index.
     * @param zIndex The new z-indez. If not defined, the view's z-index will be reset.
     */
    setZIndex(zIndex: number | undefined): void;
    /**
     * Set data on this view.
     * @param input The input data.
     * @returns This view instance for chain commands.
     */
    setInput(input: IV | undefined): this;
    /**
     * Confirms the view result and closes the view.
     * @param [result] Provide the view result if not already set.
     * @param closeView Indicates if the view should be closed after confirming the result.
     */
    accept(result?: RV, closeView?: boolean): void;
    protected processScrollEvent(evt: FmsHEvent): boolean;
    /**
     * Notifies subscribers that the view has been opened.
     * @protected
     */
    protected notifyViewOpened(): void;
    /**
     * Notifies subscribers that the view has been resumed.
     */
    private notifyViewResumed;
    /**
     * Notifies subscribers that the view has been paused.
     */
    private notifyViewPaused;
    /**
     * Notifies subscribers that the view has been closed including the view result.
     */
    private notifyViewClosed;
    /**
     * Notifies subscribers that the view the user confirmed the view and a result should be available.
     */
    private notifyViewAccept;
    /** Method to be overridden by view inheriting UiView to do something when the view opens. */
    protected onViewOpened(): void;
    /** Method to be overridden by view inheriting UiView to do something when the dialog opens. */
    protected onViewResumed(): void;
    /** Method to be overridden by view inheriting UiView to do something when the dialog opens. */
    protected onViewPaused(): void;
    /** Method to be overridden by view inheriting UiView to do something when the dialog opens. */
    protected onViewClosed(): void;
    /**
     * Method to be overridden by view inheriting UiView to do something when the input data is set.
     * @protected
     * @param input The data that was set.
     */
    protected onInputDataSet(input: IV | undefined): void;
    /**
     * Pauses the view (usually only called by ViewService).
     */
    pause(): void;
    /**
     * Resumes the view (usually only called by ViewService).
     */
    resume(): void;
}
//# sourceMappingURL=UiView.d.ts.map