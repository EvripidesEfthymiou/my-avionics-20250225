import { Subject, UserSettingManager, UserSettingRecord } from '@microsoft/msfs-sdk';
import { UserSettingController } from './UserSettingController';
/**
 * A controller which binds a setting that can take one of several enumerated values to an ArrowToggle component.
 */
export declare class UserSettingToggleController<T extends UserSettingRecord, K extends keyof T & string> extends UserSettingController<T, K> {
    readonly settingManager: UserSettingManager<T>;
    readonly settingName: K;
    readonly values: NonNullable<T[K]>[];
    /**
     * A subject which provides a selected index for the ArrowToggle component which this controller controls. This
     * subject should be passed to the ArrowToggle component via its `dataref` prop.
     */
    readonly selectedIndexSub: Subject<number>;
    /**
     * A function which handles value selected events from the ArrowToggle component which this controller controls.
     * This handler should be passed to the ArrowToggle component via its `onOptionSelected` prop.
     */
    optionSelectedHandler: (index: number) => void;
    /**
     * Constructor.
     * @param settingManager This controller's settings manager.
     * @param settingName The name of the setting associated with this controller.
     * @param values An array of values this controller can assign to its setting.
     */
    constructor(settingManager: UserSettingManager<T>, settingName: K, values: NonNullable<T[K]>[]);
    protected onSettingChanged(value: NonNullable<T[K]>): void;
    /**
     * A callback which is called when an option is selected using the ArrowToggle component.
     * @param index The index of the selected option.
     */
    private onOptionSelected;
}
//# sourceMappingURL=UserSettingToggleController.d.ts.map