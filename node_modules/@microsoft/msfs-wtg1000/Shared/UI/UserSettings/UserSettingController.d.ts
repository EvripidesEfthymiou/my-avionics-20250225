import { UserSettingManager, UserSettingRecord } from '@microsoft/msfs-sdk';
/**
 * A controller which binds a user setting to a control component.
 */
export declare abstract class UserSettingController<T extends UserSettingRecord, K extends keyof T & string> {
    readonly settingManager: UserSettingManager<T>;
    readonly settingName: K;
    /** The setting associated with this controller. */
    readonly setting: import("@microsoft/msfs-sdk").UserSetting<NonNullable<T[K]>>;
    /**
     * Constructor.
     * @param settingManager This controller's settings manager.
     * @param settingName The name of the setting associated with this controller.
     */
    constructor(settingManager: UserSettingManager<T>, settingName: K);
    /**
     * Initializes this controller. This will immediately change the state of this controller's control component to
     * reflect the current value of this controller's setting. Furthermore, any future changes to the setting's value
     * will be synced to the control component.
     */
    init(): void;
    /**
     * A callback which is called when value of this control's setting is changed.
     * @param value The new value of the setting.
     */
    protected abstract onSettingChanged(value: T[K]): void;
}
//# sourceMappingURL=UserSettingController.d.ts.map