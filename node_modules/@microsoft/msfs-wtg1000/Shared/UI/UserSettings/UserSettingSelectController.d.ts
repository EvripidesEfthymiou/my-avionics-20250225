import { NodeReference, SubscribableArray, UserSettingManager, UserSettingRecord } from '@microsoft/msfs-sdk';
import { SelectControl } from '../UIControls/SelectControl';
import { UserSettingController } from './UserSettingController';
/**
 * A controller which binds a user setting that can take one of several enumerated values to a SelectControl
 * component.
 */
export declare class UserSettingSelectController<T extends UserSettingRecord, K extends keyof T & string> extends UserSettingController<T, K> {
    readonly settingManager: UserSettingManager<T>;
    readonly settingName: K;
    readonly values: SubscribableArray<NonNullable<T[K]>>;
    private readonly selectControlRef;
    /**
     * A function which handles item selected events from the SelectControl component which this controller controls.
     * This handler should be passed to the SelectControl component via its `onItemSelected` prop.
     */
    itemSelectedHandler: (index: number, item: NonNullable<T[K]> | undefined, isRefresh: boolean) => void;
    /**
     * Constructor.
     * @param settingManager This controller's settings manager.
     * @param settingName The name of the setting associated with this controller.
     * @param values A subscribable array which provides the values this controller can assign to its setting.
     * @param selectControlRef A node reference to the SelectControl which this controller controls.
     */
    constructor(settingManager: UserSettingManager<T>, settingName: K, values: SubscribableArray<NonNullable<T[K]>>, selectControlRef: NodeReference<SelectControl<NonNullable<T[K]>>>);
    /** @inheritdoc */
    init(): void;
    /** @inheritdoc */
    protected onSettingChanged(value: NonNullable<T[K]>): void;
    /**
     * A callback which is called when an item is selected using the SelectControl component.
     * @param index The index of the selected item.
     * @param item The selected item.
     * @param isRefresh Whether the selection was made due to a refresh.
     */
    private onItemSelected;
}
/**
 * A controller which binds a user setting that can take one of several enumerated values to a SelectControl
 * component which displays transformed versions of the setting values.
 */
export declare class UserSettingTransformedSelectController<T extends UserSettingRecord, K extends keyof T & string, V> extends UserSettingController<T, K> {
    readonly settingManager: UserSettingManager<T>;
    readonly settingName: K;
    readonly values: SubscribableArray<NonNullable<T[K]>>;
    readonly transformedValues: SubscribableArray<V>;
    private readonly selectControlRef;
    /**
     * A function which handles item selected events from the SelectControl component which this controller controls.
     * This handler should be passed to the SelectControl component via its `onItemSelected` prop.
     */
    itemSelectedHandler: (index: number, item: V | undefined, isRefresh: boolean) => void;
    /**
     * Constructor.
     * @param settingManager This controller's settings manager.
     * @param settingName The name of the setting associated with this controller.
     * @param values A subscribable array which provides the values this controller can assign to its setting.
     * @param transformedValues A subscribable array which provides the transformed values displayed by the SelectControl
     * component controlled by this controller.
     * @param selectControlRef A node reference to the SelectControl which this controller controls.
     */
    constructor(settingManager: UserSettingManager<T>, settingName: K, values: SubscribableArray<NonNullable<T[K]>>, transformedValues: SubscribableArray<V>, selectControlRef: NodeReference<SelectControl<V>>);
    protected onSettingChanged(value: NonNullable<T[K]>): void;
    /**
     * A callback which is called when an item is selected using the SelectControl component.
     * @param index The index of the selected item.
     * @param item The selected item.
     * @param isRefresh Whether the selection was made due to a refresh.
     */
    private onItemSelected;
}
//# sourceMappingURL=UserSettingSelectController.d.ts.map