import { DisplayComponent, NodeReference, SubscribableArray, UserSettingRecord, VNode } from '@microsoft/msfs-sdk';
import { ContextMenuItemDefinition } from '../Dialogs/ContextMenuDialog';
import { SelectControl } from '../UIControls/SelectControl';
import { ViewService } from '../ViewService';
import { UserSettingControlProps } from './UserSettingControl';
import { UserSettingSelectController } from './UserSettingSelectController';
/**
 * Component props for UserSettingSelectControl.
 */
export interface UserSettingSelectControlProps<T extends UserSettingRecord, K extends keyof T & string> extends UserSettingControlProps<T, K> {
    /** The View Service. */
    viewService: ViewService;
    /** A subscribable array which provides the possible values of the controlled setting. */
    values: SubscribableArray<NonNullable<T[K]>>;
    /**
     * A subscribable array which provides the text representation of the possible setting values. Each value provided by
     * the `values` prop will be mapped to the text provided by this prop at the same index. If text is not defined for a
     * value, it is rendered using its `toString()` method instead. Text provided by this prop is overridden by the
     * `buildMenuItem` prop, if it is defined.
     */
    valueText?: SubscribableArray<string>;
    /**
     * A function which builds a menu item definition for setting values. If not defined, value rendering is governed
     * by the `valueText` prop instead, if it exists. If `valueText` is not defined either, values are rendered as plain
     * text using their `toString()` method.
     * @param value A setting value.
     * @param index The index of the setting value in the list displayed by SelectControl.
     */
    buildMenuItem?: (value: NonNullable<T[K]>, index: number) => ContextMenuItemDefinition;
    /** A reference to the HTML element that constrains the location of the SelectControl's selection pop-up.  */
    outerContainer: NodeReference<HTMLElement>;
}
/**
 * A component which controls the value of a setting using a SelectControl.
 */
export declare class UserSettingSelectControl<T extends UserSettingRecord, K extends keyof T & string, P extends UserSettingSelectControlProps<T, K> = UserSettingSelectControlProps<T, K>> extends DisplayComponent<P> {
    protected readonly selectControlRef: NodeReference<SelectControl<NonNullable<T[K]>>>;
    protected readonly selectController: UserSettingSelectController<T, K>;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /**
     * Builds a menu item definition for a setting value.
     * @param value A setting value.
     * @param index The index of the value in the menu.
     * @returns a menu item definition for the setting value.
     */
    private buildMenuItem;
    /** @inheritdoc */
    render(): VNode;
}
//# sourceMappingURL=UserSettingSelectControl.d.ts.map