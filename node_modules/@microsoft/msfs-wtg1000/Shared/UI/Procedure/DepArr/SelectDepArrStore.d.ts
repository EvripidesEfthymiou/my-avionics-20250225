import { AirportFacility, ArraySubject, ArrivalProcedure, DepartureProcedure, EnrouteTransition, OneWayRunway, RunwayTransition, Subject } from '@microsoft/msfs-sdk';
import { SelectProcedureStore } from '../SelectProcedureStore';
/**
 * A data store for departure and arrival selection components.
 */
export declare abstract class SelectDepArrStore<T extends DepartureProcedure | ArrivalProcedure> extends SelectProcedureStore<T> {
    readonly selectedProcIndex: Subject<number>;
    readonly selectedRwyTransIndex: Subject<number>;
    readonly selectedTransIndex: Subject<number>;
    readonly runways: ArraySubject<RunwayTransition>;
    readonly transitions: ArraySubject<EnrouteTransition>;
    /** @inheritdoc */
    protected onSelectedFacilityChanged(facility: AirportFacility | undefined): void;
    /**
     * Gets the procedures array from an airport.
     * @param airport An airport facility.
     * @returns The procedures array from the specified airport.
     */
    protected abstract getProcedures(airport: AirportFacility | undefined): readonly T[];
    /** @inheritdoc */
    protected onSelectedProcedureChanged(proc: T | undefined): void;
    /**
     * Gets the one-way runway of a procedure runway transition.
     * @param airport The airport of the procedure for which to get the runway.
     * @param procedure A procedure for which to get the runway.
     * @param rwyTransIndex The index of the runway transition for which to get the runway.
     * @returns The one-way runway of the specified procedure runway transition, or undefined if there is no such runway.
     */
    getOneWayRunway(airport: AirportFacility, procedure: T, rwyTransIndex: number): OneWayRunway | undefined;
    /**
     * Gets a runway designation string from a runway transition.
     * @param runwayTransition A runway transition.
     * @returns The runway designation string of the runway transition.
     */
    getRunwayString(runwayTransition: RunwayTransition | undefined): string;
    /**
     * Gets the runway transitions of a procedure.
     * @param procedure A procedure.
     * @returns The runway transitions of the procedure.
     */
    protected getRunways(procedure: T): readonly RunwayTransition[];
    /**
     * Gets the enroute transitions of a procedure.
     * @param procedure A procedure.
     * @returns The enroute transitions of the procedure.
     */
    protected getTransitions(procedure: T): readonly EnrouteTransition[];
    /**
     * Gets the transition name and creates a default transition when the procedure has no transitions.
     * @param transitionIndex is the index of the transition in the procedure
     * @returns The transition name string.
     */
    protected abstract getTransitionName(procedure: T, transitionIndex: number, rwyTransitionIndex: number): string;
}
//# sourceMappingURL=SelectDepArrStore.d.ts.map