import { AirportFacility, ArrivalProcedure, DepartureProcedure, EnrouteTransition, Facility, FlightPathCalculator, RunwayTransition, Subject } from '@microsoft/msfs-sdk';
import { Fms, ProcedureType } from '@microsoft/msfs-garminsdk';
import { SelectControl2 } from '../../UiControls2/SelectControl';
import { SelectDepArrStore } from './SelectDepArrStore';
/**
 * Controller for departure/arrival selection components.
 */
export declare abstract class SelectDepArrController<T extends DepartureProcedure | ArrivalProcedure, S extends SelectDepArrStore<T> = SelectDepArrStore<T>> {
    protected readonly store: S;
    protected readonly selectNextCb: () => void;
    protected readonly fms: Fms;
    protected readonly calculator: FlightPathCalculator;
    protected readonly procType: ProcedureType.DEPARTURE | ProcedureType.ARRIVAL;
    readonly facilityChangedHandler: (facility: Facility | undefined) => void;
    readonly procSelectedHandler: (index: number, item: T, isRefresh: boolean) => void;
    readonly procFocusedHandler: (proc: T) => Promise<void>;
    readonly runwaySelectedHandler: (index: number, item: RunwayTransition, isRefresh: boolean) => Promise<void>;
    readonly runwayFocusedHandler: (trans: RunwayTransition) => Promise<void>;
    readonly transSelectedHandler: (index: number, item: EnrouteTransition, isRefresh: boolean) => Promise<void>;
    readonly transFocusedHandler: (trans: EnrouteTransition) => Promise<void>;
    readonly procSelectionClosedHandler: (source: SelectControl2<T>, selectionMade: boolean) => Promise<void>;
    readonly rwyTransSelectionClosedHandler: (source: SelectControl2<RunwayTransition>, selectionMade: boolean) => Promise<void>;
    readonly transSelectionClosedHandler: (source: SelectControl2<EnrouteTransition>, selectionMade: boolean) => Promise<void>;
    readonly inputIcao: Subject<string>;
    readonly canLoad: Subject<boolean>;
    /**
     * Constructor.
     * @param store A data store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms The FMS instance.
     * @param calculator The flight path calculator used by this controller to build preview flight plans.
     * @param procType The procedure type for this controller.
     */
    constructor(store: S, selectNextCb: () => void, fms: Fms, calculator: FlightPathCalculator, procType: ProcedureType.DEPARTURE | ProcedureType.ARRIVAL);
    /**
     * Initializes the airport ICAO input.
     */
    initializeIcaoInput(): void;
    /**
     * Gets the initial ICAO on load.
     * @returns The initial ICAO string or undefined.
     */
    protected abstract getInitialICAO(): string | undefined;
    /**
     * Responds to when the waypoint input's selected facility changes.
     * @param facility The selected facility.
     */
    protected onFacilityChanged(facility: Facility | undefined): void;
    /**
     * Evaluates if the next select should be focused.
     * @param isRefresh If select event happened based on a data refresh.
     */
    private gotoNextSelect;
    /**
     * Handles when the procedure selection dialog is closed.
     * @param source The SelectControl controlling the dialog that was closed.
     * @param selectionMade Whether a selection was made.
     */
    protected onProcSelectionClosed(source: SelectControl2<T>, selectionMade: boolean): Promise<void>;
    /**
     * Handles when the runway transition selection dialog is closed.
     * @param source The SelectControl controlling the dialog that was closed.
     * @param selectionMade Whether a selection was made.
     */
    protected onRwyTransSelectionClosed(source: SelectControl2<RunwayTransition>, selectionMade: boolean): Promise<void>;
    /**
     * Handles when the enroute transition selection dialog is closed.
     * @param source The SelectControl controlling the dialog that was closed.
     * @param selectionMade Whether a selection was made.
     */
    protected onTransSelectionClosed(source: SelectControl2<EnrouteTransition>, selectionMade: boolean): Promise<void>;
    /**
     * Callback handler for when a procedure is selected.
     * @param index The index of the selected procedure.
     * @param item The procedure selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onProcSelected(index: number, item: T, isRefresh: boolean): void;
    /**
     * Responds to when a procedure item is focused.
     * @param proc The focused procedure.
     */
    protected onProcFocused(proc: T): Promise<void>;
    /**
     * Responds to when a runway transition is selected.
     * @param index The index of the selected transition.
     * @param item The transition selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onRunwaySelected(index: number, item: RunwayTransition, isRefresh: boolean): Promise<void>;
    /**
     * Responds to when a runway transition item is focused.
     * @param trans The focused transition.
     */
    protected onRunwayFocused(trans: RunwayTransition): Promise<void>;
    /**
     * Responds to when an enroute transition is selected.
     * @param index The index of the selected transition.
     * @param item The transition selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onTransSelected(index: number, item: EnrouteTransition, isRefresh: boolean): Promise<void>;
    /**
     * Responds to when an enroute transition item is focused.
     * @param trans The focused transition.
     */
    protected onTransFocused(trans: EnrouteTransition): Promise<void>;
    protected buildSequenceOpId: number;
    /**
     * Builds the sequence list and flight plan for the procedure preview.
     * @param airport The airport of the procedure to preview.
     * @param procedure The procedure to preview.
     * @param procIndex The index of the procedure to preview.
     * @param transIndex The enroute transition index of the procedure to preview.
     * @param rwyTransIndex The runway transition index of the procedure to preview.
     * @returns A Promise which is fulfilled with whether a preview sequence was successfully built.
     */
    protected buildSequence(airport: AirportFacility | undefined, procedure: T | undefined, procIndex: number, transIndex: number, rwyTransIndex: number): Promise<boolean>;
    /** Callback handler for when load is pressed. */
    onLoadSelected: () => void;
    /** Called when the load procedure button is clicked. */
    abstract onLoadExecute: () => void;
}
//# sourceMappingURL=SelectDepArrController.d.ts.map