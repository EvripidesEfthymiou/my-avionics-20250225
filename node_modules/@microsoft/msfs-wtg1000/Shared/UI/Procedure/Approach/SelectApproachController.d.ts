import { AirportFacility, EventBus, Facility, FlightPathCalculator, MinimumsEvents, Subject } from '@microsoft/msfs-sdk';
import { ApproachListItem, Fms, TransitionListItem } from '@microsoft/msfs-garminsdk';
import { G1000ControlEvents } from '../../../G1000Events';
import { SelectControl2 } from '../../UiControls2/SelectControl';
import { ViewService } from '../../ViewService';
import { SelectApproachStore } from './SelectApproachStore';
/**
 * Controller for SelectApproach component.
 */
export declare class SelectApproachController<S extends SelectApproachStore = SelectApproachStore> {
    protected readonly bus: EventBus;
    protected readonly store: S;
    protected readonly selectNextCb: () => void;
    protected readonly fms: Fms;
    protected readonly calculator: FlightPathCalculator;
    protected readonly viewService: ViewService;
    protected readonly fplKey: string;
    protected readonly hasSequence: boolean;
    readonly facilityChangedHandler: (facility: Facility | undefined) => void;
    readonly approachSelectedHandler: (index: number, item: ApproachListItem, isRefresh: boolean) => void;
    readonly approachFocusedHandler: (item: ApproachListItem) => Promise<void>;
    readonly transSelectedHandler: (index: number, item: TransitionListItem, isRefresh: boolean) => Promise<void>;
    readonly transFocusedHandler: (item: TransitionListItem) => Promise<void>;
    readonly approachSelectionClosedHandler: (source: SelectControl2<ApproachListItem>, selectionMade: boolean) => Promise<void>;
    readonly transSelectionClosedHandler: (source: SelectControl2<TransitionListItem>, selectionMade: boolean) => Promise<void>;
    readonly inputIcao: Subject<string>;
    readonly canLoad: Subject<boolean>;
    readonly canActivate: Subject<boolean>;
    readonly canLoadOrText: import("@microsoft/msfs-sdk").MappedSubscribable<"" | "OR">;
    protected skipCourseReversal: boolean;
    protected readonly controlPub: import("@microsoft/msfs-sdk").Publisher<MinimumsEvents>;
    protected readonly g1000ControlPub: import("@microsoft/msfs-sdk").Publisher<G1000ControlEvents>;
    /**
     * A callback called after a facility is completed loading.
     */
    onAfterFacilityLoad: (() => void) | undefined;
    /**
     * Creates an instance of select approach controller.
     * @param bus The Event Bus.
     * @param store The store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms Instance of FMS.
     * @param calculator The flight path calculator used by this controller to build preview flight plans.
     * @param viewService The view service used by this controller.
     * @param fplKey The FPL ViewService Key.
     * @param hasSequence If this instance of the controller should support a sequence display.
     */
    constructor(bus: EventBus, store: S, selectNextCb: () => void, fms: Fms, calculator: FlightPathCalculator, viewService: ViewService, fplKey: string, hasSequence?: boolean);
    /** Initialize the controller. */
    initialize(): void;
    /** @inheritdoc */
    protected getInitialICAO(): string | undefined;
    /**
     * Responds to when the waypoint input's selected facility changes.
     * @param facility The selected facility.
     */
    private onFacilityChanged;
    /**
     * Evaluates if the next select should be focused.
     * @param isRefresh If select event happened based on a data refresh.
     */
    private gotoNextSelect;
    /**
     * Callback handler for when a minimums option is selected.
     * @param index The index of the option selected.
     */
    onMinimumsOptionSelected: (index: number) => void;
    /** Callback handler for  when a minimums value is selected. */
    updateMinimumsValue: () => void;
    /**
     * Handles when the approach selection dialog is closed.
     * @param source The SelectControl controlling the dialog that was closed.
     * @param selectionMade Whether a selection was made.
     */
    protected onApproachSelectionClosed(source: SelectControl2<ApproachListItem>, selectionMade: boolean): Promise<void>;
    /**
     * Handles when the transition selection dialog is closed.
     * @param source The SelectControl controlling the dialog that was closed.
     * @param selectionMade Whether a selection was made.
     */
    protected onTransSelectionClosed(source: SelectControl2<TransitionListItem>, selectionMade: boolean): Promise<void>;
    /**
     * Responds to when an approach is selected.
     * @param index The index of the procedure selected.
     * @param item The item selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onApproachSelected(index: number, item: ApproachListItem, isRefresh: boolean): void;
    /**
     * Responds to when an approach item is focused.
     * @param item The focused item.
     */
    protected onApproachFocused(item: ApproachListItem): Promise<void>;
    /**
     * Responds to when a transition is selected.
     * @param index The index of the transition selected.
     * @param item The item selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onTransSelected(index: number, item: TransitionListItem, isRefresh: boolean): Promise<void>;
    /**
     * Removes a course reversal from the preview plan.
     */
    protected removeCourseReversalFromPreviewPlan(): Promise<void>;
    /**
     * Responds to when a transition item is focused.
     * @param item The focused item.
     */
    protected onTransFocused(item: TransitionListItem): Promise<void>;
    protected buildSequenceOpId: number;
    /**
     * Builds the sequence list and flight plan for the approach preview.
     * @param airport The airport of the approach to preview.
     * @param approach The approach to preview.
     * @param transition The transition of the approach preview.
     * @returns A Promise which is fulfilled with whether a preview sequence was successfully built.
     */
    protected buildSequence(airport?: AirportFacility, approach?: ApproachListItem, transition?: TransitionListItem): Promise<boolean>;
    /** Callback handler for when load is pressed. */
    onLoadExecuted: () => void;
    /** Callback handler for when activate is pressed. */
    onActivateExecuted: () => void;
    /**
     * Checks for a course reversal in the procedure.
     * @returns true if there is an optional course reversal.
     */
    private checkForCourseReversal;
    /**
     * Handles loading and executing the approach with appropriate warning messages.
     * @param activate Whether or not to activate this approach.
     * @param facility The facility for the approach.
     * @param approach The Approach List Item to execute with.
     * @param approachTransitionIndex The transition index for the approach procedure.
     */
    private handleExecute;
    /**
     * Gets the MenuDialogDefinition for a course reversal dialog message.
     * @param fixName The name of the fix where the course reversal is.
     * @returns A MessageDialogDefinition.
     */
    private getCourseReversalDialogDef;
    /**
     * Renders the procedure warning vnode (when we need to pass HTML).
     * @param warningMessage The dialog message content.
     * @param warningTitle The dialog message title content.
     * @returns A VNode to be rendered in the MessageDialog.
     */
    private renderProcedureWarningDialogContent;
}
//# sourceMappingURL=SelectApproachController.d.ts.map