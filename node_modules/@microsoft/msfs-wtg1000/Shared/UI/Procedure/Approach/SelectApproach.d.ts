/// <reference types="@microsoft/msfs-types/js/simplane" />
import { AirportFacility, ApproachProcedure, ControlEvents, EventBus, ExtendedApproachType, FlightPathCalculator, NodeReference, SortedMappedSubscribableArray, VNode } from '@microsoft/msfs-sdk';
import { ApproachListItem, Fms, TransitionListItem } from '@microsoft/msfs-garminsdk';
import { ContextMenuItemDefinition, ContextMenuPosition } from '../../Dialogs/ContextMenuDialog';
import { FmsHEvent } from '../../FmsHEvent';
import { UiControlGroup, UiControlGroupProps } from '../../UiControlGroup';
import { ArrowToggle } from '../../UIControls/ArrowToggle';
import { SelectControl2 } from '../../UiControls2/SelectControl';
import { ViewService } from '../../ViewService';
import { SelectApproachController } from './SelectApproachController';
import { SelectApproachStore } from './SelectApproachStore';
/**
 * Component props for SelectApproach.
 */
export interface SelectApproachProps extends UiControlGroupProps {
    /** A view service. */
    viewService: ViewService;
    /** The fms */
    fms: Fms;
    /** The event bus */
    bus: EventBus;
    /** A flight path calculator to use to build preview flight plans. */
    calculator: FlightPathCalculator;
    /** Whether this instance of the G1000 has a Radio Altimeter. */
    hasRadioAltimeter: boolean;
}
/**
 * A component for selecting approaches.
 */
export declare abstract class SelectApproach<P extends SelectApproachProps = SelectApproachProps> extends UiControlGroup<P> {
    protected static readonly APPROACH_TYPE_PRIORITIES: Record<ExtendedApproachType, number>;
    protected static readonly APPROACH_RUNWAY_DESIGNATOR_PRIORITIES_FWD: Record<RunwayDesignator, number>;
    protected static readonly APPROACH_RUNWAY_DESIGNATOR_PRIORITIES_REV: Record<RunwayDesignator, number>;
    protected readonly approachSelectRef: NodeReference<SelectControl2<ApproachListItem>>;
    protected readonly transitionSelectRef: NodeReference<SelectControl2<TransitionListItem>>;
    protected readonly minsToggleComponent: NodeReference<ArrowToggle>;
    protected readonly store: SelectApproachStore;
    protected readonly controller: SelectApproachController<SelectApproachStore>;
    protected readonly sortedApproachSub: SortedMappedSubscribableArray<ApproachListItem>;
    protected readonly controlPub: import("@microsoft/msfs-sdk").Publisher<ControlEvents>;
    /**
     * Creates an instance of an approach selection component data store.
     * @returns An approach selection component data store.
     */
    protected abstract createStore(): SelectApproachStore;
    /**
     * Creates an instance of an approach selection component controller.
     * @param store This component's data store.
     * @returns An approach selection component controller.
     */
    protected abstract createController(store: SelectApproachStore): SelectApproachController;
    /** @inheritDoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** Goto and activate next select control. */
    protected gotoNextSelect(): void;
    /** @inheritDoc */
    onAfterRender(node: VNode): void;
    /**
     * Sorts approaches into the order they should appear in the approach list.
     * @param a An approach list item.
     * @param b An approach list item.
     * @returns 0 if the two approaches are to be sorted identically, a negative number if approach `a` is to be sorted
     * before `b`, or a positive number if approach `a` is to be sorted after `b`.
     */
    protected sortApproaches(a: ApproachListItem, b: ApproachListItem): number;
    /**
     * A callback which is called when enter is pressed on certain controls.
     * @returns Whether or not the control handled the event. Always true here.
     */
    protected onEnterPressedAdvance(): boolean;
    /**
     * Sets the facility and approach input data for the select approach pane.
     * @param facility The facility to set.
     * @param approach The approach to set.
     */
    setFacilityAndApproach(facility: AirportFacility, approach: ApproachProcedure): void;
    /**
     * Initializes the default approach selection page display.
     */
    initDefaults(): void;
    /**
     * Builds a approach procedure menu item.
     * @param proc The approach procedure.
     * @returns A menu item definition.
     */
    protected buildApprMenuItem(proc: ApproachListItem): ContextMenuItemDefinition;
    /**
     * Builds a transition menu item.
     * @param trans The transition.
     * @returns A menu item definition.
     */
    protected buildTransMenuItem(trans: TransitionListItem): ContextMenuItemDefinition;
    /**
     * Renders the waypoint input component.
     * @returns The rendered waypoint input component, as a VNode.
     */
    protected renderWaypointInput(): VNode;
    /**
     * Renders the approach select control component.
     * @param container A reference to the container that constrains the position of the select control pop-up.
     * @param dialogPosition The position of the pop-up context menu dialog spawned by the select control.
     * @returns The rendered approach select control component, as a VNode.
     */
    protected renderApproachSelectControl(container: NodeReference<HTMLElement>, dialogPosition?: ContextMenuPosition): VNode;
    /**
     * Renders the transition select control component.
     * @param container A reference to the container that constrains the position of the select control pop-up.
     * @param dialogPosition The position of the pop-up context menu dialog spawned by the select control.
     * @returns The rendered transition select control component, as a VNode.
     */
    protected renderTransitionSelectControl(container: NodeReference<HTMLElement>, dialogPosition?: ContextMenuPosition): VNode;
    /**
     * Renders the minimums number input component.
     * @param cssClass CSS class(es) to apply to the number input component.
     * @returns The minimums number input component, as a VNode.
     */
    protected renderMinimumsNumberInput(cssClass?: string): VNode;
}
//# sourceMappingURL=SelectApproach.d.ts.map