import { EventBus, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from '../FmsHEvent';
import { UiControl, UiControlProps } from '../UiControl';
import './InputComponent.css';
/**
 * @interface InputComponentProps
 */
interface InputComponentProps extends UiControlProps {
    /** The event bus */
    bus: EventBus;
    /** The max char length of this input field. */
    maxLength: number;
    /** A callback method to output the updated text to. */
    onTextChanged(value: string): void;
}
/**
 * Input Component Class
 */
export declare class InputComponent extends UiControl<InputComponentProps> {
    private readonly textBoxRef;
    private readonly keyboardIconRef;
    private readonly inputValueContainerRef;
    private readonly selectedSpanRef;
    private readonly keyboardInputHandler;
    private readonly dataEntry;
    private readonly characterMap;
    private isKeyboardActive;
    private inputCharacterIndex;
    private previousValue;
    private readonly inputId;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * Method to set the initial text value when the component is made active.
     * @param value is a string containing the start text value
     * @param highlightIndex The new index of the highlighted character. The index will remain unchanged if this
     * argument is undefined.
     * @param emitEvent Whether a text changed event should be emitted.
     */
    setText(value: string, highlightIndex?: number, emitEvent?: boolean): void;
    /**
     * Gets the current input.
     * @returns the data entry text
     */
    getText(): string;
    /**
     * Gets the raw input without blank fills.
     * @returns the data entry text without blank fills
     */
    getRawText(): string;
    /**
     * Clears the input.
     * @param emitEvent A boolean indicating if an event should be emitted after clearing the input value.
     */
    clear(emitEvent?: boolean): void;
    /**
     * Method to select a character for data entry. TODO: Make part of component
     * @param increment is a bool for whether to increment or decrement the input character when the method is called
     * @returns a character to input into the data entry element
     */
    private updateSelectedCharacter;
    /**
     * Method to update data entry field. TODO: Make part of component
     * @param newCharacter is the new string character to input
     * @param [emitEvent] A boolean indicating if a text changed event should be emitted.
     */
    private updateDataEntryElement;
    /**
     * Method to delete the character to the left of the selected index in the entry field (bkspc function).
     * @param [emitEvent] A boolean indicating if a text changed event should be emitted.
     */
    private leftDeleteCharacter;
    /**
     * Handles the input from the hidden textbox
     */
    private handleTextboxInput;
    /**
     * Method to handle when the virtual keyboard button is clicked
     */
    private handleKeyboardClicked;
    /**
     * Activates keyboard input. If this control is not active, activating keyboard input will activate this control as
     * well.
     */
    private activateKeyboardInput;
    /**
     * Deactivates keyboard input.
     */
    private deactivateKeyboardInput;
    /**
     * Method to handle when input focus is set
     * @param e The focus event.
     */
    private onInputFocus;
    private setValueFromOS;
    /**
     * Method to handle on input blur
     */
    private onInputBlur;
    /** @inheritdoc */
    onUpperKnobInc(): void;
    /** @inheritdoc */
    onUpperKnobDec(): void;
    /** @inheritdoc */
    onLowerKnobInc(): void;
    /** @inheritdoc */
    onLowerKnobDec(): void;
    /** @inheritdoc */
    onEnter(): boolean;
    /** @inheritdoc */
    onClr(): boolean;
    /** @inheritdoc */
    getHighlightElement(): Element | null;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onActivated(): void;
    /** @inheritdoc */
    onDeactivated(): void;
    /**
     * Generates a unique id.
     * @returns A unique ID string.
     */
    private genGuid;
    /** @inheritdoc */
    renderControl(): VNode;
}
export {};
//# sourceMappingURL=InputComponent.d.ts.map