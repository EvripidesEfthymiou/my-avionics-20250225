import { MutableSubscribable, VNode } from '@microsoft/msfs-sdk';
import { UiControl, UiControlProps } from '../UiControl';
import './NumberInput.css';
/**
 * The properties for the NumberInput component.
 */
interface NumberInputProps extends UiControlProps {
    /** The minimum value allowed. */
    minValue: number;
    /** The maximum value allowed. */
    maxValue: number;
    /** The value by which to increment or decrement with each inner knob input. */
    increment: number;
    /** Whether to wrap values from maxValue to minValue and vice versa. */
    wrap: boolean;
    /** The value to increment or decrement with each inner knob input. */
    dataSubject: MutableSubscribable<number>;
    /** The optional default text value for when the dataSubject = 0. */
    defaultDisplayValue?: string;
    /** An optional formatter for the display value */
    formatter?: (value: number) => string;
    /** Callback method to send the new value back to the parent component. */
    onValueChanged?(value: number): void;
    /** Whether to quantize input to the nearest increment multiple when changed. */
    quantize?: boolean;
}
/**
 * The NumberInput component.
 */
export declare class NumberInput extends UiControl<NumberInputProps> {
    private displaySubject;
    private readonly range;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Method to get the display subject
     * @returns a string to set the display subject
     */
    private getDisplaySubject;
    /** @inheritdoc */
    onUpperKnobInc(): void;
    /** @inheritdoc */
    onUpperKnobDec(): void;
    /** @inheritdoc */
    renderControl(): VNode;
}
export {};
//# sourceMappingURL=NumberInput.d.ts.map