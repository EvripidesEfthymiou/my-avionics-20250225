import { NodeReference, Subject, Subscribable, SubscribableArray, VNode } from '@microsoft/msfs-sdk';
import { ContextMenuItemDefinition, ContextMenuPosition } from '../Dialogs/ContextMenuDialog';
import { UiControl, UiControlProps } from '../UiControl';
import { ViewService } from '../ViewService';
/**
 * The properties for the SelectControl component.
 */
interface SelectControlProps<T> extends UiControlProps {
    /** The dialog/page view service to use. */
    viewService: ViewService;
    /**
     * A function to be called when an item is selected.
     * @param index The index of the selected item.
     * @param item The item which was selected.
     * @param isRefresh Whether the item was selected as part of a refresh.
     */
    onItemSelected(index: number, item: T | undefined, isRefresh: boolean): void;
    /**
     * A function which provides menu item definitions for items.
     * @param item An item.
     * @param index The index of the item.
     * @returns a menu item definition for the item.
     */
    buildMenuItem(item: T, index: number): ContextMenuItemDefinition;
    /**
     * A function which renders items for display in the selected item area. If not defined, the item's menu item
     * definition will be used to render the item instead.
     * @param item An item.
     * @param index The index of the item.
     * @returns the rendered item, as a VNode.
     */
    renderSelectedItem?(item: T, index: number): VNode;
    /** The underlying data for this selection */
    data: SubscribableArray<T>;
    /** The outer dialog container this control is in */
    outerContainer: NodeReference<HTMLElement>;
    /** Defines the position where the context menu will appear. (Default: 'center') */
    dialogPosition?: ContextMenuPosition;
    /**
     * A subscribable which provides text to display in the selected value area when there is no selected value. If not
     * defined, `NONE` will be displayed.
     */
    nullSelectionText?: Subscribable<string>;
    /**
     * A subscribable which provides the index of the item to which to scroll when the selection dialog is opened. If not
     * defined, the index of the currently selected item is used instead, or 0 if there is no selected item.
     */
    dialogScrollStartIndex?: Subscribable<number>;
}
/**
 * A control which allows the user to select one of multiple items through a pop-up dialog and which also displays the
 * currently selected value.
 */
export declare class SelectControl<T> extends UiControl<SelectControlProps<T>> {
    private readonly valueRef;
    private renderedValueNode;
    MenuItems: ContextMenuItemDefinition[];
    SelectedValue: Subject<number>;
    /**
     * A callback called after the component renders.
     */
    onAfterRender(): void;
    /** @inheritdoc */
    onUpperKnob(): void;
    /**
     * Builds the menu item definitions.
     * @returns An array of menu item definitions.
     */
    private buildMenuItems;
    /**
     * Renders the selected item.
     * @param index The index of the selected item.
     */
    private renderSelectedItem;
    /** @inheritdoc */
    renderControl(): VNode;
}
export {};
//# sourceMappingURL=SelectControl.d.ts.map