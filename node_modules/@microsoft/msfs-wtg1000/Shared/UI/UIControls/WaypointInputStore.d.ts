import { ComputedSubject, EventBus, Facility, FacilitySearchType, FacilityWaypoint, Subject, Waypoint } from '@microsoft/msfs-sdk';
/**
 * Waypoint input store
 */
export declare class WaypointInputStore {
    private readonly searchFilter;
    private readonly onWaypointChanged?;
    private readonly onFacilityChanged?;
    private readonly onMatchedWaypointsChanged?;
    private readonly nameEmptyStr;
    private readonly cityEmptyStr;
    readonly displayWaypoint: {
        icao: string;
        name: ComputedSubject<string, string>;
        city: ComputedSubject<string, string>;
    };
    private facilitySub?;
    private readonly facRepo;
    private readonly facLoader;
    private readonly facWaypointCache;
    /** A subject which provides the currently selected waypoint. */
    readonly selectedWaypoint: Subject<FacilityWaypoint<Facility> | null>;
    /** A subject which provides the input text value which should be displayed. */
    readonly inputValue: Subject<string>;
    private _matchedIcaos;
    /** An array of ICAO strings which have matched the input. */
    get matchedIcaos(): readonly string[];
    private _matchedWaypoints;
    /** An array of facilities which have matched the input. */
    get matchedWaypoints(): readonly FacilityWaypoint<Facility>[];
    private loadIcaosOpId;
    /**
     * Creates an instance of waypoint input store.
     * @param bus The event bus.
     * @param searchFilter This store's search filter for ICAOSearch.
     * @param onWaypointChanged A function which is called when this store's selected waypoint changes.
     * @param onFacilityChanged A function which is called when this store's selected facility changes.
     * @param onMatchedWaypointsChanged A function which is called when this store's matched waypoints changes.
     */
    constructor(bus: EventBus, searchFilter: FacilitySearchType, onWaypointChanged?: ((waypoint: Waypoint | null) => void) | undefined, onFacilityChanged?: ((fac: Facility | undefined) => void) | undefined, onMatchedWaypointsChanged?: ((waypoints: readonly FacilityWaypoint<Facility>[]) => void) | undefined);
    /**
     * Executes the icao search.
     * @param searchStr The search string.
     * @returns An array of the found ICAOs.
     */
    doSearch(searchStr: string): Promise<string[]>;
    /**
     * Loads and display the facility data for the currently found ICAO
     * @param icaos The ICAO to load.
     * @returns a Promise which fulfills with whether the ICAO data was successfully loaded.
     */
    loadIcaoData(icaos: readonly string[]): Promise<boolean>;
    /**
     * Sets the selected and displayed waypoint.
     * @param waypoint A facility waypoint.
     */
    setWaypoint(waypoint: FacilityWaypoint<Facility>): void;
    /**
     * Clears the selected and displayed waypoint.
     */
    clearWaypoint(): void;
}
//# sourceMappingURL=WaypointInputStore.d.ts.map