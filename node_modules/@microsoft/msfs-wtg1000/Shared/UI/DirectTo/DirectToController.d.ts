import { Facility, FacilityWaypoint, FlightPlan, Subject, Waypoint } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { ViewService } from '../ViewService';
import { DirectToInputData } from './DirectTo';
import { DirectToStore } from './DirectToStore';
/**
 * Data on a direct to existing target leg.
 */
type DirectToExistingData = {
    /** The index of the segment in which the target leg resides. */
    segmentIndex: number;
    /** The index of the target leg in its segment. */
    segmentLegIndex: number;
    /** The ICAO of the target leg fix. */
    icao: string;
};
/** The controller for the DTO view */
export declare class DirectToController {
    private readonly store;
    private readonly fms;
    private readonly viewService;
    private readonly goToActivateFunc;
    private static readonly BEARING_MAGNETIC;
    readonly inputIcao: Subject<string>;
    readonly canActivate: Subject<boolean>;
    readonly matchedWaypointsChangedHandler: (waypoints: readonly FacilityWaypoint<Facility>[]) => void;
    readonly waypointChangedHandler: (waypoint: Waypoint | null) => Promise<void>;
    readonly inputEnterPressedHandler: () => void;
    private directToExistingData;
    private goToActivateOnWaypoint;
    /**
     * Creates an instance of direct to controller.
     * @param store This controller's associated direct to menu store.
     * @param fms The flight management system.
     * @param viewService The view service used by this controller.
     * @param goToActivateFunc A function which focuses the Activate button of this controller's associated view.
     */
    constructor(store: DirectToStore, fms: Fms, viewService: ViewService, goToActivateFunc: () => void);
    /**
     * Initializes the direct to target based on input data. If the input data is defined, the target will be set to that
     * defined by the input data. If the input data is undefined, an attempt will be made to set the target to the
     * following, in order:
     * * The current active direct to target.
     * * The current active flight plan leg.
     * * The next leg in the primary flight plan, following the active leg, that is a valid direct to target.
     * * The previous leg in the primary flight plan, before the active leg, that is a valid direct to target.
     * @param dtoData The input data.
     */
    initializeTarget(dtoData: DirectToInputData | undefined): void;
    /**
     * Searches for a valid Direct To Existing target in the primary flight plan, starting from a specified flight plan
     * leg. The search begins with the specified leg, then proceeds forwards in the plan. If no valid leg is found, the
     * search then returns to the leg immediately prior to the specified leg and proceeds backwards in the plan.
     * @param segmentIndex The index of the segment that contains the starting leg.
     * @param segmentLegIndex The index of the starting leg in its segment.
     */
    private searchForValidDtoExistingLeg;
    /**
     * Responds to changes in the waypoint input's matched waypoints list.
     * @param waypoints The matched waypoints.
     */
    private onMatchedWaypointsChanged;
    /**
     * Responds to changes in the waypoint input's selected waypoint.
     * @param waypoint The selected waypoint.
     */
    private onWaypointChanged;
    /**
     * Syncs the course input value with the bearing to the selected waypoint.
     */
    private syncCourseInput;
    /**
     * Responds to Enter button press events from the waypoint input.
     */
    private onInputEnterPressed;
    /**
     * Responds to accept events from the waypoint duplicate dialog.
     * @param facility The facility returned by the waypoint duplicate dialog.
     */
    private onWptDupDialogAccept;
    /**
     * Activates a Direct To to the selected waypoint.
     * @param holdAt Whether to hold at the selected waypoint.
     */
    activateSelected(holdAt?: boolean): void;
    /**
     * Opens the Hold dialog targeted at the created direct to.
     * @param segmentIndex The segment index of the direct to existing.
     * @param legIndex The leg index of the direct to existing.
     */
    private holdAt;
    /**
     * Creates a direct to existing data object for a flight plan leg.
     * @param plan A flight plan.
     * @param segmentIndex The index of the segment in which the leg resides.
     * @param segmentLegIndex The index of the leg in its segment.
     * @returns A direct to existing data object.
     */
    protected static createDtoExistingData(plan: FlightPlan, segmentIndex: number, segmentLegIndex: number): DirectToExistingData;
}
export {};
//# sourceMappingURL=DirectToController.d.ts.map