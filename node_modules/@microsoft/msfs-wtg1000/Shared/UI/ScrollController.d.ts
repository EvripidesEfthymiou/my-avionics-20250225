import { ScrollableControl } from './UiView';
/** The ScrollController for UI Elements. */
export declare class ScrollController {
    private readonly controls;
    private scrollContainer;
    private isEnabled;
    private lastFocusedIndex;
    /**
     * Method to register a control.
     * @param ctrl The control to register.
     */
    registerCtrl(ctrl: ScrollableControl): void;
    /**
     * Registers a scroll container with this controller.
     * @param scrollContainer The html block element to assign.
     */
    registerScrollContainer(scrollContainer: HTMLElement): void;
    /**
     * Method to unregister a control.
     * @param ctrl The control to unregister.
     */
    unregisterCtrl(ctrl: ScrollableControl): void;
    /** Method to reset this control. */
    resetCtrls(): void;
    /**
     * Toggles the scroll enabled state.
     */
    toggleScrollEnabled(): void;
    /**
     * Gets a value indicating if scrolling is enabled
     * @returns true if is scroll enabled
     */
    getIsScrollEnabled(): boolean;
    /**
     * Method to get the UiControl highlighted by the control.
     * @returns the selected UiControl or undefine
     */
    getFocusedUiControl(): ScrollableControl | undefined;
    /**
     * Method to get the UiControl highlighted by the control.
     * @returns the selected UiControl or undefine
     */
    getActivatedUiControl(): ScrollableControl | undefined;
    /**
     * Scrolls to the first suitable control.
     * @returns Whether the operation was successful.
     */
    gotoFirst(): boolean;
    /**
     * Highlight the last suitable control.
     * @returns Whether the operation was successful.
     */
    gotoLast(): boolean;
    /**
     * Highlight the selected control on the page.
     * @param index is the index to highlight.
     * @returns Whether the operation was successful.
     */
    gotoIndex(index: number): boolean;
    /**
     * Scroll forward.
     * @returns true if it was able to scroll into the given direction.
     */
    gotoNext: () => boolean;
    /**
     * Scroll backwards.
     * @returns true if it was able to scroll into the given direction.
     */
    gotoPrev: () => boolean;
    /**
     * Gets controls count
     * @returns controls count
     */
    getControlsCount(): number;
    /** Unfocus the focused control. */
    blur(): void;
    /**
     * Callback to override when a scroll event happens.
     * @param ctrl The control now in focus.
     */
    onScroll: (ctrl: ScrollableControl) => void;
    /**
     * Highlights the next focusable control in the direction.
     * @param direction The direction to scroll to.
     * @param activeIdx The index to start the scroll from.
     * @returns true if it was able to scroll into the given direction.
     */
    scrollTo(direction: 'next' | 'prev', activeIdx?: number): boolean;
    /**
     * Founds the next/prev control that is able to be focused.
     * Returns undefined when no suitable control is found.
     * @private
     * @param activeIdx The index to start the search from.
     * @param direction The direction to look into.
     * @returns A focusable UiControl or undefined.
     */
    private findControlToFocus;
    /**
     * Gets the index of the focused control.
     * @private
     * @returns The index.
     */
    private getFocusedUiControlIndex;
}
//# sourceMappingURL=ScrollController.d.ts.map