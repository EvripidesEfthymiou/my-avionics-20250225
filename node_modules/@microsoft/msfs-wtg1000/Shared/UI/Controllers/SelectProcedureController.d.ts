import { EnrouteTransition, Facility, FlightPathCalculator, Procedure, RunwayTransition, Subject } from '@microsoft/msfs-sdk';
import { Fms, ProcedureType } from '@microsoft/msfs-garminsdk';
import { SelectProcedureControllerStore } from './SelectProcedureStore';
/** The controller for SelectProcedure views. */
export declare abstract class SelectProcedureController {
    protected readonly store: SelectProcedureControllerStore;
    protected readonly selectNextCb: () => void;
    protected readonly fms: Fms;
    protected readonly calculator: FlightPathCalculator;
    protected readonly procType: ProcedureType;
    readonly facilityChangedHandler: (facility: Facility | undefined) => void;
    readonly procSelectedHandler: (index: number, item: Procedure, isRefresh: boolean) => Promise<void>;
    readonly runwaySelectedHandler: (index: number, item: RunwayTransition, isRefresh: boolean) => Promise<void>;
    readonly transSelectedHandler: (index: number, item: EnrouteTransition, isRefresh: boolean) => Promise<void>;
    readonly inputIcao: Subject<string>;
    readonly canLoad: Subject<boolean>;
    /**
     * Ctor
     * @param store The store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms The FMS instance.
     * @param calculator The flight path calculator used by this controller to build preview flight plans.
     * @param procType is the procedure type for this controller.
     */
    constructor(store: SelectProcedureControllerStore, selectNextCb: () => void, fms: Fms, calculator: FlightPathCalculator, procType: ProcedureType);
    /** Initialize the controller. */
    initialize(): void;
    /**
     * Gets the initial ICAO on load.
     * @returns The initial ICAO string or undefined.
     */
    protected abstract getInitialICAO(): string | undefined;
    /**
     * Responds to when the waypoint input's selected facility changes.
     * @param facility The selected facility.
     */
    protected onFacilityChanged(facility: Facility | undefined): void;
    /**
     * Evaluates if the next select should be focused.
     * @param isRefresh If select event happened based on a data refresh.
     */
    private gotoNextSelect;
    /**
     * Callback handler for when a procedure is selected.
     * @param index The index of the selected procedure.
     * @param item The procedure selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onProcSelected(index: number, item: Procedure, isRefresh: boolean): Promise<void>;
    /**
     * Responds to when a runway transition is selected.
     * @param index The index of the selected transition.
     * @param item The transition selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onRunwaySelected(index: number, item: RunwayTransition, isRefresh: boolean): Promise<void>;
    /**
     * Responds to when an enroute transition is selected.
     * @param index The index of the selected transition.
     * @param item The transition selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    protected onTransSelected(index: number, item: EnrouteTransition, isRefresh: boolean): Promise<void>;
    protected buildSequenceOpId: number;
    /**
     * Builds the sequence list for the approach preview
     * @returns A Promise which is fulfilled with whether a preview sequence was successfully built.
     */
    protected buildSequence(): Promise<boolean>;
    /** Callback handler for when load is pressed. */
    onLoadSelected: () => void;
    /** Called when the load procedure button is clicked. */
    abstract onLoadExecute: () => void;
}
//# sourceMappingURL=SelectProcedureController.d.ts.map