import { IntersectionFacility, NodeReference, Subject } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { ContextMenuItemDefinition } from '../Dialogs/ContextMenuDialog';
import { SelectControl } from '../UIControls/SelectControl';
import { SelectAirwayStore } from './SelectAirwayStore';
/**
 * The properties Select Airway Input Data.
 */
export interface SelectAirwayInputData {
    /** The selected segment index to insert an airway from. */
    segmentIndex: number;
    /** The selected leg index to insert an airway from. */
    legIndex: number;
}
/** The controller for SelectProcedure views. */
export declare class SelectAirwayController {
    readonly store: SelectAirwayStore;
    readonly selectNextCb: () => void;
    readonly fms: Fms;
    readonly exitSelectControlRef: NodeReference<SelectControl<IntersectionFacility>>;
    inputIcao: Subject<string>;
    readonly entrySubject: Subject<string>;
    canLoad: Subject<boolean>;
    emptyListText: Subject<string>;
    entryIndex: number;
    entryIndexSubject: Subject<number>;
    /**
     * Creates a Select Airway Controller
     * @param store The store.
     * @param selectNextCb Callback when the next control should be focused.
     * @param fms The FMS instance.
     * @param exitSelectControlRef is the ref for the exit select control.
     */
    constructor(store: SelectAirwayStore, selectNextCb: () => void, fms: Fms, exitSelectControlRef: NodeReference<SelectControl<IntersectionFacility>>);
    /**
     * Sets existing fix for Direct To Existing
     * @param inputData is the DirectToInputData
     */
    setExistingFix(inputData: SelectAirwayInputData | undefined): Promise<void>;
    /** Initialize the controller. */
    initialize(): void;
    /** Get the facility.
     * @param icao is the intersection icao
     * @returns an Intersection Facility
     */
    private getFacility;
    /**
     * Evaluates if the next select should be focused.
     * @param isRefresh If select event happened based on a data refresh.
     */
    private gotoNextSelect;
    /**
     * Callback handler for when an airway is selected.
     * @param index is the index of the item selected
     * @param airway The airway name selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    onAirwaySelected: (index: number, airway: string, isRefresh: boolean) => void;
    /**
     * Builds an airway menu item.
     * @param airway The airway to build the menu item for.
     * @returns A menu item definition.
     */
    buildAirwayMenuItem: (airway: string) => ContextMenuItemDefinition;
    /**
     * Callback handler for when an enroute transition is selected.
     * @param index The index of the selected transition.
     * @param item The transition selected.
     * @param isRefresh If select event happened based on a data refresh.
     */
    onExitSelected: (index: number, item: IntersectionFacility, isRefresh: boolean) => void;
    /**
     * Builds an airway exit menu item.
     * @param waypoint The intersection facility of the exit.
     * @param index The index of the airway.
     * @returns A menu item definition.
     */
    buildExitMenuItem: (waypoint: IntersectionFacility, index: number) => ContextMenuItemDefinition;
    /** Callback handler for when load is pressed. */
    onLoadSelected: () => void;
    /** Callback handler for when load is pressed. */
    onLoadExecuted: () => void;
}
//# sourceMappingURL=SelectAirwayController.d.ts.map