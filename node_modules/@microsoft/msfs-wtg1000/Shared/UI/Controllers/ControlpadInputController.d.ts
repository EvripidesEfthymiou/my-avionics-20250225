import { EventBus } from '@microsoft/msfs-sdk';
import { NavComRadio } from '../../NavCom';
import { FmsHEvent } from '../FmsHEvent';
/**
 * Event published by the MFD view service to inhibit generic controlpad use.
 */
export interface MFDViewServiceEvents {
    /** True, if the the generic handling of controlpad input (frequency, xpdr) shall be inhibited.
     * The condition, which triggers true, is MFD's activeViewKey = 'NavMapPage', for all other active views th event is false.
     */
    inhibitGenericControlpadUse: boolean;
}
export declare enum ControlpadTargetInstrument {
    MFD = 0,
    PFD = 1
}
export declare enum GenericControlpadHandlingStates {
    comInputArmed = 0,// Default state, entering a '1' is directly considered as the first digit of a com frequency input
    navInputArmed = 1,// Enabled by the NAV key. After 10s without input -> fallback to default state
    xpdrInputArmed = 2,// Enabled by the XPDR key. After 10s without input -> fallback to default state
    comInputStarted = 3,// Entering a com frequency has been started. After 10s without input -> fallback to default state
    navInputStarted = 4,// Entering a nav frequency has been started. After 10s without input -> fallback to default state
    crsInputArmed = 5,// Not for digit entering, but after 10s without input -> fallback to default state
    genericHandlingInhibited = 6
}
/** Simvar which indicates the control pad target instrument. */
export declare enum ControlPadSimVars {
    ControlPadTargetView = "L:WT1000_ControlPad_Targetview"
}
/**
 * Controller that handles control pad input for the view service.
 */
export declare class ControlpadInputController {
    private readonly bus;
    private readonly targetDisplay;
    static readonly controlPadEventMap: Map<string, FmsHEvent>;
    protected readonly controlPadAcceptingEvents: string[];
    protected readonly controlKnobEvents: string[];
    private readonly sub;
    private readonly inhibitGenericControlpadUseConsumer;
    private readonly stateFallbackTimer;
    private controlpadState;
    private readonly xpdrHandler;
    private radio1;
    private radio2;
    private comRadio;
    private navRadio;
    /**
     * Constructs the controller. Each PFD and MFD have seperate instances of this controllers. The PFD controller maintains
     * the COM frequencies and the MFD controller the NAV frequencies.
     * @param bus The event bus.
     * @param targetDisplay Enum that indicates for which instrument (PFD or MFD) this handler is running.
     */
    constructor(bus: EventBus, targetDisplay: ControlpadTargetInstrument);
    /**
     * Setter for the radio refs.
     * @param comRadio com radio ref
     * @param navRadio nav radio ref
     */
    setFrequencyElementRefs(comRadio: NavComRadio, navRadio: NavComRadio): void;
    /**
     * This abstract method returns true, if the current instrument shall handle control pad events:
     * @returns translated event as string
     */
    private isControlpadTargetInstrument;
    /**
     * Handler for all control pad input.
     * @param hEvent received hEvent.
     * @returns true if the event is handled
     */
    handleControlPadEventInput(hEvent: string): boolean;
    /**
     * Check for state changing events, which are state agnostic
     * @param hEvent H event as string
     * @returns if event was handled
     */
    private genericNewStateDetermination;
    /**
     * Handle comInputArmed state.
     *
     * @param hEvent H event as string
     * @returns if event was handled
     */
    private handleComInputArmedState;
    /**
     * Handle comInputStarted state.
     *
     * @param hEvent H event as string
     * @returns if event was handled
     */
    private handleComInputStartedState;
    /**
     * Handle navInputArmed state.
     *
     * @param hEvent H event as string
     * @returns if event was handled
     */
    private handleNavInputArmedState;
    /**
     * Handle navInputStarted state.
     *
     * @param hEvent H event as string
     * @returns if event was handled
     */
    private handleNavInputStartedState;
    /**
     * This method schedules a 10 second period, after which a fallback to the default generic handling state occurs (comInputArmed).
     */
    private scheduleDefaultStateFallback;
    /** Handle changes in control pad state and arm the appropriate radio box.
     * @param controlpadState the state of the control pad
     */
    private armRadio;
}
//# sourceMappingURL=ControlpadInputController.d.ts.map