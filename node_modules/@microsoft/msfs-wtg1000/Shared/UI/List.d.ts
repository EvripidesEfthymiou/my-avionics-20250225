import { NodeReference, SubscribableArray, VNode } from '@microsoft/msfs-sdk';
import { UiControl } from './UiControl';
import { UiControlGroup, UiControlGroupProps } from './UiControlGroup';
import { ScrollableControl } from './UiView';
/** The properties for the List component. */
interface ListProps extends UiControlGroupProps {
    /**
     * The data for this list.
     * @type {any[]}
     */
    data: SubscribableArray<any>;
    /** A function defining how to render each list item. */
    renderItem: {
        (data: any, registerFn: (ctrl: UiControl) => void, index: number): VNode;
    };
    /** A callback function to be called when a new item is selected. */
    onItemSelected?: (data: any, element: ScrollableControl | null, index: number) => void;
    /** The container used for scrolling. */
    scrollContainer?: NodeReference<HTMLElement>;
    /** CSS class(es) to add to the root of the list component. */
    class?: string;
}
/** The List component. */
export declare class List extends UiControlGroup<ListProps> {
    private readonly _listContainer;
    private readonly _itemInstanceRefs;
    private previousSelectedIndex;
    private previousSelectedItem;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * A callback fired when the array subject data changes.
     * @param index The index of the change.
     * @param type The type of change.
     * @param item The item that was changed.
     */
    private onDataChanged;
    /**
     * Removes a dom node from the collection at the specified index.
     * @param index The index to remove.
     */
    private removeDomNode;
    private registerListItem;
    /**
     * Adds a list rendered dom node to the collection.
     * @param item Item to render and add.
     * @param index The index to add at.
     * @param el The element to add to.
     */
    private addDomNode;
    /**
     * Refreshs control registrations of all list elements.
     */
    private refreshRegistrations;
    /**
     * Scrolls to an item.
     * @param index is the index of the list item to scroll to.
     */
    scrollToIndex(index: number): void;
    /**
     * Ensures an indexed list item is in view.
     * @param index The index of the list item.
     */
    ensureIndexInView(index: number): void;
    /**
     * Gets the data object related to the selected DOM element.
     * @returns The selected item, if found.
     */
    getSelectedItem(): any | null;
    /**
     * Get the selected HTMLElement.
     * @returns The selected element, if found.
     */
    getSelectedElement(): HTMLElement | null;
    /**
     * Gets the index of the currently selected element.
     * @returns Selected element index. Returns -1 if nothing found.
     */
    getSelectedIndex(): number;
    /**
     * Gets the instance of the node at the specified index.
     * @param index The index to get the instance for.
     * @returns The node instance of specified type.
     */
    getListItemInstance<T>(index: number): T | null;
    /**
     * Gets index of a item in the list by its node instance.
     * @param nodeInstance The node instance to look for.
     * @returns list item index
     */
    getListItemIndex(nodeInstance: ScrollableControl): number;
    /** @inheritdoc */
    protected onBlurred(): void;
    /** @inheritdoc */
    protected onScroll(ctrl: ScrollableControl): void;
    /**
     * Renders a list item
     * @param dataItem The data item to render.
     * @param index The index to render at.
     * @returns list item vnode
     * @throws error when the resulting vnode is not a scrollable control
     */
    private renderListItem;
    /** Renders the list of data items. */
    private renderList;
    /** @inheritdoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=List.d.ts.map