import { DebounceTimer, Subject, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { G1000UiControl, G1000UiControlProps } from '../G1000UiControl';
import './DigitInput.css';
/**
 * Component props for DigitInput.
 */
export interface DigitInputProps extends G1000UiControlProps {
    /** A subject which is bound to the input value. */
    value: Subject<number>;
    /** The minimum un-scaled value of the input, or a subscribable which provides it. */
    minValue: Subscribable<number> | number;
    /** The maximum un-scaled value of the input (exclusive if `wrap` is true), or a subscribable which provides it. */
    maxValue: Subscribable<number> | number;
    /**
     * The amount to increment/decrement the input's un-scaled value when the inner FMS knob is scrolled, or a
     * subscribable which provides it.
     */
    increment: Subscribable<number> | number;
    /** Whether the input should wrap from the max value to the min value, or a subscribable which provides it. */
    wrap: Subscribable<boolean> | boolean;
    /**
     * The scaling factor applied to this input's value, or a subscribable which provides it. The scaling factor
     * determines the relationship between this input's bound data value and the displayed value as follows:
     * `data_value = display_value * scale`. When the scaling factor changes, this input's displayed value is
     * preserved, and the bound data value is changed to reflect the new scaling factor.
     */
    scale: Subscribable<number> | number;
    /**
     * A function which formats input values for display as either a string or a VNode. If not defined, values will be
     * rendered as plain strings according to their `toString()` method.
     */
    formatter?: (value: number) => string | VNode;
    /**
     * The duration, in milliseconds, of the applied solid highlight when this input is focused or edited. Defaults to
     * 1000.
     */
    solidHighlightDuration?: number;
    /** CSS class(es) to apply to the root of the input component. */
    class?: string;
}
/**
 * An input control which allows the user to select a numeric digit. Digits are not necessarily constrained to be
 * integers in the range [0, 9]. Instead, they can take any valid floating point numeric value.
 */
export declare class DigitInput extends G1000UiControl<DigitInputProps> {
    protected static readonly DEFAULT_SOLID_HIGHLIGHT_DURATION = 1000;
    protected readonly rootRef: import("@microsoft/msfs-sdk").NodeReference<HTMLDivElement>;
    protected readonly displayValueSub: Subject<number>;
    protected readonly renderedValueSub: import("@microsoft/msfs-sdk").MappedSubscribable<string | VNode>;
    protected renderedValue: string | VNode | null;
    protected readonly minValue: Subscribable<number>;
    protected readonly maxValue: Subscribable<number>;
    protected readonly increment: Subscribable<number>;
    protected readonly wrap: Subscribable<boolean>;
    protected readonly scale: Subscribable<number>;
    protected readonly solidHighlightTimer: DebounceTimer;
    private valueSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to changes in the input value.
     * @param value The input value.
     */
    protected onValueChanged(value: number): void;
    /**
     * Responds to changes in the input scaling factor.
     * @param scale The scaling factor.
     */
    protected onScaleChanged(scale: number): void;
    /**
     * Responds to changes in the displayed value.
     * @param display The displayed value, as either a plain string or a VNode.
     */
    protected onDisplayValueChanged(display: string | VNode): void;
    /**
     * Cleans up this input's rendered value, destroying any top-level DisplayComponents that are part of the rendered
     * value's VNode tree.
     */
    protected cleanUpRenderedValue(): void;
    /** @inheritdoc */
    protected onFocused(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onBlurred(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onEnabled(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onDisabled(source: G1000UiControl): void;
    /**
     * Applies a solid highlight to this input.
     * @param duration The duration, in milliseconds, of the highlight.
     */
    protected applySolidHighlight(duration: number): void;
    /** @inheritdoc */
    onUpperKnobInc(): boolean;
    /** @inheritdoc */
    onUpperKnobDec(): boolean;
    /**
     * Changes this input's value by a specified amount.
     * @param delta The amount by which to change the value.
     */
    protected changeValue(delta: number): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=DigitInput.d.ts.map