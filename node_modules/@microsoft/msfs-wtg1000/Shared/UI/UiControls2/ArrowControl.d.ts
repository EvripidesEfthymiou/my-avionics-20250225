import { DebounceTimer, MutableSubscribable, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { G1000UiControl, G1000UiControlProps } from '../G1000UiControl';
import './ArrowControl.css';
/**
 * Base component props for ArrowControl.
 */
interface BaseArrowControlProps<T> extends G1000UiControlProps {
    /** The options that can be selected using the control. */
    options: Iterable<T>;
    /**
     * A function which renders selected values. If not defined, then selected values will be rendered using the default
     * `toString()` method.
     */
    renderValue?: (value: T) => string;
    /**
     * The duration, in milliseconds, of the applied solid highlight when the control is focused or edited. Defaults to
     * 1000.
     */
    solidHighlightDuration?: number;
    /** CSS class(es) to apply to the root of the component. */
    class?: string;
}
/**
 * Component props for a ArrowControl that is bound to a subscribable value.
 */
interface SubscribableArrowControlProps<T> extends BaseArrowControlProps<T> {
    /** The value to bind to the control. */
    value: Subscribable<T>;
    /**
     * A function which is called when a user selects an option using the control.
     */
    onOptionSelected: (option: T) => void;
}
/**
 * Component props for a ArrowControl that is bound to a mutable subscribable value.
 */
interface MutableSubscribableArrowControlProps<T> extends BaseArrowControlProps<T> {
    /** The value to bind to the control. */
    value: MutableSubscribable<T>;
    /**
     * A function which is called when a user selects an option using the control. If not defined, then the selected
     * value will be written to the mutable subscribable bound to the control.
     */
    onOptionSelected?: (option: T) => void;
}
/**
 * Component props for ArrowControl.
 */
export type ArrowControlProps<T> = SubscribableArrowControlProps<T> | MutableSubscribableArrowControlProps<T>;
/**
 * A control which allows the user to select a value by scrolling left and right through a virtual list of options.
 * The control displays the currently selected value and arrows to the left and right that depict whether the user can
 * scroll left and/or right.
 */
export declare class ArrowControl<T> extends G1000UiControl<ArrowControlProps<T>> {
    private static readonly DEFAULT_SOLID_HIGHLIGHT_DURATION;
    private readonly valueRef;
    private readonly options;
    private readonly selectedIndex;
    private readonly selectedValueDisplay;
    protected readonly solidHighlightTimer: DebounceTimer;
    /** @inheritDoc */
    protected onFocused(source: G1000UiControl): void;
    /** @inheritDoc */
    protected onBlurred(source: G1000UiControl): void;
    /** @inheritDoc */
    protected onEnabled(source: G1000UiControl): void;
    /** @inheritDoc */
    protected onDisabled(source: G1000UiControl): void;
    /**
     * Applies a solid highlight to this control's value display.
     * @param duration The duration, in milliseconds, of the highlight.
     */
    protected applySolidHighlight(duration: number): void;
    /** @inheritDoc */
    onUpperKnobInc(): boolean;
    /** @inheritDoc */
    onUpperKnobDec(): boolean;
    /**
     * Changes this control's selected option.
     * @param direction The direction in which to change the selected option.
     */
    private changeOption;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
export {};
//# sourceMappingURL=ArrowControl.d.ts.map