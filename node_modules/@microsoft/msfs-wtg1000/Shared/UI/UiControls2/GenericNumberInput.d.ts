import { FocusPosition, Subject, VNode } from '@microsoft/msfs-sdk';
import { G1000UiControl, G1000UiControlProps } from '../../UI/G1000UiControl';
import { FmsHEvent } from '../FmsHEvent';
import './GenericNumberInput.css';
/**
 * Component props for GenericNumberInput.
 */
export interface GenericNumberInputProps extends G1000UiControlProps {
    /** A subject which is bound to the input value. */
    value: Subject<number>;
    /**
     * A function which assigns values to individual sign and digit inputs based on the bound value.
     * @param value The bound value.
     * @param signValues An array containing subjects which bind the values of the component's individual sign inputs.
     * The order of the subjects is the same as the order of the sign inputs in the component's control subtree.
     * @param digitValues An array containing subjects which bind the values of the component's individual digit inputs.
     * The order of the subjects is the same as the order of the digit inputs in the component's control subtree.
     */
    digitizer?: (value: number, signValues: readonly Subject<1 | -1>[], digitValues: readonly Subject<number>[]) => void;
    /**
     * A function which renders the input's value when editing is not active. If defined, the output of the function
     * replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: (value: number) => string | VNode;
    /**
     * The duration, in milliseconds, of the applied solid highlight when this input is focused or edited. Defaults to
     * 1000.
     */
    solidHighlightDuration?: number;
    /**
     * A function which responds to when an input value is accepted.
     * @param value The accepted value.
     */
    onInputAccepted?: (value: number) => void;
    /**
     * A function which responds to when an input value is rejected.
     * @param value The rejected value.
     */
    onInputRejected?: (value: number) => void;
    /** Whether the first event activating the input should also edit the value. */
    editOnActivate?: boolean;
    /** CSS class(es) to apply to the root of the component. */
    class?: string;
    /** Whether keyboard entry should be disabled. */
    keyboardEntryDisabled?: boolean;
}
/**
 * An input which allows users to select a numeric value using a combination of one or more child SignInputs and
 * DigitInputs. The input value is derived from the sum of the values of all child DigitInputs, multiplied by the
 * product of the values of all SignInputs.
 */
export declare class GenericNumberInput extends G1000UiControl<GenericNumberInputProps> {
    private static readonly DEFAULT_SOLID_HIGHLIGHT_DURATION;
    private readonly rootRef;
    protected readonly inputGroupRef: import("@microsoft/msfs-sdk").NodeReference<G1000UiControl<G1000UiControlProps>>;
    private readonly activeRef;
    private readonly inactiveRef;
    protected readonly signValues: Subject<1 | -1>[];
    protected readonly digitValues: Subject<number>[];
    protected isEditing: boolean;
    protected inputValue: number;
    private renderedInactiveValue;
    private readonly solidHighlightTimer;
    private valueSub?;
    private readonly inputSubs;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to changes in the input value.
     */
    private onValueChanged;
    /**
     * Reconciles this component's bound value with the input value derived from this component's individual digit and
     * sign inputs. If the two do not match, a digitizer, if available, is used to change the digit and sign inputs'
     * values such that the input value matches the bound value. If a digitizer is not available or is unable to
     * reconcile the two values, the bound value will be changed to match the input value.
     */
    private reconcileValueWithInputs;
    /**
     * Updates this input's rendered editing-inactive value. If editing is currently active, the rendered editing-
     * inactive value will be hidden. If editing is not active, it will be displayed and updated to reflect this input's
     * current value.
     */
    private updateInactiveDisplay;
    /**
     * Cleans up this input's rendered editing-inactive value, destroying any top-level DisplayComponents that are part
     * of the rendered value's VNode tree.
     */
    private cleanUpRenderedInactiveValue;
    /**
     * Responds to changes in the input value.
     */
    private onInputChanged;
    /**
     * Computes a value from this component's individual digit and sign inputs.
     * @returns The value represented by this component's individual digit and sign inputs.
     */
    private computeValueFromInputs;
    /** @inheritdoc */
    protected onFocused(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onBlurred(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onEnabled(source: G1000UiControl): void;
    /** @inheritdoc */
    protected onDisabled(source: G1000UiControl): void;
    /** @inheritdoc */
    onUpperKnobInc(): boolean;
    /** @inheritdoc */
    onUpperKnobDec(): boolean;
    /** @inheritdoc */
    onEnter(source: G1000UiControl): boolean;
    /** @inheritdoc */
    onClr(source: G1000UiControl): boolean;
    /**
     * Consolidates a keyboard event into a digit input event.
     * @param source The source of the event.
     * @param evt The event.
     * @returns Whether the event was handled.
     */
    consolidateKeyboardHEvent(source: G1000UiControl, evt: FmsHEvent): boolean;
    /**
     * Responds to a digit input event.
     * @param digit The digit that was input.
     */
    protected handleDigitInput(digit: number): void;
    /**
     * Calculates the scaled value of a digit.
     * @param digit The digit.
     * @param index The index of the digit.
     * @param length The total number of digits.
     * @returns The scaled value of the digit.
     */
    protected calculateScaledValue(digit: number, index: number, length: number): number;
    /**
     * Activates editing for this component.
     * @param activatingEvent The event that triggered activation of editing, if any.
     * @param focusPosition The position to focus when editing is activated. Defaults to First.
     */
    protected activateEditing(activatingEvent?: FmsHEvent.UPPER_INC | FmsHEvent.UPPER_DEC, focusPosition?: FocusPosition): void;
    /**
     * Deactivates editing for this component.
     * @param saveValue Whether to save the current edited input value to this component's bound value.
     */
    protected deactivateEditing(saveValue: boolean): void;
    /**
     * Applies a solid highlight to this input.
     * @param duration The duration, in milliseconds, of the highlight.
     */
    private applySolidHighlight;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GenericNumberInput.d.ts.map