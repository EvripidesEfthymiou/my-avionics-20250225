import { ComponentProps, ComputedSubject, DisplayComponent, Subject, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from './FmsHEvent';
/**
 * The properties for the UiControl component.
 */
export interface UiControlProps extends ComponentProps {
    onRegister?(ctrl: UiControl, unregister?: boolean): void;
    onUpperKnob?(sender: UiControl): void;
    onUpperKnobInc?(sender: UiControl): void;
    onUpperKnobDec?(sender: UiControl): void;
    onLowerKnob?(sender: UiControl): void;
    onLowerKnobInc?(sender: UiControl): void;
    onLowerKnobDec?(sender: UiControl): void;
    onEnter?(sender: UiControl): boolean;
    onClr?(sender: UiControl): boolean;
    onDirectTo?(sender: UiControl): boolean;
    onFocused?(sender: UiControl): void;
    onBlurred?(sender: UiControl): void;
    onActivated?(sender: UiControl): void;
    onDeactivated?(sender: UiControl): void;
    /** The CSS class string to be set on the control DOM element. */
    class?: string;
    /** Can control the visibility of this control. */
    isVisible?: Subject<boolean>;
}
/**
 * The UiControl component.
 */
export declare abstract class UiControl<T extends UiControlProps = UiControlProps> extends DisplayComponent<T> {
    static readonly FOCUS_CLASS = "highlight-select";
    static readonly ACTIVE_CLASS = "highlight-active";
    static readonly HIDE_CLASS = "hide-element";
    protected focusSubject: ComputedSubject<boolean, "" | "highlight-select">;
    protected isEnabledSubject: Subject<boolean>;
    protected isVisibleSubject: Subject<boolean>;
    protected isActivated: boolean;
    protected registerSelf: boolean;
    protected containerRef: import("@microsoft/msfs-sdk").NodeReference<HTMLElement>;
    /** @inheritdoc */
    constructor(props: T);
    /** Method to focus this control */
    focus(): void;
    /** Method to unfocus this control */
    blur(): void;
    /** Activates the control. Usually after being focused and some action happens. */
    activate(): void;
    /** Deactivate the control. */
    deactivate(): void;
    /** Method to check if this UiControl is in focus
     * @returns a boolean whether this is in focus
     */
    getIsFocused(): boolean;
    /**
     * Gets a boolean indicating if this control is enabled.
     * @returns A boolean.
     */
    getIsEnabled(): boolean;
    /**
     * Sets the enabled state of this control.
     * @param enable A {boolean} indicating if this control should be enabled.
     */
    setIsEnabled(enable: boolean): void;
    /**
     * Sets the visibility of this control.
     * @param visible A {boolean} indicating if this control should be visible.
     */
    setIsVisible(visible: boolean): void;
    /**
     * Gets a boolean indicating if this control is visible.
     * @returns A boolean.
     */
    getIsVisible(): boolean;
    /**
     * Gets a boolean indicating if this control is able to be focused.
     * @returns A boolean.
     */
    getIsFocusable(): boolean;
    /**
     * Gets a boolean indicating if this control is currently activated.
     * @returns A boolean.
     */
    getIsActivated(): boolean;
    /** @inheritdoc */
    onBeforeRender(): void;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets the element to highlight on focus.
     * Should be overriden by inheriting controls when the highlight is not the topmost container.
     * @protected
     * @returns The {Element} to highlight.
     */
    getHighlightElement(): Element | null;
    /** Method to register this Ui Control */
    onRegister(): void;
    /**
     * A callback which is called when this control group is focused.
     */
    protected onFocused(): void;
    /**
     * A callback which is called when this control group is blurred.
     */
    protected onBlurred(): void;
    /** Method to override what to do when control is activated */
    onActivated(): void;
    /** Method to override what to do when control is deactivated */
    onDeactivated(): void;
    /**
     * A method which is called when this control receives an interaction event.
     * @param evt The event.
     * @returns Whether the event was handled.
     */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** Method to override that specifies what to do on Enter
     * @returns A boolean indicating if the control handled the event.
     */
    onEnter(): boolean;
    /** Method to override that specifies what to do on Clr
     * @returns A boolean indicating if the control handled the event.
     */
    onClr(): boolean;
    /**
     * Method to overwirte that specifies what to do on a direct to.
     * @returns A boolean indicating if the control handleded the event.
     */
    onDirectTo(): boolean;
    /** Method to override that specifies what to do on upper knob */
    onUpperKnob(): void;
    /** Method to override that specifies what to do on upper knob inc */
    onUpperKnobInc(): void;
    /** Method to override that specifies what to do on upper knob dec */
    onUpperKnobDec(): void;
    /** Method to override that specifies what to do on lower knob */
    onLowerKnob(): void;
    /** Method to override that specifies what to do on lower knob inc */
    onLowerKnobInc(): void;
    /** Method to override that specifies what to do on lower knob dec */
    onLowerKnobDec(): void;
    protected abstract renderControl(): VNode;
    /**
     * Renders the component.
     * @returns The component VNode.
     */
    render(): VNode;
}
//# sourceMappingURL=UiControl.d.ts.map