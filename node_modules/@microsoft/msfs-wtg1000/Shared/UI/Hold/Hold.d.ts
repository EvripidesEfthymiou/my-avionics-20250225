import { EventBus, Subscribable } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FmsHEvent } from '../FmsHEvent';
import { HoldController } from '../Hold/HoldController';
import { HoldStore } from '../Hold/HoldStore';
import { TimeDistanceInput } from '../UIControls/TimeDistanceInput';
import { UiView, UiViewProps } from '../UiView';
/**
 * The properties on the procedures popout component.
 */
export interface HoldProps extends UiViewProps {
    /** A fms state manager. */
    fms: Fms;
    /** The event bus */
    bus: EventBus;
}
/**
 * The properties for Hold input data.
 */
export interface HoldInputData {
    /** The selected plan index for the hold. */
    planIndex: number;
    /** The selected segment index for the hold. */
    segmentIndex: number;
    /** The selected leg index for the hold. */
    legIndex: number;
}
/**
 * A class that displays a hold dialog.
 */
export declare abstract class Hold<P extends HoldProps = HoldProps> extends UiView<P, undefined, HoldInputData> {
    protected readonly store: HoldStore;
    protected readonly controller: HoldController;
    protected readonly distanceInput: import("@microsoft/msfs-sdk").NodeReference<TimeDistanceInput>;
    /**
     * Creates an instance of PFDHold.
     * @param props The props for this instance.
     */
    constructor(props: P);
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** @inheritdoc */
    protected onInputDataSet(input: HoldInputData | undefined): void;
    /** @inheritdoc */
    protected onViewClosed(): void;
    /**
     * Creates a subscribable which provides the name of the selected flight plan leg.
     * @returns A subscribable which provides the name of the selected flight plan leg.
     */
    protected createLegNameSubscribable(): Subscribable<string>;
    /**
     * Creates a subscribable which provides a direction string based on the set hold inbound course.
     * @returns A subscribable which provides a direction string based on the set hold inbound course.
     */
    protected createDirectionStringSubscribable(): Subscribable<string>;
}
//# sourceMappingURL=Hold.d.ts.map