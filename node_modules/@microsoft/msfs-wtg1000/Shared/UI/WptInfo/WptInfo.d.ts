import { EventBus, Facility, GeoPointSubject, Subject, VNode, Waypoint } from '@microsoft/msfs-sdk';
import { FmsHEvent } from '../FmsHEvent';
import { UiView, UiViewProps } from '../UiView';
import { WptInfoController } from './WptInfoController';
import { WptInfoStore } from './WptInfoStore';
/**
 * The properties on the waypoint info popout component.
 */
export interface WptInfoProps extends UiViewProps {
    /** An instance of the event bus. */
    bus: EventBus;
}
/**
 * The PFD waypoint info popout.
 */
export declare abstract class WptInfo<T extends WptInfoProps = WptInfoProps> extends UiView<T, Facility> {
    protected readonly inputSelectedIcao: Subject<string>;
    protected readonly selectedWaypointSub: Subject<Waypoint | null>;
    protected readonly planePos: GeoPointSubject;
    protected readonly planeHeading: Subject<number>;
    protected readonly store: WptInfoStore;
    protected readonly controller: WptInfoController;
    protected readonly unitSettingManager: import("@microsoft/msfs-garminsdk/settings/UnitsUserSettings").UnitsUserSettingManager<import("@microsoft/msfs-garminsdk/settings/UnitsUserSettings").UnitsUserSettingTypes>;
    private planePosSub?;
    private planeHeadingSub?;
    /** @inheritDoc */
    onAfterRender(node: VNode): void;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * Executes actions when Enter is pressed.
     */
    protected onEnterPressed(): void;
    /**
     * A callback which is called when a waypoint duplicate dialog invoked by this view accepts.
     * @param facility The facility returned by the waypoint duplicate dialog.
     */
    protected onWptDupDialogAccept(facility: Facility | null): void;
    /**
     * A callback which is called when a waypoint duplicate dialog invoked by this view closes.
     */
    protected onWptDupDialogClose(): void;
    /** @inheritDoc */
    protected onViewOpened(): void;
    /** @inheritDoc */
    protected onViewClosed(): void;
    /**
     * A callback which is called when the plane's current position changes.
     * @param pos The new position.
     */
    private onPlanePosChanged;
    /**
     * A callback which is called when the plane's current true heading changes.
     * @param heading The new heading, in degrees.
     */
    private onPlaneHeadingChanged;
    /**
     * Renders a waypoint input component.
     * @returns a waypoint input component, as a VNode.
     */
    protected renderWaypointInput(): VNode;
    /**
     * Renders a component which displays the bearing to the store's selected waypoint.
     * @param cssClass CSS class(es) to apply to the root of the component.
     * @returns a component which displays the bearing to the store's selected waypoint, as a VNode.
     */
    protected renderBearing(cssClass?: string): VNode;
    /**
     * Renders a component which displays the distance to the store's selected waypoint.
     * @param cssClass CSS class(es) to apply to the root of the component.
     * @returns a component which displays the distance to the store's selected waypoint, as a VNode.
     */
    protected renderDistance(cssClass?: string): VNode;
}
//# sourceMappingURL=WptInfo.d.ts.map