import { ArraySubject, Facility, FacilityWaypoint, Subject, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent } from '../FmsHEvent';
import { List } from '../List';
import { UiControl, UiControlProps } from '../UiControl';
import { UiView, UiViewProps } from '../UiView';
/**
 * A dialog for selecting from a list of duplicate waypoints.
 */
export declare abstract class WptDupDialog<T extends UiViewProps> extends UiView<T, Facility | null, readonly FacilityWaypoint<Facility>[]> {
    protected readonly listRef: import("@microsoft/msfs-sdk").NodeReference<List>;
    protected readonly waypoints: ArraySubject<FacilityWaypoint<Facility>>;
    protected readonly ident: Subject<string>;
    protected onInputDataSet(input: readonly FacilityWaypoint<Facility>[] | undefined): void;
    onInteractionEvent(evt: FmsHEvent): boolean;
    /**
     * This method is called when Enter is pressed.
     * @returns whether the event was handled.
     */
    protected onEnterPressed(): boolean;
    /**
     * This method is called when CLR is pressed.
     * @returns whether the event was handled.
     */
    protected onClearPressed(): boolean;
    /**
     * Renders a duplicate waypoint list item.
     * @param cssClass CSS class(es) to add to the list item.
     * @param waypoint A waypoint.
     * @param registerFn The register callback to use.
     * @returns a list item VNode.
     */
    protected renderListItem(cssClass: string | undefined, waypoint: FacilityWaypoint<Facility>, registerFn: (ctrl: UiControl<UiControlProps>) => void): VNode;
    abstract render(): VNode;
}
//# sourceMappingURL=WptDupDialog.d.ts.map