import { EventBus, FlightPlanner, NavProcessorConfig, NavSource, NavSourceId } from '@microsoft/msfs-sdk';
/**
 * A configuration for the G1000 NavProcessor, including a custrom simvar
 * publisher configured with your LNav simvars for GPS data publishing.
 */
export declare class NPConfig extends NavProcessorConfig {
    /**
     * Create an NPConfig.
     * @param bus The event bus
     * @param planner A flight planner for LNav data
     */
    constructor(bus: EventBus, planner: FlightPlanner);
}
/** A custom nav data source that provides info from our flight plan manager. */
export declare class LNavNavSource implements NavSource {
    readonly srcId: NavSourceId;
    readonly hasCdi = true;
    readonly hasDme = true;
    readonly hasGlideslope = false;
    readonly hasLocalizer = false;
    readonly signal: null;
    readonly activeCdi = false;
    readonly isLocalizerFrequency = false;
    validHander: (valid: boolean, source: NavSourceId) => void;
    identHandler: (ident: string | null, source: NavSourceId) => void;
    brgHandler: (brg: number | null, source: NavSourceId) => void;
    distHandler: (dist: number | null, source: NavSourceId) => void;
    private planner;
    private _activeForCount;
    private _dist;
    private _brg;
    private _ident;
    private _valid;
    /**
     * Create an LNavNavSource.
     * @param bus An event bus.
     * @param planner The flight planner.
     */
    constructor(bus: EventBus, planner: FlightPlanner);
    /**
     * Get the validity of the source.
     * @returns Whether the source is valid.
     */
    get valid(): boolean;
    /**
     * Set the validity of the source.
     * @param valid Whether the source is valid.
     */
    set valid(valid: boolean);
    /**
     * Get the distance to the active waypoint.
     * @returns The distance in nm or null.
     */
    get distance(): number | null;
    /**
     * Set the tistance to the active waypoint.
     * @param dist The distance in nm or null.
     */
    set distance(dist: number | null);
    /**
     * Get the bearing to the current waypoint.
     * @returns The bearing in degrees or null.
     */
    get bearing(): number | null;
    /**
     * Set the bearing to the current waypoint.
     * @param brg The bearing in degrees.
     */
    set bearing(brg: number | null);
    /**
     * Get the ident of the current waypoint.
     * @returns The ident as a string or null.
     */
    get ident(): string | null;
    /**
     * Set the ident of the current waypoint.
     * @param ident The ident as a string or null.
     */
    set ident(ident: string | null);
    /**
     * Get active bearing status.
     * @returns Whether we are active for bearing data.
     */
    get activeBrg(): boolean;
    /**
     * Set active bearing status.
     */
    set activeBrg(active: boolean);
    /**
     * Handle a change in the active leg.
     * @param change The change event.
     */
    private onLegChange;
}
//# sourceMappingURL=NavProcessorConfig.d.ts.map