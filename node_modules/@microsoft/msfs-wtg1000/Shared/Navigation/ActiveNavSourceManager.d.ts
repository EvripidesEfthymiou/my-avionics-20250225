import { EventBus } from '@microsoft/msfs-sdk';
/**
 * A manager for the active navigation source. Changes the active navigation source in response to control events and
 * key events and keeps various data in sync with the active nav source.
 */
export declare class ActiveNavSourceManager {
    private readonly bus;
    private readonly publisher;
    private keyEventManager?;
    private readonly keyEventManagerReadyPromises;
    private isAlive;
    private isInit;
    private keyEventSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Waits for this manager's key event manager to be ready.
     * @returns A Promise which will be fulfilled when this manager's key event manager is ready, or rejected if this
     * manager is destroyed before then.
     */
    private awaitKeyEventManagerReady;
    /**
     * Initializes this manager. Once this manager is initialized, it will manage the active navigation source in
     * response to control events and key events and keep various data in sync with the active nav source.
     * @throws Error if this manager has been destroyed.
     */
    init(): Promise<void>;
    /**
     * Responds to when a key event is intercepted.
     * @param data The data for the intercepted key event.
     */
    private onKeyIntercepted;
    /**
     * Destroys this manager.
     */
    destroy(): void;
}
//# sourceMappingURL=ActiveNavSourceManager.d.ts.map