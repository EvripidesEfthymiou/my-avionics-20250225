import { ComponentProps, EventBus, RadioType, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent, G1000UiControl } from '../UI';
import './NavComFrequencyElement.css';
/** Props for the NavComFrequencyElement. */
interface NavComFrequencyElementProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The position of the navcom frequency element. */
    position: 'left' | 'right';
    /** The type of radio that we represent */
    type: RadioType;
    /** The index number of the radio with this element */
    index: 1 | 2;
    /** The template ID of the instrument with this element. */
    templateId: string;
}
/**
 * Representation of the active and standby frequencies of a nav or com radio.
 */
export declare class NavComFrequencyElement extends G1000UiControl<NavComFrequencyElementProps> {
    private readonly controlPadFrequencyInputMap;
    private containerRef;
    private selectorBorderElement;
    private selectorArrowElement;
    private activeFreq;
    private standbyFreq;
    private comInputDigit0;
    private comInputDigit1;
    private comInputDigit2;
    private comInputDigit3;
    private comInputDigit4;
    private comInputDigit5;
    private comInputDigit6;
    private comInputDigits;
    private ident;
    private isFailed;
    private selected;
    private isInInputMode;
    private radioState;
    private digitPosition;
    private previousFrequency;
    private newFrequencyAsString;
    private validNextDigitSpace;
    private readonly controlPublisher;
    private readonly sub;
    private readonly spacingMode;
    /**
     * Set this frequency as the active selection visually.
     * @param isSelected Indicates if the frequency should show as selected or not.
     */
    setSelected(isSelected: boolean): void;
    /**
     * Stuff to do after rendering.
     */
    onAfterRender(): void;
    /**
     * A callaback called when the system screen state changes.
     * @param state The state change event to handle.
     */
    private onComputerStateChanged;
    /**
     * Sets if the display should be failed or not.
     * @param isFailed True if failed, false otherwise.
     */
    private setFailed;
    /**
     * Handle a radioo state update event.
     * @param radio The Radio that was updated.
     */
    private onUpdateState;
    /**
     * Handle a frequency change event.
     * @param change The FrequencyChangeEvent to process.
     */
    private onUpdateFrequency;
    /**
     * Handle an ident set event.
     * @param change The IdentChangeEvent to process.
     */
    private onUpdateIdent;
    /**
     * Handle a signal strength set event.
     * @param strength The new strength.
     */
    private onUpdateSignalStrength;
    /**
     * A callback called when the CDI Source Changes.
     * @param source The current selected CDI Source.
     */
    private onUpdateCdiSelect;
    private onComTransmitChange;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** Begins frequency entry phase */
    private startFrequencyEntry;
    /** Begins frequency entry phase */
    private stopFrequencyEntry;
    /**
     * Handles the frequency input event
     * @param evt received hEvent
     */
    private handleFrequencyEntry;
    /**
     * Returns the valid digits at the next digit position for COM entry mode
     * @param digit Received digit at the current position.
     * @returns the valid numbers when entering the next com frequency digit
     */
    private getNextValidComDigits;
    /**
     * Returns the valid digits at the next digit position for NAV entry mode
     * @param digit Received digit at the current position.
     * @returns the valid numbers when entering the next nav frequency digit
     */
    getNextValidNavDigits(digit: number): number[];
    /**
     * Evaluate the valid digits at the next digit position, based on COM vs NAV and the spacing
     * @param digit Received digit at the current position.
     * @returns the valid numbers when entering the next digit, based on digit position:
     */
    private getNextValidFrequencyDigits;
    /**
     * Render NavCom Freq Element.
     * @returns Vnode containing the element.
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=NavComFrequencyElement.d.ts.map