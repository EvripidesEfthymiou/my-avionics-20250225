import { ComponentProps, EventBus, Subject, VNode } from '@microsoft/msfs-sdk';
import { FmsHEvent, G1000UiControl } from '../UI';
import { NavComFrequencyElement } from './NavComFrequencyElement';
import './NavComRadio.css';
/**
 *
 */
interface NavComRadioProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The title of the navcom radio component. */
    title: string;
    /** The position of the navcom frequency elements. */
    position: 'left' | 'right';
    /** The template ID of this instrument, from the HTML config */
    templateId: string;
}
declare enum ArmedModes {
    inactive = "inactive",
    blink = "blink",
    solid = "solid",
    standby = "standby"
}
/**
 *
 */
export declare class NavComRadio extends G1000UiControl<NavComRadioProps> {
    frequency1Element: import("@microsoft/msfs-sdk").NodeReference<NavComFrequencyElement>;
    frequency2Element: import("@microsoft/msfs-sdk").NodeReference<NavComFrequencyElement>;
    private readonly sub;
    private readonly simTime;
    private activeBorderRef;
    armedMode: Subject<ArmedModes>;
    private lastArmedTime;
    private readonly blinkTimeout;
    private readonly solidTimeout;
    private readonly borderClasses;
    /**
     * Stuff to do after render.
     */
    onAfterRender(): void;
    /** @inheritdoc */
    onInteractionEvent(evt: FmsHEvent): boolean;
    /** Sets the armed mode of the radio input box
     * @param armed whether or not the radio box is armed for input
     */
    setArmed(armed: boolean): void;
    /**
     * Render NavCom Element
     * @returns Vnode containing the element
     */
    render(): VNode;
}
export {};
//# sourceMappingURL=NavComRadio.d.ts.map