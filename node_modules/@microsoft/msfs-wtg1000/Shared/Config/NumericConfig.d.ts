import { Subscribable } from '@microsoft/msfs-sdk';
import { ConfigFactory, ResolvableConfig } from './Config';
/**
 * A result resolved from a {@link NumericConfig} that defines a numeric value.
 */
export interface NumericConfigResult {
    /** This result's numeric value. */
    value: number | Subscribable<number>;
    /**
     * Destroys this result. This frees any resources used by this result and allows the result and its value to be
     * garbage collected if no external references to this result exist.
     */
    destroy?(): void;
}
/**
 * A configuration object which defines a factory for a numeric value.
 */
export interface NumericConfig extends ResolvableConfig<(context?: any) => NumericConfigResult> {
    /** Flags this object as a NumericConfig. */
    readonly isNumericConfig: true;
}
/**
 * A configuration object which defines a factory for a numeric constant.
 */
export declare class NumericConstantConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The numeric value of this config. */
    readonly value: number;
    /**
     * Creates a new NumericConstantConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritDoc */
    resolve(): () => NumericConfigResult;
}
/**
 * A configuration object which defines a factory for a numeric value which is the minimum of one or more inputs.
 */
export declare class NumericMinConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The inputs of this config. */
    readonly inputs: readonly NumericConfig[];
    /**
     * Creates a new NumericMinConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /** @inheritDoc */
    resolve(): (context?: any) => NumericConfigResult;
}
/**
 * A configuration object which defines a factory for a numeric value which is the maximum of one or more inputs.
 */
export declare class NumericMaxConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The inputs of this config. */
    readonly inputs: readonly NumericConfig[];
    /**
     * Creates a new NumericMaxConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /** @inheritDoc */
    resolve(): (context?: any) => NumericConfigResult;
}
//# sourceMappingURL=NumericConfig.d.ts.map