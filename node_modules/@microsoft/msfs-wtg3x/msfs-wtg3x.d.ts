/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/utils/xmllogic" />
/// <reference types="@microsoft/msfs-types/js/common" />
import * as _microsoft_msfs_sdk from '@microsoft/msfs-sdk';
import { Subject, EventBus, TrafficInstrument, XMLGaugeColorZone, XMLGaugeColorLine, ComponentProps, CompositeLogicXMLHost, Subscribable, SubscribableMap, UserSettingManager, UserSetting, Consumer, UserSettingValue, UserSettingRecord, UserSettingMap, NodeReference, ReadonlySubEvent, ReadonlyFloat64Array, VNode, Subscription, DisplayComponent, MutableSubscribable, FilteredMapSubject, MutableSubscribableMap, SubscribableSet, SubEvent, ComRadioIndex, NavRadioIndex, GPSSatComputerOptions, Annunciation, FlightPlanner, VNavPathCalculator, FacilityLoader, EventSubscriber, FlightPlan, OneWayRunway, UserFacility, Facility, LegDefinition, AirportFacility, FlightPathCalculator, SubscribableArray, HorizonLayerProps, HorizonLayer, HorizonProjection, NumberUnitSubject, UnitFamily, BasicNavAngleSubject, FlightPlanLeg, ToggleableClassNameRecord, Unit, GeoPointInterface, ComSpacing, GPSSatComputer, InstrumentBackplane, CasSystem, AvionicsPlugin, PluginSystem, RadioType, Waypoint, MutableSubscribableInputType, FacilityWaypoint, FacilitySearchType, VorFacility, NdbFacility, IntersectionFacility, MapSubject, UserSettingDefinition, SetSubject, MappedSubject, APLateralModes, APVerticalModes, Accessible, SimVarPublisher, PublishPacer, NavAngleUnit, NumberUnitInterface, SubscribableType, MapIndexedRangeModule, MapSystemController, MapSystemContext, ResourceModerator, MapSystemKeys, GeoPointSubject, MapProjection, MapOwnAirplanePropsModule, MapFollowAirplaneModule, MapLayerProps, MapLayer, MapDataIntegrityModule, MapSystemBuilder, MapWxrModule, MapOwnAirplaneIconOrientation, TcasOperatingMode, AdsbOperatingMode, LodBoundary, MapAirspaceRenderer, NumberUnitReadOnly, DurationDisplayFormat, DurationDisplayDelim, BasePublisher, LerpLookupTable, AbstractSubscribableArray, SubscribableArrayHandler, FlightPlanRoute, AirportRunway, ApproachProcedure, ReadonlyFlightPlanRoute, Instrument, CompoundUnit, DefaultUserSettingManager, NavSourceType, NearestSubscription, FacilityType, FacilityTypeMap, UserSettingSaveManager, FsInstrument, FacilityRepository, HEventPublisher, Clock, BaseInstrumentPublisher, AmbientPublisher, AccelerometerPublisher, AdcPublisher, AhrsPublisher, GNSSPublisher, LNavObsSimVarPublisher, VNavSimVarPublisher, NavComSimVarPublisher, MinimumsSimVarPublisher, EISPublisher, ControlSurfacesPublisher, FlightTimerPublisher, AutopilotInstrument, AvionicsSystem, GPSSatellite, GPSSystemState, GPSSystemSBASState, VorToFrom, FsBaseInstrument } from '@microsoft/msfs-sdk';
import * as _microsoft_msfs_garminsdk from '@microsoft/msfs-garminsdk';
import { MapGarminTrafficModule, TrafficSystem, TrafficSystemType, TrafficAvionicsSystem, VSpeedUserSettingTypes, AirspeedIndicatorDataProvider, AirspeedIndicatorColorRange, AirspeedIndicatorDataProviderOptions, AttitudeAircraftSymbolColor, Fms, FmsEventsForId, BaseFmsEvents, DirectToState, NavDataBarSettingTypes, NavDataBarFieldModelFactory, NavDataFieldRenderer, NavDataFieldGpsValidity, DateTimeUserSettingTypes, UnitsUserSettingManager, DynamicListData, SynVisUserSettingTypes, AttitudeAircraftSymbolFormat, ArtificialHorizonOptions, HorizonLineOptions, FlightDirectorOptions, FlightDirectorSingleCueOptions, FlightDirectorDualCueOptions, HorizonOcclusionArea, GarminVfrApproachProcedure, FmsFplUserDataTypeMap, GarminFacilityWaypointCache, UnitsUserSettingTypes, DefaultUnitsUserSettingManager, MinimumsDataProvider, WindDataProvider, VNavDataProvider, NavReferenceSource, NavReferenceSources, NavReferenceIndicator, NavReferenceIndicators, BasicNavReferenceIndicator, GpsIntegrityDataProvider, WaypointInfoStore, ValueTouchButtonProps, TouchButtonOnTouchedAction, TouchButtonHoldAction, TouchButtonHoldEndReason, ValueTouchButton, TouchButtonProps, TouchButton, AirportWaypoint, MapUserSettingTypes, ImgTouchButton, GarminNavToNavManager2Guidance, DefaultNavDataBarFieldModelFactory, DefaultNavDataBarFieldModelFactoryOptions, NavDataFieldType, NavDataFieldTypeModelMap, BearingDisplayProps, NumberUnitDisplayProps, TimeDisplayProps, TimeDisplayFormat, TouchListProps, GarminMapKeys, MapNexradModule, MapOrientation, MapOrientationModule, MapWaypointHighlightModule, MapRangeController, MapGarminDataIntegrityModule, MapPanningModule, MapGarminAutopilotPropsModule, MapUnitsModule, MapWaypointVisUserSettings, GarminMapBuilderWaypointsLayerOptions, MapOrientationSettingsControllerSettings, MapWaypointDisplayBuilder, MapAirspaceVisUserSettings, MapPanningRTRControllerContext, TrafficIconOptions, TrafficUserSettingTypes, WaypointHighlightLineOptions, TrafficMapOptions, MapDeclutterMode, MapTerrainMode, MapTrafficAltitudeRestrictionMode, TrafficMapRangeController, UnitsDistanceSettingMode, MapTerrainColorsDefinition, MapWaypointLabelStyles, MapWaypointIconStyles, MapRunwayOutlineWaypoint, MapRunwayOutlineIconStyles, MapWaypointIconHighlightStyles, WaypointIconImageCache, NavDataFieldNumberUnitRenderer, NavDataFieldBearingRenderer, NavDataFieldTextRenderer, NavDataFieldDurationRenderer, NavDataFieldTimeRenderer, ImgTouchButtonProps, SetValueTouchButtonProps, SetValueTouchButton, ToggleTouchButtonProps, ToggleTouchButton, TouchSliderProps, TouchSlider, WaypointIconProps, DefaultWaypointIconImageCache, AirspeedDefinitionContext, ApproachListItem, VfrApproachListItem, GarminFlightPlanRouteLoader, GarminFlightPlanRouteProvider, NearestAirportUserSettingTypes, AbstractNavReferenceBase, GarminSpeedConstraintStore, GarminAPSimVarPublisher, NavEventsPublisher, DefaultGpsIntegrityDataProvider, DefaultMinimumsDataProvider, GpsReceiverSelector, DefaultWindDataProvider, DefaultVNavDataProvider, AirspeedIndicatorColorRangeWidth, AirspeedIndicatorColorRangeColor, AltimeterDataProvider, AltitudeAlertState, MinimumsAlertState, ObsSuspModes, TurnRateProps, VdiDataProvider, GlidepathServiceLevel, VsiDataProvider } from '@microsoft/msfs-garminsdk';
export { BearingDisplay, HsiGpsIntegrityAnnunciation, ImgTouchButton, MapRelativeTerrainStatusIndicator, MarkerBeaconDisplay, NumberUnitDisplay, ScrollList, SetValueTouchButton, ToggleStatusBar, ToggleTouchButton, TouchButton, TouchList, TouchSlider, TurnRateIndicator, ValueTouchButton } from '@microsoft/msfs-garminsdk';

/**
 * A configuration object.
 */
interface Config {
}
/**
 * A configuration object which can be resolved to a value.
 */
interface ResolvableConfig<T> extends Config {
    /** Flags this object as a ResolvableConfig. */
    readonly isResolvableConfig: true;
    /**
     * Resolves this config to a value.
     * @returns This config's resolved value.
     */
    resolve(): T;
}
/**
 * A configuration object factory.
 */
interface ConfigFactory {
    /**
     * Creates a configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The configuration object defined by the specified element, or `undefined` if the element does not define
     * a configuration object recognized by this factory.
     */
    create(element: Element): Config | undefined;
}

/**
 * A configuration object which defines audio options.
 */
declare class AudioConfig implements Config {
    /** A config that defines options for the audio panel. If not defined, then the audio panel is not supported. */
    readonly audioPanel?: AudioPanelConfig;
    /**
     * Creates a new AudioConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses a sensors configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The sensors configuration defined by the configuration document element.
     */
    private parseAudioPanelConfig;
}
/**
 * A configuration object which defines audio panel options.
 */
declare class AudioPanelConfig implements Config {
    /** The shape with which the CNS data bar audio panel button should render its MIC/COM indicators. */
    readonly cnsButtonIndicatorShape: 'square' | 'triangle';
    /**
     * Creates a new instance of AudioPanelConfig.
     * @param element A configuration document element.
     */
    constructor(element: Element);
}

/**
 * A configuration object which defines options related to aural alerts.
 */
declare class AuralAlertsConfig implements Config {
    /** The supported voice types for aural alerts. */
    readonly supportedVoices: 'male' | 'female' | 'both';
    /**
     * Creates a new AutopilotConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}

/**
 * Options for the autopilot ROL director.
 */
type AutopilotRollOptions = {
    /** The minimum supported bank angle, in degrees. */
    minBankAngle: number;
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot HDG director.
 */
type AutopilotHdgOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot VOR director.
 */
type AutopilotVorOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot LOC director.
 */
type AutopilotLocOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot LNAV director.
 */
type AutopilotLNavOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * Options for the autopilot Low Bank Mode.
 */
type AutopilotLowBankOptions = {
    /** The maximum supported bank angle, in degrees. */
    maxBankAngle: number;
};
/**
 * A configuration object which defines options related to the autopilot.
 */
declare class AutopilotConfig implements Config {
    private static readonly DEFAULT_ROLL_MIN_BANK_ANGLE;
    private static readonly DEFAULT_MAX_BANK_ANGLE;
    private static readonly DEFAULT_LOW_BANK_ANGLE;
    /** Options for the autopilot ROL director. */
    readonly rollOptions: AutopilotRollOptions;
    /** Options for the autopilot HDG director. */
    readonly hdgOptions: AutopilotHdgOptions;
    /** Options for the autopilot VOR director. */
    readonly vorOptions: AutopilotVorOptions;
    /** Options for the autopilot LOC director. */
    readonly locOptions: AutopilotLocOptions;
    /** Options for the autopilot GPS/FMS director. */
    readonly lnavOptions: AutopilotLNavOptions;
    /** Options for the autopilot Low Bank Mode. */
    readonly lowBankOptions: AutopilotLowBankOptions;
    /**
     * Creates a new AutopilotConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element);
    /**
     * Parses ROL director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The ROL director options defined by the configuration document element.
     */
    private parseRollOptions;
    /**
     * Parses HDG director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The HDG director options defined by the configuration document element.
     */
    private parseHdgOptions;
    /**
     * Parses VOR director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The VOR director options defined by the configuration document element.
     */
    private parseVorOptions;
    /**
     * Parses LOC director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The LOC director options defined by the configuration document element.
     */
    private parseLocOptions;
    /**
     * Parses HDG director options from a configuration document element.
     * @param element A configuration document element.
     * @returns The HDG director options defined by the configuration document element.
     */
    private parseLNavOptions;
    /**
     * Parses Low Bank Mode options from a configuration document element.
     * @param element A configuration document element.
     * @returns The Low Bank Mode options defined by the configuration document element.
     */
    private parseLowBankOptions;
}

/**
 * A configuration object which defines options related to maps.
 */
declare class MapConfig implements Config {
    private static readonly DEFAULT_AIRPLANE_ICON_SRC;
    /** The path to the own airplane icon's image asset. */
    readonly ownAirplaneIconSrc: string;
    /**
     * Creates a new MapConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}

/**
 * Traffic system data sources supported by the G3X Touch.
 */
declare enum G3XTrafficSystemSource {
    /** No traffic source. */
    None = "None",
    /** GTS-8xx traffic advisory system. Provides active surveillance and optionally ADS-B traffic. */
    Gts = "GTS",
    /** GTX transponder. Provides TIS-A and optionally ADS-B traffic. */
    Gtx = "GTX",
    /** GDL data link. Provides TIS-B and ADS-B traffic. */
    Gdl = "GDL"
}
/**
 * A module describing the display of traffic for G3X Touch maps.
 */
declare class G3XMapTrafficModule extends MapGarminTrafficModule {
    readonly trafficSystem: TrafficSystem;
    /** The current traffic data source. */
    readonly source: Subject<G3XTrafficSystemSource>;
    /**
     * Constructor.
     * @param trafficSystem This module's associated traffic system.
     */
    constructor(trafficSystem: TrafficSystem);
}

/**
 * Traffic system types supported by the G3X Touch.
 */
type G3XTrafficSystemType = TrafficSystemType.Tis | TrafficSystemType.Tas;
/**
 * A configuration object which defines options related to the avionics' traffic system.
 */
declare class TrafficConfig implements ResolvableConfig<(bus: EventBus, tfcInstrument: TrafficInstrument, initializationTime: number) => TrafficAvionicsSystem | null> {
    /** @inheritdoc */
    readonly isResolvableConfig = true;
    /** The source of traffic data. */
    readonly source: G3XTrafficSystemSource;
    /** The type of traffic system used. */
    readonly type: G3XTrafficSystemType | null;
    /** Whether the traffic system should support ADS-B. */
    readonly supportAdsb: boolean;
    /** The electrical logic for the traffic system. */
    readonly electricity?: CompositeLogicXMLElement;
    /**
     * Creates a new TrafficConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /** @inheritdoc */
    resolve(): (bus: EventBus, tfcInstrument: TrafficInstrument, initializationTime: number) => TrafficAvionicsSystem | null;
}

/**
 * A configuration object which defines transponder options.
 */
declare class TransponderConfig implements Config {
    /** Whether the user can select transponder modes through the G3X. */
    readonly canSelectMode: boolean;
    /** Whether the transponder has a pilot-selectable GROUND mode. */
    readonly hasSelectableGround: boolean;
    /**
     * Whether the sim's GROUND transponder mode state should be used to represent the transponder's GROUND mode. If
     * `false`, then the sim's ALT transponder mode state will be used to represent the transpodner's GROUND mode
     * instead.
     */
    readonly useSimGroundMode: boolean;
    /** Whether the G3X should control automatic switching between GROUND and ALT mode for the transponder. */
    readonly includeAutoGroundAlt: boolean;
    /**
     * Whether the G3X should control automatic switching from STBY to ALT mode for the transponder when transitioning
     * from on-ground to in-air.
     */
    readonly includeAutoAirborne: boolean;
    /**
     * Creates a new TransponderConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
}

/**
 * G3X Touch instrument types.
 */
type InstrumentType = 'PFD' | 'MFD';
/**
 * G3X Touch GDU formats.
 */
type GduFormat = '460' | '470';
/**
 * The sides on which the PFD pane can be positioned in a GDU460 display.
 */
type PfdPaneSide = 'left' | 'right';
/**
 * The possible EIS layouts in a GDU460 display.
 */
declare enum EisLayouts {
    /** The EIS is not displayed. */
    None = 0,
    /** The EIS is displayed on the left side. */
    Left = 1,
    /** The EIS is displayed on the right side. */
    Right = 2
}
/**
 * The possible EIS sizes in a GDU460 display.
 */
declare enum EisSizes {
    /** For single engine planes */
    Narrow = "Narrow",
    /** For multi-engine planes or single-engine with detailed display */
    Wide = "Wide"
}
/**
 * The ID of the G3X Touch's flight planner.
 */
type G3XFlightPlannerId = 'g3x';
/**
 * The ID of the G3X Touch's CDI.
 */
type G3XCdiId = 'g3x';
/**
 * Valid external navigator indexes.
 */
type G3XExternalNavigatorIndex = 1 | 2;

/**
 * The data for a function.
 */
type G3XFunction = {
    /** The function's name. */
    name: string;
    /** The XML logic the function runs. */
    logic: CompositeLogicXMLElement;
};

declare enum G3XGaugeColorZoneColor {
    Red = "var(--g3x-color-red)",
    Yellow = "var(--g3x-color-yellow)",
    Green = "var(--g3x-color-green)",
    White = "var(--g3x-color-white)",
    Cyan = "var(--g3x-color-cyan)",
    Black = "var(--g3x-color-black)"
}
/**
 * Color Zone for a gauge.
 */
interface G3XGaugeColorZone extends XMLGaugeColorZone {
    /** The enum of the color to use. */
    color: G3XGaugeColorZoneColor;
}

/** A cylinder gauge style definition. */
interface G3XGaugeStyle {
    /** Text increment for numeric text values */
    textIncrement: number;
    /** The precision for numeric text values */
    valuePrecision: number;
    /** The scaling ratio on the gauge */
    sizePercent: number;
    /** Left margin. */
    marginLeft: string;
    /** Right margin. */
    marginRight: string;
    /** Top margin. */
    marginTop: string;
    /** Bottom margin. */
    marginBottom: string;
    /** Height */
    height: string;
    /** Display plus sign for positive values. */
    displayPlus: boolean;
}

declare enum G3XGaugeColorLineColor {
    Red = "var(--g3x-color-red)",
    Yellow = "var(--g3x-color-yellow)",
    Green = "var(--g3x-color-green)",
    White = "var(--wt-g3x-touch-white)",
    Cyan = "var(--g3x-color-cyan)"
}
/**
 * Color Zone for a gauge.
 */
interface G3XGaugeColorLine extends XMLGaugeColorLine {
    /** The enum of the color to use. */
    color: G3XGaugeColorLineColor;
}

/** Props for G3XGauge with color zones */
interface G3XGaugeProps extends ComponentProps {
    /** A list of color zones. */
    colorZones: G3XGaugeColorZone[];
    /** A list of color zones for double gauge. */
    colorZones2?: G3XGaugeColorZone[];
    /** A list of colir lines. */
    colorLines2: Array<XMLGaugeColorLine>;
    /** The minimum2 value. */
    minimum2: CompositeLogicXMLElement;
    /** The maximum2 value. */
    maximum2: CompositeLogicXMLElement;
    /** Style for the gauge*/
    style: Partial<G3XGaugeStyle>;
    /** An optional smoothing factor for value changes. */
    smoothFactor?: number;
    /** The minimum value. */
    minimum: CompositeLogicXMLElement;
    /** The maximum value. */
    maximum: CompositeLogicXMLElement;
    /** A list of colir lines. */
    colorLines: Array<G3XGaugeColorLine>;
    /** The first possible value. */
    value1: CompositeLogicXMLElement;
    /** The second possible value for dual elements. */
    value2: CompositeLogicXMLElement;
    /** The title of the gauge. */
    title: string;
    /** The units measured by the gauge. */
    unit: string;
    /** The length of individual graduations. */
    graduationLength: number;
    /** Do the graduations have text? */
    graduationHasText: boolean;
    /** Text at the beginning of the gauge. */
    beginText: string;
    /** Text at the end of the gauge. */
    endText: string;
    /** The label of the first cursor. */
    cursorText1: string;
    /** The labe of the second cursor, for  */
    cursorText2: string;
    /** The identifier to assign to the `data-checklist` attribute of the gauge's root element. */
    dataChecklistId: string;
    /** Any triggers for blinking the element red. */
    redBlink: CompositeLogicXMLElement;
}

/**
 * The type of gauges available.
 */
declare enum G3XGaugeType {
    TwinCircular = "TwinCircular",
    Circular = "Circular",
    Horizontal = "Horizontal",
    DoubleHorizontal = "DoubleHorizontal",
    TwinHorizontal = "TwinHorizontal",
    Vertical = "Vertical",
    DoubleVertical = "DoubleVertical",
    Text = "Text",
    Row = "Row",
    Column = "Column",
    Cylinder = "Cylinder",
    TwinCylinder = "TwinCylinder",
    ToggleButton = "ToggleButton"
}

/**
 * Styling options for a gauge column.
 */
interface G3XGaugeColumnStyle extends G3XGaugeStyle {
    /** The width of the column. */
    width?: string;
    /** The justify-content style of the column. */
    justifyContent?: string;
}
/**
 * Component props for a gauge column.
 */
interface G3XGaugeColumnProps extends ComponentProps {
    /** CSS class(es) to add to the column's root element. */
    class?: string;
    /** The event bus, to give to any gauges that need it. */
    bus: EventBus;
    /** The logic handler. */
    logicHost?: CompositeLogicXMLHost;
    /** The label for this column. */
    label?: string;
    /** Whether to show an outline around the column. */
    outline?: boolean;
    /** An array of gauges to show. */
    gaugeConfig: Array<G3XGaugeSpec>;
    /** The style to use for the column. */
    style: Partial<G3XGaugeColumnStyle>;
}

/** Properties of a row. */
interface G3XGaugeRowProps extends ComponentProps {
    /** CSS class(es) to add to the row's root element. */
    class?: string;
    /** An event bus for our contained gauges that need it. */
    bus: EventBus;
    /** The label for the column. */
    label?: string;
    /** Whether to show an outline around the column. */
    outline?: boolean;
    /** The columns in the group. */
    columns: Array<G3XGaugeColumnProps>;
    /** The style to use for the row. */
    style: Partial<G3XGaugeStyle>;
}

/**
 * A definition for rendering a G3X Touch MFD engine page.
 */
type G3XEnginePageDefinition = {
    /** Any configured functions. */
    functions: Map<string, G3XFunction>;
    /** The content of the engine page. */
    content: G3XEnginePageTabDefinition[] | G3XEnginePageGaugesDefinition;
};
/**
 * A definition describing a set of gauges to render within the MFD engine page.
 */
type G3XEnginePageGaugesDefinition = {
    /** The gauges config for the page. */
    gaugeConfig?: G3XGaugeSpec[];
    /** The gauges config for the page in fullscreen mode. */
    fullscreenGaugeConfig?: G3XGaugeSpec[];
    /** The gauges config for the page in splitscreen mode. */
    splitscreenGaugeConfig?: G3XGaugeSpec[];
};
/**
 * Types of MFD engine page tabs.
 */
declare enum G3XEnginePageTabType {
    Simple = "Simple",
    FuelCalculator = "Fuel Calculator"
}
/**
 * A base definition for an MFD engine page tab.
 */
type G3XEnginePageBaseTabDefinition = {
    /** The label for the tab. */
    label: string;
};
/**
 * A definition for a simple MFD engine page tab.
 */
type G3XEnginePageSimpleTabDefinition = G3XEnginePageBaseTabDefinition & {
    /** The type of the tab. */
    type: G3XEnginePageTabType.Simple;
    /** A definition describing the gauges to render in the tab. */
    gaugesDef: G3XEnginePageGaugesDefinition;
};
/**
 * A definition for a fuel calculator MFD engine page tab.
 */
type G3XEnginePageFuelCalcTabDefinition = G3XEnginePageBaseTabDefinition & {
    /** The type of the tab. */
    type: G3XEnginePageTabType.FuelCalculator;
    /** A definition describing the gauges to render in the tab. */
    gaugesDef: G3XEnginePageGaugesDefinition;
    /** The first preset fuel amount supported by the fuel calculator, in gallons. */
    presetFuel1?: number;
    /** The second preset fuel amount supported by the fuel calculator, in gallons. */
    presetFuel2?: number;
};
/**
 * A definition for an MFD engine page tab.
 */
type G3XEnginePageTabDefinition = G3XEnginePageSimpleTabDefinition | G3XEnginePageFuelCalcTabDefinition;

/** Gauges for a circular gauge */
interface G3XCircleGaugeProps extends G3XGaugeProps {
    /** A style */
    style: Partial<G3XCircularGaugeStyle>;
    /** if gauge displays twin engine */
    isTwinEngine: boolean;
}
/** A circular gauge style definition */
interface G3XCircularGaugeStyle extends G3XGaugeStyle {
    /** The arc position to begin on. */
    beginAngle: number;
    /** The arc position to end on. */
    endAngle: number;
    /** The value gradation for the numeric text fields */
    textIncrement: number;
    /** The value precision for the numeric text fields. */
    valuePrecision: number;
    /** Display relative value. */
    displayRelativeValue: boolean;
}

/** Gauges for a cylinder gauge */
interface G3XCylinderGaugeProps extends G3XGaugeProps {
    /** An event bus for leaning events. */
    bus: EventBus;
    /** The number of cylinders per engine. */
    numCylinders: number;
    /** The event to trigger when peak mode is toggled. */
    peakModeTriggerBusEvent?: string;
    /** What's the order of the hottest cylinders? */
    tempOrder?: Array<number>;
    /** The gauge styling. */
    style: Partial<G3XCylinderGaugeStyle>;
    /** EGT value for second engine. */
    value3: CompositeLogicXMLElement;
    /** CHT value for second engine. */
    value4: CompositeLogicXMLElement;
    /** Ticks lines for EGT. */
    egtTicks: CompositeLogicXMLElement[];
    /** if gauge displays twin engine */
    isTwinEngine: boolean;
}
/** A cylinder gauge style definition. */
interface G3XCylinderGaugeStyle extends G3XGaugeStyle {
    /** Should we show peak temperatures when leaning? */
    peakTemps?: boolean;
    /** Show color lines on top of cylinders. EIS Stripe displaying lines on top while
     * Engine Display displaying lines below cylinders */
    displayColorLinesOnTop?: boolean;
}

/** Gauges for a gauge which can  display peaks */
interface G3XPeakingGaugeProps extends G3XGaugeProps {
    /** An event bus for leaning events. */
    bus: EventBus;
    /** Should we show peak */
    allowPeakMode?: boolean;
    /** The event to trigger when peak mode is toggled. */
    peakModeTriggerBusEvent?: string;
    /** Display peak visuals in header. */
    reflectPeakModeInHeader?: boolean;
}

/** Props for a single pointer linear gauges */
interface G3XLinearGaugeProps extends G3XPeakingGaugeProps {
    /** A style */
    style: Partial<G3XGaugeStyle>;
}

/** Gauges for a horizontal gauge */
interface G3XDoubleZonesLinearGaugeProps extends G3XLinearGaugeProps {
    /** A style */
    style: Partial<G3XDoubleLinearVerticalGaugeStyle>;
}
/** A circular gauge style definition */
interface G3XDoubleLinearVerticalGaugeStyle extends G3XGaugeStyle {
    /** Use Wide Colour Zones */
    useDoubleZones: boolean;
    /** The width of the text row */
    valuesTextRowWidth: string;
}

/** Properties of gauge button. */
interface G3XToggleButtonGaugeProps extends G3XGaugeProps {
    /** The event bus. */
    bus: EventBus;
    /** The event bus topic to which to bind the button's state. */
    event: string;
    /** Whether to sync to other instruments the data that the button publishes to the event bus. */
    sync: boolean;
    /** Whether to cache the data that the button publishes to the event bus. */
    cached: boolean;
    /** The button's label. */
    label?: string;
}

/** The configuration of an individual column of text. */
interface G3XTextColumnProps {
    /** The HTML class of the element. */
    class?: string;
    /** The text content of the column. */
    content: CompositeLogicXMLElement;
    /** The color of the text. */
    color?: CompositeLogicXMLElement;
    /** The font size to use. */
    fontSize?: string;
}
/** The props for a text element. */
interface G3XTextElementProps extends ComponentProps {
    /** The HTML class of the element. */
    class?: string;
    /** The left side text. */
    left?: G3XTextColumnProps;
    /** The central text. */
    center?: G3XTextColumnProps;
    /** The right side text. */
    right?: G3XTextColumnProps;
    /** Style information. */
    style?: Partial<G3XGaugeStyle>;
}

/**
 * Interaction events used by the UI system.
 */
declare enum UiInteractionEvent {
    SingleKnobOuterInc = "SingleKnobOuterInc",
    SingleKnobOuterDec = "SingleKnobOuterDec",
    SingleKnobInnerInc = "SingleKnobInnerInc",
    SingleKnobInnerDec = "SingleKnobInnerDec",
    SingleKnobPress = "SingleKnobPress",
    SingleKnobPressLong = "SingleKnobPressLong",
    LeftKnobOuterInc = "LeftKnobOuterInc",
    LeftKnobOuterDec = "LeftKnobOuterDec",
    LeftKnobInnerInc = "LeftKnobInnerInc",
    LeftKnobInnerDec = "LeftKnobInnerDec",
    LeftKnobPress = "LeftKnobPress",
    LeftKnobPressLong = "LeftKnobPressLong",
    RightKnobOuterInc = "RightKnobOuterInc",
    RightKnobOuterDec = "RightKnobOuterDec",
    RightKnobInnerInc = "RightKnobInnerInc",
    RightKnobInnerDec = "RightKnobInnerDec",
    RightKnobPress = "RightKnobPress",
    RightKnobPressLong = "RightKnobPressLong",
    NrstPress = "NrstPress",
    DirectToPress = "DirectToPress",
    MenuPress = "MenuPress",
    BackPress = "BackPress",
    BackPressLong = "BackPressLong"
}
/**
 * Interaction events originating from the bezel rotary knobs.
 */
type UiKnobInteractionEvent = UiInteractionEvent.SingleKnobOuterInc | UiInteractionEvent.SingleKnobOuterDec | UiInteractionEvent.SingleKnobInnerInc | UiInteractionEvent.SingleKnobInnerDec | UiInteractionEvent.SingleKnobPress | UiInteractionEvent.SingleKnobPressLong | UiInteractionEvent.LeftKnobOuterInc | UiInteractionEvent.LeftKnobOuterDec | UiInteractionEvent.LeftKnobInnerInc | UiInteractionEvent.LeftKnobInnerDec | UiInteractionEvent.LeftKnobPress | UiInteractionEvent.LeftKnobPressLong | UiInteractionEvent.RightKnobOuterInc | UiInteractionEvent.RightKnobOuterDec | UiInteractionEvent.RightKnobInnerInc | UiInteractionEvent.RightKnobInnerDec | UiInteractionEvent.RightKnobPress | UiInteractionEvent.RightKnobPressLong;
/**
 * Bezel rotary knob turn interaction events.
 */
type UiKnobTurnInteractionEvent = UiInteractionEvent.SingleKnobOuterInc | UiInteractionEvent.SingleKnobOuterDec | UiInteractionEvent.SingleKnobInnerInc | UiInteractionEvent.SingleKnobInnerDec | UiInteractionEvent.LeftKnobOuterInc | UiInteractionEvent.LeftKnobOuterDec | UiInteractionEvent.LeftKnobInnerInc | UiInteractionEvent.LeftKnobInnerDec | UiInteractionEvent.RightKnobOuterInc | UiInteractionEvent.RightKnobOuterDec | UiInteractionEvent.RightKnobInnerInc | UiInteractionEvent.RightKnobInnerDec;
/**
 * Bezel rotary knob push interaction events.
 */
type UiKnobPushInteractionEvent = UiInteractionEvent.SingleKnobPress | UiInteractionEvent.SingleKnobPressLong | UiInteractionEvent.LeftKnobPress | UiInteractionEvent.LeftKnobPressLong | UiInteractionEvent.RightKnobPress | UiInteractionEvent.RightKnobPressLong;
/**
 * A handler which can respond to and optionally handle instances of {@link UiInteractionEvent}.
 */
interface UiInteractionHandler {
    /**
     * Handles a {@link UiInteractionEvent}.
     * @param event The event to handle.
     * @returns Whether the event was handled.
     */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
}

/**
 * Directions from which a UI component can be focused.
 */
declare enum UiFocusDirection {
    Unspecified = "Unspecified",
    Forward = "Forward",
    Backward = "Backward",
    Recent = "Recent"
}
/**
 * A UI component that can be focused.
 */
interface UiFocusableComponent extends UiInteractionHandler {
    /** Flags this component as a UiFocusableComponent. */
    readonly isUiFocusableComponent: true;
    /** Whether this component can be focused. */
    readonly canBeFocused: Subscribable<boolean>;
    /**
     * Responds to when this component is registered with a controller.
     * @param controller The controller with which this component was registered.
     */
    onRegistered(controller: UiFocusController): void;
    /**
     * Responds to when this component is deregistered with a controller.
     * @param controller The controller with which this component was deregistered.
     */
    onDeregistered(controller: UiFocusController): void;
    /**
     * Responds to when this component gains focus.
     * @param direction The direction from which focus was gained.
     */
    onFocusGained(direction: UiFocusDirection): void;
    /**
     * Responds to when this component loses focus.
     */
    onFocusLost(): void;
}

/**
 * G3X Touch bezel rotary knob groups.
 */
declare enum UiKnobGroup {
    Single = "Single",
    Left = "Left",
    Right = "Right"
}
/**
 * IDs for G3X Touch bezel rotary knobs.
 */
declare enum UiKnobId {
    SingleOuter = "SingleOuter",
    SingleInner = "SingleInner",
    SingleInnerPush = "SingleInnerPush",
    LeftOuter = "LeftOuter",
    LeftInner = "LeftInner",
    LeftInnerPush = "LeftInnerPush",
    RightOuter = "RightOuter",
    RightInner = "RightInner",
    RightInnerPush = "RightInnerPush"
}
/**
 * Mappings from G3X Touch bezel rotary knob IDs to the groups to which they belong.
 */
type UiKnobIdGroupMap = {
    /** Single outer knob. */
    [UiKnobId.SingleOuter]: UiKnobGroup.Single;
    /** Single inner knob. */
    [UiKnobId.SingleInner]: UiKnobGroup.Single;
    /** Single inner push knob. */
    [UiKnobId.SingleInnerPush]: UiKnobGroup.Single;
    /** Left inner knob. */
    [UiKnobId.LeftOuter]: UiKnobGroup.Left;
    /** Left outer knob. */
    [UiKnobId.LeftInner]: UiKnobGroup.Left;
    /** Left inner push knob. */
    [UiKnobId.LeftInnerPush]: UiKnobGroup.Left;
    /** Right outer knob. */
    [UiKnobId.RightOuter]: UiKnobGroup.Right;
    /** Right inner knob. */
    [UiKnobId.RightInner]: UiKnobGroup.Right;
    /** Right inner push knob. */
    [UiKnobId.RightInnerPush]: UiKnobGroup.Right;
};
/**
 * IDs for outer G3X Touch bezel rotary knobs.
 */
type UiOuterKnobId = UiKnobId.SingleOuter | UiKnobId.LeftOuter | UiKnobId.RightOuter;
/**
 * IDs for inner G3X Touch bezel rotary knobs.
 */
type UiInnerKnobId = UiKnobId.SingleInner | UiKnobId.LeftInner | UiKnobId.RightInner | UiKnobId.SingleInnerPush | UiKnobId.LeftInnerPush | UiKnobId.RightInnerPush;
/**
 * IDs for G3X Touch bezel rotary knobs that can be turned.
 */
type UiTurnKnobId = UiKnobId.SingleOuter | UiKnobId.SingleInner | UiKnobId.LeftOuter | UiKnobId.LeftInner | UiKnobId.RightOuter | UiKnobId.RightInner;
/**
 * IDs for G3X Touch bezel rotary knobs that can be pushed.
 */
type UiPushKnobId = UiKnobId.SingleInnerPush | UiKnobId.LeftInnerPush | UiKnobId.RightInnerPush;
/**
 * Bitflags that represent the side(s) for which control of bezel rotary knob behavior is available.
 */
declare enum UiKnobControlSide {
    None = 0,
    Left = 1,
    Right = 2,
    Both = 3
}
/**
 * Requested label states for the bezel rotary knobs.
 */
type UiKnobRequestedLabelState = ReadonlyMap<UiKnobId, string>;
/**
 * Label states for the bezel rotary knobs.
 */
type UiKnobLabelState = Readonly<Record<UiKnobId, Subscribable<string>>>;

/**
 * A controller for setting focus on UI components.
 */
declare class UiFocusController implements UiInteractionHandler {
    private readonly validKnobIds;
    private readonly _registeredComponents;
    /** The components registered with this controller. */
    readonly registeredComponents: readonly UiFocusableComponent[];
    private readonly isActive;
    private readonly _focusedComponent;
    /** The component currently focused by this controller, or `null` if there is no such component. */
    readonly focusedComponent: Subscribable<UiFocusableComponent | null>;
    private readonly _knobLabelState;
    /** The bezel rotary knob label state requested by this controller. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string>;
    private focusedIndex;
    private recentFocusedComponent;
    private readonly canBeFocusedHandler;
    private canBeFocusedSub?;
    /**
     * Creates a new instance of UiFocusController. The controller is initialized to the inactive state.
     * @param validKnobIds The IDs of the valid bezel rotary knobs that can be used to change the component focused by
     * the new controller. If not defined, then knobs cannot be used to change the component focused by the controller.
     */
    constructor(validKnobIds?: Iterable<UiKnobId>);
    /**
     * Registers a component with this controller. Once registered, the component can be focused by this controller.
     * @param component The component to register.
     */
    register(component: UiFocusableComponent): void;
    /**
     * Deregisters a component with this controller. Once deregistered, the component can no longer be focused by this
     * controller.
     * @param component The component to deregister.
     */
    deregister(component: UiFocusableComponent): void;
    /**
     * Sets whether this controller is active. This controller can only set focus on components when it is active. If
     * this controller is deactivated, then any component focused by this controller will immediately lose focus.
     * @param active Whether to activate this controller.
     */
    setActive(active: boolean): void;
    /**
     * Sets focus on a registered component. If this controller is not active, then this method does nothing.
     * @param component The component on which to set focus. If the component is not registered with this controller,
     * then focus will not be set.
     * @param direction The direction from which to set focus on the component. Defaults to
     * {@link UiFocusDirection.Unspecified}.
     */
    setFocus(component: UiFocusableComponent, direction?: UiFocusDirection): void;
    /**
     * Sets focus on a registered component by index. If this controller is not active, then this method does nothing.
     * @param index The index of the component on which to set focus. If the index is out of bounds, then focus will
     * not be set.
     * @param direction The direction from which to set focus on the component. Defaults to
     * {@link UiFocusDirection.Unspecified}.
     */
    setFocusIndex(index: number, direction?: UiFocusDirection): void;
    /**
     * Removes focus from a focused component.
     * @param component The component from which to remove focus. Defaults to the component currently focused by this
     * controller.
     */
    removeFocus(component?: UiFocusableComponent): void;
    /**
     * Attempts to change focus to the first registered focusable component.
     * @param direction The direction from which to set focus on the component. Defaults to
     * {@link UiFocusDirection.Unspecified}.
     */
    focusFirst(direction?: UiFocusDirection): void;
    /**
     * Attempts to change focus to the last registered focusable component.
     * @param direction The direction from which to set focus on the component. Defaults to
     * {@link UiFocusDirection.Unspecified}.
     */
    focusLast(direction?: UiFocusDirection): void;
    /**
     * Attempts to change focus to the next registered focusable component after the currently focused component. If
     * there is no currently focused component, then attempts to focus the registered focusable component with the
     * smallest index.
     */
    focusNext(): void;
    /**
     * Attempts to change focus to the previous registered focusable component before the currently focused component. If
     * there is no currently focused component, then attempts to focus the registered focusable component with the
     * largest index.
     */
    focusPrevious(): void;
    /**
     * Attempts to change focus to the most recently focused component. Has no effect if a component is currently focused
     * or if there is no most recently focused component.
     */
    focusRecent(): void;
    /**
     * Clears this controller's memory of the most recently focused component. Has no effect if a component is currently
     * focused.
     */
    clearRecentFocus(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes the component focused by this controller by focusing the next or previous registered component relative
     * to the currently focused component.
     * @param direction The direction in which to change focus (`1` = focus the next component, `-1` = focus the previous
     * component).
     */
    private changeFocus;
    /**
     * Responds to when whether this controller's currently focused component can be focused changes.
     * @param canBeFocused Whether this controller's currently focused component can be focused.
     */
    private onComponentCanBeFocusedChanged;
    /**
     * Destroys this controller.
     */
    destroy(): void;
}

/**
 * Display screen side user setting modes.
 */
declare enum DisplayScreenSideSettingMode {
    Left = "Left",
    Right = "Right"
}
/**
 * Display location user setting modes.
 */
declare enum DisplayLocationSettingMode {
    MFD = "MFD",
    PFD = "PFD",
    Both = "Both"
}
/**
 * Display user settings.
 */
type DisplayUserSettingTypes = {
    /** Whether to initialize to split screen mode on start-up. */
    displayStartupSplitMode: boolean;
    /** Whether to support toggling split screen mode with the Back key. */
    displayToggleSplitWithBack: boolean;
    /** The screen side on which the PFD pane is located. */
    displayPfdPaneSide: DisplayScreenSideSettingMode;
    /** The key of the page to display on the PFD pane when the GDU is operating as an MFD and is in split screen mode. */
    displayMfdSplitScreenPageKey: string;
    /** The instrument types on which the EIS is displayed. */
    displayEisLocation: DisplayLocationSettingMode;
    /** The screen side on which the EIS display is located. */
    displayEisScreenSide: DisplayScreenSideSettingMode;
    /** The instrument types on which the CNS data bar COM radio buttons are displayed. */
    displayComRadioLocation: DisplayLocationSettingMode;
    /** The instrument types on which the CNS data bar NAV radio buttons are displayed. */
    displayNavRadioLocation: DisplayLocationSettingMode;
    /** The instrument types on which the CNS data bar audio panel button is displayed. */
    displayAudioPanelLocation: DisplayLocationSettingMode;
    /** The instrument types on which the CNS data bar transponder button is displayed. */
    displayTransponderLocation: DisplayLocationSettingMode;
    /** Whether to show on-screen zoom buttons on maps and charts. */
    displayMapZoomButtonShow: boolean;
    /** Whether to the reverse the direction of zooming when using the bezel rotary knobs. */
    displayKnobZoomReverse: boolean;
};
/**
 * Aliased non-indexed display user settings.
 */
type DisplayAliasedNonIndexedUserSettingTypes = Pick<DisplayUserSettingTypes, 'displayEisLocation' | 'displayComRadioLocation' | 'displayNavRadioLocation' | 'displayAudioPanelLocation' | 'displayTransponderLocation'>;
/**
 * Aliased indexed display user settings.
 */
type DisplayAliasedIndexedUserSettingTypes = Omit<DisplayUserSettingTypes, keyof DisplayAliasedNonIndexedUserSettingTypes>;
/**
 * True non-indexed display user settings.
 */
type DisplayNonIndexedUserSettingTypes = {
    [Name in keyof DisplayAliasedNonIndexedUserSettingTypes as `${Name}_g3x`]: DisplayAliasedNonIndexedUserSettingTypes[Name];
};
/**
 * True indexed display user settings for an indexed GDU.
 */
type DisplayIndexedUserSettingTypes<Index extends number> = {
    [Name in keyof DisplayAliasedIndexedUserSettingTypes as `${Name}_${Index}_g3x`]: DisplayUserSettingTypes[Name];
};
/**
 * All true display user settings.
 */
type DisplayAllUserSettingTypes = DisplayIndexedUserSettingTypes<number> & DisplayNonIndexedUserSettingTypes;
/**
 * A manager for display user settings.
 */
declare class DisplayUserSettingManager implements UserSettingManager<DisplayAllUserSettingTypes> {
    readonly gduCount: number;
    private static readonly NON_INDEXED_SETTING_NAMES;
    private static readonly INDEXED_SETTING_NAMES;
    private readonly manager;
    private readonly aliasedManagers;
    /**
     * Creates a new instance of DisplayUserSettingManager.
     * @param bus The event bus.
     * @param gduCount The number of GDUs supported by this manager.
     */
    constructor(bus: EventBus, gduCount: number);
    /** @inheritDoc */
    tryGetSetting<K extends string>(name: K): K extends keyof DisplayAllUserSettingTypes ? UserSetting<DisplayAllUserSettingTypes[K]> : undefined;
    /** @inheritDoc */
    getSetting<K extends keyof DisplayAllUserSettingTypes & string>(name: K): UserSetting<NonNullable<DisplayAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    whenSettingChanged<K extends keyof DisplayAllUserSettingTypes & string>(name: K): Consumer<NonNullable<DisplayAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritDoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, DisplayAllUserSettingTypes>): UserSettingManager<M & DisplayAllUserSettingTypes>;
    /**
     * Gets a manager for aliased display user settings for an indexed GDU.
     * @param index The index of the GDU for which to get an aliased setting manager.
     * @returns A manager for aliased display user settings for the specified GDU.
     * @throws RangeError if `index` is less than 1 or greater than the number of GDUs supported by this manager.
     */
    getAliasedManager(index: number): UserSettingManager<DisplayUserSettingTypes>;
    /**
     * Gets an array of definitions for true display settings for a single GDU.
     * @param index The index of the GDU.
     * @returns An array of definitions for true display settings for the specified GDU.
     */
    private static getIndexedSettingDefs;
    /**
     * Gets an array of definitions for non-indexed display settings.
     * @returns An array of definitions for non-indexed display settings.
     */
    private static getNonIndexedSettingDefs;
    /**
     * Gets the default values for a full set of aliased indexed display settings.
     * @returns The default values for a full set of aliased indexed display settings.
     */
    private static getIndexedDefaultValues;
    /**
     * Gets the default values for all non-indexed display settings.
     * @returns The default values for all non-indexed display settings.
     */
    private static getNonIndexedDefaultValues;
    /**
     * Gets a setting name alias mapping for a GDU.
     * @param index The index of the GDU.
     * @returns A setting name alias mapping for the specified GDU.
     */
    private static getAliasMap;
}

/**
 * Policies governing the lifecycle of UI views.
 */
declare enum UiViewLifecyclePolicy {
    /** The view is created immediately on initialization and is never destroyed. */
    Static = "Static",
    /** The view is created when it is opened for the first time and is never destroyed. */
    Persistent = "Persistent",
    /**
     * The view is created when it is opened and destroyed when it is closed and no longer appears in the history of its
     * view stack.
     */
    Transient = "Transient"
}
/**
 * Types of open UI views.
 */
type UiViewType = 'page' | 'popup' | 'base';
/**
 * Types of UI popups.
 */
type UiPopupType = 'normal' | 'fade' | 'positioned' | 'slideout-top-full' | 'slideout-bottom-full' | 'slideout-right-full';
/**
 * Types of occlusion applied to UI views.
 */
type UiViewOcclusionType = 'darken' | 'hide' | 'none';
/**
 * UI view stack layers.
 */
declare enum UiViewStackLayer {
    Main = "Main",
    Overlay = "Overlay"
}
/**
 * An entry describing a UI view registered to a view stack.
 */
type UiViewEntry<T extends UiView = UiView> = {
    /** The view stack layer to which the view belongs. */
    readonly layer: UiViewStackLayer;
    /** The key of the view. */
    readonly key: string;
    /** A reference to the view, or `undefined` if the view is not rendered. */
    readonly ref: T | undefined;
};
/**
 * An entry describing a rendered UI view registered to a view stack.
 */
type RenderedUiViewEntry<T extends UiView = UiView> = Omit<UiViewEntry<T>, 'ref'> & {
    /** A reference to the view. */
    readonly ref: T;
};
/**
 * An item describing a UI view within a view stack.
 */
type UiViewStackItem<T extends UiView = UiView> = {
    /** The entry for the UI view. */
    readonly viewEntry: RenderedUiViewEntry<T>;
    /** The view type as which the UI view was opened. */
    readonly type: UiViewType;
};
/**
 * Size modes for UI views.
 */
declare enum UiViewSizeMode {
    Full = "Full",
    Half = "Half",
    Hidden = "Hidden"
}

/**
 * A container for displaying rendered UI views.
 */
interface UiViewStackContainer {
    /** A reference to this container's root element. */
    readonly rootRef: NodeReference<HTMLElement>;
    /** An event that fires when the size of this container changes. */
    readonly sizeChanged: ReadonlySubEvent<UiViewStackContainer, void>;
    /**
     * Gets this container's current size mode.
     * @returns This container's current size mode.
     */
    getSizeMode(): UiViewSizeMode;
    /**
     * Gets this container's current dimensions, as `[width, height]` in pixels.
     * @returns This container's current dimensions, as `[width, height]` in pixels.
     */
    getDimensions(): ReadonlyFloat64Array;
    /**
     * Renders a view into this container.
     * @param layer The layer to which to render the view.
     * @param view A UI view, as a VNode.
     */
    renderView(layer: UiViewStackLayer, view: VNode): void;
}

/**
 * Options describing how to open a UI view as a generic popup.
 */
type UiGenericPopupOpenOptions<T extends UiPopupType> = {
    /** The type to apply to the popup. Defaults to `'normal'`. */
    popupType: T;
    /**
     * The occlusion type applied to views beneath the popup. If `'none'` is chosen, then the popup will not prevent
     * mouse events from reaching views beneath it (unless the mouse event was triggered on an element in the popup).
     * Defaults to `'darken'`.
     */
    backgroundOcclusion?: UiViewOcclusionType;
    /**
     * Whether to allow unhandled interaction events to fall through to the next view in the open stack. Defaults to
     * `false`.
     */
    allowEventFallthrough?: boolean;
};
/**
 * Options describing how to open a UI view as a positioned popup.
 */
type UiPositionedPopupOpenOptions = UiGenericPopupOpenOptions<'positioned'> & {
    /**
     * The desired offset of the popup's left border from its view stack container's left border, as a percentage of the
     * container's width. If both this value and `right` are defined, then `right` takes priority. If neither this value
     * nor `right` is defined, then this value defaults to zero.
     */
    left?: number;
    /**
     * The desired offset of the popup's right border from its view stack container's right border, as a percentage of
     * the container's width. If both this value and `left` are defined, then this value takes priority. If neither this
     * value nor `left` is defined, then `left` defaults to zero.
     */
    right?: number;
    /**
     * The desired offset of the popup's top border from its view stack container's top border, as a percentage of the
     * container's height. If both this value and `bottom` are defined, then `bottom` takes priority. If neither this
     * value nor `bottom` is defined, then this value defaults to zero.
     */
    top?: number;
    /**
     * The desired offset of the popup's bottom border from its view stack container's bottom border, as a percentage of
     * the container's height. If both this value and `top` are defined, then this value takes priority. If neither this
     * value nor `top` is defined, then `top` defaults to zero.
     */
    bottom?: number;
};
/**
 * Options describing how to open a UI view as a popup.
 */
type UiPopupOpenOptions = UiPositionedPopupOpenOptions | UiGenericPopupOpenOptions<Exclude<UiPopupType, 'positioned'>>;
/**
 * An entry describing a registered UI view.
 */
interface ViewEntry<T extends UiView = UiView> {
    /** The view stack layer to which the view belongs. */
    readonly layer: UiViewStackLayer;
    /** The lifecycle policy of the view. */
    readonly lifecyclePolicy: UiViewLifecyclePolicy;
    /** The key of the view. */
    readonly key: string;
    /** A function which renders the view. */
    readonly factory: (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode;
    /** A reference to the view, or `undefined` if the view is not rendered. */
    ref: T | undefined;
    /** A reference to the view wrapper, or `undefined` if the view is not rendered. */
    wrapperRef: NodeReference<UiViewWrapper<any>> | undefined;
    /** State of the view's visibility */
    readonly isVisible: Subject<boolean>;
    /** The view-stack layer the view is in, if any */
    readonly level: Subject<number>;
    /** The view type this entry's view is currently opened as: page, popup, or base. */
    readonly type: Subject<UiViewType | undefined>;
    /** The popup type this entry's view is currently opened as, or `undefined` if the view is not a popup. */
    readonly popupType: Subject<UiPopupType | undefined>;
    /**
     * The occlusion type applied to views beneath this entry's view when it is opened as a popup, or `undefined` if the
     * view is not a popup.
     */
    readonly popupBackgroundOcclusion: Subject<UiViewOcclusionType | undefined>;
    /** The occlusion applied to this entry's view. */
    readonly occlusion: Subject<UiViewOcclusionType>;
    /**
     * A subscription to refresh the view stack's requested knob label state when this entry's view changes its requested
     * knob label state.
     */
    knobLabelStateSub?: Subscription;
}
/**
 * An entry describing a registered UI view that is currently rendered to a view stack.
 */
type RenderedViewEntry<T extends UiView = UiView> = Omit<ViewEntry<T>, 'ref' | 'wrapperRef' | 'knobLabelStateSub'> & {
    /** A reference to the view. */
    ref: T;
    /** A reference to the view wrapper. */
    wrapperRef: NodeReference<UiViewWrapper<any>>;
    /**
     * A subscription to refresh the view stack's requested knob label state when this entry's view changes its requested
     * knob label state.
     */
    knobLabelStateSub: Subscription;
};
/**
 * A stack of UI views.
 *
 * UI views are registered with the stack and can be opened and closed within the stack as pages or popups. The stack
 * has two layers: a main layer and an overlay layer. At any given time, the main layer contains one view opened as a
 * page and zero or more views opened as popups, while the overlay layer contains zero or more views opened as popups.
 * Views opened in the overlay layer always sit on top of views opened in the main layer. The open page is always
 * located at the bottom of the main layer. The view stack keeps track of individual history states as views are opened
 * and supports reverting to previous history states.
 *
 * The view stack handles routing of UI interaction events to the appropriate open views in the stack. Additionally,
 * bezel rotary knob label states requested by open views are processed and synthesized into a single knob label state
 * based on which views have priority to handle the knob interaction events.
 */
declare class UiViewStack implements UiInteractionHandler {
    private readonly uiService;
    private static readonly BASE_VIEW_KEY;
    private static readonly RESERVED_KEYS;
    private readonly layerEntries;
    private container?;
    private readonly resetViewAnimation;
    private readonly _activeView;
    /** This view stack's currently active view. */
    readonly activeView: Subscribable<RenderedViewEntry>;
    private readonly _openPage;
    /** This view stack's currently open page. */
    readonly openPage: Subscribable<RenderedViewEntry>;
    private readonly workingKnobLabelState;
    private readonly _knobLabelState;
    /** This view stack's requested bezel rotary knob label state. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private _isAwake;
    /**
     * Creates a new instance of UiViewStack.
     * @param uiService The UI service controlling this view stack.
     */
    constructor(uiService: UiService);
    /**
     * Checks whether this view stack is awake.
     * @returns Whether this view stack is awake.
     */
    isAwake(): boolean;
    /**
     * Gets the current open stack for one of this view stack's layers. The open stack contains all open views in the
     * layer.
     * @param layer The layer for which to get the open stack.
     * @returns The current open stack for the specified view stack layer.
     */
    private getOpenStack;
    /**
     * Checks whether the current open stack for one of this view stack's layers is empty. A stack is considered empty if
     * and only if it does not contain at least one non-base view.
     * @param layer The layer to check.
     * @returns Whether the current open stack for the specified view stack layer is empty.
     */
    private isOpenStackEmpty;
    /**
     * Gets this view stack's active view stack item.
     * @returns This view stack's active view stack item.
     */
    private getActiveViewStackItem;
    /**
     * Attaches this view stack to a container.
     * @param container The container to which to attach.
     * @throws Error if this view stack has already been attached to a container.
     */
    attachToContainer(container: UiViewStackContainer): void;
    private sizeChangeId;
    /**
     * Responds to when this view stack's container changes size.
     * @param container This view stack's container.
     */
    private onContainerSizeChanged;
    /**
     * Registers a view (page or popup) with this view stack. Once a view is registered, it may be opened by referencing
     * its key.
     * @param layer The view stack layer to which to assign the view.
     * @param lifecyclePolicy The lifecycle policy to apply to the view.
     * @param key The key to register the view under.
     * @param factory A function which renders the view.
     * @throws Error if the specified key is invalid.
     */
    registerView(layer: UiViewStackLayer, lifecyclePolicy: UiViewLifecyclePolicy, key: string, factory: (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode): void;
    /**
     * Wakes this view stack.
     */
    wake(): void;
    /**
     * Puts this view stack to sleep.
     */
    sleep(): void;
    /**
     * Updates this view stack. Has no effect if this view stack is asleep.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    update(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Renders a registered view. If the view is already rendered, then this method does nothing.
     * @param viewEntry The view entry describing the view to render.
     */
    private renderView;
    /**
     * Cleans up and destroys a view, removing the view from the DOM and freeing up associated resources. The view entry
     * for the view is preserved and can be used to re-render the view in the future.
     * @param viewEntry The entry for the view to clean up.
     */
    private cleanupView;
    /**
     * Visits each history state of this view stack.
     * @param visitor A function which will visit each history state. The function is called once for each history state
     * in order of increasing age (beginning with the present state) and takes two arguments: the number of steps from
     * the present state to the selected state and a function which allows one to peek into the selected state's view
     * stack. The function should return `true` if visitation should continue and `false` if visitation should stop.
     */
    visitHistory(visitor: (steps: number, stackPeeker: (depth: number) => UiViewStackItem | undefined) => boolean): void;
    /**
     * Opens a view as a page and changes the current page to the opened view. This will close the current page and any
     * open popups.
     * @param key The key of the view to open.
     * @returns The entry of the opened view.
     * @throws Error if this view stack is not attached to a container, there is no view registered under the specified
     * key, or the view to open is already open.
     */
    changePageTo<T extends UiView = UiView>(key: string): RenderedUiViewEntry<T>;
    /**
     * Opens a view as a popup. The opened view will be brought to the top of its view stack layer.
     * @param layer The view stack layer in which to open the view.
     * @param key The key of the view to open.
     * @param options Options describing how to open the popup. If not defined, then the popup will default to type
     * `'normal'` and with a background occlusion type of `'darken'`.
     * @returns The entry of the opened view.
     * @throws Error if this view stack is not attached to a container, there is no view registered under the specified
     * key, or the view to open is already open.
     */
    openPopup<T extends UiView = UiView>(layer: UiViewStackLayer, key: string, options?: Readonly<UiPopupOpenOptions>): RenderedUiViewEntry<T>;
    /**
     * Advances the history state of this view stack by changing the open page or opening a popup.
     * @param layer The layer in which to open the view.
     * @param key The key of the view to open.
     * @param type The type of view to open.
     * @param popupOptions Options describing how to open the view as a popup. Ignored if `type` is not `'popup'`.
     * @returns The view stack item for the opened view.
     * @throws Error if this view stack is not attached to a container, the type of view to open is a page and the layer
     * is not the main layer, there is no view registered under the specified key, or the view to open is already open.
     */
    private advance;
    /**
     * Initializes a view stack item describing an open page.
     * @param item The view stack item to initialize.
     */
    private initPageViewStackItem;
    /**
     * Initializes a view stack item describing an open popup.
     * @param item The view stack item to initialize.
     * @param options Options describing how the popup is opened.
     */
    private initPopupViewStackItem;
    /**
     * Initializes a view stack item describing an open popup of the `'positioned'` type.
     * @param item The view stack item to initialize.
     * @param options Options describing how the popup is opened.
     */
    private initPositionedPopupViewStackItem;
    /**
     * Returns to the most recent previous history state of this view stack. If there is no previous history state to
     * which to return, then this method does nothing.
     * @returns The active view entry in this stack after the operation is complete.
     * @throws Error if this view stack is not attached to a container.
     */
    goBack(): RenderedUiViewEntry;
    /**
     * Attempts to return to a previous history state of this view stack.
     * @param selector A function which selects the history state to which to return. The function is called once for
     * each history state in order of increasing age and takes two arguments: the number of steps from the present state
     * to the selected state and a function which allows one to peek into the selected state's view stack. The function
     * should return `true` if the operation should return to the selected state and `false` otherwise. If the function
     * returns `false` for every selected state, then the operation is aborted.
     * @returns The active view entry in this stack after the operation is complete.
     */
    goBackTo(selector: (steps: number, stackPeeker: (depth: number) => UiViewStackItem | undefined) => boolean): RenderedUiViewEntry;
    /**
     * Returns to the most recent history state of this view stack in which the overlay layer contains no open views.
     * @param skipPopupCloseAnimation Whether to skip playing the close animations for popups. Defaults to `false`.
     * @returns The active view entry in this stack after the operation is complete.
     * @throws Error if this view stack is not attached to a container.
     */
    closeAllOverlayViews(skipPopupCloseAnimation?: boolean): RenderedUiViewEntry;
    /**
     * Returns to the most recent history state of this view stack in which the active view is the open page. If the
     * current active view is the open page, then this method does nothing.
     * @param skipPopupCloseAnimation Whether to skip playing the close animations for popups. Defaults to `false`.
     * @returns The active view entry in this stack after the operation is complete.
     * @throws Error if this view stack is not attached to a container.
     */
    goBackToPage(skipPopupCloseAnimation?: boolean): RenderedUiViewEntry;
    /**
     * Returns to the history state of this view stack in which only the empty page is open.
     * @param skipPopupCloseAnimation Whether to skip playing the close animations for popups. Defaults to `false`.
     * @returns The active view entry in this stack after the operation is complete.
     * @throws Error if this view stack is not attached to a container.
     */
    goBackToEmptyPage(skipPopupCloseAnimation?: boolean): RenderedUiViewEntry;
    /**
     * Resets the open and closing animations of all views in this view stack. Closed views will immediately be hidden
     * and open views will immediately become visible at their final positions.
     */
    resetViewAnimations(): void;
    /**
     * Opens a view.
     * @param viewStackItem The view stack item for the view to open.
     * @throws Error if the view is not in the open view stack.
     */
    private openView;
    /**
     * Closes a view.
     * @param viewEntry The entry of the view to close.
     * @param closeType The type of close operation.
     * @param skipPopupCloseAnimation Whether to skip the close animation for popups.
     */
    private closeView;
    /**
     * Close all views in the current view stack, optionally leaving the current page open.
     * @param viewStack The view stack to close.
     * @param closePage Whether to close the open page in the view stack.
     * @param closeType The type of close operation.
     * @param skipPopupCloseAnimation Whether to skip the close animation for popups.
     */
    private closeViewStack;
    /**
     * Handles logic associated with changing this view stack's open page.
     */
    private handleOpenPageChange;
    /**
     * Handles logic associated with changing this view stack's topmost open view.
     */
    private handleActiveViewChange;
    /**
     * Refreshes the occlusion state of all of this view stack's open views.
     */
    private refreshOcclusion;
    /**
     * Refreshes this view stack's requested bezel rotary knob label state.
     */
    private refreshKnobLabelState;
    /**
     * Iterates through a view stack and cleans up all views with the transient lifecycle policy that are not contained
     * within a given view stack history.
     * @param viewStack The view stack containing the views to clean up.
     * @param viewStackHistory A view stack history containing views which should not be cleaned up.
     */
    private cleanupTransientViews;
    /**
     * Creates a new empty view entry.
     * @param layer The layer to which the view entry belongs.
     * @param key The key of the view entry.
     * @returns A new empty view entry.
     */
    private createEmptyViewEntry;
    /**
     * Gets the index of a view entry in a view stack.
     * @param stack The view stack to search.
     * @param viewEntry The view entry for which to search.
     * @returns The index of the specified view entry in the view stack, or `-1` if the entry is not in the stack.
     */
    private static indexOfViewEntryInStack;
}
/**
 * A wrapper for a UI view.
 */
interface UiViewWrapper<P extends ComponentProps = ComponentProps> extends DisplayComponent<P> {
    /**
     * Sets additional CSS classes on the wrapper. The new classes will replace any existing additional classes. These
     * classes are handled separately from the wrapper's animation class (set using `setAnimationClass()`).
     * @param classes An iterable of the CSS classes to set, or `null` to remove any existing additional classes.
     */
    setClasses(classes: Iterable<string> | null): void;
    /**
     * Sets additional CSS styles on the wrapper. The new styles will replace any existing additional styles.
     * @param styles An iterable of the styles to set, each as a `[name, value]` pair, or `null` to remove any existing
     * additional styles.
     */
    setStyles(styles: Iterable<[string, string]> | null): void;
    /**
     * Sets the wrapper's animation CSS class. The new class will replace the existing animation class. The animation
     * class is handled separately from the wrapper's additional classes (set using `setClasses()`).
     * @param animationClass The animation CSS class to set, or `null` to remove any existing animation class.
     */
    setAnimationClass(animationClass: string | null): void;
}

/**
 * A ground speed data provider for an airspeed indicator.
 */
interface AirspeedIndicatorGsDataProvider {
    /** The current ground speed, in knots. */
    readonly gsKnots: Subscribable<number>;
    /** Whether ground speed data is in a failure state. */
    readonly isDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link AirspeedIndicatorGsDataProvider}.
 */
declare class DefaultAirspeedIndicatorGsDataProvider implements AirspeedIndicatorGsDataProvider {
    private readonly bus;
    private readonly fmsPosIndex;
    private readonly fmsPosMode;
    private readonly _gsKnots;
    /** @inheritDoc */
    readonly gsKnots: Subscribable<number>;
    /** @inheritDoc */
    readonly isDataFailed: Subscribable<boolean>;
    private isInit;
    private isAlive;
    private isPaused;
    private fmsPosIndexSub?;
    /**
     * Creates a new instance of DefaultAirspeedIndicatorGsDataProvider.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this provider's data.
     */
    constructor(bus: EventBus, fmsPosIndex: number | Subscribable<number>);
    /**
     * Initializes this data provider. Once initialized
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * Scale options for an airspeed tape.
 */
type G3XAirspeedTapeScaleOptions = Pick<AirspeedTapeProps, 'minimum' | 'maximum' | 'window' | 'majorTickInterval' | 'minorTickFactor'>;
/**
 * Options for an airspeed trend vector.
 */
type G3XAirspeedTrendVectorOptions = Pick<AirspeedTapeProps, 'trendThreshold'>;
/**
 * Options for airspeed alerts.
 */
type G3XAirspeedAlertOptions = {
    /** Whether to support the overspeed alert. */
    supportOverspeed: boolean;
    /** Whether to support the trend overspeed alert. */
    supportTrendOverspeed: boolean;
    /** Whether to support the underspeed alert. */
    supportUnderspeed: boolean;
    /** Whether to suppor the trend underspeed alert. */
    supportTrendUnderspeed: boolean;
};
/**
 * A definition for an airspeed indicator reference V-speed bug.
 */
type G3XVSpeedBugDefinition = {
    /** The name of the bug's reference V-speed. */
    readonly name: string;
    /** The bug's label text. */
    readonly label: string;
    /** Whether to show an off-scale label for the bug when the airspeed is off-scale. */
    readonly showOffscale: boolean;
};
/**
 * Options for an airspeed indicator's displayed reference V-speed bugs.
 */
type G3XVSpeedBugOptions = {
    /** A user setting manager containing reference V-speed settings. */
    vSpeedSettingManager: UserSettingManager<VSpeedUserSettingTypes>;
    /** An iterable of definitions for each displayed reference V-speed bug. */
    vSpeedBugDefinitions: Iterable<G3XVSpeedBugDefinition>;
};
/**
 * Component props for {@link G3XAirspeedIndicator}.
 */
interface G3XAirspeedIndicatorProps extends ComponentProps {
    /** A data provider for the indicator. */
    dataProvider: AirspeedIndicatorDataProvider;
    /** A ground speed data provider for the indicator. */
    gsDataProvider: AirspeedIndicatorGsDataProvider;
    /** Whether the indicator should be decluttered. */
    declutter: Subscribable<boolean>;
    /** Scale options for the airspeed tape. */
    tapeScaleOptions: Readonly<G3XAirspeedTapeScaleOptions>;
    /** Definitions for color ranges to include on the airspeed tape. */
    colorRanges: Iterable<AirspeedIndicatorColorRange>;
    /** Options for reference V-speed bugs. */
    vSpeedBugOptions: Readonly<G3XVSpeedBugOptions>;
}
/**
 * A G3X Touch PFD airspeed indicator.
 */
declare class G3XAirspeedIndicator extends DisplayComponent<G3XAirspeedIndicatorProps> {
    private thisNode?;
    private readonly rootCssClass;
    private readonly activeAlert;
    private readonly tapeMinimum;
    private readonly tapeMaximum;
    private readonly isIasOffscale;
    private readonly showTopBottomDisplays;
    private readonly isReferenceDisplayVisible;
    private readonly isTasDisplayVisible;
    private readonly isTopDisplayVisible;
    private readonly isBottomDisplayVisible;
    private isDataFailedSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Updates this indicator's root CSS class list in response to the current active airspeed alert.
     * @param alert The current active airspeed alert.
     */
    private updateAlertClass;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
/**
 * Component props for AirspeedTape.
 */
interface AirspeedTapeProps extends ComponentProps {
    /** A data provider for the indicator. */
    dataProvider: AirspeedIndicatorDataProvider;
    /** The minimum airspeed representable on the tape, in knots. */
    minimum: number | Subscribable<number>;
    /** The maximum airspeed representable on the tape, in knots. */
    maximum: number | Subscribable<number>;
    /**
     * The size of the airspeed tape window, in knots (i.e. the difference between the highest and lowest airspeeds
     * visible on the tape at any given time).
     */
    window: number | Subscribable<number>;
    /** The interval between major ticks, in knots. */
    majorTickInterval: number | Subscribable<number>;
    /** The number of minor ticks for each major tick. */
    minorTickFactor: number | Subscribable<number>;
    /** Definitions for color ranges to include on the tape. */
    colorRanges: Iterable<AirspeedIndicatorColorRange>;
    /** The minimum absolute value of the airspeed trend, in knots, required to display the trend vector. */
    trendThreshold: number | Subscribable<number>;
    /** A user setting manager containing reference V-speed settings. */
    vSpeedSettingManager: UserSettingManager<VSpeedUserSettingTypes>;
    /** An iterable of definitions for each displayed reference V-speed bug. */
    vSpeedBugDefinitions: Iterable<G3XVSpeedBugDefinition>;
}

/**
 * A definition for a reference V-speed.
 */
type VSpeedDefinition = {
    /** The name of the V-speed. */
    readonly name: string;
    /** The default value of the V-speed, in knots. */
    readonly defaultValue: number;
};
/**
 * Keys for reference V-speed values derived from aircraft configuration files.
 */
declare enum VSpeedValueKey {
    StallLanding = "VS0",
    StallCruise = "VS1",
    FlapsExtended = "VFe",
    NeverExceed = "VNe",
    NormalOperation = "VNo",
    Minimum = "VMin",
    Maximum = "VMax",
    Rotation = "Vr",
    BestClimbAngle = "Vx",
    BestClimbRate = "Vy",
    Approach = "Vapp",
    BestGlide = "BestGlide",
    BestClimbRateSingleEngine = "Vyse",
    MinimumControl = "Vmc"
}

/**
 * A configuration object which defines an airspeed reference V-speed bug.
 */
declare class VSpeedBugConfig implements ResolvableConfig<(vSpeedGroups: readonly VSpeedDefinition[]) => G3XVSpeedBugDefinition | undefined> {
    readonly isResolvableConfig = true;
    /** The name of the reference V-speed associated with this config's speed bug. */
    readonly name: string;
    /** The label of this config's speed bug. */
    readonly label: string;
    /**
     * Creates a new VSpeedBugConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /**
     * Creates a new VSpeedBugConfig using a specified V-speed name and bug label.
     * @param name The name of the V-speed.
     * @param label The label of the V-speed bug.
     */
    constructor(name: string, label: string);
    /** @inheritdoc */
    resolve(): (vSpeedDefs: readonly VSpeedDefinition[]) => G3XVSpeedBugDefinition | undefined;
}

/**
 * A configuration object which defines airspeed indicator options.
 */
declare class AirspeedIndicatorConfig implements Config {
    private static readonly DEFAULT_DATA_OPTIONS;
    private static readonly DEFAULT_TAPE_SCALE_OPTIONS;
    /** Options for the airspeed indicator data provider. */
    readonly dataProviderOptions: Readonly<AirspeedIndicatorDataProviderOptions>;
    /** Options for the airspeed tape scale. */
    readonly tapeScaleOptions: Readonly<G3XAirspeedTapeScaleOptions>;
    /** Color range definitions for the airspeed tape. */
    readonly colorRangeDefinitions: readonly AirspeedIndicatorColorRange[];
    /** Reference V-speed bug config options for the airspeed indicator. */
    readonly vSpeedBugConfigs: readonly VSpeedBugConfig[];
    /**
     * Creates a new AirspeedIndicatorConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element | undefined, factory: ConfigFactory);
    /**
     * Gets a default set of color range definitions. The set includes the following ranges (in order):
     * 1. RED: Flaps extended stall range (tape minimum to Vs0).
     * 2. WHITE: Flaps extended operating range (Vs0 to Vfe).
     * 3. GREEN (half): Flaps extended or retracted operating range (Vs1 to Vfe).
     * 4. GREEN (full): Flaps retracted operating range (Vfe to Vno).
     * 5. YELLOW: Overspeed caution range (Vno to Vne).
     * 6. BARBER POLE: Overspeed range (Vne to tape maximum).
     * @param tapeScaleOptions Options describing the airspeed tape scale.
     * @returns A array containing a default set of color range definitions.
     */
    private getDefaultColorRangeDefinitions;
    /**
     * Gets a default set of V-speed bug configuration objects. The set includes configurations for the following bugs
     * (in order):
     * 1. V-speed name: `glide`, Bug label: `G`.
     * 2. V-speed name: `r`, Bug label: `R`.
     * 3. V-speed name: `x`, Bug label: `X`.
     * 4. V-speed name: `y`, Bug label: `Y`.
     * @returns A array containing a default set of V-speed bug configuration objects.
     */
    private getDefaultVSpeedBugOptions;
}

/**
 * A configuration object which defines PFD horizon display options.
 */
declare class HorizonConfig implements Config {
    /** The color of the symbolic aircraft. */
    readonly symbolColor: AttitudeAircraftSymbolColor;
    /** Whether to show the roll indicator arc. */
    readonly showRollArc: boolean;
    /** Whether to render the roll indicator with a ground pointer or a sky pointer. */
    readonly rollPointerStyle: 'ground' | 'sky';
    /** Whether to include the display of unusual attitude warning chevrons on the pitch ladder. */
    readonly includeUnusualAttitudeChevrons: boolean;
    /**
     * Creates a new HorizonConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}

/**
 * A configuration object which defines PFD aileron trim gauge options.
 */
declare class PfdAileronTrimGaugeConfig implements Config {
    /**
     * Creates a new PfdAileronTrimGaugeConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
}

/**
 * A configuration object which defines PFD rudder trim gauge options.
 */
declare class PfdRudderTrimGaugeConfig implements Config {
    /**
     * Creates a new PfdRudderTrimGaugeConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
}

/**
 * A configuration object which defines PFD elevator trim gauge options.
 */
declare class PfdElevatorTrimGaugeConfig implements Config {
    /**
     * Creates a new PfdElevatorTrimGaugeConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
}

/**
 * A definition for a PFD flaps gauge scale tick mark.
 */
type PfdFlapsGaugeScaleTickDef = {
    /** The angle value at which the tick mark is positioned, in degrees. */
    angle: number;
    /** The color of the line. */
    color: string;
};
/**
 * A definition for a PFD flags gauge scale range.
 */
type PfdFlapsGaugeScaleRangeDef = {
    /** The minimum angle value to which the range extends, in degrees. */
    minAngle: number;
    /** The maximum angle value to which the range extends, in degrees. */
    maxAngle: number;
    /** The color of the range. */
    color: string;
};
/**
 * Flaps Gauge user settings.
 */
declare class PfdFlapsGaugeConfig implements Config {
    /** The gauge scale's minimum angle, in degrees. */
    readonly minAngle: number;
    /** The gauge scale's maximum angle, in degrees. */
    readonly maxAngle: number;
    /** The gauge's scale tick marks. */
    readonly scaleTicks: readonly Readonly<PfdFlapsGaugeScaleTickDef>[];
    /** The gauge's scale ranges. */
    readonly scaleRanges: readonly Readonly<PfdFlapsGaugeScaleRangeDef>[];
    /**
     * Creates a new PfdFlapsGaugeConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /**
     * Parses an array of scale tick mark definitions from a configuration document element.
     * @param element A configuration document element.
     * @returns An array of scale tick mark definitions defined by the configuration document element.
     */
    private parseScaleTickDefArray;
    /**
     * Parses a scale tick mark definition from a configuration document element.
     * @param element A configuration document element.
     * @returns The scale tick mark definition defined by the configuration document element, or `undefined` if one could
     * not be parsed.
     */
    private parseScaleTickDef;
    /**
     * Parses an array of scale range definitions from a configuration document element.
     * @param element A configuration document element.
     * @returns An array of scale range definitions defined by the configuration document element.
     */
    private parseScaleRangeDefArray;
    /**
     * Parses a scale range definition from a configuration document element.
     * @param element A configuration document element.
     * @returns The scale range definition defined by the configuration document element, or `undefined` if one could not
     * be parsed.
     */
    private parseScaleRangeDef;
}

/**
 * A configuration object which defines PFD trim/flap gauge options.
 */
declare class PfdTrimFlapGaugesConfig implements Config {
    /** A config which defines options for the PFD flaps gauge, or `undefined` if the gauge is not supported. */
    readonly flapsGauge?: PfdFlapsGaugeConfig;
    /** A config which defines options for the PFD's elevator trim gauge, or `undefined` if the gauge is not supported. */
    readonly elevatorTrimGauge?: PfdElevatorTrimGaugeConfig;
    /** A config which defines options for the PFD's aileron trim gauge, or `undefined` if the gauge is not supported. */
    readonly aileronTrimGauge?: PfdAileronTrimGaugeConfig;
    /** A config which defines options for the PFD's rudder trim gauge, or `undefined` if the gauge is not supported. */
    readonly rudderTrimGauge?: PfdRudderTrimGaugeConfig;
    /**
     * Creates a new PfdTrimFlapGaugesConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}

/**
 * Valid maximum scale limits, in feet per minute, for the G3X Touch vertical speed indicator.
 */
type G3XVsiScaleMaximum = 2000 | 3000 | 4000;

/**
 * A configuration object which defines vertical speed indicator options.
 */
declare class G3XVsiConfig implements Config {
    /** Options for the VSI scale. */
    readonly scaleMaximum: G3XVsiScaleMaximum;
    /**
     * Creates a new VsiConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
    /**
     * Parses scale options from a configuration document element.
     * @param element A configuration document element.
     * @returns Scale options defined by the specified element.
     * @throws Error if the specified element has an invalid format.
     */
    private parseScaleMaximum;
}

/**
 * Backlight control user setting modes.
 */
declare enum BacklightControlSettingMode {
    Manual = "Manual",
    LightBus = "LightBus",
    PhotoCell = "PhotoCell"
}
/**
 * Backlight user settings.
 */
type BacklightUserSettingTypes = {
    /** The selected backlight control mode. */
    displayBacklightMode: BacklightControlSettingMode;
    /** The manual backlight intensity level, in the range `[0, 1]`. */
    displayBacklightManualLevel: number;
};
/**
 * True backlight user settings.
 */
type BacklightTrueUserSettingTypes = {
    [P in keyof BacklightUserSettingTypes as `${P}_g3x`]: BacklightUserSettingTypes[P];
};
/**
 * A utility class for retrieving backlight user setting managers.
 */
declare class BacklightUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for backlight user settings.
     * @param bus The event bus.
     * @returns a manager for backlight user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<BacklightUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased backlight settings.
     * @returns The default values for a full set of aliased backlight settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true backlight settings.
     * @returns An array of definitions for true backlight settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true backlight settings.
     * @returns A setting name alias mapping from aliased to true backlight settings.
     */
    private static getAliasMap;
}

/**
 * A configuration object which defines backlight options.
 */
declare class BacklightConfig implements Config {
    /**
     * The default backlight control mode to apply on power-up, or `null` if the setting should be persistent between
     * power cycles.
     */
    readonly defaultMode: BacklightControlSettingMode | null;
    /** A config that defines options for photocell control of backlighting. */
    readonly photoCell: BacklightPhotoCellConfig;
    /**
     * A config that defines options for light bus control of backlighting. If not defined, then light bus control of
     * backlighting is not supported.
     */
    readonly lightBus?: BacklightLightBusConfig;
    /**
     * Creates a new BacklightConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
}
/**
 * A configuration object which defines backlight photocell options.
 */
declare class BacklightPhotoCellConfig implements Config {
    /**
     * The range of input ambient light intensities, as `[min, max]` in lux, over which automatic photocell control
     * operates.
     */
    readonly inputRange: readonly [number, number];
    /** The range of backlight levels, as `[min, max]`, allowed to be set when under automatic photocell control. */
    readonly outputRange: readonly [number, number];
    /** The time constant, in seconds, used by automatic photocell control to smooth input ambient light intensities. */
    readonly timeConstant: number;
    /** The gamma value to use when mapping input ambient light intensities to output backlight levels. */
    readonly gamma: number;
    /**
     * Creates a new BacklightPhotoCellConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
}
/**
 * A configuration object which defines backlight light bus options.
 */
declare class BacklightLightBusConfig implements Config {
    /** The logic that provides the backlight level requested by the light bus. */
    readonly level: CompositeLogicXMLElement;
    /**
     * The light bus level threshold below which backlight control will default to photocell instead. If the threshold is
     * zero, then backlight control will always use the light bus level when light bus control is selected.
     */
    readonly offThreshold: number;
    /**
     * Creates a new BacklightLightBusConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element);
}

/**
 * A configuration object which defines options related to bing map optimizations.
 */
declare class BingMapOptimizationConfig implements Config {
    /** Whether to disable the PFD pane map and PFD Map Inset. */
    readonly disablePfdMaps: boolean;
    /** Whether to disable SVT. */
    readonly disableSvt: boolean;
    /**
     * Creates a new BingMapOptimizationConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}

/**
 * A configuration object which defines options for a G3X Touch instrument.
 */
declare class InstrumentConfig {
    private readonly factory;
    /** The instrument's GDU format. */
    readonly gduFormat: GduFormat;
    /** The instrument's configured type. */
    readonly type: InstrumentType;
    /** The instrument's configured type index. */
    readonly typeIndex: number;
    /** A config which defines backlight options. */
    readonly backlight: BacklightConfig;
    /** Reference V-speed definitions. */
    readonly vSpeeds: readonly VSpeedDefinition[];
    /** A config which defines options for the horizon display. */
    readonly horizon: HorizonConfig;
    /** A config which defines options for the airspeed indicator. */
    readonly airspeedIndicator: AirspeedIndicatorConfig;
    /** A config which defines options for the vertical speed indicator. */
    readonly vsi: G3XVsiConfig;
    /** A config which defines options for the instrument's PFD trim/flap gauges. */
    readonly pfdTrimFlapGauges: PfdTrimFlapGaugesConfig;
    /** A config which defines options for bing map optimization. */
    readonly bingMapOptimization: BingMapOptimizationConfig;
    /**
     * Creates an InstrumentConfig from an XML configuration document.
     * @param instrument The instrument for which this config is being created.
     * @param avionicsConfig The general avionics configuration object.
     * @param configDocument An XML configuration document.
     * @param instrumentConfigElement The root element of the configuration document's section pertaining to the config's
     * instrument.
     */
    constructor(instrument: BaseInstrument, avionicsConfig: AvionicsConfig, configDocument: Document, instrumentConfigElement: Element | undefined);
    /**
     * Parses a backlight configuration object from a configuration document.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param config The root element of the configuration document's section pertaining to the G3X.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The backlight configuration object defined by the configuration document.
     */
    private parseBacklightConfig;
    /**
     * Parses reference V-speed definitions from a configuration document.
     * @param config The root element of the configuration document's section pertaining to the G3X.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns An array of reference V-speed definitions defined by the configuration document.
     */
    private parseVSpeeds;
    /**
     * Gets a set of default reference V-speed definitions. The set contains definitions for the following V-speeds (in
     * order):
     *
     * 1. V-speed name: `glide`
     * 2. V-speed name: `r`,
     * 3. V-speed name: `x`
     * 4. V-speed name: `y`
     *
     * The default values for the V-speeds are derived from the corresponding entries in the aircraft configuration
     * files.
     * @returns An array containing a set of default reference V-speed definitions.
     */
    private getDefaultVSpeedGroups;
    /**
     * Parses a PFD horizon display configuration object from a configuration document.
     * @param config The root element of the configuration document's section pertaining to the G3X.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The PFD horizon display configuration object defined by the configuration document.
     */
    private parseHorizonConfig;
    /**
     * Parses an airspeed indicator configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root element of the configuration document's section pertaining to the G3X.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The airspeed indicator configuration defined by the configuration document, or a default version if the
     * document does not define a valid configuration.
     */
    private parseAirspeedIndicatorConfig;
    /**
     * Parses a vertical speed indicator configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The vertical speed indicator configuration defined by the configuration document, or a default version
     * if the document does not define a valid configuration.
     */
    private parseVsiConfig;
    /**
     * Parses a PFD trim/flap gauges configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root element of the configuration document's section pertaining to the G3X.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The flaps gauge configuration defined by the configuration document element.
     */
    private parsePfdTrimFlapGaugesConfig;
    /**
     * Parses a bing map optimization configuration object from a configuration document. This method looks in the
     * instrument-specific section first for a config definition. If none can be found or parsed without error, this
     * method will next look in the general section. If none can be found or parsed without error there either, this
     * method will return a default configuration object.
     * @param config The root of the configuration document.
     * @param instrumentConfig The root element of the configuration document's section pertaining to this config's
     * instrument.
     * @returns The bing map optimization configuration defined by the configuration document, or a default version
     * if the document does not define a valid configuration.
     */
    private parseBingMapOptimizationConfig;
}

/**
 * A service which manages the state of a G3X Touch instrument's UI panes and views.
 */
declare class UiService {
    readonly instrumentIndex: number;
    private readonly config;
    private readonly instrumentConfig;
    readonly bus: EventBus;
    private readonly isPfdPaneVisible;
    private readonly isMfdPaneVisible;
    private readonly displaySettingManager;
    private readonly pfdViewStack;
    private readonly mfdViewStack;
    private readonly interactionMapper;
    /** The index of this service's parent GDU. */
    readonly gduIndex: number;
    /** The format of this service's parent GDU. */
    readonly gduFormat: GduFormat;
    /** The instrument type of this service's parent instrument. */
    readonly instrumentType: InstrumentType;
    private readonly _isReversionaryMode;
    /** Whether this service is operating in reversionary mode. */
    readonly isReversionaryMode: Subscribable<boolean>;
    private readonly _operatingType;
    /** The current operating type of this service's parent instrument. */
    readonly operatingType: Subscribable<InstrumentType>;
    private readonly _isInStartupPhase;
    /** Whether this service is in the startup phase. */
    readonly isInStartupPhase: Subscribable<boolean>;
    private readonly _gdu460PfdPaneSide;
    /** The side on which the PFD pane is positioned. Only applicable for GDU460 displays. */
    readonly gdu460PfdPaneSide: Subscribable<PfdPaneSide>;
    private readonly _gdu460EisLayout;
    /** The current EIS layout. Only applicable for GDU460 displays. */
    readonly gdu460EisLayout: Subscribable<EisLayouts>;
    /** The current EIS size, or `undefined` if the EIS is not included. Only applicable for GDU460 displays. */
    readonly gdu460EisSize: EisSizes | undefined;
    private readonly _isPaneSplit;
    /** Whether the UI panes are currently displayed in split mode. */
    readonly isPaneSplit: Subscribable<boolean>;
    private readonly _selectedPfdPageKey;
    /** The key of the currently selected PFD page. */
    readonly selectedPfdPageKey: Subscribable<string>;
    private readonly _selectedMfdMainPageKey;
    /** The key of the currently selected MFD main page. */
    readonly selectedMfdMainPageKey: Subscribable<string>;
    private readonly _selectedMfdNrstPageKey;
    /** The key of the currently selected MFD NRST page. */
    readonly selectedMfdNrstPageKey: Subscribable<string>;
    /** An array of IDs of the valid bezel rotary knobs supported by this service's parent GDU. */
    readonly validKnobIds: readonly UiKnobId[];
    private readonly paneKnobControlCode;
    private readonly _pfdPaneKnobControlSide;
    /** The side(s) for which the PFD pane controls the bezel rotary knobs. */
    readonly pfdPaneKnobControlSide: Subscribable<number>;
    private readonly _mfdPaneKnobControlSide;
    /** The side(s) for which the MFD pane controls the bezel rotary knobs. */
    readonly mfdPaneKnobControlSide: Subscribable<number>;
    private readonly _knobLabelState;
    /** This service's computed label state for the bezel rotary knobs. */
    readonly knobLabelState: Readonly<Record<UiKnobId, Subscribable<string>>>;
    private readonly selectedPfdPageKeyPipe;
    private readonly selectedPfdPageKeySub;
    private _isAwake;
    private _isInitialized;
    private areViewStackContainersAttached;
    /**
     * Creates a new instance of UiService.
     * @param instrumentIndex The index of this service's parent instrument.
     * @param config The general avionics configuration object.
     * @param instrumentConfig The configuration object of this service's parent instrument.
     * @param bus The event bus.
     * @param isPfdPaneVisible A {@link MutableSubscribable} which controls whether this service's parent instrument's
     * PFD UI pane is visible.
     * @param isMfdPaneVisible A {@link MutableSubscribable} which controls whether this service's parent instrument's
     * MFD UI pane is visible.
     * @param displaySettingManager A manager for display user settings for this service's parent instrument.
     */
    constructor(instrumentIndex: number, config: AvionicsConfig, instrumentConfig: InstrumentConfig, bus: EventBus, isPfdPaneVisible: MutableSubscribable<boolean>, isMfdPaneVisible: MutableSubscribable<boolean>, displaySettingManager: UserSettingManager<DisplayUserSettingTypes>);
    /**
     * Attaches containers to this service's view stacks.
     * @param pfdContainer The container to which to attach the PFD view stack.
     * @param mfdContainer The container to which to attach the MFD view stack.
     * @throws Error if this service's view stacks have already been attached to containers.
     */
    attachViewStackContainers(pfdContainer: UiViewStackContainer, mfdContainer: UiViewStackContainer): void;
    /**
     * Registers and renders a view with this service's PFD view stack. Once a view is registered, it may be opened by
     * referencing its key.
     * @param layer The view stack layer to which to assign the view.
     * @param lifecyclePolicy The lifecycle policy to apply to the view.
     * @param key The key to register the view under.
     * @param factory A function which renders the view.
     * @throws Error if the specified key is invalid.
     */
    registerPfdView(layer: UiViewStackLayer, lifecyclePolicy: UiViewLifecyclePolicy, key: string, factory: (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode): void;
    /**
     * Registers and renders a view with this service's MFD view stack. Once a view is registered, it may be opened by
     * referencing its key.
     * @param layer The view stack layer to which to assign the view.
     * @param lifecyclePolicy The lifecycle policy to apply to the view.
     * @param key The key to register the view under.
     * @param factory A function which renders the view.
     * @throws Error if the specified key is invalid.
     */
    registerMfdView(layer: UiViewStackLayer, lifecyclePolicy: UiViewLifecyclePolicy, key: string, factory: (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode): void;
    /**
     * Initializes this service.
     * @throws Error if this service's view stacks are not attached to containers.
     */
    initialize(): void;
    /**
     * Wakes this service.
     */
    wake(): void;
    /**
     * Puts this service to sleep.
     */
    sleep(): void;
    /**
     * Enters the startup phase. When entering the startup phase, the MFD pane is made visible (split screen if this
     * service's parent instrument is operating as a PFD, and full screen if operating as an MFD), all popups on both
     * panes are closed, and the MFD startup view is opened.
     */
    enterStartupPhase(): void;
    /**
     * Exits the startup phase. When exiting the startup phase, the full/split screen mode defined by the
     * `displayStartupSplitMode` user setting is applied, and if the MFD pane is visible the MFD main view is opened.
     */
    exitStartupPhase(): void;
    /**
     * Sets whether this service is operating in reversionary mode.
     * @param isReversionaryMode Whether this service is operating in reversionary mode.
     */
    setReversionaryMode(isReversionaryMode: boolean): void;
    /**
     * Updates this service's PFD view stack. Has no effect if this service is not initialized or is asleep.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    updatePfdViewStack(time: number): void;
    /**
     * Updates this service's MFD view stack. Has no effect if this service is not initialized or is asleep.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    updateMfdViewStack(time: number): void;
    /**
     * Opens the MFD pane. This method does nothing if the MFD pane is already visible.
     * @param openMfdPageKey The MFD view page to open if the MFD pane is made visible as a result of this operation.
     * Defaults to `UiViewKeys.MfdMain`.
     */
    openMfdPane(openMfdPageKey?: string): void;
    /**
     * Toggles whether the UI panes should be displayed in split mode.
     * @param force The split mode state to which to toggle (`true` = split, `false` = full). If not defined, then the
     * state will be toggled to the opposite of the current state.
     * @param openMfdPageKey The MFD view page to open if the MFD pane is made visible as a result of turning split mode
     * on. Defaults to `UiViewKeys.MfdMain`.
     * @throws Error if this service is not initialized.
     */
    toggleSplitPaneMode(force?: boolean, openMfdPageKey?: string): void;
    /**
     * Sets whether the UI panes should be displayed in split mode.
     * @param split Whether to display the UI panes in split mode.
     * @param openMfdPageKey The MFD view page to open if the MFD pane is made visible as a result of turning split mode
     * on. If not defined, then the empty page will remain open on the MFD view stack if the MFD pane is made visible.
     * @throws Error if this service is not initialized.
     */
    private setSplitPaneMode;
    /**
     * Opens a PFD view as a popup. The opened view will be brought to the top of the view stack.
     * @param key The key of the view to open.
     * @param closeOtherPopups Whether to close other popups before opening the new popup. If `true` and the new popup
     * is opened in the overlay layer, then all popups in the overlay layer will be closed. If `true` and the new popup
     * is opened in the main layer, then all popups in both the main and overlay layers will be closed. Defaults to
     * `false`.
     * @param popupOptions Options describing how to open the popup. If not defined, then the popup will default to type
     * `'normal'` and with a background occlusion type of `'darken'`.
     * @returns The entry of the opened view.
     * @throws Error if this service is not initialized, the specified key is equal to `UiViewKeys.EmptyPage`, there is
     * no view registered under the specified key, or the view to open is already open.
     */
    openPfdPopup<T extends UiView = UiView>(key: string, closeOtherPopups?: boolean, popupOptions?: Readonly<UiPopupOpenOptions>): RenderedUiViewEntry<T>;
    /**
     * Returns to the most recent previous history state of the PFD view stack. If the PFD pane is not visible, then this
     * method does nothing.
     * @returns The active view entry in the PFD view stack after the operation is complete, or `null` if the PFD pane is
     * not visible.
     * @throws Error if this service is not initialized.
     */
    goBackPfd(): RenderedUiViewEntry | null;
    /**
     * Attempts to return to a previous history state of the PFD view stack. If the PFD pane is not visible, then this
     * method does nothing.
     * @param selector A function which selects the history state to which to return. The function is called once for
     * each history state in order of increasing age and takes two arguments: the number of steps from the present state
     * to the selected state and a function which allows one to peek into the selected state's view stack. The function
     * should return `true` if the operation should return to the selected state and `false` otherwise. If the function
     * returns `false` for every selected state, then the operation is aborted.
     * @returns The active view entry in the MFD view stack after the operation is complete, or `null` if the MFD pane is
     * not visible after the operation is complete.
     * @throws Error if this service is not initialized.
     */
    goBackToPfd(selector: (steps: number, stackPeeker: (depth: number) => UiViewStackItem | undefined) => boolean): RenderedUiViewEntry | null;
    /**
     * Attempts to close a popup in the PFD view stack by rewinding the history state of the view stack until the target
     * popup is no longer open. If the PFD pane is not visible, then this method does nothing.
     * @param filter A filter function which takes in a popup with the specified key and returns whether it is
     * the popup to close.
     * @returns `true` if the specified popup was closed, or `false` if the popup was not open in the first place.
     * @throws Error if this service is not initialized.
     */
    closePfdPopup<F extends RenderedUiViewEntry = RenderedUiViewEntry>(filter: (popup: F) => boolean): boolean;
    /**
     * Returns to the most recent history state of the PFD view stack in which the view stack contains no open popups. If
     * the PFD pane is not visible, then this method does nothing.
     * @returns The active view entry in the PFD view stack after the operation is complete, or `null` if the PFD pane is
     * not visible.
     * @throws Error if this service is not initialized.
     */
    closeAllPfdPopups(): RenderedUiViewEntry | null;
    /**
     * Resets the state of the MFD pane such that the open page and active view is a page with a given key. First, an
     * attempt is made to rewind the history state of the MFD pane until the above conditions are met. If this is not
     * possible, then the history state is rewound until only the empty page is open and then the page with the specified
     * key is opened. If the MFD pane is not visible, then this method does nothing.
     * @param key The key of the page view to which to reset.
     * @returns The entry of the page view to which the MFD pane was reset, or `null` if the MFD pane is not visible.
     * @throws Error if this service is not initialized, the specified key is equal to `UiViewKeys.EmptyPage`, or there
     * is no view registered under the specified key.
     */
    resetMfdToPage<T extends UiView = UiView>(key: string): RenderedUiViewEntry<T> | null;
    /**
     * Changes the open MFD page. Changing the page also closes all open MFD popups. If the MFD pane is not visible, then
     * this method does nothing.
     * @param key The key of the view to open.
     * @returns The entry of the opened view, or `null` if the MFD pane is not visible.
     * @throws Error if this service is not initialized, the specified key is equal to `UiViewKeys.EmptyPage`, there is
     * no view registered under the specified key, or the view to open is already open.
     */
    changeMfdPage<T extends UiView = UiView>(key: string): RenderedUiViewEntry<T> | null;
    /**
     * Opens an MFD view as a popup. The opened view will be brought to the top of its view stack layer.
     * @param layer The view stack layer in which to open the view.
     * @param key The key of the view to open.
     * @param closeOtherPopups Whether to close other popups before opening the new popup. If `true` and the new popup
     * is opened in the overlay layer, then all popups in the overlay layer will be closed. If `true` and the new popup
     * is opened in the main layer, then all popups in both the main and overlay layers will be closed. Defaults to
     * `false`.
     * @param popupOptions Options describing how to open the popup. If not defined, then the popup will default to type
     * `'normal'` and with a background occlusion type of `'darken'`.
     * @returns The entry of the opened view.
     * @throws Error if this service is not initialized, the specified key is equal to `UiViewKeys.EmptyPage`, there is
     * no view registered under the specified key, or the view to open is already open.
     */
    openMfdPopup<T extends UiView = UiView>(layer: UiViewStackLayer, key: string, closeOtherPopups?: boolean, popupOptions?: Readonly<UiPopupOpenOptions>): RenderedUiViewEntry<T>;
    /**
     * Returns to the most recent previous history state of the MFD view stack. If the MFD pane is not visible, then this
     * method does nothing.
     * @param closeMfdPaneIfEmpty Whether to close the MFD pane if possible should there be no previous history state to
     * which to return or should the operation result in the MFD view stack containing no open views except the empty
     * page. Defaults to `true`.
     * @returns The active view entry in the MFD view stack after the operation is complete, or `null` if the MFD pane is
     * not visible after the operation is complete.
     * @throws Error if this service is not initialized.
     */
    goBackMfd(closeMfdPaneIfEmpty?: boolean): RenderedUiViewEntry | null;
    /**
     * Attempts to return to a previous history state of the MFD view stack. If the MFD pane is not visible, then this
     * method does nothing.
     * @param selector A function which selects the history state to which to return. The function is called once for
     * each history state in order of increasing age and takes two arguments: the number of steps from the present state
     * to the selected state and a function which allows one to peek into the selected state's view stack. The function
     * should return `true` if the operation should return to the selected state and `false` otherwise. If the function
     * returns `false` for every selected state, then the operation is aborted.
     * @param closeMfdPaneIfEmpty Whether to close the MFD pane if possible should the operation result in the MFD view
     * stack containing no open views except the empty page. Defaults to `true`.
     * @returns The active view entry in the MFD view stack after the operation is complete, or `null` if the MFD pane is
     * not visible after the operation is complete.
     * @throws Error if this service is not initialized.
     */
    goBackToMfd(selector: (steps: number, stackPeeker: (depth: number) => UiViewStackItem | undefined) => boolean, closeMfdPaneIfEmpty?: boolean): RenderedUiViewEntry | null;
    /**
     * Attempts to close a popup in the MFD view stack by rewinding the history state of the view stack until the target
     * popup is no longer open. If the MFD pane is not visible, then this method does nothing.
     * @param filter A filter function which takes in a popup with the specified key and returns whether it is
     * the popup to close.
     * @param closeMfdPaneIfEmpty Whether to close the MFD pane if possible should the operation result in the MFD view
     * stack containing no open views except the empty page. Defaults to `true`.
     * @returns `true` if the specified popup was closed, or `false` if the popup was not open in the first place.
     * @throws Error if this service is not initialized.
     */
    closeMfdPopup<F extends RenderedUiViewEntry = RenderedUiViewEntry>(filter: (popup: F) => boolean, closeMfdPaneIfEmpty?: boolean): boolean;
    /**
     * Returns to the most recent history state of the MFD view stack in which the overlay layer contains no open views.
     * If the MFD pane is not visible, then this method does nothing.
     * @param closeMfdPaneIfEmpty Whether to close the MFD pane if possible should the operation result in the MFD view
     * stack containing no open views except the empty page. Defaults to `true`.
     * @returns The active view entry in the MFD view stack after the operation is complete, or `null` if the MFD pane is
     * not visible after the operation is complete.
     * @throws Error if this service is not initialized.
     */
    closeAllMfdOverlayViews(closeMfdPaneIfEmpty?: boolean): RenderedUiViewEntry | null;
    /**
     * Returns to the most recent history state of the MFD view stack in which the MFD view stack contains no open
     * popups. If the MFD pane is not visible, then this method does nothing.
     * @param closeMfdPaneIfEmpty Whether to close the MFD pane if possible should the operation result in the MFD view
     * stack containing no open views except the empty page. Defaults to `true`.
     * @returns The active view entry in the MFD view stack after the operation is complete, or `null` if the MFD pane is
     * not visible after the operation is complete.
     * @throws Error if this service is not initialized.
     */
    closeAllMfdPopups(closeMfdPaneIfEmpty?: boolean): RenderedUiViewEntry | null;
    /**
     * Selects an MFD main page to display.
     * @param key The key of the page to select.
     */
    selectMfdMainPage(key: string): void;
    /**
     * Selects an MFD NRST page to display.
     * @param key The key of the page to select.
     */
    selectMfdNrstPage(key: string): void;
    /**
     * Responds to when the key of the selected PFD page changes.
     * @param key The key of the new selected PFD page.
     */
    private onSelectedPfdPageKeyChanged;
    /**
     * Updates this service's bezel rotary knob label state.
     * @param state The current input state for the knob label state.
     * @param state."0" The current knob control code.
     * @param state."1" The current knob label state requested by the PFD pane.
     * @param state."2" The current knob label state requested by the MFD pane.
     */
    private updateKnobLabelState;
    /**
     * Sets the bezel rotary knob label state based on a requested state and its corresponding knob control side flags.
     * @param controlSide The knob control side flags that determine which knob(s) are controlled by the requested knob
     * label state.
     * @param requestedState The requested knob label state to apply.
     */
    private setKnobLabelState;
    /**
     * Responds to when an H event is triggered.
     * @param hEvent The triggered H event.
     */
    private onHEvent;
    /**
     * Responds to when a UI interaction event is triggered.
     * @param event The triggered interaction event.
     */
    private onUiInteractionEvent;
    /**
     * Routes a UI interaction event to a pane.
     * @param handler The interaction handler for the pane to which to route the event.
     * @param event The event to route.
     * @param knobControlSide The bezel rotary knob control side flags for the pane to which to route the event.
     * @returns Whether the event was handled.
     */
    private routeInteractionEventToPane;
    /**
     * Converts a global knob control code to knob control side flags for a pane.
     * @param pane The pane for which to get knob control side flags.
     * @param code The global knob control code to convert.
     * @returns The knob control side flags for the specified pane corresponding to the specified global knob control code.
     */
    private static knobControlCodeToSide;
    /**
     * Converts a pair of pane knob control side flags to a global knob control code.
     * @param pfd The knob control side flags for the PFD pane.
     * @param mfd The knob control side flags for the MFD pane.
     * @returns The global knob control code corresponding to the specified knob control side flags.
     */
    private static knobControlSidesToCode;
}

/**
 * Component props for UiView.
 */
interface UiViewProps extends ComponentProps {
    /** The UI service instance. */
    uiService: UiService;
    /** A reference to the root element of the view's container. */
    containerRef: NodeReference<HTMLElement>;
}
/**
 * A view which displays content in a view stack.
 */
interface UiView<P extends UiViewProps = UiViewProps> extends DisplayComponent<P>, UiInteractionHandler {
    /** The bezel rotary knob label state requested by this view. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    /**
     * Responds to when this view is opened.
     * @param sizeMode The new size mode of this view's container.
     * @param dimensions The new dimensions of this view's container, as `[width, height]` in pixels.
     */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this view is closed.
     */
    onClose(): void;
    /**
     * Responds to when this view is resumed.
     */
    onResume(): void;
    /**
     * Responds to when this view is paused.
     */
    onPause(): void;
    /**
     * Responds when this view's container is resized while it is open.
     * @param sizeMode The new size mode of this view's container.
     * @param dimensions The new dimensions of this view's container, as `[width, height]` in pixels.
     */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when the occlusion type applied to this view changes while this view is open.
     * @param occlusionType The new occlusion type applied to this view.
     */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * An abstract implementation of {@link UiView}.
 */
declare abstract class AbstractUiView<P extends UiViewProps = UiViewProps> extends DisplayComponent<P> implements UiView<P> {
    protected readonly _knobLabelState: FilteredMapSubject<UiKnobId, string>;
    /** @inheritDoc */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    protected readonly focusController: UiFocusController;
    /**
     * Creates a new focus controller for this view.
     * @returns A new focus controller.
     */
    protected createFocusController(): UiFocusController;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link GenericUiFocusableComponent}.
 */
interface GenericUiFocusableComponentProps extends ComponentProps {
    /** Whether the component can be focused. Defaults to `true`. */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** A function which is called after the component is rendered. */
    onAfterRender?: (thisNode: VNode) => void;
    /** A function which is called when the component is registered with a controller. */
    onRegistered?: (controller: UiFocusController) => void;
    /** A function which is called when the component is deregistered with a controller. */
    onDeregistered?: (controller: UiFocusController) => void;
    /** A function which is called when the component gains focus. */
    onFocusGained?: (direction: UiFocusDirection) => void;
    /** A function which is called when the component loses focus. */
    onFocusLost?: () => void;
    /**
     * A function which handles interaction events routed to the component. If not defined, then the component will not
     * handle any events.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent) => boolean;
    /** A function which is called when the component is destroyed. */
    onDestroy?: () => void;
}
/**
 * A generic implementation of `UiFocusableComponent` which renders its children as-is and defers callback logic to
 * functions passed to its props.
 */
declare class GenericUiFocusableComponent extends DisplayComponent<GenericUiFocusableComponentProps> implements UiFocusableComponent {
    private thisNode?;
    private parentController?;
    /** @inheritDoc */
    readonly isUiFocusableComponent = true;
    /** @inheritDoc */
    readonly canBeFocused: Subscribable<boolean> | Subscribable<false> | Subscribable<true>;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Attempts to set focus on this component.
     * @param direction The direction from which to set focus. Defaults to `UiFocusDirection.Unspecified`.
     */
    focusSelf(direction?: UiFocusDirection): void;
    /** @inheritDoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onDeregistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritDoc */
    onFocusLost(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Member properties of a {@link GenericUiView}.
 */
type GenericUiViewMembers = {
    /** The bezel rotary knob label state requested by the view. */
    readonly knobLabelState: MutableSubscribableMap<UiKnobId, string> & MutableSubscribable<ReadonlyMap<UiKnobId, string>, Iterable<readonly [UiKnobId, string]>>;
    /** The view's UI focus controller. */
    readonly focusController: UiFocusController;
};
/**
 * Component props for {@link GenericUiView}.
 */
interface GenericUiViewProps extends UiViewProps {
    /**
     * A function which creates the view's UI focus controller. If not defined, then a default focus controller will be
     * created.
     */
    createFocusController?: () => UiFocusController;
    /** A function which is called after the view is rendered. */
    onAfterRender?: (thisNode: VNode, members: GenericUiViewMembers) => void;
    /** A function which is called when the view is opened. */
    onOpen?: (sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array, members: GenericUiViewMembers) => void;
    /** A function which is called when the view is closed. */
    onClose?: (members: GenericUiViewMembers) => void;
    /** A function which is called when the view is resumed. */
    onResume?: (members: GenericUiViewMembers) => void;
    /** A function which is called when the view is paused. */
    onPause?: (members: GenericUiViewMembers) => void;
    /** A function which is called when the view is resized while it is open. */
    onResize?: (sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array, members: GenericUiViewMembers) => void;
    /** A function which is called when the occlusion type applied to the view changes while the view is open. */
    onOcclusionChange?: (occlusionType: UiViewOcclusionType, members: GenericUiViewMembers) => void;
    /** A function which is called every update cycle. */
    onUpdate?: (time: number, members: GenericUiViewMembers) => void;
    /**
     * A function which handles interaction events routed to the view. If not defined, then the view will delegate
     * interaction event handling to its UI focus controller.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent, members: GenericUiViewMembers) => boolean;
    /** A function which is called when the view is destroyed. */
    onDestroy?: () => void;
}
/**
 * A generic implementation of `UiView` which renders its children as-is and defers callback logic to
 * functions passed to its props.
 */
declare class GenericUiView extends AbstractUiView<GenericUiViewProps> {
    private thisNode?;
    private readonly members;
    /** @inheritDoc */
    protected createFocusController(): UiFocusController;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A dialog view which accepts requests for values.
 */
interface UiDialogView<Input, Output> {
    /**
     * Requests a value from this dialog.
     * @param input Input parameters defining the request.
     * @returns A Promise which is fulfilled with the result of the request. The result will indicate whether the
     * request was cancelled, and if the request was not cancelled, it will also contain the requested value.
     */
    request(input: Input): Promise<UiDialogResult<Output>>;
}
/**
 * A result of a cancelled request from a {@link UiDialogView}.
 */
type UiDialogResultCancelled = {
    /** Indicates that the dialog was cancelled. */
    wasCancelled: true;
};
/**
 * A result of a successful request from a {@link UiDialogView}.
 */
type UiDialogResultSubmitted<T> = {
    /** Indicates that the dialog was not cancelled. */
    wasCancelled: false;
    /** This result's data payload. */
    payload: T;
};
/**
 * A result of a request from a {@link UiDialogView}.
 */
type UiDialogResult<T> = UiDialogResultCancelled | UiDialogResultSubmitted<T>;
/**
 * A utility type which extracts the input type of a {@link UiDialogView}.
 */
type UiDialogInputType<Dialog extends UiDialogView<any, any>> = Dialog extends UiDialogView<infer Input, any> ? Input : never;
/**
 * A utility type which extracts the output type of a {@link UiDialogView}.
 */
type UiDialogOutputType<Dialog extends UiDialogView<any, any>> = Dialog extends UiDialogView<any, infer Output> ? Output : never;

/**
 * A mapper of H events to {@link UiInteractionEvent|UiInteractionEvents}.
 */
declare class UiInteractionMapper {
    private readonly instrumentIndex;
    private static readonly MAP;
    private readonly hEventPrefix;
    /**
     * Creates a new instance of UiInteractionMapper.
     * @param instrumentIndex The index of the instrument for which this mapper maps events.
     */
    constructor(instrumentIndex: number);
    /**
     * Maps an H event to its corresponding {@link UiInteractionEvent}.
     * @param hEvent The H event to map.
     * @returns The {@link UiInteractionEvent} corresponding to the specified H event, or `undefined` if the H event
     * could not be mapped.
     */
    mapEvent(hEvent: string): UiInteractionEvent | undefined;
}

/**
 * A utility class for working with UI interaction events.
 */
declare class UiInteractionUtils {
    static readonly KNOB_EVENT_TO_KNOB_ID: {
        readonly SingleKnobOuterInc: UiKnobId.SingleOuter;
        readonly SingleKnobOuterDec: UiKnobId.SingleOuter;
        readonly SingleKnobInnerInc: UiKnobId.SingleInner;
        readonly SingleKnobInnerDec: UiKnobId.SingleInner;
        readonly SingleKnobPress: UiKnobId.SingleInnerPush;
        readonly SingleKnobPressLong: UiKnobId.SingleInnerPush;
        readonly LeftKnobOuterInc: UiKnobId.LeftOuter;
        readonly LeftKnobOuterDec: UiKnobId.LeftOuter;
        readonly LeftKnobInnerInc: UiKnobId.LeftInner;
        readonly LeftKnobInnerDec: UiKnobId.LeftInner;
        readonly LeftKnobPress: UiKnobId.LeftInnerPush;
        readonly LeftKnobPressLong: UiKnobId.LeftInnerPush;
        readonly RightKnobOuterInc: UiKnobId.RightOuter;
        readonly RightKnobOuterDec: UiKnobId.RightOuter;
        readonly RightKnobInnerInc: UiKnobId.RightInner;
        readonly RightKnobInnerDec: UiKnobId.RightInner;
        readonly RightKnobPress: UiKnobId.RightInnerPush;
        readonly RightKnobPressLong: UiKnobId.RightInnerPush;
    };
    /**
     * Checks if an interaction event originated from a bezel rotary knob.
     * @param event The event to check.
     * @returns Whether the specified event originated from a bezel rotary knob.
     */
    static isKnobEvent(event: UiInteractionEvent): event is UiKnobInteractionEvent;
    /**
     * Gets the turn direction for a bezel rotary knob turn event.
     * @param event The event for which to get the turn direction.
     * @returns The turn direction for the specified bezel rotary knob turn event.
     */
    static getKnobTurnDirection(event: UiKnobTurnInteractionEvent): 1 | -1;
}

/**
 * A utility class for working with G3X Touch bezel rotary knobs.
 */
declare class UiKnobUtils {
    /** An array of all bezel rotary knob IDs. */
    static readonly ALL_KNOB_IDS: readonly [UiKnobId.SingleOuter, UiKnobId.SingleInner, UiKnobId.SingleInnerPush, UiKnobId.LeftOuter, UiKnobId.LeftInner, UiKnobId.LeftInnerPush, UiKnobId.RightOuter, UiKnobId.RightInner, UiKnobId.RightInnerPush];
    /** An array of outer bezel rotary knob IDs. */
    static readonly OUTER_KNOB_IDS: readonly [UiKnobId.SingleOuter, UiKnobId.LeftOuter, UiKnobId.RightOuter];
    /** An array of inner bezel rotary knob IDs. */
    static readonly INNER_KNOB_IDS: readonly [UiKnobId.SingleInner, UiKnobId.SingleInnerPush, UiKnobId.LeftInner, UiKnobId.LeftInnerPush, UiKnobId.RightInner, UiKnobId.RightInnerPush];
    /** An array of IDs of bezel rotary knobs that can be turned. */
    static readonly TURN_KNOB_IDS: readonly [UiKnobId.SingleOuter, UiKnobId.SingleInner, UiKnobId.LeftOuter, UiKnobId.LeftInner, UiKnobId.RightOuter, UiKnobId.RightInner];
    /** An array of IDs of bezel rotary knobs that can be pushed. */
    static readonly PUSH_KNOB_IDS: readonly [UiKnobId.SingleInnerPush, UiKnobId.LeftInnerPush, UiKnobId.RightInnerPush];
    /** Mappings from G3X Touch bezel rotary knob IDs to the groups to which they belong. */
    static readonly KNOB_ID_TO_KNOB_GROUP: UiKnobIdGroupMap;
    /**
     * Checks if a bezel rotary knob ID belongs to an outer knob.
     * @param knobId The bezel rotary knob ID to check.
     * @returns Whether the specified bezel rotary ID belongs to an outer knob.
     */
    static isOuterKnobId(knobId: UiKnobId): knobId is UiOuterKnobId;
    /**
     * Checks if a bezel rotary knob ID belongs to an inner knob.
     * @param knobId The bezel rotary knob ID to check.
     * @returns Whether the specified bezel rotary ID belongs to an inner knob.
     */
    static isInnerKnobId(knobId: UiKnobId): knobId is UiInnerKnobId;
    /**
     * Checks if a bezel rotary knob ID belongs to a knob that can be turned.
     * @param knobId The bezel rotary knob ID to check.
     * @returns Whether the specified bezel rotary ID belongs to a knob that can be turned.
     */
    static isTurnKnobId(knobId: UiKnobId): knobId is UiTurnKnobId;
    /**
     * Checks if a bezel rotary knob ID belongs to a knob that can be pushed.
     * @param knobId The bezel rotary knob ID to check.
     * @returns Whether the specified bezel rotary ID belongs to a knob that can be pushed.
     */
    static isPushKnobId(knobId: UiKnobId): knobId is UiPushKnobId;
    /**
     * Reconciles one or more requested knob label states and pipes the result into a {@link MutableSubscribableMap} of
     * knob label states.
     * @param knobIds The IDs of the knobs for which to reconcile label states.
     * @param pipeTo The map to which to pipe the reconciled requested label states.
     * @param paused Whether to initialize the label state pipe as paused.
     * @param requestedStates The requested knob label states to reconcile. Requested states that appear earlier in the
     * array have a higher priority. In other words, for each knob, the reconciled state will be selected from one of the
     * requested states if and only if no requested state with a lower index has requested a label for the same knob.
     * @returns A {@link Subscription} representing the created reconciled knob label state pipe.
     */
    static reconcileRequestedLabelStates(knobIds: readonly UiKnobId[], pipeTo: MutableSubscribableMap<UiKnobId, string>, paused: boolean, ...requestedStates: Subscribable<UiKnobRequestedLabelState>[]): Subscription;
}

/**
 * Size modes for UI panes.
 */
declare enum UiPaneSizeMode {
    Full = "Full",
    Half = "Half",
    Hidden = "Hidden"
}

/**
 * Component props for UiPane.
 */
interface UiPaneProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The index of the pane. */
    index: 1 | 2;
    /** The size mode of the pane. */
    sizeMode: Subscribable<UiPaneSizeMode>;
    /** The size of the pane's content area in full mode, as `[width, height]` in pixels. */
    fullSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of the pane's content area in half mode, as `[width, height]` in pixels. */
    halfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** CSS class(es) to apply to the root element of the pane. */
    class?: string | SubscribableSet<string>;
}
/**
 * A UI pane which can be resized to be full-size, half-size, or hidden. Any {@link UiPaneContent} components that
 * are rendered as descendants of a UI pane will be notified of certain events related to the pane, including changes
 * to the pane's size, changes to its waking state, and update ticks.
 */
declare class UiPane extends DisplayComponent<UiPaneProps> {
    private static readonly RESERVED_CLASSES;
    private thisNode?;
    private readonly rootCssClass;
    private readonly fullSize;
    private readonly halfSize;
    private readonly contents;
    private wasVisible;
    private isAlive;
    private _isAwake;
    private cssClassSub?;
    private sizeModeSub?;
    private fullSizeSub?;
    private halfSizeSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Parses this pane's rendered descendants for {@link UiPaneContent} components.
     * @param thisNode This pane's rendered VNode root.
     */
    private parseContents;
    /**
     * Checks whether this pane is awake.
     * @returns Whether this pane is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this pane. This will resume this pane's active view (if one exists) and resume handling of display pane
     * view events.
     * @throws Error if this pane has been destroyed.
     */
    wake(): void;
    /**
     * Puts this pane to sleep. This will pause this pane's active view (if one exists) and suspend handling of display
     * pane view events.
     * @throws Error if this pane has been destroyed.
     */
    sleep(): void;
    /**
     * Updates this display pane. Has no effect if this display pane is not visible.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    update(time: number): void;
    /**
     * Responds to when this pane's size mode changes.
     * @param sizeMode The new size mode.
     */
    private onSizeModeChanged;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for UiPaneContainer.
 */
interface UiPaneContainerProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** The size of a pane's content area in full mode, as `[width, height]` in pixels. */
    paneFullSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of pane 1's content area in half mode, as `[width, height]` in pixels. */
    pane1HalfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The size of pane 2's content area in half mode, as `[width, height]` in pixels. */
    pane2HalfSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The update frequency of the container's panes. */
    updateFreq: number | Subscribable<number>;
    /** Whether to alternate updates every other update cycle for each pane while both panes are visible. Defaults to `false`. */
    alternateUpdatesInSplitMode?: boolean | Subscribable<boolean>;
    /** Whether pane 1 is visible. */
    isPane1Visible: Subscribable<boolean>;
    /** Whether pane 2 is visible. */
    isPane2Visible: Subscribable<boolean>;
    /** The content to render to pane 1. */
    pane1Content?: VNode;
    /** The content to render to pane 2. */
    pane2Content?: VNode;
    /** CSS class(es) to apply to the root element of the container. */
    class?: string | SubscribableSet<string>;
}
/**
 * A container for two UI panes. Automatically controls the size of each pane such that if both are visible, each is
 * sized as a half pane, and if only one is visible, it is sized as a full pane.
 */
declare class UiPaneContainer extends DisplayComponent<UiPaneContainerProps> {
    private static readonly SIZE_MODE_MAP;
    private readonly pane1Ref;
    private readonly pane2Ref;
    private readonly cssClassSet;
    private readonly pane1SizeMode;
    private readonly pane2SizeMode;
    private readonly paneState;
    private readonly isSplit;
    private readonly alternateUpdatesInSplitMode;
    private readonly updateFreq;
    private readonly updateClock;
    private tickCounter;
    private isAlive;
    private _isAwake;
    private cssClassSub?;
    private paneStateSub?;
    private updateFreqSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Checks whether this container is awake.
     * @returns Whether this container is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this container. This will wake this container's child panes and resume updates.
     * @throws Error if this container has been destroyed.
     */
    wake(): void;
    /**
     * Puts this container to sleep. This will put this container's child panes to sleep and pause updates.
     * @throws Error if this container has been destroyed.
     */
    sleep(): void;
    /**
     * Updates this container's panes.
     * @param time The current real (operating system) time, as a Javascript timestamp in milliseconds.
     */
    private update;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Content rendered inside a UI pane.
 */
interface UiPaneContent<P extends ComponentProps = ComponentProps> extends DisplayComponent<P> {
    /** Flags this component as a UiPaneContent. */
    readonly isUiPaneContent: true;
    /**
     * Responds to when this content is initially rendered to its parent pane.
     * @param sizeMode The size mode of this content's parent pane.
     * @param dimensions The dimensions of this content's parent pane, as `[width, height]` in pixels.
     */
    onInit(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this content's parent pane is made visible and awake.
     * @param sizeMode The size mode of this content's parent pane.
     * @param dimensions The dimensions of this content's parent pane, as `[width, height]` in pixels.
     */
    onResume(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this content's parent pane is made either hidden or asleep.
     */
    onPause(): void;
    /**
     * Responds when this content's parent pane is resized while it is visible and awake.
     * @param sizeMode The new size mode of this content's pane.
     * @param dimensions The new dimensions of this content's pane, as `[width, height]` in pixels.
     */
    onResize(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * Component props for UiPaneViewStackContainer.
 */
interface UiPaneViewStackContainerProps extends ComponentProps {
    /** A callback function to execute on every UI pane update cycle. */
    onUpdate?: (time: number) => void;
}
/**
 * A UI view stack container contained in a UI pane.
 */
declare class UiPaneViewStackContainer extends DisplayComponent<UiPaneViewStackContainerProps> implements UiPaneContent, UiViewStackContainer {
    /** @inheritdoc */
    readonly isUiPaneContent = true;
    /** @inheritdoc */
    readonly rootRef: NodeReference<HTMLElement>;
    private readonly layerRefs;
    private readonly _sizeChanged;
    /** @inheritdoc */
    readonly sizeChanged: SubEvent<UiViewStackContainer, void>;
    private viewSizeMode;
    private readonly dimensions;
    /** @inheritdoc */
    getSizeMode(): UiViewSizeMode;
    /** @inheritdoc */
    getDimensions(): ReadonlyFloat64Array;
    /** @inheritdoc */
    onInit(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onResume(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(sizeMode: UiPaneSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Handles when this container's parent pane changes size.
     * @param sizeMode The new size mode of this container's parent pane.
     * @param dimensions The new dimensions of this container's parent pane, as `[width, height]` in pixels.
     */
    private handleSizeChanged;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    renderView(layer: UiViewStackLayer, view: VNode): void;
    /** @inheritdoc */
    render(): VNode;
}

/**
 * Keys for standard G3X Touch UI views.
 */
declare enum UiViewKeys {
    EmptyPage = "EmptyPage",
    Startup = "Startup",
    PfdInstruments = "PfdInstruments",
    PfdMap = "PfdMap",
    PfdCharts = "PfdCharts",
    MfdMain = "MfdMain",
    MfdNrst = "MfdNrst",
    MainMenu = "MainMenu",
    PfdOptions = "PfdOptions",
    UserTimer = "UserTimer",
    Setup = "Setup",
    MapSetup = "MapSetup",
    DataBarSetup = "DataBarSetup",
    DataBarFieldEdit = "DataBarFieldEdit",
    DataBarFieldSelectDialog = "DataBarFieldSelectDialog",
    DisplaySetup = "DisplaySetup",
    UnitsSetup = "UnitsSetup",
    TimeSetup = "TimeSetup",
    SoundSetup = "SoundSetup",
    AudioPopup = "AudioPopup",
    AudioRadiosPopup = "AudioRadiosPopup",
    DirectTo = "DirectTo",
    PfdSetup = "PfdSetup",
    Transponder = "Transponder",
    AfcsControlsView = "AfcsControlsView",
    WaypointInfoPopup = "WaypointInfoPopup",
    MfdRadioVolumePopup = "MfdRadioVolumePopup",
    RadioVolumeShortcutPopup = "RadioVolumeShortcutPopup",
    BacklightIntensityPopup = "BacklightIntensityPopup",
    NoOptionsPopup = "NoOptionsPopup",
    ComFrequencyDialog = "ComFrequencyDialog",
    ComFindFrequencyDialog = "ComFindFrequencyDialog",
    ComFindFrequencyEditUserDialog = "ComFindFrequencyEditUserDialog",
    ComFindFrequencyAddUserDialog = "ComFindFrequencyAddUserDialog",
    UserFrequencyInputDialog = "UserFrequencyInputDialog",
    UserFrequencyNumberInputDialog = "UserFrequencyNumberInputDialog",
    UserFrequencyNameInputDialog = "UserFrequencyNameInputDialog",
    NavFrequencyDialog = "NavFrequencyDialog",
    NavFindFrequencyDialog = "NavFindFrequencyDialog",
    NavFindFrequencyEditUserDialog = "NavFindFrequencyEditUserDialog",
    NavFindFrequencyAddUserDialog = "NavFindFrequencyAddUserDialog",
    AirportFrequencyDialog = "AirportFrequencyDialog",
    WaypointDialog = "WaypointDialog",
    DuplicateWaypointDialog = "DuplicateWaypointDialog",
    SelectRadioDialog = "SelectRadioDialog",
    ApproachDialog = "ApproachDialog",
    ListDialog1 = "ListDialog1",
    MessageDialog1 = "MessageDialog1",
    GenericNumberUnitDialog1 = "GenericNumberUnitDialog1",
    SelectedAltitudeDialog = "SelectedAltitudeDialog",
    BaroPressureDialog = "BaroPressureDialog",
    BaroMinimumDialog = "BaroMinimumDialog",
    KeypadDialog = "Keypad",
    SelectedHeadingDialog = "SelectedHeadingDialog",
    SelectedCourseDialog = "SelectedCourseDialog",
    CourseDialog = "CourseDialog"
}

/**
 * A utility class for working with UI views.
 */
declare class UiViewUtils {
    /**
     * Sets the parameters of a positioned popup's opening options to align the popup with an element rendered in the
     * same view stack container.
     * @param options The popup opening options for which to set parameters.
     * @param container The root element of the popup's view stack container.
     * @param target The target element to which to align the popup.
     * @param popupReference The reference corner of the popup which will be aligned to the target element. Defaults to
     * `'top-left'`.
     * @param alignTo The edges of the target element to which to align the popup. Defaults to `'top-left'`.
     * @param xOffset The horizontal offset to apply to the popup's position after alignment, in pixels.
     * @param yOffset The vertical offset to apply to the popup's position after alignment, in pixels.
     * @returns The provided popup opening options, after its parameters have been set to align the popup in the
     * specified manner.
     */
    static alignPositionedPopupToElement(options: UiPositionedPopupOpenOptions, container: HTMLElement, target: HTMLElement, popupReference?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right', alignTo?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right', xOffset?: number, yOffset?: number): UiPositionedPopupOpenOptions;
}

/**
 * Fuel Calculator Props.
 *
 * Partial Fuel 1 & 2 – The Partial Fuel values may be used if the fuel tanks have ‘tabs’ or some other method
 * of putting in a known quantity of fuel (other than completely full tanks). If the Partial Fuel function is not
 * applicable or not desired, these settings can be left blank or set to zero.
 * */
interface G3XFuelCalculatorProps {
    /** The ui service.*/
    uiService: UiService;
    /** The partial 2 fuel tank capacity, in gallons.*/
    partialFuel1?: number;
    /** The partial 1 fuel tank capacity, in gallons.*/
    partialFuel2?: number;
}

/**
 * set of types that allowed for Gauge Spec configuration
 */
type G3XGaugeSpecConfig = G3XGaugeProps | G3XGaugeColumnProps | G3XGaugeRowProps | G3XTextElementProps | G3XFuelCalculatorProps;
/**
 * The specification for a single gauge configuration.
 */
type G3XGaugeSpec = {
    /** The type of gauge this is. */
    gaugeType: G3XGaugeType;
    /** Configuration for the gauge. */
    configuration: G3XGaugeSpecConfig;
};

/**
 * A definition for rendering a G3X Touch EIS.
 */
type G3XEisDefinition = {
    /** The size of the EIS. */
    size: EisSizes;
    /** Any configured functions. */
    functions: Map<string, G3XFunction>;
    /** The gauges configuration in default mode (when the MFD engine page is not visible). */
    defaultGauges: G3XGaugeSpec[];
    /**
     * The gauges configuration in combined mode (when the MFD engine page is visible), or `undefined` if combined mode
     * is not supported.
     */
    combinedGauges?: G3XGaugeSpec[];
};

/**
 * A configuration object which defines options related to the display of engine information.
 */
declare class EngineConfig implements Config {
    private readonly baseInstrument;
    private readonly functions;
    private readonly eisRootElement?;
    private readonly enginePageRootElement?;
    /** Whether to include an EIS. */
    readonly includeEis: boolean;
    /** The size of the EIS, or `undefined` if the EIS is not included. */
    readonly eisSize: EisSizes | undefined;
    /** Whether to include an MFD engine page. */
    readonly includeEnginePage: boolean;
    /**
     * Creates a new EngineConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses the EIS size option defined by a configuration document element.
     * @param element A configuration document element.
     * @returns The EIS size option defined by the configuration document element.
     */
    private parseEisSize;
    /**
     * Parses an EIS definition object from this config.
     * @param bus The event bus.
     * @returns The EIS definition object defined by this config, or `undefined` if the EIS is not to be included.
     */
    parseEis(bus: EventBus): G3XEisDefinition | undefined;
    /**
     * Parses an engine page definition object from this config.
     * @param bus The event bus.
     * @returns The engine page definition object defined by this config, or `undefined` if the engine page is not to be
     * included.
     */
    parseEnginePage(bus: EventBus): G3XEnginePageDefinition | undefined;
    /**
     * Parses definitions from a configuration document element and returns a copy of the element in which each
     * `<UseDefinition>` tag has been replaced with the contents of its associated definition.
     * @param element The configuration document element to parse.
     * @returns A copy of the specified element in which each `<UseDefinition>` tag has been replaced with the contents
     * of its associated definition.
     */
    private parseAndHydrateDefinitions;
    /**
     * Parses functions defined in a configuration document element.
     * @param element The configuration document element to parse.
     * @returns A map of functions defined by the specified element, keyed by function name.
     */
    private parseFunctions;
    /**
     * Make a function.
     * @param functionDef The XML definition for the function.
     * @returns an XMLFunction type or undefined if there's an error
     */
    private makeFunction;
    /**
     * Parses an MFD engine page tab definition from a configuration document element.
     * @param bus The event bus.
     * @param element A configuration document element.
     * @param index The index of the configuration document element among all those that define engine page tab
     * definitions.
     * @returns The MFD engine page tab definition defined by the specified configuration document element.
     */
    private parseEnginePageTabDefinition;
    /**
     * Parses an MFD engine page gauges definition from a configuration document element.
     * @param bus The event bus.
     * @param element A configuration document element.
     * @returns The MFD engine page gauges definition defined by the specified configuration document element.
     */
    private parseEnginePageGaugesDefinition;
    /**
     * Parse gauges configs from XML document.
     * @param bus The event bus.
     * @param config An instrument XML config document.
     * @returns An array of the gauges.
     */
    private parseGaugesConfig;
    /**
     * Construct a single column of text for a text element.  This can be any
     * one of Left, Right, or Center.
     * @param columnDef The XML definition for the given column.
     * @returns an XMLTextColumn configuration.
     */
    private makeTextColumn;
    /**
     * Create an array of color zones if a definition exists.
     * @param zones An array of color zone definitions.
     * @returns An array of G3XCylinderGaugeColorZone
     */
    private makeColorZones;
    /**
     * Maps color string enum into typescript enum for gauge color zones
     * @param color - The color string enum
     * @returns The typescript enum for gauge color zones
     * @throws Error if the color is invalid
     */
    private mapColorToZoneColorEnum;
    /**
     * Maps color string enum into typescript enum for gauge color lines
     * @param color - The color string enum
     * @returns The typescript enum for gauge color lines
     * @throws Error if the color is invalid
     */
    private mapColorToLineColorEnum;
    /**
     * Create an array of color lines if a definition exists.
     * @param lines An array of color line definitions.
     * @returns An array of XMLGaugeColorLine
     */
    private makeColorLines;
    /**
     * Create logic element
     * @param elementLogicDef - The XML definition for the logic element
     * @returns CompositeLogicXMLElement
     */
    private createLogicElement;
    /**
     * Create a base gauge definition.  This will be combined with the
     * props for a speciific gauge type to fully define the config interface.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseGaugeDefinition;
    /**
     * Create a circular gauge.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseCircularGaugeProps;
    /**
     * Parse linear gauge props.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseLinearGaugeProps;
    /**
     * Create a double vertical gauge.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseDoubleVerticalGaugeProps;
    /**
     * Create a gauge button.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseGaugeButtonProps;
    /**
     * Create a cylinder gauge.
     * @param bus The event bus.
     * @param gaugeDef An XML element defining the gauge.
     * @returns The props for this gauge.
     */
    private parseCylinderGaugeProps;
    /**
     * Create a row.
     * @param bus The event bus.
     * @param gaugeDef AN XML element defining the group.
     * @returns The props for the group with all contained columns.
     */
    private parseRowProps;
    /**
     * Create a column of gauges.
     * @param bus The event bus.
     * @param gaugeDef An XML element defining the column.
     * @returns The props of the column with all contained gauges.
     */
    private parseColumnProps;
    /**
     * Check the value of a setting and, if it's defined, assign it to the
     * property of an object with optional type conversion.
     * @param obj The object to manipulate.
     * @param elem The element to get the value from.
     * @param prop The name of the property to set.
     * @param tag The tag name to retrieve.
     * @param converter A type conversion used if the value is defined.
     */
    private static getAndAssign;
    /**
     * Create a basic XML style from a gauge definition.
     * @param styleElement The element with style definition.
     * @returns An G3XGaugeStyle
     */
    private static parseStyleDefinition;
    /**
     * Get the SmoothFactor value from a gauge definition if present.
     * @param element The HTML element to search for the parameter.
     * @returns The smoothing factor as a number, or undefined if not found.
     */
    private static parseSmoothFactor;
}

/**
 * Options for flight path calculations.
 */
type FmsFlightPathOptions = {
    /** The maximum bank angle, in degrees, to use to calculate turns while outside of low-bank mode. */
    maxBankAngle: number;
    /** The maximum bank angle, in degrees, to use to calculate turns while in low-bank mode. */
    lowBankAngle: number;
};
/**
 * A configuration object which defines FMS options.
 */
declare class FmsConfig implements Config {
    private static readonly DEFAULT_MAX_BANK_ANGLE;
    private static readonly DEFAULT_LOW_BANK_ANGLE;
    /** The index of the LNAV instance to use for the internal navigation source. */
    readonly lnavIndex: number;
    /** Whether the internal navigation source uses the sim's native OBS state. */
    readonly useSimObsState: boolean;
    /** The index of the VNAV instance to use for the internal navigation source. */
    readonly vnavIndex: number;
    /** Whether to sync the internal primary flight plan to the sim. */
    readonly syncToSim: boolean;
    /** Options for flight path calculations. */
    readonly flightPathOptions: FmsFlightPathOptions;
    /** A config that defines options for flight planning. */
    readonly flightPlanning: FmsFlightPlanningConfig;
    /**
     * Configs that define options for external flight plan data sources. The index of each config corresponds to the
     * index of the source's parent external navigator.
     */
    readonly externalFplSources: readonly (FmsExternalFplSourceConfig | undefined)[];
    /** The number of supported external flight plan data sources. */
    readonly externalFplSourceCount: 0 | 1 | 2;
    /**
     * Creates a new FmsConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
    /**
     * Parses flight path calculation options from a configuration document element.
     * @param element A configuration document element.
     * @returns The flight path calculation options defined by the configuration document element.
     */
    private parseFlightPathOptions;
    /**
     * Parses a flight planning configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The flight planning configuration object defined by the configuration document element.
     */
    private parseFlightPlanningConfig;
    /**
     * Parses external flight plan data source configuration objects from a configuration document element.
     * @param element A configuration document element.
     * @returns The external flight plan data source configuration objects defined by the configuration document element.
     */
    private parseExternalFplSourceConfigs;
}
/**
 * A configuration object which defines FMS flight planning options.
 */
declare class FmsFlightPlanningConfig implements Config {
    /** Whether flight planning calculations support the use of sensed fuel flow data. */
    readonly supportSensedFuelFlow: boolean;
    /** The type of fuel-on-board data used in flight planning calculations. */
    readonly fuelOnBoardType: 'sensed' | 'totalizer' | 'none';
    /**
     * Creates a new FmsFlightPlanningConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element | undefined);
}
/**
 * A configuration object which defines FMS external flight plan data source options.
 */
declare class FmsExternalFplSourceConfig implements Config {
    /** The index of the external flight plan data source's parent external navigator. */
    readonly index: G3XExternalNavigatorIndex;
    /** The flight planner ID of the external flight plan data source. */
    readonly flightPlannerId: string;
    /** The flight path calculator ID of the external flight plan data source. */
    readonly flightPathCalculatorId: string;
    /** The index of the LNAV instance to use for the external flight plan data source. */
    readonly lnavIndex: number;
    /** Whether the external flight plan data source uses the sim's native OBS state. */
    readonly useSimObsState: boolean;
    /**
     * The index of the VNAV instance to use for the external flight plan data source, or `-1` if the external flight
     * plan data source does not support VNAV.
     */
    readonly vnavIndex: number;
    /** The index of the autopilot guidance SimVars published by the external flight plan data source. */
    readonly apGuidanceIndex: number;
    /** The ID of the external flight plan data source's CDI. */
    readonly cdiId: string;
    /**
     * Creates a new FmsExternalFplSourceConfig from a configuration document element.
     * @param element A configuration document element.
     * @param internalLNavIndex The index of the LNAV instance used by the internal navigation source.
     * @param internalVNavIndex The index of the VNAV instance used by the internal navigation source.
     */
    constructor(element: Element, internalLNavIndex: number, internalVNavIndex: number);
}

/**
 * A definition for an FMS geo-positioning system.
 */
type FmsPositionDefinition = {
    /**
     * The indexes of the GPS receivers that can be used by this definition's FMS geo-positioning system to source
     * position data. The order of the indexes in the array determines the priority with which the receivers are selected
     * when two or more receivers are providing the position data quality.
     */
    gpsReceiverIndexes: readonly number[];
    /** The electrical logic for this definition's FMS geo-positioning system. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A configuration object which defines options related to GDUs.
 */
declare class GduDefsConfig implements Config {
    /** The number of GDUs installed in the plane. */
    readonly count: number;
    /**
     * GDU definitions. The index of each definition's position in the array corresponds to the index of its GDU.
     */
    readonly definitions: readonly GduConfig[];
    /**
     * Creates a new GduDefsConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses GDU definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of GDU definitions defined by the configuration document element.
     */
    private parseDefinitions;
}
/**
 * A configuration object which defines options related to a GDU.
 */
declare class GduConfig implements Config {
    /** The index of the GDU. */
    readonly index: number;
    /** The type of the GDU. */
    readonly type: InstrumentType;
    /** The type index of the GDU. */
    readonly typeIndex: number;
    /** The index of the default ADC used by the GDU. */
    readonly defaultAdcIndex: number;
    /** The index of the default AHRS used by the GDU. */
    readonly defaultAhrsIndex: number;
    /** The index of the sim altimeter used by the GDU. */
    readonly altimeterIndex: number;
    /** Whether the GDU supports altimeter baro preselect. */
    readonly supportBaroPreselect: boolean;
    /**
     * A definition describing the GDU's FMS geo-positioning system.
     */
    readonly fmsPosDefinition: Readonly<FmsPositionDefinition>;
    /**
     * Creates a new GduConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param defaultIndex The GDU index to assign to the config if one cannot be parsed from the configuration document
     * element. Defaults to `1`.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined, defaultIndex?: number);
    /**
     * Parses a FMS geo-positioning system definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The geo-positioning system definition defined by the configuration document element.
     */
    private parseFmsPositionDefinition;
}

/**
 * A definition for a radio.
 */
type RadioDefinition<SimIndexes extends number> = {
    /** The index of this definition's radio. */
    index: 1 | 2;
    /** The sim index of this definition's radio. */
    simIndex: SimIndexes;
    /** The electrical logic for this definition's radio. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for a COM radio.
 */
type ComRadioDefinition = RadioDefinition<ComRadioIndex>;
/**
 * A definition for a NAV radio.
 */
type NavRadioDefinition = RadioDefinition<NavRadioIndex> & {
    /** Whether the G3X should manage the auto-slew function for the radio. */
    supportAutoSlew: boolean;
};
/**
 * A configuration object which defines options related to radios.
 */
declare class RadiosConfig implements Config {
    /** The number of com radios supported by the plane. */
    readonly comCount: 0 | 1 | 2;
    /** The number of nav radios supported by the plane. */
    readonly navCount: 0 | 1 | 2;
    /** Whether the plane has a marker beacon. */
    readonly hasMarkerBeacon: boolean;
    /**
     * Com radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly comDefinitions: readonly Readonly<ComRadioDefinition>[];
    /**
     * Nav radio definitions. The index of each definitions's position in the array corresponds to the index of its radio.
     */
    readonly navDefinitions: readonly (Readonly<NavRadioDefinition> | undefined)[];
    /**
     * Creates a new RadiosConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses com radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of com radio definitions defined by the configuration document element.
     */
    private parseComDefinitions;
    /**
     * Parses NAV radio definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param expectedCount The expected number of NAV radio definitions.
     * @returns An array of NAV radio definitions defined by the configuration document element.
     */
    private parseNavDefinitions;
}

/**
 * A definition for an ADC.
 */
type AdcDefinition = {
    /** The index of the sim airspeed indicator used by this definition's ADC. */
    airspeedIndicatorIndex: number;
    /** The electrical logic for this definition's ADC. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for an AHRS.
 */
type AhrsDefinition = {
    /** The index of the sim attitude indicator used by this definition's AHRS. */
    attitudeIndicatorIndex: number;
    /** The index of the sim direction indicator used by this definition's AHRS. */
    directionIndicatorIndex: number;
    /** The electrical logic for this definition's AHRS. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A base definition for a GPS receiver.
 */
type BaseGpsReceiverDefinition = {
    /** The index of this definition's GPS receiver. */
    index: number;
    /** The electrical logic for this definition's GPS receiver. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for an internal GPS receiver.
 */
type InternalGpsReceiverDefinition = BaseGpsReceiverDefinition & {
    /** The type of this definition's GPS receiver. */
    type: 'internal';
    /** The index of the GPS receiver's parent GDU. */
    gduIndex: number;
};
/**
 * A definition for an external GPS receiver.
 */
type ExternalGpsReceiverDefinition = BaseGpsReceiverDefinition & {
    /** The type of this definition's GPS receiver. */
    type: 'external';
    /** Whether the G3X should instantiate the primary instance of the GPS receiver's `GPSSatComputer`. */
    isPrimary: boolean;
    /** Whether the GPS receiver supports SBAS. */
    supportSbas: boolean;
    /** Configuration options for the GPS receiver's `GPSSatComputer`. */
    options?: Readonly<GPSSatComputerOptions>;
};
/**
 * A definition for an external navigator GPS receiver.
 */
type ExternalNavigatorGpsReceiverDefinition = BaseGpsReceiverDefinition & {
    /** The type of this definition's GPS receiver. */
    type: 'external-navigator';
    /** The index of the GPS receiver's parent external navigation source. */
    externalSourceIndex: 1 | 2;
    /** Whether the GPS receiver supports SBAS. */
    supportSbas: boolean;
    /** Configuration options for the GPS receiver's `GPSSatComputer`. */
    options?: Readonly<GPSSatComputerOptions>;
};
/**
 * A definition for a GPS receiver.
 */
type GpsReceiverDefinition = InternalGpsReceiverDefinition | ExternalGpsReceiverDefinition | ExternalNavigatorGpsReceiverDefinition;
/**
 * A definition for a radar altimeter.
 */
type RadarAltimeterDefinition = {
    /** The electrical logic for this definition's radar altimeter. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for a marker beacon receiver.
 */
type MarkerBeaconDefinition = {
    /** The electrical logic for this definition's marker beacon receiver. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for an angle of attack computer.
 */
type AoaDefinition = {
    /** The electrical logic for this definition's angle of attack computer. */
    electricity?: CompositeLogicXMLElement;
};
/**
 * A definition for a weather radar.
 */
type WeatherRadarDefinition = {
    /** The angular width, in degrees, of the horizontal scan of this definition's weather radar. */
    horizontalScanWidth: number;
    /** Whether the extended 16-color scale is supported for this definition's weather radar.  */
    supportExtendedColors: boolean;
    /** The minimum gain setting, in dBZ. */
    minGain: number;
    /** The maximum gain setting, in dBZ. */
    maxGain: number;
    /** The electrical logic for this definition's weather radar. */
    electricity?: CompositeLogicXMLElement;
    /** The index of the circuit to switch on when the weather radar is actively scanning. */
    scanActiveCircuitIndex?: number;
    /** The index of the `system.cfg` electrical procedure to use the change the active radar scan circuit switch state. */
    scanActiveCircuitProcedureIndex?: number;
};
/**
 * A configuration object which defines options related to various aircraft sensors.
 */
declare class SensorsConfig implements Config {
    /** The number of ADCs supported by the plane. */
    readonly adcCount: number;
    /** The number of AHRS supported by the plane. */
    readonly ahrsCount: number;
    /**
     * ADC definitions. The index of each definition's position in the array corresponds to the index of its ADC.
     */
    readonly adcDefinitions: readonly Readonly<AdcDefinition>[];
    /**
     * AHRS definitions. The index of each definition's position in the array corresponds to the index of its AHRS.
     */
    readonly ahrsDefinitions: readonly Readonly<AhrsDefinition>[];
    /**
     * GPS receiver definitions. The index of each definition's position in the array corresponds to the index of its GPS
     * receiver.
     */
    readonly gpsReceiverDefinitions: readonly Readonly<GpsReceiverDefinition>[];
    /** An angle of attack computer definition. */
    readonly aoaDefinition: Readonly<AoaDefinition>;
    /** An optional radar altimeter definition. */
    readonly radarAltimeterDefinition?: Readonly<RadarAltimeterDefinition>;
    /** Whether this configuration defines a radar altimeter. */
    get hasRadarAltimeter(): boolean;
    /** A marker beacon receiver definition. */
    readonly markerBeaconDefinition: Readonly<MarkerBeaconDefinition>;
    /** An optional weather radar definition. */
    readonly weatherRadarDefinition?: Readonly<WeatherRadarDefinition>;
    /** Whether this configuration defines a weather radar. */
    get hasWeatherRadar(): boolean;
    /**
     * Creates a new SensorsConfig from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     */
    constructor(baseInstrument: BaseInstrument, element: Element | undefined);
    /**
     * Parses ADC definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of ADC definitions defined by the configuration document element.
     */
    private parseAdcDefinitions;
    /**
     * Parses AHRS definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of AHRS definitions defined by the configuration document element.
     */
    private parseAhrsDefinitions;
    /**
     * Parses AHRS definitions from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns An array of AHRS definitions defined by the configuration document element.
     */
    private parseGpsReceiverDefinitions;
    /**
     * Parses a definition for an internal GPS receiver from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param index The index of the GPS receiver.
     * @returns The internal GPS receiver definition defined by the configuration document element, or `undefined` if a
     * definition could not be parsed.
     */
    private parseInternalGpsReceiverDefinition;
    /**
     * Parses a definition for an external GPS receiver from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param index The index of the GPS receiver.
     * @returns The external GPS receiver definition defined by the configuration document element, or `undefined` if a
     * definition could not be parsed.
     */
    private parseExternalGpsReceiverDefinition;
    /**
     * Parses a definition for an external navigator GPS receiver from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @param index The index of the GPS receiver.
     * @returns The external navigator GPS receiver definition defined by the configuration document element, or
     * `undefined` if a definition could not be parsed.
     */
    private parseExternalNavigatorGpsReceiverDefinition;
    /**
     * Parses an angle of attack computer definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The angle of attack computer definition defined by the configuration document element, or `undefined` if
     * there is no such definition.
     */
    private parseAoaDefinition;
    /**
     * Parses a radar altimeter definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The radar altimeter definition defined by the configuration document element, or `undefined` if there is
     * no such definition.
     */
    private parseRadarAltimeterDefinition;
    /**
     * Parses a marker beacon receiver definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The marker beacon receiver definition defined by the configuration document element, or `undefined` if
     * there is no such definition.
     */
    private parseMarkerBeaconDefinition;
    /**
     * Parses a weather radar definition from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The weather radar definition defined by the configuration document element, or `undefined` if there is
     * no such definition.
     */
    private parseWeatherRadarDefinition;
    private static readonly GPS_SAT_COMPUTER_OPTIONS;
    private static readonly GPS_SATELLITE_TIMING_OPTIONS;
    /**
     * Parses a `GPSSatComputerOptions` object from JSON-formatted text.
     * @param text The text to parse.
     * @returns The `GPSSatComputerOptions` object defined by the specified text, or `undefined` if such an object could
     * not be parsed.
     */
    private static parseGPSSatComputerOptions;
}

/**
 * A configuration object which defines options for G3X Touch avionics systems.
 */
declare class AvionicsConfig {
    private readonly factory;
    /** A config that defines options for aural alerts. */
    readonly auralAlerts: AuralAlertsConfig;
    /** A config that defines FMS options. */
    readonly fms: FmsConfig;
    /** A config that defines options for GDUs. */
    readonly gduDefs: GduDefsConfig;
    /** A config that defines options for sensors. */
    readonly sensors: SensorsConfig;
    /** A config that defines options for radios. */
    readonly radios: RadiosConfig;
    /** A config that defines transponder options. */
    readonly transponder?: TransponderConfig;
    /** A config that defines options for audio. */
    readonly audio: AudioConfig;
    /** A config that defines options for the autopilot, or `undefined` if coupling to an autopilot is not supported. */
    readonly autopilot?: AutopilotConfig;
    /** A config that defines options for the avionics' traffic system. */
    readonly traffic: TrafficConfig;
    /** A config that defines options for maps. */
    readonly map: MapConfig;
    /** A config that defines options for the display of engine information. */
    readonly engine: EngineConfig;
    /** A config which defines the system annunciations. */
    readonly annunciations: readonly Annunciation[];
    /**
     * Creates an AvionicsConfig from an XML configuration document.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param config An XML configuration document.
     */
    constructor(baseInstrument: BaseInstrument, config: Document);
    /**
     * Parses an aural alerts configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The aural alerts configuration defined by the configuration document element.
     */
    private parseAuralAlerts;
    /**
     * Parses an FMS configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The FMS configuration defined by the configuration document element.
     */
    private parseFms;
    /**
     * Parses a sensors configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The sensors configuration defined by the configuration document element.
     */
    private parseSensorsConfig;
    /**
     * Parses a GDU definitions configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The GDU definitions configuration defined by the configuration document element.
     */
    private parseGduDefsConfig;
    /**
     * Parses a radios configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The radios configuration defined by the configuration document element.
     */
    private parseRadiosConfig;
    /**
     * Parses a transponder configuration object from a configuration document.
     * @param element A configuration document element.
     * @returns The transponder configuration object defined by the configuration document.
     */
    private parseTransponderConfig;
    /**
     * Parses an audio configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The audio configuration defined by the configuration document element.
     */
    private parseAudioConfig;
    /**
     * Parses an autopilot configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The autopilot configuration defined by the configuration document element.
     */
    private parseAutopilotConfig;
    /**
     * Parses a traffic configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The traffic configuration defined by the configuration document element.
     */
    private parseTrafficConfig;
    /**
     * Parses a map configuration object from a configuration document element.
     * @param element A configuration document element.
     * @returns The map configuration defined by the configuration document element.
     */
    private parseMapConfig;
    /**
     * Parses an engine configuration object from a configuration document element.
     * @param baseInstrument The `BaseInstrument` element associated with the configuration.
     * @param element A configuration document element.
     * @returns The engine configuration defined by the configuration document element.
     */
    private parseEngineConfig;
}

/**
 * A controller for G3X Touch navigation data bar editing state.
 */
declare class G3XNavDataBarEditController {
    private readonly _isEditingActive;
    /** Whether editing is active. */
    readonly isEditingActive: Subscribable<boolean>;
    private readonly _editingIndex;
    /** The index of the data field currently being edited, or `-1` if there is no such data field. */
    readonly editingIndex: Subscribable<number>;
    /**
     * Activates editing.
     */
    activateEditing(): void;
    /**
     * Deactivates editing. This will set the index of the data field being edited to `-1`.
     */
    deactivateEditing(): void;
    /**
     * Sets the index of the data field currently being edited. Has no effect if editing is not active.
     * @param index The index to set, or `-1` to set no data field being edited.
     */
    setEditingIndex(index: number): void;
}

/**
 * G3X Touch flight plan sources.
 */
declare enum G3XFplSource {
    /** The internal flight plan source is selected and in use. */
    Internal = "Internal",
    /** The internal flight plan source is in use as a reversion due to unavailability of the external flight plan source. */
    InternalRev = "InternalRev",
    /** The external flight plan source is selected and the first external source is in use. */
    External1 = "External1",
    /** The external flight plan source is selected and the second external source is in use. */
    External2 = "External2"
}
/**
 * Valid indexes for G3X Touch external flight plan sources.
 */
type G3XExternalFplSourceIndex = G3XExternalNavigatorIndex;

/**
 * Configuration options for an external flight plan data source for {@link G3XFms}.
 */
type G3XFmsExternalFplSourceOptions = {
    /** The flight planner of the external flight plan data source. */
    flightPlanner: FlightPlanner;
    /**
     * The vertical path calculator to use with the external flight plan data source, or `undefined` if the external
     * source does not support VNAV.
     */
    verticalPathCalculator?: VNavPathCalculator;
    /** The index of the LNAV instance used by the external flight plan data source. */
    lnavIndex: number;
    /** Whether the external flight plan data source uses the sim's native OBS state. */
    useSimObsState: boolean;
    /** The index of the VNAV instance used by the external flight plan data source. */
    vnavIndex: number;
    /** The ID of the CDI used by the external flight plan data source. */
    cdiId: string;
};
/**
 * Configuration options for {@link G3XFms}.
 */
type G3XFmsOptions = {
    /** The index of the LNAV computer associated with the FMS's active flight plan. */
    lnavIndex: number;
    /**
     * Whether the FMS's internal navigation source uses the sim's native OBS state. If `true`, then the sim's OBS state
     * as exposed through the event bus topics defined in `NavEvents` will be used, and standard sim OBS key events will
     * be used to control the state. If `false`, then the OBS state exposed through the event bus topics defined in
     * `LNavObsEvents` will be used, and control events defined in `LNavObsControlEvents` will be used to control the
     * state. Defaults to `true`.
     */
    useSimObsState: boolean;
    /**
     * Configuration options for external flight plan data sources, indexed by external source index. If not defined,
     * then external sources will not be supported.
     */
    externalFplSourceOptions?: readonly (Readonly<G3XFmsExternalFplSourceOptions> | undefined)[];
};
/**
 * A G3X Touch flight management system.
 */
declare class G3XFms {
    private readonly isPrimary;
    private readonly bus;
    private readonly publisher;
    /** The Garmin FMS instance to which this FMS delegates for its internal flight plan data source. */
    readonly internalFms: Fms<G3XFlightPlannerId>;
    /** The facility loader used by this FMS. */
    readonly facLoader: FacilityLoader;
    /** The internal flight planner used by this FMS. */
    readonly flightPlanner: FlightPlanner<G3XFlightPlannerId>;
    private readonly externalFms;
    private readonly currentFplSource;
    /**
     * Creates a new instance of G3XFms.
     * @param isPrimary Whether this FMS is the primary instance. Only the primary FMS will execute certain operations
     * that have global effects across the entire airplane.
     * @param bus The event bus.
     * @param flightPlanner The internal flight planner for the new FMS to use.
     * @param options Options with which to configure the FMS.
     */
    constructor(isPrimary: boolean, bus: EventBus, flightPlanner: FlightPlanner<G3XFlightPlannerId>, options: Readonly<G3XFmsOptions>);
    /**
     * Gets an event bus subscriber for topics published by this FMS.
     * @returns An event bus subscriber for topics published by this flight planner.
     */
    getInternalEventSubscriber(): EventSubscriber<FmsEventsForId<G3XFlightPlannerId>>;
    /**
     * Subscribes to one of the event bus topics published by this FMS.
     * @param baseTopic The base name of the topic to which to subscribe.
     * @returns A consumer for the specified event bus topic.
     */
    onInternalEvent<K extends keyof BaseFmsEvents>(baseTopic: K): Consumer<BaseFmsEvents[K]>;
    /**
     * Attempts to retrieve the Garmin FMS instance to which this FMS delegates for an external flight plan source.
     * @param index The index of the external flight plan source for which to retrieve an FMS.
     * @returns The Garmin FMS instance to which this FMS delegates for the specified external flight plan source, or
     * `undefined` if the external flight plan source is not supported.
     */
    tryGetExternalFms(index: G3XExternalFplSourceIndex): Fms | undefined;
    /**
     * Retrieves the Garmin FMS instance to which this FMS delegates for an external flight plan source.
     * @param index The index of the external flight plan source for which to retrieve an FMS.
     * @returns The Garmin FMS instance to which this FMS delegates for the specified external flight plan source.
     * @throws Error if the external flight plan source is not supported.
     */
    getExternalFms(index: G3XExternalFplSourceIndex): Fms;
    /**
     * Gets the Garmin FMS instance for the current flight plan source.
     * @returns The Garmin FMS instance for the current flight plan source.
     */
    getCurrentFms(): Fms;
    /**
     * Initializes the primary flight plan for the internal flight plan source.
     * @param force Whether to force a new primary flight plan to be created, even if one already exists.
     */
    initPrimaryFlightPlan(force?: boolean): Promise<void>;
    /**
     * Checks whether an internal indexed flight plan exists.
     * @param index A flight plan index.
     * @returns Whether an internal flight plan at the specified index exists.
     */
    hasInternalFlightPlan(index: number): boolean;
    /**
     * Checks whether an external indexed flight plan exists.
     * @param sourceIndex The index of the external flight plan source to check.
     * @param index A flight plan index.
     * @returns Whether an external flight plan at the specified index exists.
     */
    hasExternalFlightPlan(sourceIndex: G3XExternalFplSourceIndex, index: number): boolean;
    /**
     * Checks whether an indexed flight plan exists for the current flight plan source.
     * @param index A flight plan index.
     * @returns Whether a flight plan at the specified index exists for the current flight plan source.
     */
    hasFlightPlan(index: number): boolean;
    /**
     * Gets a specified internal flight plan.
     * @param index The index of the flight plan. Defaults to the index of the primary flight plan.
     * @returns The requested internal flight plan.
     * @throws Error if no flight plan exists at the specified index.
     */
    getInternalFlightPlan(index?: number): FlightPlan;
    /**
     * Gets a specified external flight plan.
     * @param sourceIndex The index of the external flight plan source from which to get a flight plan.
     * @param index The index of the flight plan. Defaults to the index of the primary flight plan.
     * @returns The requested external flight plan.
     * @throws Error if the external flight plan source is not supported or if no flight plan exists at the specified
     * index.
     */
    getExternalFlightPlan(sourceIndex: G3XExternalFplSourceIndex, index?: number): FlightPlan;
    /**
     * Gets a specified flight plan from the current flight plan source.
     * @param index The index of the flight plan. Defaults to the index of the primary flight plan.
     * @returns The requested flight plan from the current flight plan source.
     * @throws Error if no flight plan exists at the specified index.
     */
    getFlightPlan(index?: number): FlightPlan;
    /**
     * Checks whether the primary flight plan exists for the internal flight plan source.
     * @returns Whether the primary flight plan exists for the internal flight plan source.
     */
    hasInternalPrimaryFlightPlan(): boolean;
    /**
     * Checks whether the primary flight plan exists for an external flight plan source.
     * @param index The index of the external flight plan source to check.
     * @returns Whether the primary flight plan exists for the specified external flight plan source.
     */
    hasExternalPrimaryFlightPlan(index: G3XExternalFplSourceIndex): boolean;
    /**
     * Checks whether the primary flight plan exists for the current flight plan source.
     * @returns Whether the primary flight plan exists for the current flight plan source.
     */
    hasPrimaryFlightPlan(): boolean;
    /**
     * Gets the primary flight plan for the internal flight plan source.
     * @returns The primary flight plan for the internal flight plan source.
     * @throws Error if the primary flight plan does not exist.
     */
    getInternalPrimaryFlightPlan(): FlightPlan;
    /**
     * Gets the primary flight plan for an external flight plan source.
     * @param index The index of the external flight plan source from which to get the flight plan.
     * @returns The primary flight plan for the specified external flight plan source.
     * @throws Error if the external flight plan source is not supported or if the primary flight plan does not exist.
     */
    getExternalPrimaryFlightPlan(index: G3XExternalFplSourceIndex): FlightPlan;
    /**
     * Gets the primary flight plan for the current flight plan source.
     * @returns The primary flight plan for the current flight plan source.
     * @throws Error if the primary flight plan does not exist.
     */
    getPrimaryFlightPlan(): FlightPlan;
    /**
     * Checks whether the off-route Direct-To flight plan exists for the internal flight plan source.
     * @returns Whether the off-route Direct-To flight plan exists for the internal flight plan source.
     */
    hasInternalDirectToFlightPlan(): boolean;
    /**
     * Checks whether the off-route Direct-To flight plan exists for an external flight plan source.
     * @param index The index of the external flight plan source to check.
     * @returns Whether the off-route Direct-To flight plan exists for the specified external flight plan source.
     */
    hasExternalDirectToFlightPlan(index: G3XExternalFplSourceIndex): boolean;
    /**
     * Checks whether the off-route Direct-To flight plan exists for the current flight plan source.
     * @returns Whether the off-route Direct-To flight plan exists for the current flight plan source.
     */
    hasDirectToFlightPlan(): boolean;
    /**
     * Gets the off-route Direct-To flight plan for the internal flight plan source.
     * @returns The off-route Direct-To flight plan for the internal flight plan source.
     * @throws Error if the off-route Direct-To flight plan does not exist.
     */
    getInternalDirectToFlightPlan(): FlightPlan;
    /**
     * Gets the off-route Direct-To flight plan for an external flight plan source.
     * @param index The index of the external flight plan source from which to get the flight plan.
     * @returns The off-route Direct-To flight plan for the specified external flight plan source.
     * @throws Error if the external flight plan source is not supported or if the off-route Direct-To flight plan does
     * not exist.
     */
    getExternalDirectToFlightPlan(index: G3XExternalFplSourceIndex): FlightPlan;
    /**
     * Gets the off-route Direct-To flight plan for the current flight plan source.
     * @returns The off-route Direct-To flight plan for the current flight plan source.
     * @throws Error if the off-route Direct-To flight plan does not exist.
     */
    getDirectToFlightPlan(): FlightPlan;
    /**
     * Checks whether the internal flight plans can be edited.
     * @returns Whether the internal flight plans can be edited.
     */
    canEdit(): boolean;
    /**
     * Gets the approach runway:
     * @returns Selected approach runway
     */
    getApproachRunway(): OneWayRunway | null;
    /**
     * Sets the name of an internal flight plan.
     * @param planIndex The index of the flight plan for which to set the name.
     * @param name The new name for the flight plan.
     */
    setFlightPlanName(planIndex: number, name: string): void;
    /**
     * Deletes the name of an internal flight plan.
     * @param planIndex The index of the flight plan for which to delete the name.
     */
    deleteFlightPlanName(planIndex: number): void;
    /**
     * Checks whether a leg in the primary flight plan can be manually activated.
     * @param segmentIndex The index of the segment in which the leg resides.
     * @param segmentLegIndex The index of the leg in its segment.
     * @returns Whether the leg can be manually activated.
     */
    canActivateLeg(segmentIndex: number, segmentLegIndex: number): boolean;
    /**
     * Checks whether a leg in the primary flight plan is a valid direct to target.
     * @param segmentIndex The index of the segment in which the leg resides.
     * @param segmentLegIndex The index of the leg in its segment.
     * @returns Whether the leg is a valid direct to target.
     * @throws Error if a leg could not be found at the specified location.
     */
    canDirectTo(segmentIndex: number, segmentLegIndex: number): boolean;
    /**
     * Gets the current Direct To State.
     * @returns the DirectToState.
     */
    getDirectToState(): DirectToState;
    /**
     * Gets the ICAO string of the current Direct To target.
     * @returns The ICAO string of the current Direct To target, or undefined if Direct To is not active.
     */
    getDirectToTargetIcao(): string | undefined;
    /**
     * Checks if a segment is the first enroute segment that is not an airway.
     * @param segmentIndex is the segment index of the segment to check
     * @returns whether or not the segment is the first enroute segment that is not an airway.
     */
    isFirstEnrouteSegment(segmentIndex: number): boolean;
    /**
     * Adds a user facility.
     * @param userFacility the facility to add.
     */
    addUserFacility(userFacility: UserFacility): void;
    /**
     * Removes a user facility.
     * @param userFacility the facility to remove.
     */
    removeUserFacility(userFacility: UserFacility): void;
    /**
     * Inserts a waypoint into the internal primary flight plan.
     * @param segmentIndex The index of the flight plan segment into which to insert the waypoint.
     * @param facility The waypoint facility to insert.
     * @param segmentLegIndex The index in the segment at which to insert the waypoint. If a leg already exists at the index,
     * the existing leg and all subsequent legs will be shifted to the right. If not defined, the waypoint will be
     * inserted at the end of the segment.
     * @returns The leg that was inserted into the flight plan, or `undefined` if the insertion operation could not be
     * carried out.
     */
    insertWaypoint(segmentIndex: number, facility: Facility, segmentLegIndex?: number): Promise<LegDefinition | undefined>;
    /**
     * Removes a leg to a waypoint from the internal primary flight plan.
     * @param segmentIndex The index of the segment containing the leg to remove.
     * @param segmentLegIndex The index of the leg to remove in its segment.
     * @returns Whether the waypoint was successfully removed.
     */
    removeWaypoint(segmentIndex: number, segmentLegIndex: number): Promise<boolean>;
    /**
     * Loads an approach into the internal primary flight plan.
     * @param facility The airport facility containing the published approach on which the VFR approach to load is
     * based.
     * @param approachIndex The index of the published approach on which the VFR approach to load is based.
     * @param activate Whether to immediately activate the approach after it has been loaded. Defaults to `false`.
     * @param isVtf Whether to activate the approach as a vectors-to-final (VTF) approach. Ignored if `activate` is
     * `false`. Defaults to `false`.
     * @returns A Promise which will be fulfilled with whether the specified approach was successfully loaded into the
     * flight plan.
     */
    loadApproach(facility: AirportFacility, approachIndex: number, activate?: boolean, isVtf?: boolean): Promise<boolean>;
    /**
     * Removes the approach that is currently loaded into the internal primary flight plan.
     */
    removeApproach(): Promise<void>;
    /**
     * Reconciles the origin and destination airport states of the internal primary flight plan.
     *
     * When reconciling the origin airport state, this method will move flight plan legs into and out of the departure
     * segment and set the flight plan's origin airport as appropriate to ensure that the first (non-approach) airport
     * waypoint in the flight plan is always considered to be the origin airport.
     *
     * When reconciling the destination airport state, this method will move flight plan legs into and out of the
     * destination segment and set the flight plan's destination airport as appropriate to ensure that when an approach
     * is not loaded, the last (non-origin) airport waypoint in the flight plan is always considered to be the
     * destination airport.
     */
    private reconcileOriginDestination;
    /**
     * Reconciles the origin airport state of the internal primary flight plan. This method will move flight plan legs
     * into and out of the departure segment and set the flight plan's origin airport as appropriate to ensure that the
     * first (non-approach) airport waypoint in the flight plan is always considered to be the origin airport.
     */
    private reconcileOrigin;
    /**
     * Reconciles the destination airport state of the internal primary flight plan. This method will move flight plan
     * legs into and out of the destination segment and set the flight plan's destination airport as appropriate to
     * ensure that when an approach is not loaded, the last (non-origin) airport waypoint in the flight plan is always
     * considered to be the destination airport.
     */
    private reconcileDestination;
    /**
     * Shifts a range of flight plan legs from their original segment to a prior segment.
     * @param plan The flight plan containing the legs to shift.
     * @param fromSegment The original segment containing the legs to shift.
     * @param endSegmentLegIndex The index of the leg in the original segment at which to stop shifting. Legs with
     * indexes in the range `[0, endSegmentLegIndex)` will be shifted.
     * @param toSegment The segment into which to shift the legs. If there are any non-empty segments between the
     * original and target segments, or if the target segment is not positioned before the original segment, then no legs
     * will be shifted.
     * @returns Whether at least one leg was shifted from the original segment to the target segment.
     */
    private shiftLegsToPriorSegment;
    /**
     * Shifts a range of flight plan legs from their original segment to a later segment.
     * @param plan The flight plan containing the legs to shift.
     * @param fromSegment The original segment containing the legs to shift.
     * @param startSegmentLegIndex The index of the leg in the original segment at which to start shifting. Legs with
     * indexes in the range `[startSegmentLegIndex, fromSegment.legs.length)` will be shifted.
     * @param toSegment The segment into which to shift the legs. If there are any non-empty segments between the
     * original and target segments, or if the target segment is not positioned after the original segment, then no legs
     * will be shifted.
     * @returns Whether at least one leg was shifted from the original segment to the target segment.
     */
    private shiftLegsToLaterSegment;
    /**
     * Inverts the internal primary flightplan.
     */
    invertFlightplan(): void;
    /**
     * Method to check whether an approach can load, or only activate.
     * @returns true if the approach can be loaded and not activated, otherwise the approach can only be immediatly activated.
     */
    canApproachLoad(): boolean;
    /**
     * Activates a flight plan leg for the internal flight plan source.
     * @param segmentIndex The index of the flight plan segment containing the leg to activate.
     * @param segmentLegIndex The index of the leg to activate in its containing segment.
     * @param planIndex The index of the flight plan containing the leg to activate. Defaults to the index of the primary
     * flight plan.
     * @param inhibitImmediateSequence Whether to inhibit immediate automatic sequencing past the activated leg. Defaults
     * to `false`.
     */
    activateLeg(segmentIndex: number, segmentLegIndex: number, planIndex?: number, inhibitImmediateSequence?: boolean): void;
    /**
     * Checks whether an approach can be activated. An approach can be activated if and only if the primary flight plan
     * has a non-vectors-to-final approach loaded.
     * @returns Whether an approach can be activated.
     */
    canActivateApproach(): boolean;
    private activateApproachOpId;
    /**
     * Activates the approach that is currently loaded into the internal primary flight plan. Activating the approach
     * will insert the approach legs into the internal primary flight plan and either activate an on-route Direct-To
     * targeting the faf (for non-vectors-to-final approaches) or activate the vectors-to-final leg to the faf (for
     * vectors-to-final approaches).
     * @param isVtf Whether to activate the approach as a vectors-to-final (VTF) approach.
     */
    activateApproach(isVtf: boolean): Promise<void>;
    /**
     * Creates and activates a Direct-To for the internal flight plan source. If the target fix does not appear in the
     * internal flight plan, then this will replace the primary flight plan with a single leg to the Direct-To's target
     * waypoint and create and activate a Direct-To targeting the waypoint. If the target fix does appear in the internal
     * flight plan, then this will create and activate an on-route Direct-To targeting the last occurrence of the target
     * fix in the flight plan.
     * @param target The Direct-To's target waypoint facility.
     * @param course The magnetic course for the Direct-To, in degrees. If not defined, then the Direct-To will be
     * initiated from the airplane's present position.
     */
    createDirectTo(target: Facility, course?: number): Promise<void>;
    /**
     * Cancels the currently active internal on-route or off-route Direct-To.
     * @returns Whether an active Direct-To was cancelled.
     */
    cancelDirectTo(): boolean;
    /**
     * Empties the internal primary flight plan.
     */
    emptyPrimaryFlightPlan(): Promise<void>;
    /**
     * Empties the internal primary flight plan and deletes its name.
     */
    deletePrimaryFlightPlan(): Promise<void>;
    /**
     * Resets all internal flight plans to their initial empty states, and cancels any active off-route Direct-To.
     */
    resetAllFlightPlans(): Promise<void>;
    /**
     * Activates the nearest and most applicable leg of the internal primary flight plan.
     * @param allowMissedApproach Whether to allow activation of missed approach legs. Defaults to `false`.
     * @returns Whether a leg was successfully activated.
     */
    activateNearestLeg(allowMissedApproach?: boolean): boolean;
    /**
     * Builds a flight plan to preview an approach procedure that can be loaded into the internal primary flight plan.
     * @param calculator The flight path calculator to assign to the preview plan.
     * @param facility The airport facility containing the published approach on which the VFR approach to preview is
     * based.
     * @param approachIndex The index of the published approach on which the VFR approach to preview is based.
     * @param isVtf Whether to preview the approach as a vectors-to-final (VTF) approach.
     * @returns A Promise which will be fulfilled with the preview plan after it has been built.
     */
    buildApproachPreviewPlan(calculator: FlightPathCalculator, facility: AirportFacility, approachIndex: number, isVtf: boolean): Promise<FlightPlan>;
}

/**
 * CNS data bar full/split mode button screen side setting modes.
 */
declare enum CnsDataBarModeButtonSideSettingMode {
    Auto = "Auto",
    Left = "Left",
    Right = "Right"
}
/**
 * CNS data bar screen side setting modes.
 */
declare enum CnsDataBarScreenSideSettingMode {
    Left = "Left",
    Right = "Right"
}
/**
 * CNS data bar button show setting modes.
 */
declare enum CnsDataBarShowSettingMode {
    Hide = "Hide",
    Left = "Left",
    Right = "Right"
}
/**
 * CNS data bar button size setting modes.
 */
declare enum CnsDataBarButtonSizeSettingMode {
    Normal = "Normal",
    Minimized = "Minimized"
}
/**
 * Aliased CNS data bar user settings.
 */
type CnsDataBarUserSettingTypes = NavDataBarSettingTypes & {
    /** The screen side on which to position the Full/Split button on the CNS data bar. */
    cnsDataBarSplitButtonSide: CnsDataBarModeButtonSideSettingMode;
    /** The screen side on which to position the COM radio buttons on the CNS data bar. */
    cnsDataBarComRadioScreenSide: CnsDataBarScreenSideSettingMode;
    /** The size mode with which to render the COM radio buttons on the CNS data bar. */
    cnsDataBarComRadioButtonSize: CnsDataBarButtonSizeSettingMode;
    /** The screen side on which to position the NAV radio buttons on the CNS data bar. */
    cnsDataBarNavRadioScreenSide: CnsDataBarScreenSideSettingMode;
    /** The size mode with which to render the NAV radio buttons on the CNS data bar. */
    cnsDataBarNavRadioButtonSize: CnsDataBarButtonSizeSettingMode;
    /** The screen side on which to position the audio panel button on the CNS data bar. */
    cnsDataBarAudioButtonScreenSide: CnsDataBarScreenSideSettingMode;
    /** The size mode with which to render the audio panel button on the CNS data bar. */
    cnsDataBarAudioButtonSize: CnsDataBarButtonSizeSettingMode;
    /** The screen side on which to position the transponder button on the CNS data bar. */
    cnsDataBarTransponderScreenSide: CnsDataBarScreenSideSettingMode;
    /** The screen side on which to show the user timer button. */
    cnsDataBarUserTimerShow: CnsDataBarShowSettingMode;
    /** The maximum number of visible CNS data bar fields. */
    cnsDataBarMaxFieldCount: number;
    /** Volume indicator mode for radio CNS data bar buttons. */
    cnsDataBarRadioVolumeShow: boolean;
    /** Volume Shortcut View mode. */
    cnsDataBarRadioVolumeShortcutShow: boolean;
};
/**
 * True CNS data bar user settings.
 */
type CnsDataBarTrueUserSettingTypes = {
    [P in keyof CnsDataBarUserSettingTypes as `${P}_g3x`]: CnsDataBarUserSettingTypes[P];
};
/**
 * A utility class for retrieving CNS data bar user setting managers.
 */
declare class CnsDataBarUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for CNS data bar user settings.
     * @param bus The event bus.
     * @returns a manager for CNS data bar user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<CnsDataBarUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased CNS data bar settings.
     * @returns The default values for a full set of aliased CNS data bar settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true CNS data bar settings.
     * @returns An array of definitions for true CNS data bar settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true CNS data bar settings.
     * @returns A setting name alias mapping from aliased to true CNS data bar settings.
     */
    private static getAliasMap;
}

/**
 * Component props for {@link Gdu460CnsDataBar}.
 */
interface Gdu460CnsDataBarProps extends ComponentProps {
    /** The FMS. */
    fms: G3XFms;
    /** UI controller service */
    uiService: UiService;
    /** The factory to use to create data models for the data bar's data fields. */
    navDataBarFieldModelFactory: NavDataBarFieldModelFactory;
    /** The renderer to use to render the data bar's data fields. */
    navDataBarFieldRenderer: NavDataFieldRenderer;
    /** The GPS validity state for nav data fields. */
    navDataFieldGpsValidity: Subscribable<NavDataFieldGpsValidity>;
    /** A controller for editing the data bar's data fields. */
    navDataBarEditController: G3XNavDataBarEditController;
    /** The general avionics configuration object. */
    config: AvionicsConfig;
    /** A manager for the CNS data bar user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A manager for the CNS data bar user settings. */
    dataBarSettingManager: UserSettingManager<CnsDataBarUserSettingTypes>;
    /** A manager for date/time user settings. */
    dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>;
    /** A user setting manager for measurement units. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * CNS Data bar component for the G3X Touch
 */
declare class Gdu460CnsDataBar extends DisplayComponent<Gdu460CnsDataBarProps> {
    private static readonly GDU460_COMPONENT_PRIORITIES;
    private static readonly GDU460_LEFT_COMPARATOR;
    private static readonly GDU460_RIGHT_COMPARATOR;
    private readonly cnsLeftItemsContainerRef;
    private readonly cnsRightItemsContainerRef;
    private leftItemsList;
    private rightItemsList;
    private readonly itemManager;
    private readonly dataFieldsRef;
    private readonly visibleDataFieldCount;
    private readonly isGpsLoi;
    private readonly isTimerRunning;
    private readonly timerValue;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the timer button is pressed.
     */
    private onTimerButtonPressed;
    /**
     * Renders a data bar item.
     * @param data Data describing the item to render.
     * @returns A rendered data bar item for the specified item data, as a VNode.
     */
    private renderItem;
    /**
     * Renders contents for a data bar item.
     * @param data Data describing the item to render.
     * @returns Data bar item contents for the specified item data, as a VNode.
     */
    private renderItemContent;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Types of CNS data bar items.
 */
declare enum CnsDataBarItemType {
    Split = "split",
    Com = "com",
    Nav = "nav",
    NavMinimized = "nav-minimized",
    ComMinimized = "com-minimized",
    Xpdr = "xpdr",
    Audio = "audio",
    AudioMinimized = "audio-minimized",
    AudioOnly = "audio-only",
    Timer = "timer"
}
/**
 * A definition describing a CNS data bar simple item.
 */
type CnsDataBarSimpleItemDef = {
    /** The type of the item. */
    type: CnsDataBarItemType.Split | CnsDataBarItemType.Xpdr | CnsDataBarItemType.Timer;
};
/**
 * A definition describing a CNS data bar radio item.
 */
type CnsDataBarRadioItemDef = {
    /** The index of the item's associated radio. */
    index: 1 | 2;
};
/**
 * A definition describing a CNS data bar COM radio item.
 */
type CnsDataBarComRadioItemDef = CnsDataBarRadioItemDef & {
    /** The type of the item. */
    type: CnsDataBarItemType.Com | CnsDataBarItemType.ComMinimized;
};
/**
 * A definition describing a CNS data bar NAV radio item.
 */
type CnsDataBarNavRadioItemDef = CnsDataBarRadioItemDef & {
    /** The type of the item. */
    type: CnsDataBarItemType.Nav | CnsDataBarItemType.NavMinimized;
};
/**
 * A definition describing a CNS data bar audio item.
 */
type CnsDataBarAudioItemDef = {
    /** The type of the item. */
    type: CnsDataBarItemType.Audio | CnsDataBarItemType.AudioOnly | CnsDataBarItemType.AudioMinimized;
    /** The shape of selection indicator. */
    shape: 'square' | 'triangle';
};
/**
 * A definition describing a CNS data bar item.
 */
type CnsDataBarItemDef = CnsDataBarSimpleItemDef | CnsDataBarComRadioItemDef | CnsDataBarNavRadioItemDef | CnsDataBarAudioItemDef;
/**
 * A dynamic list data object describing a rendered CNS data bar item.
 */
type CnsDataBarItemData<T extends CnsDataBarItemDef = CnsDataBarItemDef> = DynamicListData & T & {
    /** The width of the item, in pixels. */
    width: number;
};

/**
 * Configuration options for {@link Gdu460CnsDataBarItemManager}.
 */
type Gdu460CnsDataBarItemManagerOptions = {
    /** The number of supported COM radios. */
    comCount: 0 | 1 | 2;
    /** The number of supported NAV radios. */
    navCount: 0 | 1 | 2;
    /** Whether to include the audio panel button. */
    includeAudioButton: boolean;
    /**
     * The shape with which the audio panel button should render its MIC/COM indicators. Ignored if `includeAudioButton`
     * is `false`. Defaults to `'triangle'`.
     */
    audioButtonIndicatorShape?: 'square' | 'triangle';
    /** Whether to include the transponder button. */
    includeTransponder: boolean;
};
/**
 * A manager that keeps track of the items to render and display on a GDU 460 CNS data bar.
 */
declare class Gdu460CnsDataBarItemManager {
    private readonly uiService;
    private readonly displaySettingManager;
    private readonly dataBarSettingManager;
    private static readonly BAR_WIDTH;
    private static readonly ITEM_MARGIN;
    private static readonly DATA_FIELD_MIN_WIDTH;
    private static readonly isItemVisibleFromDisplayLocationMap;
    private readonly desiredDataFieldCount;
    private readonly splitItemSide;
    private readonly splitItem;
    private readonly timerItemSide;
    private readonly timerItem;
    private readonly comCount;
    private readonly isComVisible;
    private readonly com1ItemSide;
    private readonly isComMinimizedNominal;
    private readonly forceCom1Minimized;
    private readonly forceCom2Minimized;
    private readonly comRadioNormalItems;
    private readonly comRadioMinimizedItems;
    private readonly navCount;
    private readonly isNavVisible;
    private readonly nav1ItemSide;
    private readonly isNavMinimizedNominal;
    private readonly forceNav1Minimized;
    private readonly forceNav2Minimized;
    private readonly navRadioNormalItems;
    private readonly navRadioMinimizedItems;
    private readonly includeAudioButton;
    private readonly audioButtonIndicatorShape;
    private readonly isAudioVisible;
    private readonly audioItemSide;
    private readonly nominalAudioType;
    private readonly forceAudioMinimized;
    private readonly forceAudioOnly;
    private readonly audioItems;
    private readonly includeTransponder;
    private readonly isTransponderVisible;
    private readonly transponderItemSide;
    private readonly transponderItem;
    private readonly _leftItems;
    /** The CNS data bar items to render on the left side. */
    readonly leftItems: SubscribableArray<Readonly<CnsDataBarItemData>>;
    private readonly _rightItems;
    /** The CNS data bar items to render on the right side. */
    readonly rightItems: SubscribableArray<Readonly<CnsDataBarItemData>>;
    private readonly _maxDataFieldCount;
    /**
     * The maximum number of nav data fields that can be displayed on the CNS data bar given the currently rendered data
     * bar items.
     */
    readonly maxDataFieldCount: Subscribable<number>;
    private readonly subscriptions;
    /**
     * Creates a new instance of Gdu460CnsDataBarItemManager.
     * @param uiService The UI service.
     * @param displaySettingManager A manager for display user settings.
     * @param dataBarSettingManager A manager for CNS data bar user settings.
     * @param options Options with which to configure the manager.
     */
    constructor(uiService: UiService, displaySettingManager: UserSettingManager<DisplayUserSettingTypes>, dataBarSettingManager: UserSettingManager<CnsDataBarUserSettingTypes>, options: Readonly<Gdu460CnsDataBarItemManagerOptions>);
    /**
     * Creates a record of CNS data bar radio item data, keyed by radio index.
     * @param type The type of radio items to create.
     * @param isVisible Whether the radio items are visible.
     * @param isMinimizedNominal Whether the radio items should nominally be displayed as minimized.
     * @param force1Minimized Whether to force the item for radio 1 to be displayed as minimized.
     * @param force2Minimized Whether to force the item for radio 2 to be displayed as minimized.
     * @returns A record of CNS data bar radio item data, keyed by radio index.
     */
    private createRadioItems;
    /**
     * Creates a record of CNS data bar audio panel item data, keyed by item type.
     * @param isVisible Whether the audio panel item is visible.
     * @param nominalType The nominal displayed audio panel item type.
     * @param forceMinimized Whether to force the item to be displayed as minimized.
     * @param forceAudioOnly Whether to force the item to be displayed as audio-only.
     * @returns A record of CNS data bar audio panel item data, keyed by item type.
     */
    private createAudioItems;
    /**
     * Responds to when the side on which to render the User Timer item changes.
     * @param side The new side on which to render the User Timer item.
     */
    private onTimerItemSideChanged;
    /**
     * Responds to when the side on which to render the COM 1 radio item changes.
     * @param side The new side on which to render the COM 1 radio item.
     */
    private onCom1ItemSideChanged;
    /**
     * Responds to when the side on which to render the NAV 1 radio item changes.
     * @param side The new side on which to render the NAV 1 radio item.
     */
    private onNav1ItemSideChanged;
    /**
     * Responds to when the side on which to render the audio panel item changes.
     * @param side The new side on which to render the audio panel item.
     */
    private onAudioItemSideChanged;
    /**
     * Sets the side on which an item is rendered.
     * @param item The item to change.
     * @param side The side on which to render the item.
     */
    private setItemSide;
    /**
     * Ensures that all the currently rendered items fit properly on the data bar.
     */
    private reconcileItemFit;
    /**
     * Destroys this manager. Once destroyed, the manager will no longer automatically keep track of items to render and
     * display.
     */
    destroy(): void;
}

/**
 * Component props for {@link Gdu460Eis}.
 */
interface Gdu460EisProps extends ComponentProps {
    /** The UI service. */
    uiService: UiService;
    /** Whether the EIS's parent GDU supports an MFD engine page. */
    supportEnginePage: boolean;
    /** The logic host for the EIS's gauges. */
    xmlLogicHost: CompositeLogicXMLHost;
    /**
     * The definition for rendering the EIS parsed from `panel.xml`. If defined, then the definition will be used to
     * render the EIS's contents. If not defined, then the component's children will be rendered as the EIS's contents.
     */
    eisDefinition?: G3XEisDefinition;
}
/**
 * A GDU 460 EIS.
 */
declare class Gdu460Eis extends DisplayComponent<Gdu460EisProps> {
    private readonly buttonRef;
    private readonly isEnginePageOpen;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the user presses this EIS display.
     */
    private onPressed;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders the contents of this EIS.
     * @returns The contents of this EIS, as a VNode.
     */
    private renderContents;
    /**
     * Renders a set of gauges.
     * @param gauges The specifications for the gauges to render.
     * @returns The set of gauges defined by the specifications, as a VNode.
     */
    private renderGauges;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * G3X synthetic vision user settings.
 */
type G3XSynVisUserSettingTypes = Pick<SynVisUserSettingTypes, 'svtEnabled' | 'svtTrafficShow'> & {
    /** Whether to show the flight path marker. */
    svtFpmShow: boolean;
};
/**
 * Setting modes for flight director format.
 */
declare enum FlightDirectorFormatSettingMode {
    Single = "Single",
    Dual = "Dual"
}
/**
 * Flight director user settings.
 */
type FlightDirectorUserSettingTypes = {
    /** The format of the flight director. */
    flightDirectorFormat: FlightDirectorFormatSettingMode;
};
/**
 * Attitude indicator user settings.
 */
type AttitudeIndicatorUserSettingTypes = {
    /** Whether to show the standard rate turn bank angle pointers. */
    pfdStandardRateTurnPointerShow: boolean;
};
/**
 * Setting modes for angle of attack indicator display.
 */
declare enum AoaIndicatorDisplaySettingMode {
    Off = "Off",
    On = "On",
    Auto = "Auto"
}
/**
 * Angle of attack indicator user settings.
 */
type AoaIndicatorUserSettingTypes = {
    /** The display mode of the angle of attack indicator. */
    aoaDisplayMode: AoaIndicatorDisplaySettingMode;
};
/**
 * Setting modes for wind display options.
 */
declare enum WindDisplaySettingMode {
    Off = "Off",
    HeadXWind = "HeadXWind",
    SpeedDir = "SpeedDir"
}
/**
 * Wind display user settings.
 */
type WindDisplayUserSettingTypes = {
    /** The display mode of the wind display. */
    windDisplayMode: WindDisplaySettingMode;
};
/**
 * PFD inset user settings.
 */
type PfdInsetUserSettingTypes = {
    /** The key of the selected left PFD inset. */
    pfdInsetLeftKey: string;
    /** The key of the selected right PFD inset. */
    pfdInsetRightKey: string;
};
/**
 * Bearing pointer source modes.
 */
declare enum PfdBearingPointerSource {
    None = "None",
    Nav1 = "Nav1",
    Nav2 = "Nav2",
    Gps = "Gps",
    NearestAirport = "NearestAirport"
}
/**
 * PFD bearing pointer user settings.
 */
type PfdBearingPointerUserSettingTypes = {
    /** The data source of bearing pointer 1. */
    pfdBearingPointer1Source: PfdBearingPointerSource;
    /** The data source of bearing pointer 2. */
    pfdBearingPointer2Source: PfdBearingPointerSource;
};
/**
 * HSI orientation setting modes.
 */
declare enum PfdHsiOrientationSettingMode {
    Heading = "Heading",
    Auto = "Auto"
}
/**
 * PFD HSI user settings.
 */
type PfdHsiUserSettingTypes = {
    /** The data source of bearing pointer 1. */
    pfdHsiOrientationMode: PfdHsiOrientationSettingMode;
    /** Whether to show the upper lateral deviation indicator. */
    pfdHsiShowUpperDeviationIndicator: boolean;
};
/**
 * PFD knob action setting modes.
 */
declare enum PfdKnobActionSettingMode {
    HeadingAltitude = "Heading/Altitude",
    FdBugBaro = "FdBug/Baro",
    CourseBaro = "Course/Baro"
}
/**
 * PFD knob user settings.
 */
type PfdKnobUserSettingTypes = {
    /** The action bound to the knob on the split-screen side. */
    pfdKnobSplitScreenSideAction: PfdKnobActionSettingMode;
    /** Whether pressing a knob should temporarily toggle the action bound to the knob. */
    pfdKnobPressToToggleAction: boolean;
};
/**
 * Aliased PFD user settings.
 */
type PfdUserSettingTypes = G3XSynVisUserSettingTypes & FlightDirectorUserSettingTypes & AttitudeIndicatorUserSettingTypes & AoaIndicatorUserSettingTypes & WindDisplayUserSettingTypes & PfdInsetUserSettingTypes & PfdBearingPointerUserSettingTypes & PfdHsiUserSettingTypes & PfdKnobUserSettingTypes;
/**
 * True indexed PFD user settings for an indexed GDU.
 */
type PfdIndexedUserSettingTypes<Index extends number> = {
    [Name in keyof PfdUserSettingTypes as `${Name}_${Index}_g3x`]: PfdUserSettingTypes[Name];
};
/**
 * All true PFD user settings.
 */
type PfdAllUserSettingTypes = PfdIndexedUserSettingTypes<number>;
/**
 * A manager for PFD user settings.
 */
declare class PfdUserSettingManager implements UserSettingManager<PfdAllUserSettingTypes> {
    readonly gduCount: number;
    private static readonly INDEXED_SETTING_NAMES;
    private readonly manager;
    private readonly aliasedManagers;
    /**
     * Creates a new instance of PfdUserSettingManager.
     * @param bus The event bus.
     * @param gduCount The number of GDUs supported by this manager.
     */
    constructor(bus: EventBus, gduCount: number);
    /** @inheritDoc */
    tryGetSetting<K extends string>(name: K): K extends keyof PfdAllUserSettingTypes ? UserSetting<PfdAllUserSettingTypes[K]> : undefined;
    /** @inheritDoc */
    getSetting<K extends keyof PfdAllUserSettingTypes & string>(name: K): UserSetting<NonNullable<PfdAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    whenSettingChanged<K extends keyof PfdAllUserSettingTypes & string>(name: K): Consumer<NonNullable<PfdAllUserSettingTypes[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritDoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, PfdAllUserSettingTypes>): UserSettingManager<M & PfdAllUserSettingTypes>;
    /**
     * Gets a manager for aliased PFD user settings for an indexed GDU.
     * @param index The index of the GDU for which to get an aliased setting manager.
     * @returns A manager for aliased PFD user settings for the specified GDU.
     * @throws RangeError if `index` is less than 1 or greater than the number of GDUs supported by this manager.
     */
    getAliasedManager(index: number): UserSettingManager<PfdUserSettingTypes>;
    /**
     * Gets an array of definitions for true PFD settings for a single GDU.
     * @param index The index of the GDU.
     * @returns An array of definitions for true PFD settings for the specified GDU.
     */
    private static getIndexedSettingDefs;
    /**
     * Gets the default values for a full set of aliased indexed PFD settings.
     * @returns The default values for a full set of aliased indexed PFD settings.
     */
    private static getIndexedDefaultValues;
    /**
     * Gets a setting name alias mapping for a GDU.
     * @param index The index of the GDU.
     * @returns A setting name alias mapping for the specified GDU.
     */
    private static getAliasMap;
}

/**
 * Component props for {@link G3XAttitudeAircraftSymbol}.
 */
interface G3XAttitudeAircraftSymbolProps extends HorizonLayerProps {
    /** Whether to show the aircraft symbol. */
    show: Subscribable<boolean>;
    /** The symbol format to display. */
    format: AttitudeAircraftSymbolFormat | Subscribable<AttitudeAircraftSymbolFormat>;
    /** The color of the aircraft symbol. */
    color: AttitudeAircraftSymbolColor;
    /**
     * The span of the single cue aircraft symbol horizontal bars, as `[outerSpan, innerSpan]` in pixels. The outer and
     * inner spans are the horizontal distances from the center of the projection to the outer and inner edges of each
     * bar, respectively.
     */
    singleCueBarSpan: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
}
/**
 * An aircraft symbol for the PFD attitude indicator.
 */
declare class G3XAttitudeAircraftSymbol extends HorizonLayer<G3XAttitudeAircraftSymbolProps> {
    private readonly style;
    private readonly singleCueDisplay;
    private readonly dualCueDisplay;
    private readonly singleCueBarSpan;
    private readonly singleCueBarOutlinePath;
    private readonly singleCueBarLightPath;
    private readonly singleCueBarDarkPath;
    private showSub?;
    private formatSub?;
    private singleCueBarSpanSub?;
    /** @inheritDoc */
    protected onVisibilityChanged(isVisible: boolean): void;
    /** @inheritDoc */
    onAttached(): void;
    /** @inheritDoc */
    onProjectionChanged(projection: HorizonProjection, changeFlags: number): void;
    /**
     * Updates this symbol's single cue horizontal bar SVG paths.
     * @param span The span of the single cue horizontal bars, as `[outerSpan, innerSpan]` in pixels.
     */
    private updateSingleCueBarPaths;
    /**
     * Updates the position of this symbol.
     */
    private updatePosition;
    /** @inheritDoc */
    onDetached(): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders the single-cue aircraft symbol.
     * @returns The single-cue aircraft symbol, as a VNode.
     */
    private renderSingleCue;
    /**
     * Renders the dual-cue aircraft symbol.
     * @returns The dual-cue aircraft symbol, as a VNode.
     */
    private renderDualCue;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Styling options for the G3X Touch pitch ladder.
 */
type G3XPitchLadderStyles = {
    /** The increment, in degrees, between major pitch lines. */
    majorLineIncrement: number;
    /** The number of medium pitch lines for each major pitch line. */
    mediumLineFactor: number;
    /** The number of minor pitch lines for each medium pitch line. */
    minorLineFactor: number;
    /** The maximum pitch at which to draw minor pitch lines. */
    minorLineMaxPitch: number;
    /** The maximum pitch at which to draw medium pitch lines. */
    mediumLineMaxPitch: number;
    /** The length of minor pitch lines. */
    minorLineLength: number;
    /** The length of medium pitch lines. */
    mediumLineLength: number;
    /** The length of major pitch lines. */
    majorLineLength: number;
    /** Whether to show number labels for minor pitch lines. */
    minorLineShowNumber: boolean;
    /** Whether to show number labels for medium pitch lines. */
    mediumLineShowNumber: boolean;
    /** Whether to show number labels for major pitch lines. */
    majorLineShowNumber: boolean;
    /** The horizontal margin of each number label from its pitch line, in pixels. */
    numberMargin: number;
    /** The vertical offset of each number label, in pixels. */
    numberOffsetY: number;
    /** The minimum positive pitch value at which to display warning chevrons. */
    chevronThresholdPositive: number;
    /** The maximum negative pitch value at which to display warning chevrons. */
    chevronThresholdNegative: number;
    /** The length of the vertical component of major pitch lines, in pixels. */
    majorLineHeight: number;
};
/**
 * Options for {@link G3XPitchLadder}.
 */
type G3XPitchLadderOptions = {
    /** Styling options to apply when synthetic vision is disabled. */
    svtDisabledStyles: G3XPitchLadderStyles;
    /** Styling options to apply when synthetic vision is enabled. */
    svtEnabledStyles: G3XPitchLadderStyles;
};
/**
 * Component props for {@link G3XPitchLadder}.
 */
interface G3XPitchLadderProps extends HorizonLayerProps {
    /** Whether to show the pitch ladder. */
    show: Subscribable<boolean>;
    /** Whether synthetic vision is enabled. */
    isSVTEnabled: Subscribable<boolean>;
    /**
     * The clipping bounds of the pitch ladder, as `[left, top, right, bottom]` in pixels relative to the center of the
     * projection.
     */
    clipBounds: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** Options for the pitch ladder. */
    options: G3XPitchLadderOptions;
    /** Whether to include the display of unusual attitude warning chevrons. */
    includeUnusualAttitudeChevrons: boolean;
}
/**
 * A G3X Touch PFD pitch ladder. Displays major, medium, and minor pitch lines, each with optional pitch angle labels.
 * Also displays unusual attitude chevrons between major pitch lines above threshold positive and negative pitch
 * angles. Does not display a zero-pitch line.
 */
declare class G3XPitchLadder extends HorizonLayer<G3XPitchLadderProps> {
    private readonly svgRef;
    private readonly rootStyle;
    private readonly transform;
    private readonly clipBounds;
    private pitchResolution;
    private needUpdateClip;
    private needRebuildLadder;
    private needReposition;
    private showSub?;
    private clipBoundsSub?;
    private isChevronsEnabledSub?;
    /** @inheritdoc */
    protected onVisibilityChanged(isVisible: boolean): void;
    /** @inheritdoc */
    onAttached(): void;
    /** @inheritdoc */
    onProjectionChanged(projection: HorizonProjection, changeFlags: number): void;
    /** @inheritdoc */
    onUpdated(): void;
    /**
     * Updates this ladder's clipping boundaries.
     */
    private updateClip;
    /**
     * Repositions this ladder based on the current pitch and bank.
     */
    private repositionLadder;
    /**
     * Rebuilds this ladder.
     */
    private rebuildLadder;
    /**
     * Renders a warning chevron.
     * @param centerY The y coordinate of the center of the chevron, in pixels.
     * @param height The height of the chevron, in pixels.
     * @param width The width of the chevron, in pixels.
     * @param legWidth The width of each leg of the chevron, in pixels.
     * @param direction The direction in which the chevron is pointed: `1` for the positive y direction, `-1` for the
     * negative y direction.
     * @returns A warning chevron, as a VNode.
     */
    private renderChevron;
    /** @inheritdoc */
    onDetached(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Options for {@link RollIndicator}.
 */
type RollIndicatorOptions = {
    /** The radius of the roll scale, in pixels. */
    radius: number;
    /** Whether to render the roll arc. */
    showArc: boolean;
    /**
     * Whether to render the indicator with a ground pointer or a sky pointer. With a ground pointer, the roll scale
     * rotates as the airplane banks to keep the zero-roll reference pointer pointed toward the ground while the roll
     * pointer remains fixed. With a sky pointer, the roll pointer rotates as the airplane banks to keep itself pointed
     * toward the sky while the roll scale remains fixed.
     */
    pointerStyle: 'ground' | 'sky';
    /** The length of the major roll scale ticks, in pixels. */
    majorTickLength: number;
    /** The length of the minor roll scale ticks, in pixels. */
    minorTickLength: number;
    /** The size of the zero-roll reference pointer, as `[width, height]` in pixels. */
    referencePointerSize: ReadonlyFloat64Array;
    /**
     * The offset of the tip of the zero-roll reference pointer from the roll scale, in pixels. Positive values displace
     * the pointer away from the center of the circle circumscribed by the roll scale.
     */
    referencePointerOffset: number;
    /** The size of the roll pointer, as `[width, height]` in pixels. */
    rollPointerSize: ReadonlyFloat64Array;
    /** The size of the standard rate turn pointer, as `[width, height]` in pixels. */
    standardRateTurnPointerSize: ReadonlyFloat64Array;
    /**
     * The offset of the tip of the roll pointer from the roll scale, in pixels. Positive values displace the pointer
     * toward the center of the circle circumscribed by the roll scale.
     */
    rollPointerOffset: number;
};
/**
 * Component props for RollIndicator.
 */
interface RollIndicatorProps extends HorizonLayerProps {
    /** Whether to show the standard rate turn pointer. */
    showStandardRateTurnPointer: Subscribable<boolean>;
    /** The airplane's current true airspeed, in knots. */
    tas: Subscribable<number>;
    /** Whether true airspeed data is valid. */
    isTasDataValid: Subscribable<boolean>;
    /** Options for the roll indicator. */
    options: Readonly<RollIndicatorOptions>;
}
/**
 * A PFD roll indicator. Displays a roll scale with standard turn rate pointers and a roll pointer.
 */
declare class RollIndicator extends HorizonLayer<RollIndicatorProps> {
    private readonly rootStyle;
    private readonly rollTransform;
    private readonly leftStandardRatePointerTransform;
    private readonly rightStandardRatePointerTransform;
    private readonly standardRatePointerDisplay;
    private readonly isStandardRatePointerVisible;
    private needUpdateRoll;
    /** @inheritDoc */
    protected onVisibilityChanged(isVisible: boolean): void;
    /** @inheritDoc */
    onAttached(): void;
    /** @inheritDoc */
    onProjectionChanged(projection: HorizonProjection, changeFlags: number): void;
    /**
     * Updates this indicator's root container position.
     */
    private updateRootPosition;
    /** @inheritDoc */
    onUpdated(): void;
    /**
     * Updates the rotation of the indicator.
     */
    private updateRoll;
    /**
     * Updates the standard rate turn pointers.
     */
    private updateStandardRatePointers;
    /** @inheritDoc */
    onDetached(): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders the bank scale, which includes the bank reference pointer and the scale ticks.
     * @returns The bank scale, as a VNode.
     */
    private renderScale;
    /**
     * Renders the roll pointer.
     * @returns The roll pointer, as a VNode.
     */
    private renderPointerContainer;
}

/**
 * Options for the G3X horizon display's pitch ladder.
 */
type G3XHorizonPitchLadderOptions = Pick<G3XPitchLadderProps, 'clipBounds' | 'options'>;
/**
 * Options for the G3X horizon display's aircraft symbol.
 */
type G3XHorizonAircraftSymbolOptions = Pick<G3XAttitudeAircraftSymbolProps, 'color' | 'singleCueBarSpan'>;
/**
 * Component props for {@link G3XHorizonDisplay}.
 */
interface G3XHorizonDisplayProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** The format of the horizon display's parent GDU. */
    gduFormat: GduFormat;
    /** The index of the ADC that is the source of the horizon display's data. */
    adcIndex: number | Subscribable<number>;
    /** The index of the AHRS that is the source of the horizon display's data. */
    ahrsIndex: number | Subscribable<number>;
    /** The index of the FMS positioning system that is the source of the horizon display's data. */
    fmsPosIndex: number | Subscribable<number>;
    /** The update frequency, in hertz, of the horizon display. */
    updateFreq: number | Subscribable<number>;
    /**
     * The string ID to assign to the synthetic vision layer's bound Bing instance. If not defined, then the synthetic
     * vision layer will be disabled.
     */
    bingId?: string;
    /** The amount of time, in milliseconds, to delay binding the synthetic vision layer's Bing instance. Defaults to 0. */
    bingDelay?: number;
    /** The size, as `[width, height]` in pixels, of the horizon display. */
    projectedSize: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The projected offset of the center of the projection, as `[x, y]` in pixels. */
    projectedOffset?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** Options for the artificial horizon. */
    artificialHorizonOptions: Readonly<ArtificialHorizonOptions>;
    /** Options for the horizon line. */
    horizonLineOptions: Readonly<HorizonLineOptions>;
    /** Options for the pitch ladder. */
    pitchLadderOptions: G3XHorizonPitchLadderOptions;
    /** Options for the roll indicator. */
    rollIndicatorOptions: RollIndicatorOptions;
    /** Options for the symbolic aircraft. */
    aircraftSymbolOptions: Readonly<G3XHorizonAircraftSymbolOptions>;
    /** Whether to include the flight director display. */
    includeFlightDirector: boolean;
    /** Options for the flight director. Ignored if `includeFlightDirector` is `false`. */
    flightDirectorOptions?: Readonly<FlightDirectorOptions>;
    /**
     * Options for the single-cue flight director. Required to display the single-cue flight director. Ignored if
     * `includeFlightDirector` is `false`.
     */
    flightDirectorSingleCueOptions?: Readonly<FlightDirectorSingleCueOptions>;
    /**
     * Options for the dual-cue flight director. Required to display the dual-cue flight director. Ignored if
     * `includeFlightDirector` is `false`.
     */
    flightDirectorDualCueOptions?: Readonly<FlightDirectorDualCueOptions>;
    /** Default field of view, in degrees. Defaults to 110 degrees. */
    defaultFov?: number;
    /** Whether to include the display of unusual attitude warning chevrons on the pitch ladder. */
    includeUnusualAttitudeChevrons: boolean;
    /** Whether to show magnetic heading information instead of true heading. */
    useMagneticHeading: Subscribable<boolean>;
    /** The set of occlusion areas to apply to certain horizon elements. If not defined, no occlusion will be applied. */
    occlusions?: SubscribableArray<HorizonOcclusionArea>;
    /** Whether the display should be decluttered. */
    declutter: Subscribable<boolean>;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
    /** A mutable subscribable to which to write whether SVT is enabled. */
    isSvtEnabled?: MutableSubscribable<any, boolean>;
}
/**
 * A G3X Touch Garmin PFD horizon display. Includes an artificial horizon, attitude indicator,
 * aircraft symbol, flight director, and synthetic vision technology (SVT) display.
 */
declare class G3XHorizonDisplay extends DisplayComponent<G3XHorizonDisplayProps> {
    private static readonly BING_FOV;
    private static readonly DEFAULT_FOV;
    private static readonly SVT_SUPPORTED_FMS_POS_MODES;
    private readonly ahrsIndex;
    private readonly isHeadingDataValid;
    private readonly isAttitudeDataValid;
    private readonly fmsPosIndex;
    private readonly fmsPosMode;
    private readonly adcIndex;
    private readonly isAdcAirspeedDataValid;
    private readonly isAdcTemperatureDataValid;
    private readonly tas;
    private readonly isTasDataValid;
    private readonly nonSvtFovEndpoints;
    private readonly svtFovEndpoints;
    private readonly fovEndpoints;
    private readonly defaultFov;
    private readonly occlusions;
    private readonly isSvtEnabled;
    private readonly showFpm;
    private readonly horizonRef;
    private readonly updateFreq;
    private readonly fov;
    private readonly projectionParams;
    private headingSub?;
    private pitchSub?;
    private rollSub?;
    private readonly position;
    private readonly heading;
    private readonly pitch;
    private readonly roll;
    private readonly apEngaged;
    private readonly paramSubjects;
    private readonly flightDirectorFormat;
    private readonly fdDataProvider;
    private readonly showFlightDirector;
    private readonly showFlightDirectorSingleCue;
    private readonly showFlightDirectorDualCue;
    private readonly aircraftSymbolFormat;
    private isAlive;
    private isAwake;
    private ahrsIndexSub?;
    private fmsPosIndexSub?;
    private adcIndexSub?;
    private updateCycleSub?;
    private updateFreqSub?;
    private isSvtEnabledPipe?;
    private readonly updateCycleHandler;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Recomputes the endpoints at which the field of view of this display's projection is measured when synthetic
     * vision is enabled.
     * @param projection This display's horizon projection.
     */
    private recomputeSvtFovEndpoints;
    /**
     * Responds to changes in this horizon display's projection.
     * @param projection This display's horizon projection.
     * @param changeFlags The types of changes made to the projection.
     */
    private onProjectionChanged;
    /**
     * Wakes this horizon display. While awake, this display will be updated.
     * @throws Error if this horizon display is dead.
     */
    wake(): void;
    /**
     * Puts this horizon display to sleep. While asleep, this display will not be updated.
     * @throws Error if this horizon display is dead.
     */
    sleep(): void;
    /**
     * This method is called every update cycle.
     * @param time The current time, as a UNIX timestamp in milliseconds.
     */
    private onUpdated;
    /**
     * @inheritdoc
     */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * GDU user settings.
 */
type GduUserSettingTypes = {
    /** The index of the ADC used by a GDU. */
    gduAdcIndex: number;
    /** The index of the AHRS used by a GDU. */
    gduAhrsIndex: number;
};
/**
 * All true GDU user settings.
 */
type GduAllUserSettingTypes = {
    [Name in keyof GduUserSettingTypes as `${Name}_${number}_g3x`]: GduUserSettingTypes[Name];
};
/**
 * A manager for GDU user settings.
 */
declare class GduUserSettingManager implements UserSettingManager<GduAllUserSettingTypes> {
    private static readonly INDEXED_SETTING_NAMES;
    /** The number of GDUs supported by this manager. */
    readonly gduCount: number;
    private readonly manager;
    private readonly aliasedManagers;
    /**
     * Creates a new instance of GduUserSettingManager.
     * @param bus The event bus.
     * @param gduDefsConfig A configuration object which defines GDU options.
     */
    constructor(bus: EventBus, gduDefsConfig: GduDefsConfig);
    /** @inheritDoc */
    tryGetSetting<K extends string>(name: K): K extends keyof GduAllUserSettingTypes ? UserSetting<GduAllUserSettingTypes[K]> : undefined;
    /** @inheritDoc */
    getSetting<K extends keyof GduAllUserSettingTypes & string>(name: K): UserSetting<NonNullable<GduAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    whenSettingChanged<K extends keyof GduAllUserSettingTypes & string>(name: K): Consumer<NonNullable<GduAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritDoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, GduAllUserSettingTypes>): UserSettingManager<M & GduAllUserSettingTypes>;
    /**
     * Gets a manager for aliased GDU user settings for an indexed GDU.
     * @param index The index of the GDU for which to get an aliased setting manager.
     * @returns A manager for aliased GDU user settings for the specified GDU.
     * @throws RangeError if `index` is less than 1 or greater than the number of GDUs supported by this manager.
     */
    getAliasedManager(index: number): UserSettingManager<GduUserSettingTypes>;
    /**
     * Gets a setting name alias mapping for an GDU.
     * @param index The index of the GDU.
     * @returns A setting name alias mapping for the specified GDU.
     */
    private static getAliasMap;
}

/**
 * Component props for {@link Gdu460HorizonDisplay}.
 */
interface Gdu460HorizonDisplayProps extends Omit<G3XHorizonDisplayProps, 'gduFormat' | 'adcIndex' | 'ahrsIndex' | 'fmsPosIndex' | 'updateFreq' | 'bingId' | 'bingDelay' | 'artificialHorizonOptions' | 'horizonLineOptions' | 'pitchLadderOptions' | 'rollIndicatorOptions' | 'flightDirectorSingleCueOptions' | 'flightDirectorDualCueOptions' | 'isSvtEnabled' | 'includeUnusualAttitudeChevrons' | 'flightDirectorFormat' | 'useMagneticHeading' | 'svtSettingManager' | 'isSvtEnabled'> {
    /** The index of the horizon display's parent GDU. */
    gduIndex: number;
    /** A configuration object defining options for the horizon display. */
    config: HorizonConfig;
    /** Whether to support the display of the synthetic vision layer. */
    supportSvt: boolean;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
}
/**
 * A G3X Touch GDU 460 PFD horizon display.
 */
declare class Gdu460HorizonDisplay extends DisplayComponent<Gdu460HorizonDisplayProps> {
    private static readonly PROJECTION_OFFSET_Y;
    private readonly ref;
    private readonly isSvtEnabled;
    /**
     * Wakes this horizon display. While awake, this display will be updated.
     * @throws Error if this horizon display has not been rendered or has been destroyed.
     */
    wake(): void;
    /**
     * Puts this horizon display to sleep. While asleep, this display will not be updated.
     * @throws Error if this horizon display has not been rendered or has been destroyed.
     */
    sleep(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Gets pitch ladder styling options for a normal field of view.
     * @returns Pitch ladder styling options for a normal field of view.
     */
    static getNormalFovPitchLadderStyles(): G3XPitchLadderStyles;
    /**
     * Gets pitch ladder styling options for an extended field of view.
     * @returns Pitch ladder styling options for an extended field of view.
     */
    static getExtendedFovPitchLadderStyles(): G3XPitchLadderStyles;
}

/**
 * A definition describing a flight plan source.
 */
type G3XFplSourceDataProviderSourceDef = {
    /** The index of the flight plan source's parent external navigator, or `undefined` if the source is an internal source. */
    externalNavigatorIndex?: number;
    /** The Garmin FMS instance associated with the flight plan source. */
    fms: Fms;
    /** The index of the LNAV instance associated with the flight plan source. */
    lnavIndex: number;
    /** The index of the VNAV instance associated with the flight plan source. */
    vnavIndex: number;
    /** The ID of the CDI associated with the flight plan source. */
    cdiId: string;
};
/**
 * A provider of data related to flight plan source.
 */
interface G3XFplSourceDataProvider {
    /** The definition describing the internal flight plan source. */
    readonly internalSourceDef: Readonly<G3XFplSourceDataProviderSourceDef>;
    /**
     * Definitions describing the external flight plan sources. The index of each definition corresponds to the index
     * of the source's parent external navigator.
     */
    readonly externalSourceDefs: readonly (Readonly<G3XFplSourceDataProviderSourceDef> | undefined)[];
    /** The number of supported external flight plan sources. */
    readonly externalSourceCount: 0 | 1 | 2;
    /** The current flight plan source. */
    readonly source: Subscribable<G3XFplSource>;
    /**
     * The index of the current flight plan source's parent navigator. An index of zero represents the internal GPS
     * navigator. Otherwise, the index is the external navigator index.
     */
    readonly navigatorIndex: Subscribable<0 | G3XExternalNavigatorIndex>;
    /** The FMS associated with the current flight plan source. */
    readonly fms: Subscribable<Fms>;
    /** The ID of the FMS associated with the current flight plan source. */
    readonly fmsId: Subscribable<string>;
    /** The flight planner associated with the current flight plan source. */
    readonly flightPlanner: Subscribable<FlightPlanner>;
    /** The index of the LNAV instance associated with the current flight plan source. */
    readonly lnavIndex: Subscribable<number>;
    /** The index of the VNAV instance associated with the current flight plan source. */
    readonly vnavIndex: Subscribable<number>;
    /** The ID of the CDI associated with the current flight plan source. */
    readonly cdiId: Subscribable<string>;
}

/**
 * Size modes for PFD insets.
 */
declare enum PfdInsetSizeMode {
    Full = "Full",
    NarrowEis = "NarrowEis",
    WideEis = "WideEis"
}
/**
 * An entry describing a rendered PFD inset.
 */
type PfdInsetEntry<T extends PfdInset = PfdInset> = {
    /** The key of the inset. */
    readonly key: string;
    /** A reference to the inset. */
    readonly inset: T;
};

/**
 * Component props for PfdInset.
 */
interface PfdInsetProps extends ComponentProps {
    /** The side to which the inset belongs. */
    side: 'left' | 'right';
    /** The UI service instance. */
    uiService: UiService;
}
/**
 * A PFD inset.
 */
interface PfdInset<P extends PfdInsetProps = PfdInsetProps> extends DisplayComponent<P> {
    /**
     * Responds to when this inset is opened.
     * @param sizeMode The new size mode of this view's container.
     * @param dimensions The new dimensions of this view's container, as `[width, height]` in pixels.
     */
    onOpen(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this inset is closed.
     */
    onClose(): void;
    /**
     * Responds when this inset's container is resized while it is open.
     * @param sizeMode The new size mode of this inset's container.
     * @param dimensions The new dimensions of this inset's container, as `[width, height]` in pixels.
     */
    onResize(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * An abstract implementation of {@link PfdInset}.
 */
declare abstract class AbstractPfdInset<P extends PfdInsetProps = PfdInsetProps> extends DisplayComponent<P> implements PfdInset<P> {
    /** @inheritdoc */
    onOpen(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
}

/**
 * Component props for {@link PfdFlightPlanInset}.
 */
interface PfdFlightPlanInsetProps extends PfdInsetProps {
    /** The FMS. */
    fms: G3XFms;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A configuration object defining options for flight planning. */
    flightPlanningConfig: FmsFlightPlanningConfig;
}
/**
 * A PFD flight plan inset.
 */
declare class PfdFlightPlanInset extends AbstractPfdInset<PfdFlightPlanInsetProps> {
    private static readonly DATA_FIELD_UPDATE_INTERVAL;
    private readonly listRef;
    private readonly facWaypointCache;
    private readonly fplCalculationSettingManager;
    private readonly unitsSettingManager;
    private readonly fplDataFieldCalculatorRepo;
    private readonly fplDataFieldRenderer;
    private readonly fplDataArray;
    private lastDataFieldUpdateTime;
    private needScrollToActiveLeg;
    private fplSourceSub?;
    private toLegIndexSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the flight plan source changes.
     * @param source The new flight plan source.
     */
    private onFplSourceChanged;
    /**
     * Updates this inset's flight plan data array from a flight plan source.
     * @param source The flight plan source from which to update the array.
     */
    private updateFplArrayFromSource;
    /**
     * Updates this inset's flight plan data array from an external flight plan source.
     * @param index The index of the external flight plan source from which to update the array.
     */
    private updateFplArrayFromExternalSource;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /**
     * Attempts to scroll this inset's list in order to place the active leg in the middle of the list.
     * @param animate Whether to animate the scroll.
     * @param skipIfItemInView Whether to skip the operation if the active leg is already in view or will be in view when
     * the current scrolling animation finishes.
     */
    private scrollToActiveLeg;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a list item for a data item in this inset's flight plan array.
     * @param data The flight plan data item to render.
     * @returns A list item for the specified data item, as a VNode.
     * @throws Error if the data item has an unrecognized type.
     */
    private renderListItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Flight plan data field types.
 */
declare enum FlightPlanDataFieldType {
    CumulativeDistance = "CumulativeDistance",
    CumulativeEte = "CumulativeEte",
    CumulativeFuel = "CumulativeFuel",
    Eta = "Eta",
    FuelRemaining = "FuelRemaining",
    Dtk = "Dtk",
    LegDistance = "LegDistance",
    LegEte = "LegEte",
    LegFuel = "LegFuel",
    Sunrise = "Sunrise",
    Sunset = "Sunset"
}
/**
 * A map from flight plan data field type to data value type.
 */
type FlightPlanDataFieldTypeValueMap = {
    /** Cumulative distance. */
    [FlightPlanDataFieldType.CumulativeDistance]: NumberUnitSubject<UnitFamily.Distance>;
    /** Cumulative estimated time enroute. */
    [FlightPlanDataFieldType.CumulativeEte]: NumberUnitSubject<UnitFamily.Duration>;
    /** Cumulative fuel burn. */
    [FlightPlanDataFieldType.CumulativeFuel]: NumberUnitSubject<UnitFamily.Weight>;
    /** Estimated time of arrival. */
    [FlightPlanDataFieldType.Eta]: Subject<number>;
    /** Fuel remaining. */
    [FlightPlanDataFieldType.FuelRemaining]: NumberUnitSubject<UnitFamily.Weight>;
    /** Desired track. */
    [FlightPlanDataFieldType.Dtk]: BasicNavAngleSubject;
    /** Leg distance. */
    [FlightPlanDataFieldType.LegDistance]: NumberUnitSubject<UnitFamily.Distance>;
    /** Leg estimated time enroute. */
    [FlightPlanDataFieldType.LegEte]: NumberUnitSubject<UnitFamily.Duration>;
    /** Leg fuel burn. */
    [FlightPlanDataFieldType.LegFuel]: NumberUnitSubject<UnitFamily.Weight>;
    /** Time of sunrise. */
    [FlightPlanDataFieldType.Sunrise]: Subject<number>;
    /** Time of sunset. */
    [FlightPlanDataFieldType.Sunset]: Subject<number>;
};
/**
 * A flight plan data field.
 */
interface FlightPlanDataField<T extends FlightPlanDataFieldType = FlightPlanDataFieldType> {
    /** The type of this data field. */
    readonly type: T;
    /** The value of this data field. */
    readonly value: FlightPlanDataFieldTypeValueMap[T];
}

/**
 * G3X Touch flight plan user data keys.
 */
declare enum G3XFmsFplUserDataKey {
    /** Data describing the flight plan's loaded approach. */
    LoadedApproach = "g3x_loaded_approach"
}
/**
 * Data describing a VFR approach procedure that is loaded into a G3X Touch internal flight plan.
 */
type G3XFmsFplLoadedApproachData = {
    /** The ICAO of the loaded approach airport. */
    airportIcao: string;
    /** The index of the published approach on which the loaded VFR approach is based. */
    approachIndex: number;
    /** The loaded VFR approach procedure. */
    approach: GarminVfrApproachProcedure;
};
/**
 * Mappings from G3X Touch flight plan user data keys to their data types.
 */
type G3XFmsFplUserDataTypeMap = FmsFplUserDataTypeMap & {
    /** Data describing the flight plan's loaded approach. */
    [G3XFmsFplUserDataKey.LoadedApproach]: Readonly<G3XFmsFplLoadedApproachData>;
};

/**
 * Types of flight plan data items.
 */
declare enum FlightPlanDataItemType {
    Leg = "Leg",
    ApproachLegPreview = "ApproachLegPreview",
    AddWaypoint = "AddWaypoint"
}
/**
 * Properties shared by all data items describing how to display details of a flight plan in a list format.
 */
interface FlightPlanBaseDataItem {
    /** Whether this item should be visible when displayed in a list format. */
    readonly isVisible: Subscribable<boolean>;
}
/**
 * Statuses of a flight plan leg relative to the active leg.
 */
declare enum FlightPlanLegDataItemActiveStatus {
    /** The leg has no valid status. */
    None = "None",
    /** The leg has been sequenced and is not the current FROM leg. */
    Past = "Past",
    /** The leg is the current FROM leg.  */
    From = "From",
    /** The leg is the current TO leg. */
    To = "To",
    /** The leg has not yet been sequenced and is not the current TO leg. */
    Future = "Future"
}
/**
 * A data item describing a flight plan leg.
 */
interface FlightPlanLegDataItem extends FlightPlanBaseDataItem {
    /** The type of this data item. */
    readonly type: FlightPlanDataItemType.Leg;
    /** This item's parent flight plan. */
    readonly flightPlan: FlightPlan;
    /** This item's associated flight plan leg. */
    readonly leg: LegDefinition;
    /**
     * The ICAO of the waypoint fix associated with this item's flight plan leg, or the empty string if no such waypoint
     * fix exists.
     */
    readonly fixIcao: string;
    /**
     * Data describing the approach to which this item's flight plan leg belongs, or `undefined` if the leg does not
     * belong to an approach.
     */
    readonly approachData: Readonly<G3XFmsFplLoadedApproachData> | undefined;
    /** The status of this item's flight plan leg relative to the active leg. */
    readonly activeStatus: Subscribable<FlightPlanLegDataItemActiveStatus>;
    /** This item's data fields. */
    readonly dataFields: readonly Subscribable<FlightPlanDataField<FlightPlanDataFieldType> | null>[];
}
/**
 * A data item describing a previewed approach flight plan leg.
 */
interface FlightPlanApproachLegPreviewDataItem extends FlightPlanBaseDataItem {
    /** The type of this data item. */
    readonly type: FlightPlanDataItemType.ApproachLegPreview;
    /** This item's parent flight plan. */
    readonly flightPlan: FlightPlan;
    /** The index of this item's associated flight plan leg in its approach procedure. */
    readonly index: number;
    /** This item's associated flight plan leg. */
    readonly leg: FlightPlanLeg;
    /**
     * The ICAO of the waypoint fix associated with this item's flight plan leg, or the empty string if no such waypoint
     * fix exists.
     */
    readonly fixIcao: string;
    /** Data describing the approach to which this item's flight plan leg belongs. */
    readonly approachData: Readonly<G3XFmsFplLoadedApproachData>;
}
/**
 * A data item describing an 'Add Waypoint' item in a list.
 */
interface FlightPlanAddWaypointDataItem extends FlightPlanBaseDataItem {
    /** The type of this data item. */
    readonly type: FlightPlanDataItemType.AddWaypoint;
}
/**
 * A data item describing how to display details of a flight plan in a list format.
 */
type FlightPlanDataItem = FlightPlanLegDataItem | FlightPlanApproachLegPreviewDataItem | FlightPlanAddWaypointDataItem;

/**
 * Component props for {@link PfdFlightPlanInsetApproachLegPreviewListItem}.
 */
interface PfdFlightPlanInsetApproachLegPreviewListItemProps extends ComponentProps {
    /** Data pertaining to the list item's flight plan leg. */
    data: FlightPlanApproachLegPreviewDataItem;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A cache used to retrieve waypoints. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** The CSS class(es) to apply to the list item's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A list item that renders a previewed approach flight plan leg data item for the PFD flight plan inset.
 */
declare class PfdFlightPlanInsetApproachLegPreviewListItem extends DisplayComponent<PfdFlightPlanInsetApproachLegPreviewListItemProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly itemRef;
    private readonly rootCssClass;
    private readonly waypoint;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Retrieves this list item's waypoint fix.
     */
    private retrieveWaypoint;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Setting modes for barometric pressure units.
 */
declare enum G3XUnitsBaroPressureSettingMode {
    InHg = "inhg",
    Hectopascals = "hectopascals",
    Millibars = "millibars"
}
declare enum G3XUnitsFuelEconomySettingMode {
    Nautical = "Nautical",
    Statute = "Statute",
    MetricKmPerL = "MetricKmPerL",
    MetricLPer100Km = "MetricLPer100Km"
}
/**
 * Aliased G3X Touch display units user settings.
 */
type G3XUnitsUserSettingTypes = UnitsUserSettingTypes & {
    /** The baro pressure units setting. */
    unitsBaroPressure: G3XUnitsBaroPressureSettingMode;
    /** The fuel economy units setting. */
    unitsFuelEconomy: G3XUnitsFuelEconomySettingMode;
};
/**
 * True G3X Touch display units user settings.
 */
type G3XUnitsTrueUserSettingTypes = {
    [P in keyof G3XUnitsUserSettingTypes as `${P}_g3x`]: G3XUnitsUserSettingTypes[P];
};
/**
 * A manager for G3X Touch display units user settings.
 */
interface G3XUnitsUserSettingManager extends UnitsUserSettingManager<G3XUnitsUserSettingTypes> {
    /** The barometric pressure units to use for the current barometric pressure units setting. */
    readonly baroPressureUnits: Subscribable<Unit<UnitFamily.Pressure>>;
    /** The fuel economy units to use for the current fuel economy units setting. */
    readonly fuelEconomyUnits: Subscribable<Unit<UnitFamily.DistancePerWeight | UnitFamily.WeightPerDistance>>;
}
/**
 * A default implementation of {@link G3XUnitsUserSettingManager} which sources setting values from another setting
 * manager.
 */
declare class DefaultG3XUnitsUserSettingManager extends DefaultUnitsUserSettingManager<G3XUnitsUserSettingTypes> implements G3XUnitsUserSettingManager {
    private readonly _baroPressureUnits;
    /** @inheritDoc */
    readonly baroPressureUnits: Subscribable<Unit<UnitFamily.Pressure>>;
    private readonly _fuelEconomyUnits;
    /** @inheritDoc */
    readonly fuelEconomyUnits: Subscribable<Unit<UnitFamily.DistancePerWeight | UnitFamily.WeightPerDistance>>;
    /**
     * Creates a new instance of DefaultG3XUnitsUserSettingManager.
     * @param sourceSettingManager The manager from which to source setting values.
     */
    constructor(sourceSettingManager: UserSettingManager<G3XUnitsUserSettingTypes>);
}
/**
 * Utility class for retrieving G3X Touch display units user setting managers.
 */
declare class G3XUnitsUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for display units user settings.
     * @param bus The event bus.
     * @returns A manager for display units user settings.
     */
    static getManager(bus: EventBus): G3XUnitsUserSettingManager;
    /**
     * Gets the default values for a full set of standard display units user settings.
     * @returns The default values for a full set of standard display units user settings.
     */
    private static getDefaultValues;
}

/**
 * Component props for {@link PfdFlightPlanInsetLegListItem}.
 */
interface PfdFlightPlanInsetLegListItemProps extends ComponentProps {
    /** Data pertaining to the list item's flight plan leg. */
    data: FlightPlanLegDataItem;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A cache used to retrieve waypoints. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** The CSS class(es) to apply to the list item's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A list item that renders a flight plan leg data item for the PFD flight plan inset.
 */
declare class PfdFlightPlanInsetLegListItem extends DisplayComponent<PfdFlightPlanInsetLegListItemProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly BEARING_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private readonly itemRef;
    private readonly rootCssClass;
    private readonly waypoint;
    private readonly bearingValue;
    private readonly distanceValue;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Retrieves this list item's waypoint fix.
     */
    private retrieveWaypoint;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for PfdMapInset.
 */
interface PfdMapInsetProps extends PfdInsetProps {
    /** The traffic system used by the inset to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A PFD map inset.
 */
declare class PfdMapInset extends AbstractPfdInset<PfdMapInsetProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private readonly mapSize;
    private readonly buttonRef;
    private readonly compiledMap;
    private readonly mapRangeController;
    private avionicsStatusSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /**
     * Responds to when a user touches this inset's map.
     */
    private onMapTouched;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A provider of airplane position and heading data.
 */
interface PositionHeadingDataProvider {
    /** The current position of the airplane. */
    readonly ppos: Subscribable<GeoPointInterface>;
    /** The current position of the airplane, or `(NaN, NaN)` when GPS data is in a failed state. */
    readonly pposWithFailure: Subscribable<GeoPointInterface>;
    /** The current true heading of the airplane, in degrees. */
    readonly headingTrue: Subscribable<number>;
    /** The current true heading of the airplane, in degrees, or `NaN` when heading data is in a failed state. */
    readonly headingTrueWithFailure: Subscribable<number>;
    /** Whether this provider's heading data is in a failed state. */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    /** Whether GPS position is in dead reckoning mode. */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** Whether GPS data is in a failed state. */
    readonly isGpsDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link PositionHeadingDataProvider}.
 */
declare class DefaultPositionHeadingDataProvider implements PositionHeadingDataProvider {
    private readonly bus;
    private readonly updateFreq;
    private readonly _ppos;
    /** @inheritdoc */
    readonly ppos: Subscribable<GeoPointInterface>;
    private readonly _pposWithFailure;
    /** @inheritdoc */
    readonly pposWithFailure: Subscribable<GeoPointInterface>;
    private readonly _headingTrue;
    /** @inheritdoc */
    readonly headingTrue: Subscribable<number>;
    private readonly _headingTrueWithFailure;
    /** @inheritdoc */
    readonly headingTrueWithFailure: Subscribable<number>;
    private readonly _isHeadingDataValid;
    /** @inheritdoc */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    private readonly fmsPosMode;
    /** @inheritdoc */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** @inheritdoc */
    readonly isGpsDataFailed: Subscribable<boolean>;
    private readonly fmsPosIndex;
    private readonly ahrsIndex;
    private isInit;
    private isAlive;
    private isPaused;
    private pposSub?;
    private pposPipe?;
    private headingPipe?;
    private isGpsDataFailedSub?;
    private isHeadingDataFailedSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this provider's data.
     * @param ahrsIndex The index of the AHRS that is the source of this provider's data.
     * @param updateFreq The frequency at which this provider updates its position and heading data.
     */
    constructor(bus: EventBus, fmsPosIndex: number | Subscribable<number>, ahrsIndex: number | Subscribable<number>, updateFreq: number);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * Component props for {@link PfdNearestAirportsInset}.
 */
interface PfdNearestAirportsInsetProps extends PfdInsetProps {
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
}
/**
 * A PFD nearest airports inset.
 */
declare class PfdNearestAirportsInset extends AbstractPfdInset<PfdNearestAirportsInsetProps> {
    private static readonly BEARING_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private static readonly UPDATE_INTERVAL;
    private static readonly GPS_FAIL_CLEAR_LIST_DELAY;
    private readonly listRef;
    private readonly ppos;
    private readonly planeHeadingTrue;
    private readonly unitsSettingManager;
    private nearestContext?;
    private readonly waypointArray;
    private nearestFacilitiesUpdateSub?;
    private isGpsDataFailedSub?;
    private isOpen;
    private lastUpdateTime?;
    /**
     * Creates a new instance of PfdNearestAirportsInset.
     * @param props This component's props.
     */
    constructor(props: PfdNearestAirportsInsetProps);
    /**
     * Initializes this inset's nearest waypoints search.
     */
    private initNearestSearch;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /**
     * Updates this inset's airplane data.
     */
    private updateAirplaneData;
    /**
     * Opens a waypoint information popup and sets it to display a waypoint.
     * @param waypoint The waypoint for the popup to display.
     */
    private openWaypointInfoPopup;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders one of this inset's nearest airport list items.
     * @param entry The nearest waypoint entry describing the list item's airport.
     * @returns A nearest airport list item for the specified entry, as a VNode.
     */
    private renderListItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for PfdTrafficInset.
 */
interface PfdTrafficInsetProps extends PfdInsetProps {
    /** The traffic system used by the map. */
    trafficSystem: TrafficSystem;
    /** The traffic data source used by the traffic system. */
    trafficSource: G3XTrafficSystemSource;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A PFD traffic inset.
 */
declare class PfdTrafficInset extends AbstractPfdInset<PfdTrafficInsetProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private readonly mapSize;
    private readonly buttonRef;
    private readonly trafficSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    private avionicsStatusSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: PfdInsetSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /**
     * Responds to when a user touches this inset's map.
     */
    private onMapTouched;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A function which renders a PFD inset.
 */
type PfdInsetFactory = (side: 'left' | 'right', uiService: UiService) => VNode;
/**
 * A definition describing a PFD inset.
 */
type PfdInsetDefinition = {
    /** The key of the inset. */
    key: string;
    /** The label displayed in the inset's associated button in the PFD inset selection list. */
    selectLabel: string;
    /**
     * A numeric value which determines the order in which the inset appears in the PFD inset selection list. A lower
     * value causes the inset to appear before other insets.
     */
    order: number;
    /** A function which renders the inset. If not defined, then the inset will be disabled. */
    factory?: PfdInsetFactory;
};

/**
 * Component props for PfdInsetContainer.
 */
interface PfdInsetContainerProps extends ComponentProps {
    /** The side to which the container belongs. */
    side: 'left' | 'right';
    /** An iterable of registered PFD inset definitions. */
    registeredInsetDefs: Iterable<Readonly<PfdInsetDefinition>>;
    /** The UI service instance. */
    uiService: UiService;
    /** A manager for PFD inset user settings. */
    pfdInsetSettingManager: UserSettingManager<PfdInsetUserSettingTypes>;
    /** CSS class(es) to apply to the root element of the container. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A container for PFD insets.
 */
declare class PfdInsetContainer extends DisplayComponent<PfdInsetContainerProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly DIMENSIONS;
    private readonly rootRef;
    private readonly rootCssClass;
    private readonly registeredInsetDefs;
    private readonly insetEntryMap;
    private readonly _activeInsetEntry;
    /** This container's current active inset, or `null` if there is no active inset. */
    readonly activeInsetEntry: Subscribable<PfdInsetEntry | null>;
    private sizeMode;
    private dimensions;
    private isAlive;
    private _isAwake;
    private needOpen;
    private cssClassSub?;
    private selectedInsetSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Checks whether this container is awake.
     * @returns Whether this container is awake.
     */
    isAwake(): boolean;
    /**
     * Wakes this container. This will open the active inset (if one exists).
     * @throws Error if this container has been destroyed.
     */
    wake(): void;
    /**
     * Puts this container to sleep. This will close the active inset (if one exists).
     * @throws Error if this container has been destroyed.
     */
    sleep(): void;
    /**
     * Sets the size of this container.
     * @param sizeMode The new size mode.
     * @throws Error if this container has been destroyed.
     */
    setSize(sizeMode: PfdInsetSizeMode): void;
    /**
     * Updates this container.
     * @param time The current real (operating system) time, as a Javascript timestamp in milliseconds.
     * @throws Error if this container has been destroyed.
     */
    update(time: number): void;
    /**
     * Responds to when the selected PFD inset key changes.
     * @param key The new selected PFD inset key.
     */
    private onSelectedInsetKeyChanged;
    /**
     * Updates this container's visibility.
     */
    private updateVisibility;
    /**
     * Renders an inset.
     * @param key The key of the inset to render.
     * @returns An entry for the rendered inset.
     */
    private renderInset;
    /**
     * Opens an inset.
     * @param entry The entry for the inset to open.
     */
    private openInset;
    /**
     * Closes an inset.
     * @param entry The entry for the inset to close.
     */
    private closeInset;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Keys for standard G3X Touch PFD insets.
 */
declare enum PfdInsetKeys {
    Map = "Map",
    Traffic = "Traffic",
    FlightPlan = "FlightPlan",
    NearestAirports = "NearestAirports",
    VideoInput = "VideoInput",
    GMeter = "GMeter"
}

/**
 * A record of registered PFD insets.
 */
declare class PfdInsetRegistrar {
    private static readonly INSET_DEF_COMPARATOR;
    private readonly registeredInsets;
    /**
     * Checks if an inset is registered with a given key.
     * @param key The key to check.
     * @returns Whether an inset is registered with the specified key.
     */
    isInsetRegistered(key: string): boolean;
    /**
     * Registers a PFD inset. Registering an inset with an existing key will replace the old inset registered under that
     * key.
     * @param insetDef The definition of the inset to register.
     * @throws Error if the inset key specified by the provided definition is the empty string.
     */
    registerInset(insetDef: Readonly<PfdInsetDefinition>): void;
    /**
     * Unregisters a PFD inset.
     * @param key The key of the inset to unregister.
     * @returns Whether the inset with the specified key was successfully unregistered.
     */
    unregisterInset(key: string): boolean;
    /**
     * Gets an array of inset definitions registered with this registrar, in ascending order according to the values of
     * their `order` properties.
     * @returns An array of inset definitions registered with this registrar, in ascending order according to the values
     * of their `order` properties.
     */
    getRegisteredInsetsArray(): Readonly<PfdInsetDefinition>[];
}

/**
 * A function which renders an MFD main page.
 */
type MfdPageFactory = (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode;
/**
 * A definition describing an MFD main page.
 */
type MfdPageDefinition = {
    /** The key of the page. */
    key: string;
    /** The label of the page that appears on the page navigation bar. */
    label: string;
    /** The file path to the image asset for the icon displayed in the page's associated button in the Select Page dialog. */
    selectIconSrc: string;
    /** The label displayed in the page's associated button in the Select Page dialog. */
    selectLabel: string;
    /**
     * A numeric value which determines the order in which the page's navigation bar label appears relative to those of
     * other pages. A lower value causes the label to appear before (to the left of) other labels.
     */
    order: number;
    /** A function which renders the page. If not defined, then the page will be disabled. */
    factory?: MfdPageFactory;
};

/**
 * A record of registered MFD main pages.
 */
declare class MfdMainPageRegistrar {
    private static readonly PAGE_DEF_COMPARATOR;
    private readonly registeredPages;
    /**
     * Checks if a page is registered with a given key.
     * @param key The key to check.
     * @returns Whether a page is registered with the specified key.
     */
    isPageRegistered(key: string): boolean;
    /**
     * Registers an MFD main page. Registering a page with an existing key will replace the old page registered under
     * that key.
     * @param pageDef The definition of the page to register.
     */
    registerPage(pageDef: Readonly<MfdPageDefinition>): void;
    /**
     * Unregisters an MFD main page.
     * @param key The key of the page to unregister.
     * @returns Whether the page with the specified key was successfully unregistered.
     */
    unregisterPage(key: string): boolean;
    /**
     * Gets an array of page definitions registered with this registrar, in ascending order according to the values of
     * their `order` properties.
     * @returns An array of page definitions registered with this registrar, in ascending order according to the values
     * of their `order` properties.
     */
    getRegisteredPagesArray(): Readonly<MfdPageDefinition>[];
}

/**
 * A function which renders a PFD page.
 */
type PfdPageFactory = (uiService: UiService, containerRef: NodeReference<HTMLElement>) => VNode;
/**
 * A definition describing a PFD page.
 */
type PfdPageDefinition = {
    /** The key of the page. */
    key: string;
    /**
     * A numeric value which determines the order in which the page appears in the MFD Display Setup menu's Split Screen
     * Page selection list. A lower value causes the page to appear before other pages.
     */
    order: number;
    /** The label displayed for the page in the MFD Display Setup menu's Split Screen Page selection list. */
    selectLabel: string;
    /** The UI view lifecycle policy to apply to the page. Defaults to `UiViewLifecyclePolicy.Static`. */
    lifecyclePolicy?: UiViewLifecyclePolicy;
    /** A function which renders the page. If not defined, then the page will be disabled. */
    factory?: PfdPageFactory;
};

/**
 * A record of registered PFD pane pages.
 */
declare class PfdPageRegistrar {
    private static readonly PAGE_DEF_COMPARATOR;
    private readonly registeredPages;
    /**
     * Checks if a page is registered with a given key.
     * @param key The key to check.
     * @returns Whether a page is registered with the specified key.
     */
    isPageRegistered(key: string): boolean;
    /**
     * Registers a PFD page. Registering a page with an existing key will replace the old page registered under
     * that key.
     * @param pageDef The definition of the page to register.
     */
    registerPage(pageDef: Readonly<PfdPageDefinition>): void;
    /**
     * Unregisters a PFD page.
     * @param key The key of the page to unregister.
     * @returns Whether the page with the specified key was successfully unregistered.
     */
    unregisterPage(key: string): boolean;
    /**
     * Gets an array of page definitions registered with this registrar, in ascending order according to the values of
     * their `order` properties.
     * @returns An array of page definitions registered with this registrar, in ascending order according to the values
     * of their `order` properties.
     */
    getRegisteredPagesArray(): Readonly<PfdPageDefinition>[];
}

/**
 * A provider of COM radio frequency spacing mode data.
 */
interface ComRadioSpacingDataProvider {
    /** The spacing mode of the COM1 radio. If COM1 is not supported, then this value defaults to `ComSpacing.Spacing25Khz`. */
    readonly com1Spacing: Subscribable<ComSpacing>;
    /** The spacing mode of the COM2 radio. If COM2 is not supported, then this value defaults to `ComSpacing.Spacing25Khz`. */
    readonly com2Spacing: Subscribable<ComSpacing>;
    /**
     * The combined spacing mode of all supported COM radios. If any supported COM radio is in 8.33 kHz mode, then the
     * combined spacing mode is `ComSpacing.Spacing833Khz`. Otherwise, the combined spacing mode is
     * `ComSpacing.Spacing25Khz`. If no COM radios are supported, then this value defaults to `ComSpacing.Spacing25Khz`.
     */
    readonly combinedComSpacing: Subscribable<ComSpacing>;
}
/**
 * A default implementation of {@link ComRadioSpacingDataProvider}.
 */
declare class DefaultComRadioSpacingDataProvider implements ComRadioSpacingDataProvider {
    private readonly bus;
    private readonly config;
    private readonly _com1Spacing;
    /** @inheritDoc */
    readonly com1Spacing: Subscribable<ComSpacing>;
    private readonly _com2Spacing;
    /** @inheritDoc */
    readonly com2Spacing: Subscribable<ComSpacing>;
    /** @inheritDoc */
    readonly combinedComSpacing: Subscribable<ComSpacing>;
    private isInit;
    private isAlive;
    private isPaused;
    /**
     * Creates a new instance of DefaultComRadioSpacingDataProvider.
     * @param bus The event bus.
     * @param config A configuration object defining options for radios.
     */
    constructor(bus: EventBus, config: RadiosConfig);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * References to items used to create the base G3X Touch's UI views, MFD main pages, PFD pages, and PFD insets.
 */
type G3XTouchUiComponentContext = {
    /** A provider of airplane position and heading data that updates at the instrument refresh rate. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
    /** A provider of wind data. */
    windDataProvider: WindDataProvider;
    /** A provider of VNAV data. */
    vnavDataProvider: VNavDataProvider;
    /** A provider of COM radio channel spacing data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /**
     * An array of the GPS computers used by the GPS receiver systems connected to the G3X Touch, indexed by GPS receiver
     * system index.
     */
    gpsSatComputers: readonly GPSSatComputer[];
    /** The traffic system. */
    trafficSystem: TrafficSystem | null;
    /** The GPS validity state used by nav data fields. */
    navDataFieldGpsValidity: Subscribable<NavDataFieldGpsValidity>;
    /** A factory for CNS data bar nav data field models. */
    navDataBarFieldModelFactory: NavDataBarFieldModelFactory;
    /** A renderer for CNS data bar nav data fields. */
    navDataBarFieldRenderer: NavDataFieldRenderer;
    /** A controller for editing CNS data bar nav data fields. */
    navDataBarEditController: G3XNavDataBarEditController;
    /** The MFD main page registrar. */
    mfdMainPageRegistrar: MfdMainPageRegistrar;
    /** The PFD page registrar. */
    pfdPageRegistrar: PfdPageRegistrar;
    /** The PFD inset registrar. */
    pfdInsetRegistrar?: PfdInsetRegistrar;
};

/** A valid {@link NavReferenceSource} name for the G3X Touch. */
type G3XTouchNavSourceName = 'NAV1' | 'NAV2' | 'GPSInt' | 'GPS1' | 'GPS2' | 'NRST';
/** A G3X Touch {@link NavReferenceSource}. */
type G3XTouchNavSource = NavReferenceSource<G3XTouchNavSourceName>;
/** A collection of G3X Touch {@link NavReferenceSource|NavReferenceSources}. */
type G3XTouchNavSources = NavReferenceSources<G3XTouchNavSourceName>;
/** A valid {@link NavReferenceIndicator} name for the G3X Touch. */
type G3XTouchNavIndicatorName = 'bearingPointer1' | 'bearingPointer2' | 'activeSource';
/** A G3X Touch {@link NavReferenceIndicator}. */
type G3XTouchNavIndicator = NavReferenceIndicator<G3XTouchNavSourceName>;
/** A collection of G3X Touch {@link NavReferenceIndicator|NavReferenceIndicators}. */
type G3XTouchNavIndicators = NavReferenceIndicators<G3XTouchNavSourceName, G3XTouchNavIndicatorName>;
/**
 * A G3X Touch active navigation source {@link NavReferenceIndicator}.
 */
declare class G3XTouchActiveSourceNavIndicator extends BasicNavReferenceIndicator<G3XTouchNavSourceName> {
    private readonly bus;
    private readonly navSource;
    /**
     * Creates a new instance of G3XTouchActiveSourceNavIndicator.
     * @param navSources A collection of {@link NavReferenceSource|NavReferenceSources} from which the indicator can
     * source data.
     * @param bus The event bus.
     */
    constructor(navSources: G3XTouchNavSources, bus: EventBus);
}
/**
 * A G3X Touch bearing pointer {@link NavReferenceIndicator}.
 */
declare class G3XTouchBearingPointerNavIndicator extends BasicNavReferenceIndicator<G3XTouchNavSourceName> {
    private static readonly EMPTY_FILTER;
    private static readonly NAV_FILTER;
    private readonly activeNavigatorIndex;
    private readonly ppos;
    private readonly gpsDisState;
    private readonly activeNavigatorIndexSub;
    private readonly pposSub;
    private readonly disSub;
    /**
     * Creates a new instance of G3XTouchBearingPointerNavIndicator.
     * @param navSources A collection of {@link NavReferenceSource|NavReferenceSources} from which the indicator can
     * source data.
     * @param bus The event bus.
     * @param index The index of the indicator's bearing pointer.
     * @param settingManager A manager for bearing pointer user settings.
     */
    constructor(navSources: NavReferenceSources<G3XTouchNavSourceName>, bus: EventBus, index: 1 | 2, settingManager: UserSettingManager<PfdBearingPointerUserSettingTypes>);
    /** @inheritdoc */
    protected updateFromSource(newSource: NavReferenceSource<G3XTouchNavSourceName> | null, oldSource: NavReferenceSource<G3XTouchNavSourceName> | null): void;
    /**
     * Responds to when this indicator's bearing pointer source setting value changes.
     * @param setting The new setting value.
     */
    private onSourceSettingChanged;
    /**
     * Updates this indicator's GPS source from the current active navigator index.
     * @param activeNavigatorIndex The current active navigator index.
     */
    private updateGpsSource;
}

/**
 * A plugin binder for G3X Touch plugins.
 */
interface G3XTouchPluginBinder {
    /** The event bus. */
    bus: EventBus;
    /** The backplane instance. */
    backplane: InstrumentBackplane;
    /** The global avionics configuration object. */
    config: AvionicsConfig;
    /** The instrument configuration object. */
    instrumentConfig: InstrumentConfig;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** The lateral flight plan path calculator. */
    flightPathCalculator: FlightPathCalculator;
    /** The FMS instance. */
    fms: G3XFms;
    /** The UI service. */
    uiService: UiService;
    /** A collection of all navigation indicators. */
    navIndicators: G3XTouchNavIndicators;
    /** The CAS system. */
    casSystem: CasSystem;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: GduUserSettingManager;
    /** A manager for display user settings. */
    displaySettingManager: DisplayUserSettingManager;
    /** A manager for PFD user settings. */
    pfdSettingManager: PfdUserSettingManager;
}
/**
 * A G3X Touch plugin.
 */
interface G3XTouchPlugin extends AvionicsPlugin<G3XTouchPluginBinder> {
    /**
     * Lifecycle method called during instrument initialization, after all plugins have been loaded.
     */
    onInit(): void;
    /**
     * Registers UI views.
     * @param uiService The UI service with which to register views.
     * @param context A context containing references to items used to create the base G3X Touch's UI views.
     */
    registerUiViews?(uiService: UiService, context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers MFD main pages.
     * @param registrar The registrar with which to register pages.
     * @param context References to items used to create the base G3X Touch's MFD main pages.
     */
    registerMfdMainPages?(registrar: MfdMainPageRegistrar, context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers PFD pages.
     * @param registrar The registrar with which to register pages.
     * @param context References to items used to create the base G3X Touch's PFD pages.
     */
    registerPfdPages?(registrar: PfdPageRegistrar, context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers PFD insets.
     * @param registrar The registrar with which to register insets.
     * @param context References to items used to create the base G3X Touch's PFD insets.
     */
    registerPfdInsets?(registrar: PfdInsetRegistrar, context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Renders the contents of the EIS.
     * @returns The contents of the EIS, as a VNode, or `null` if nothing is to be rendered.
     */
    renderEis?(): VNode | null;
    /**
     * Renders components to the PFD instruments view. Any top-level component (not a child of another
     * `DisplayComponent`) that implements the `PfdInstrumentsPluginComponent` interface will have its callback methods
     * called in response to the corresponding triggers.
     * @param declutter Whether the PFD is decluttered.
     * @returns Components to render to the PFD instruments view, as a VNode, or `null` if nothing is to be rendered.
     */
    renderToPfdInstruments?(declutter: Subscribable<boolean>): VNode | null;
    /**
     * Gets global user settings whose values should be saved across flight sessions. Global settings are those with
     * (un-aliased) names that are unique across the entire airplane.
     * @returns An iterable of global user settings whose values should be saved across flight sessions.
     */
    getPersistentGlobalSettings?(): Iterable<UserSetting<any>>;
    /**
     * Gets instrument-local user settings whose values should be saved across flight sessions. Instrument-local user
     * settings are those with (un-aliased) names that are only unique to their local JS instrument.
     * @returns An iterable of instrument-local user settings whose values should be saved across flight sessions.
     */
    getPersistentLocalSettings?(): Iterable<UserSetting<any>>;
}
/**
 * An abstract implementation of {@link G3XTouchPlugin} that by default does nothing. Subclasses should override the
 * appropriate methods to provide desired functionality.
 */
declare abstract class AbstractG3XTouchPlugin extends AvionicsPlugin<G3XTouchPluginBinder> implements G3XTouchPlugin {
    /** @inheritDoc */
    onInstalled(): void;
    /** @inheritDoc */
    onInit(): void;
}

/**
 * True G3X Touch reference V-speed user settings.
 */
type G3XVSpeedTrueUserSettingTypes = {
    [P in keyof VSpeedUserSettingTypes as `${P}_g3x`]: VSpeedUserSettingTypes[P];
};
/**
 * A manager for reference V-speed user settings.
 */
declare class VSpeedUserSettingManager implements UserSettingManager<VSpeedUserSettingTypes> {
    /** An map of groups (keyed on group type) containing the reference V-speeds for which this manager contains settings. */
    readonly vSpeedDefs: readonly VSpeedDefinition[];
    private readonly manager;
    private readonly aliasedManager;
    /**
     * Creates a new instance of VSpeedUserSettingManager.
     * @param bus The event bus.
     * @param vSpeedDefs Definitions for each reference V-speed for which to create settings.
     */
    constructor(bus: EventBus, vSpeedDefs: readonly VSpeedDefinition[]);
    /** @inheritDoc */
    tryGetSetting<K extends string>(name: K): K extends keyof VSpeedUserSettingTypes ? UserSetting<VSpeedUserSettingTypes[K]> : undefined;
    /** @inheritDoc */
    getSetting<K extends keyof VSpeedUserSettingTypes & string>(name: K): UserSetting<NonNullable<VSpeedUserSettingTypes[K]>>;
    /** @inheritDoc */
    whenSettingChanged<K extends keyof VSpeedUserSettingTypes & string>(name: K): Consumer<NonNullable<VSpeedUserSettingTypes[K]>>;
    /** @inheritDoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritDoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, VSpeedUserSettingTypes>): UserSettingManager<M & VSpeedUserSettingTypes>;
}

/**
 * Component props for Gdu460PfdInstrumentsView.
 */
interface Gdu460PfdInstrumentsViewProps extends UiViewProps {
    /** The global avionics configuration object. */
    config: AvionicsConfig;
    /** The configuration object for the view's parent instrument. */
    instrumentConfig: InstrumentConfig;
    /** The plugin system of the view's parent instrument. */
    pluginSystem: PluginSystem<G3XTouchPlugin, G3XTouchPluginBinder>;
    /** The CAS system. */
    casSystem: CasSystem;
    /** A registrar for PFD insets. */
    insetRegistrar: PfdInsetRegistrar;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of wind data. */
    windDataProvider: WindDataProvider;
    /** VNav DataProvider */
    vnavDataProvider: VNavDataProvider;
    /** Minimums data provider */
    minimumsDataProvider: MinimumsDataProvider;
    /** A manager for aliased GDU user settings. */
    gduAliasedSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A collection of all navigation indicators. */
    navIndicators: G3XTouchNavIndicators;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
    /** VSpeed Manager */
    vSpeedSettingManager: VSpeedUserSettingManager;
}
/**
 * A PFD instruments display.
 */
declare class Gdu460PfdInstrumentsView extends AbstractUiView<Gdu460PfdInstrumentsViewProps> {
    private thisNode?;
    private readonly leftInsetRef;
    private readonly rightInsetRef;
    private readonly insetSizeMode;
    private readonly horizonRef;
    private readonly horizonSize;
    private readonly horizonAircraftSymbolSingleCueBarSpan;
    private readonly horizonAircraftSymbolSingleCueBarSpanState;
    private readonly declutterManager;
    private readonly afcsRef;
    private readonly afcsMaxVerticalRightSlots;
    private readonly windDisplayRef;
    private readonly aoaDataProvider;
    private readonly airspeedIndicatorDataProvider;
    private readonly airspeedIndicatorGsDataProvider;
    private readonly altimeterDataProvider;
    private readonly vsiDataProvider;
    private readonly vdiDataProvider;
    private readonly altitudeAlerter;
    private readonly minimumsAlerter;
    private readonly slipSkidDataProvider;
    private readonly hsiDataProvider;
    private readonly markerBeaconDataProvider;
    private readonly leftKnobActionHandler;
    private readonly rightKnobActionHandler;
    private readonly pluginComponents;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /**
     * Updates this view's child components when its size changes.
     * @param sizeMode The new size mode of this view.
     * @param dimensions The new dimensions of this view, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /**
     * Responds to when this view's PFD inset size mode changes.
     * @param sizeMode The new size mode of this view's PFD insets.
     */
    private onInsetSizeModeChanged;
    /**
     * Responds to when this view's single-cue aircraft symbol bar span state changes.
     * @param state The new single-cue aircraft symbol bar span state, as `[isPaneSplit, eisLayout]`.
     */
    private onHorizonAircraftSymbolSingleCueBarSpanState;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this view's flap/trim gauges.
     * @returns This view's rendered flap/trim gauges, as a VNode.
     */
    private renderTrimFlapGauges;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for PfdMapView.
 */
interface PfdMapViewProps extends UiViewProps {
    /** The traffic system used by the view's map to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A PFD map view.
 */
declare class PfdMapView extends AbstractUiView<PfdMapViewProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private readonly touchPadRef;
    private readonly mapSize;
    private readonly mapTrackUpTargetOffset;
    private readonly mapCompassArcAngularWidth;
    private readonly compiledMap;
    private readonly mapOrientationOverrideModule;
    private readonly mapCompassArcModule;
    private readonly mapDragPanModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private avionicsStatusSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's child components when the size of this page's parent UI view changes.
     * @param sizeMode The new size mode of this page.
     * @param dimensions The new dimensions of this page, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /** @inheritdoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this page's map range index.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for the {@link RadioVolumeShortcutPopup}
 */
interface RadioVolumeShortcutPopupProps extends UiViewProps {
    /**
     * radios config.
     */
    radiosConfig: RadiosConfig;
}
/**
 * A popup that allows the user to change the volume of a COM or NAV radio.
 */
declare class RadioVolumeShortcutPopup extends AbstractUiView<RadioVolumeShortcutPopupProps> {
    private radioIndex;
    private radioType;
    private simRadioIndex;
    private readonly squelchButtonClass;
    private readonly popupClass;
    /**
     * Volume slider value.
     * range: 0 - 100
     */
    private readonly volume;
    private readonly label;
    private thisNode?;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Request the volume slider popup.
     * @param radioType type of radio
     * @param radioIndex - 1 or 2
     * @throws Error if simRadioIndex is not 1 or 2
     */
    request(radioType: RadioType.Com | RadioType.Nav, radioIndex: 1 | 2): void;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Statuses for a G3X Touch avionics unit (GDU).
 */
declare enum AvionicsStatus {
    Off = 0,
    Booting1 = 1,
    Booting2 = 2,
    On = 3,
    Reversionary = 4,
    Failed = 5
}

/**
 * An event describing a change in the avionics global power state. The global power state is off (`false`) if all
 * avionics units have a status equal to {@link AvionicsStatus.Off}, and on (`true`) otherwise.
 */
type AvionicsStatusGlobalPowerEvent = {
    /**
     * The previous global power state. A value of `undefined` indicates a power state could not be derived because no
     * avionics unit had yet reported its status.
     */
    previous: boolean | undefined;
    /**
     * The current global power state. A value of `undefined` indicates a power state could not be derived because no
     * avionics unit has yet reported its status.
     */
    current: boolean | undefined;
};
/**
 * An event describing a change in avionics unit status.
 */
type AvionicsStatusChangeEvent = {
    /** The previous status of the avionics unit (GDU). */
    previous: AvionicsStatus | undefined;
    /** The current status of the avionics unit (GDU). */
    current: AvionicsStatus;
};
/**
 * Events related to the status of G3X Touch avionics units (GDUs).
 */
interface AvionicsStatusEvents {
    /** The avionics global power state has changed. */
    avionics_global_power: Readonly<AvionicsStatusGlobalPowerEvent>;
    /**
     * The status of an avionics unit has changed. The suffix of the topic is the UID of the avionics unit, in the form
     * `'[index]'`, `[index]` is the index of the avionics unit (GDU).
     */
    [avionics_status: `avionics_status_${string}`]: Readonly<AvionicsStatusChangeEvent>;
}

/**
 * Component props for a G3X Touch GDU display.
 */
interface GduDisplayProps extends ComponentProps {
    /** The general avionics configuration object. */
    config: AvionicsConfig;
    /** The configuration object of the display's parent instrument. */
    instrumentConfig: InstrumentConfig;
    /** The plugin system of the display's parent instrument. */
    pluginSystem: PluginSystem<G3XTouchPlugin, G3XTouchPluginBinder>;
    /** The logic host for the GDU's gauges.*/
    xmlLogicHost: CompositeLogicXMLHost;
    /** The event bus. */
    bus: EventBus;
    /** The FMS instance. */
    fms: G3XFms;
    /** The UI service. */
    uiService: UiService;
    /** A provider of GPS position integrity data. */
    gpsIntegrityDataProvider: GpsIntegrityDataProvider;
    /** The factory to use to create data models for nav data bar fields. */
    navDataBarFieldModelFactory: NavDataBarFieldModelFactory;
    /** The renderer to use to render nav data bar fields. */
    navDataBarFieldRenderer: NavDataFieldRenderer;
    /** The GPS validity state for nav data fields. */
    navDataFieldGpsValidity: Subscribable<NavDataFieldGpsValidity>;
    /** A controller for editing nav data bar fields. */
    navDataBarEditController: G3XNavDataBarEditController;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
    /** Whether the display's UI pane 1 is visible. */
    isPane1Visible: Subscribable<boolean>;
    /** Whether the display's UI pane 2 is visible. */
    isPane2Visible: Subscribable<boolean>;
    /**
     * A function to call when the display's sim assisted checklist highlight layer element has been rendered.
     * @param ref A reference to the display's rendered sim assisted checklist highlight layer element.
     */
    onChecklistHighlightRendered?: (ref: NodeReference<HTMLElement>) => void;
}
/**
 * A G3X Touch GDU display.
 */
interface GduDisplay<P extends GduDisplayProps = GduDisplayProps> extends DisplayComponent<P> {
    /**
     * Responds to when the avionics status of this display's parent instrument changes.
     * @param event The event describing the avionics status change.
     */
    onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
}

/**
 * A GDU460 (10.6-inch landscape) display.
 */
declare class Gdu460Display extends DisplayComponent<GduDisplayProps> implements GduDisplay<GduDisplayProps> {
    private static readonly WIDTH;
    private static readonly HEIGHT;
    private static readonly MAIN_CONTAINER_HEIGHT;
    private static readonly EIS_WIDTHS;
    private readonly rootRef;
    private readonly checklistHighlightRef;
    private readonly rootCssClass;
    private readonly bootSplashHidden;
    private readonly bootSplashInfoHidden;
    private readonly temperatureDataProvider;
    private readonly unitsSettingManager;
    private readonly paneContainerRef;
    private readonly pfdViewStackContainerRef;
    private readonly mfdViewStackContainerRef;
    private readonly paneFullSize;
    private readonly paneHalfSize;
    private readonly eisWidth;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this display's EIS changes layout.
     * @param layout The layout of this display's EIS.
     */
    private onEisLayoutChanged;
    /**
     * Responds to when the side on which this display's PFD pane is positioned changes.
     * @param side The new side on which this display's PFD pane is positioned.
     */
    private onPfdPaneSideChanged;
    /** @inheritDoc */
    onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
    /**
     * Responds to when the PFD pane is updated.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    private onPfdPaneUpdated;
    /**
     * Responds to when the MFD pane is updated.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    private onMfdPaneUpdated;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this display's EIS.
     * @returns This display's EIS, as a VNode, or `null` if this display does not have an EIS.
     */
    private renderEis;
    /**
     * Renders this display's PFD pane.
     * @returns This display's rendered PFD pane, as a VNode.
     */
    private renderPfdPane;
    /**
     * Renders this display's MFD pane.
     * @returns This display's rendered MFD pane, as a VNode.
     */
    private renderMfdPane;
}

/**
 * Component props for {@link UiNearestWaypointDisplay}.
 */
interface UiNearestWaypointDisplayProps extends ComponentProps {
    /** An information store for the waypoint to display. */
    waypointInfoStore: WaypointInfoStore;
    /**
     * Whether to display city information for applicable waypoints (airports, VORs, NDBs) instead of their names.
     * Defaults to `false`.
     */
    showCity?: boolean | Subscribable<boolean>;
    /** Whether to the hide the information displayed on the right side of the display. Defaults to `false`. */
    hideRightInfo?: boolean | Subscribable<boolean>;
    /**
     * Bit flags to use for filtering runways based on surface category when displaying longest runway information for
     * airports. Defaults to all flags set to `1` (`true`).
     */
    runwaySurfaceFilter?: number | Subscribable<number>;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** The CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * Displays information about a nearest waypoint.
 */
declare class UiNearestWaypointDisplay extends DisplayComponent<UiNearestWaypointDisplayProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly NAV_ANGLE_MAGNETIC;
    private static readonly UNIT_FORMATTER;
    private static readonly RADIAL_FORMATTER;
    private readonly iconRef;
    private readonly bottomHidden;
    private readonly rightHidden;
    private readonly identText;
    private readonly topRightText;
    private readonly bottomLeftText;
    private readonly facilityHandler;
    private readonly showCity;
    private readonly namePipe;
    private readonly cityPipe;
    private readonly runwaySurfaceFilter;
    private readonly runway;
    private readonly runwayPipe;
    private readonly subscriptions;
    private showCitySub?;
    private runwaySurfaceFilterSub?;
    private facilitySub?;
    private topRightPipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this display's waypoint changes.
     * @param waypoint The new waypoint to display.
     */
    private onWaypointChanged;
    /**
     * Responds to when the facility associated with this display's waypoint changes.
     * @param facility The new facility associated with this display's waypoint.
     */
    private onFacilityChanged;
    /**
     * Responds to when whether to show city information instead of waypoint name changes.
     * @param showCity Whether to show city information instead of waypoint name.
     */
    private onShowCityChanged;
    /**
     * Updates the runway for which to display information. If the display's waypoint is not an airport, then the runway
     * will be set to `null`.
     */
    private updateRunway;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for UiListItem.
 */
interface UiListItemProps extends ComponentProps {
    /**
     * Whether the list item's designated focusable child determines whether the list item can be focused. If `true`,
     * then the list item can be focused if and only if the designated child exists and can be focused. If `false`, then
     * the list item can always be focused. Defaults to `false`.
     */
    designatedChildDrivesFocusable?: boolean;
    /** Whether to hide the list item's border. Defaults to `false`. */
    hideBorder?: boolean;
    /**
     * A function which is called when the list item gains UI focus.
     * @param direction The direction from which the list item gained focus.
     */
    onFocusGained?: (direction: UiFocusDirection) => void;
    /**
     * A function which is called when the list item loses UI focus.
     */
    onFocusLost?: () => void;
    /** A callback function to execute when the list item is destroyed. */
    onDestroy?: () => void;
}
/**
 * An item meant to be rendered within a UI list as a list item. The item consists of a root container which can be
 * focused by touching it. Additionally, one descendant of the item can be designated as a focusable component
 * by wrapping it with a {@link UiListFocusable}. If a focusable component is designated, it will gain focus
 * when the item gains focus and vice versa. If multiple descendants are wrapped with {@link UiListFocusable},
 * then only the first one found using a depth-first search will be designated.
 *
 * By default, the item is highlighted with a cyan border when it is focused unless its designated focusable component
 * is also focused.
 */
declare class UiListItem extends DisplayComponent<UiListItemProps> implements UiInteractionHandler {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    private readonly rootButtonRef;
    private thisNode?;
    private childrenNode?;
    private readonly _canBeFocused;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    private readonly focusController;
    private readonly isChildFocusable;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this list item's root button gains focus.
     * @param button This list item's root button.
     * @param direction The direction from which the root button gained focus.
     */
    private onFocusGained;
    /**
     * Responds to when this list item's root button loses focus.
     */
    private onFocusLost;
    /**
     * Responds to when this list item's focusable child gains or loses focus.
     * @param component This list item's focusable child if it gained focus, or `null` if the child lost focus.
     */
    private onFocusedComponentChanged;
    /**
     * Responds to when this list item's root button is touched.
     * @param button The button that was touched.
     * @returns The action to take as a result of the button being touched.
     */
    private onTouched;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A data item describing a nearest waypoint.
 */
interface NearestWaypointEntry<W extends Waypoint> {
    /** This data item's waypoint. */
    readonly waypoint: W;
    /** An info store for this data item's waypoint. */
    readonly store: WaypointInfoStore;
    /** The bearing from the airplane to this data item's waypoint, in degrees, relative to the current airplane heading. */
    readonly relativeBearing: Subscribable<number>;
    /** Destroys this data item. */
    destroy(): void;
}

/**
 * Component props for {@link UiNearestWaypointListItem}.
 */
interface UiNearestWaypointListItemProps<W extends Waypoint, EntryType extends NearestWaypointEntry<W> = NearestWaypointEntry<W>> extends Omit<UiListItemProps, 'onFocusGained' | 'onFocusLost'> {
    /** Data pertaining to the list item's waypoint. */
    entry: EntryType;
    /**
     * Whether to display the bearing and distance to the waypoint in the compact form. In the compact form, the bearing
     * and distance are stacked in a single column to take up less horizontal space. Defaults to `false`.
     */
    compactBrgDis?: boolean | Subscribable<boolean>;
    /**
     * Whether to display city information for applicable waypoints (airports, VORs, NDBs) instead of their names.
     * Defaults to `false`.
     */
    showCity?: boolean | Subscribable<boolean>;
    /**
     * Bit flags to use for filtering runways based on surface category when displaying longest runway information for
     * airports. Defaults to all flags set to `1` (`true`).
     */
    runwaySurfaceFilter?: number | Subscribable<number>;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** The format of the list item's parent GDU display. */
    gduFormat: GduFormat;
    /**
     * A function which is called when the list item gains UI focus.
     * @param entry The entry for the list item's waypoint.
     */
    onFocusGained?: (entry: EntryType) => void;
    /**
     * A function which is called when the list item loses UI focus.
     * @param entry The entry for the list item's waypoint.
     */
    onFocusLost?: (entry: EntryType) => void;
    /**
     * A function which is called when the list item's waypoint button is pressed.
     * @param entry The entry for the list item's waypoint.
     */
    onButtonPressed?: (entry: EntryType) => void;
    /** The CSS class(es) to apply to the list item's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A nearest waypoint list item.
 */
declare class UiNearestWaypointListItem<W extends Waypoint, EntryType extends NearestWaypointEntry<W> = NearestWaypointEntry<W>> extends DisplayComponent<UiNearestWaypointListItemProps<W, EntryType>> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly BEARING_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private readonly itemRef;
    private readonly rootCssClass;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this list item gains focus.
     */
    private onFocusGained;
    /**
     * Responds to when this list item loses focus.
     */
    private onFocusLost;
    /**
     * Responds to when this list item's waypoint button is pressed.
     */
    private onButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdPageNavBar}.
 */
interface MfdPageNavBarProps extends ComponentProps {
    /**
     * An iterable of definitions for the navigation bar's selectable pages in the order in which their labels should
     * appear in the navigation bar's page list.
     */
    pageDefs: Iterable<Readonly<MfdPageDefinition>>;
    /** The UI service instance. */
    uiService: UiService;
    /** The key of the selected page. */
    selectedPageKey: Subscribable<string>;
    /** The selected page's title. */
    selectedPageTitle: Subscribable<string>;
    /** The file path to the selected page's icon image asset. */
    selectedPageIconSrc: Subscribable<string>;
    /** The width of the each page label, in pixels, in the navigation bar's page list. */
    labelWidth: number;
    /** The maximum number of page labels to show simultaneously in the navigation bar's page list. */
    maxLabelsPerListPage: Subscribable<number>;
    /** The key of the page select dialog to open when the navigation bar is pressed. */
    pageSelectDialogKey: string;
    /**
     * A function which is called when a page is selected through the navigation bar.
     * @param pageDef The definition for the selected page.
     */
    onPageSelected: (pageDef: Readonly<MfdPageDefinition>) => void;
}
/**
 * An MFD page navigation bar.
 */
declare class MfdPageNavBar extends DisplayComponent<MfdPageNavBarProps> implements UiInteractionHandler {
    private static readonly SELECTED_LABEL_HIDE_DURATION;
    private readonly buttonRef;
    private readonly labelListRef;
    private readonly pageDefs;
    private readonly selectedPageTitle;
    private readonly selectedPageIconSrc;
    protected readonly _knobLabelState: FilteredMapSubject<UiKnobId, string>;
    /** @inheritdoc */
    readonly knobLabelState: Subscribable<UiKnobRequestedLabelState>;
    private selectedPageIndex;
    private readonly _isResumed;
    private readonly labelsPerListPage;
    private readonly isLeftArrowHidden;
    private readonly isRightArrowHidden;
    private readonly selectedLabelHiddenDebounce;
    private readonly isSelectedLabelHidden;
    private readonly showSelectedLabelFunc;
    private readonly subs;
    private selectedPageKeySub?;
    private labelsPerListPageSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Resumes this navigation bar. When this bar is resumed, it will handle
     */
    resume(): void;
    /**
     * Pauses this navigation bar.
     */
    pause(): void;
    /**
     * Gets the index of a page definition with a given key.
     * @param key The key for which to search.
     * @returns The index of the page definition with the specified key, or `-1` if the key could not be found.
     */
    private indexOfPageDef;
    /**
     * Renders this navigation bar's page label buttons.
     */
    private renderLabels;
    /**
     * Responds to when the key of the selected page changes.
     * @param key The key of the new selected page.
     */
    private onSelectedPageKeyChanged;
    /**
     * Responds to when the maximum number of page labels per scrolling list page changes.
     * @param count The new maximum number of page labels per scrolling list page.
     */
    private onMaxLabelsPerListPageChanged;
    /**
     * Responds to when this navigation bar's page label list's scroll position changes.
     * @param root0 The state of the page label list's scroll position.
     * @param root0."0" The page label list's maximum allowed scroll position, in pixels.
     * @param root0."1" The page label list's new scroll position, in pixels.
     */
    private onLabelListScrollChanged;
    /**
     * Responds to when the user presses this navigation bar.
     */
    private onButtonPressed;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes the selected page to the next or previous valid page in this navigation bar's page list.
     * @param direction The direction in which to change the selected page (`1` = forward, `-1` = backward).
     */
    private changeSelectedPage;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/** The parameters needed to display a selection list for {@link UiListDialog}. */
type UiListDialogParams<T> = {
    /**
     * An array of list item definitions. Each definition defines one selectable value and how the value is to be
     * displayed in the list.
     */
    inputData: ListDialogItemDefinition<T>[];
    /**
     * The currently selected value. The list will initially scroll to and focus the list item associated with the
     * selected value (unless overridden by `scrollToValue`). The list item associated with the selected value is also
     * optionally highlighted depending on the value of `highlightSelectedValue`.
     */
    selectedValue?: T | Subscribable<T>;
    /** Whether to highlight the list item associated with the selected value. Defaults to `false`. */
    highlightSelectedValue?: boolean;
    /**
     * The value associated with the list item to which to initially scroll. If not defined, then the list will initially
     * scroll to the list item associated with the selected value (if one exists).
     */
    scrollToValue?: T;
    /** Whether to style the rendered buttons in the list as list items instead of touchscreen buttons. */
    styleButtonsAsListItems?: boolean;
    /** CSS class(es) to apply to the dialog's root element. */
    class?: string;
    /** The height of each list item, in pixels. */
    listItemHeightPx?: number;
    /** The amount of space between each list item, in pixels. */
    listItemSpacingPx?: number;
    /** The number of list items per page to display. Defaults to 5. */
    itemsPerPage?: number;
    /**
     * The maximum number of list items that can be rendered simultaneously. The value will be clamped to be greater than
     * or equal to `itemsPerPage * 3`. Defaults to 25.
     */
    maxRenderedItemCount?: number;
    /**
     * Whether to automatically disable overscrolling when the total height of all the selection list's items does not
     * exceed the list's visible height. Defaults to `false`.
     */
    autoDisableOverscroll?: boolean;
    /**
     * Whether to show the list's scroll bar. If `true`, then space is always reserved for the scroll bar, and its
     * visibility depends on the `fadeScrollBar` option. If `false`, then no space is reserved for the scroll bar and it
     * is always hidden. If `auto`, then space is reserved for the scroll bar if and only if the total height of all the
     * list's items exceeds the list's visible height. Defaults to `auto`.
     */
    showScrollBar?: boolean | 'auto';
    /**
     * Whether to fade out the selection list's scroll bar when the total height of all the list's items is less than or
     * equal to the list's visible height. Space is reserved for the scroll bar even when it is faded out. Defaults to
     * `true`.
     */
    fadeScrollBar?: boolean;
};
/**
 * A definition for a selection list item in a {@link UiListDialog}.
 */
type ListDialogItemDefinition<T> = {
    /** A function which renders the list item button's label. */
    labelRenderer: () => string | VNode;
    /** The value to return out of the dialog when the list item is selected. */
    value: T;
    /**
     * A callback function to execute when a list item button is pressed. The function should accept the value of the
     * item as a parameter and return whether the pending request should be fulfilled with the value. If not defined,
     * pressing the button will always fulfill the pending request with the value of the list item.
     */
    onPressed?: (value: T) => boolean | Promise<boolean>;
    /** Whether the list item button is enabled or not. Defaults to true. */
    isEnabled?: boolean;
    /** A callback function to execute when the list item is destroyed. */
    onDestroy?: () => void;
};
/**
 * A pop-up dialog which allows the user to select an item from a vertically scrolling list.
 */
declare class UiListDialog extends AbstractUiView implements UiDialogView<UiListDialogParams<any>, any> {
    private static readonly RESERVED_CLASSES;
    private readonly listRef;
    private readonly rootCssClass;
    private readonly listItemHeightPxDefault;
    private readonly listItemSpacingPxDefault;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    private readonly itemsPerPage;
    private readonly maxRenderedItemCount;
    private readonly autoDisableOverscroll;
    private readonly showScrollBar;
    private readonly fadeScrollBar;
    private readonly data;
    private cssClassesToAdd?;
    private readonly selectedValue;
    private selectedValuePipe?;
    private readonly highlightedValue;
    private readonly highlightedValuePipe;
    private styleButtonsAsListItems;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Requests a selected value from this dialog. Based on the input parameters, the dialog will display a list of
     * buttons, each one causing a certain value to be selected when pressed.
     * @param input The input parameters.
     * @returns A Promise which is fulfilled with the selected value when a selection is made, or with an empty payload
     * if this dialog is closed or `request()` is called again before a selection is made.
     * @throws Error if the dialog has been destroyed.
     */
    request<T>(input: UiListDialogParams<T>): Promise<UiDialogResult<T>>;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Clears this dialog's list and resolves the pending request Promise if one exists.
     */
    private cleanupList;
    /**
     * Renders a button for an item defintion.
     * @param itemDef The item definition for which to render the button.
     * @returns A rendered button for the specified item definition, as a VNode.
     */
    private renderButton;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A touch button that can be focused.
 */
interface FocusableTouchButton extends DisplayComponent<any>, UiFocusableComponent {
    /**
     * Simulates this button being pressed.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
}
/**
 * Options for {@link UiTouchButtonFocusModule}.
 */
type UiTouchButtonFocusModuleOptions = {
    /**
     * A function which handles {@link UiInteractionEvent|UiInteractionEvents} routed to the module. If not defined, then
     * the module will handle bezel rotary knob press events by calling the `simulatePressed()` method of its parent
     * button and ignore all other events.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent) => boolean;
};
/**
 * A module which handles UI focus for a touchscreen button.
 *
 * The module syncs whether it can be focused with whether its parent button is enabled. When registered with a focus
 * controller, the module will attempt to set focus on itself. Finally, the module handles adding the
`ui-button-focused` CSS class to the button's class list when focused.
 */
declare class UiTouchButtonFocusModule implements UiFocusableComponent {
    private readonly button;
    private readonly options?;
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    private parentController?;
    private readonly _canBeFocused;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** Whether this module's parent button is enabled. */
    readonly isEnabled: Subscribable<boolean>;
    /** Whether this module's parent button is visible. */
    readonly isVisible: Subscribable<boolean>;
    private readonly _cssClass;
    /** The set of CSS classes to apply to this module's parent button, including any that are applied by this module. */
    readonly cssClass: SubscribableSet<string>;
    private readonly subs;
    /**
     * Creates a new instance of UiTouchButtonFocusModule.
     * @param button This module's parent button.
     * @param isButtonVisible Whether this module's parent button is visible.
     * @param isButtonEnabled Whether this module's parent button is enabled.
     * @param buttonCanBeFocused Whethe this module's parent button can be focused.
     * @param cssClass CSS class(es) to apply to this module's parent button.
     * @param options Options with which to configure this module.
     */
    constructor(button: FocusableTouchButton, isButtonVisible: boolean | Subscribable<boolean> | undefined, isButtonEnabled: boolean | Subscribable<boolean> | undefined, buttonCanBeFocused: boolean | Subscribable<boolean> | undefined, cssClass?: string | SubscribableSet<string> | ToggleableClassNameRecord, options?: Readonly<UiTouchButtonFocusModuleOptions> | undefined);
    /**
     * Attempts to set focus on this module's parent button.
     */
    focusButton(): void;
    /**
     * Responds to when this module's parent button is touched.
     */
    onButtonTouched(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Destroys this module.
     */
    destroy(): void;
}

/**
 * Component props for UiValueTouchButton.
 */
interface UiValueTouchButtonProps<S extends Subscribable<any>> extends Omit<ValueTouchButtonProps<S>, 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'focusOnDrag' | 'class'> {
    /**
     * A callback function which will be called every time the button is touched (i.e. a mouse down event on the button
     * is detected). If not defined, then the button will default to entering the primed state when touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @returns The action to take as a result of the button being touched.
     */
    onTouched?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, state: S) => TouchButtonOnTouchedAction;
    /**
     * A callback function which will be called when the button is pressed.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param isHeld Whether the button was held when it was pressed.
     */
    onPressed?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, state: S, isHeld: boolean) => void;
    /**
     * A function which is called when the button enters the held state. If not defined, then the button will default to
     * taking no specific action when it enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    onHoldStarted?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, state: S) => TouchButtonHoldAction;
    /**
     * A function which is called every frame when the button is held. If not defined, then the button will default to
     * taking no specific action with each frame tick.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that the button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that the button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    onHoldTick?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, state: S, dt: number, totalTime: number, timeSinceLastPress: number) => TouchButtonHoldAction;
    /**
     * A function which is called when the button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param totalHoldDuration The total amount of time, in milliseconds, that the button was held.
     * @param endReason The reason that the button exited the held state.
     */
    onHoldEnded?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, state: S, totalHoldDuration: number, endReason: TouchButtonHoldEndReason) => void;
    /**
     * A function which is called when the button gains UI focus.
     * @param button The button that gained UI focus.
     */
    onFocusGained?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the button loses UI focus.
     * @param button The button that lost UI focus.
     */
    onFocusLost?: <B extends UiValueTouchButton<S> = UiValueTouchButton<S>>(button: B) => void;
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The format of the button's parent GDU display. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the button after it is rendered. If not defined, then
     * the button will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the button can be focused. Irrespective of this value, the button cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the button's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchButtonFocusModuleOptions>;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of {@link ValueTouchButton}. Supports UI focus, enables focus on drag by default and
 * provides convenience props for handling drag behavior while in a scrollable list.
 *
 * The root element of the button conditionally contains the `ui-button-focused` CSS class when the button has UI
 * focus.
 */
declare class UiValueTouchButton<S extends Subscribable<any>> extends DisplayComponent<UiValueTouchButtonProps<S>> implements UiFocusableComponent {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    protected readonly buttonRef: _microsoft_msfs_sdk.NodeReference<ValueTouchButton<S>>;
    protected readonly focusModule: UiTouchButtonFocusModule;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Attempts to set focus on this button.
     */
    focusSelf(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this button is touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @returns The action to take as a result of the button being touched.
     */
    protected onTouched(button: ValueTouchButton<S>, state: S): TouchButtonOnTouchedAction;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param isHeld Whether the button was held when it was pressed.
     */
    protected onPressed(button: ValueTouchButton<S>, state: S, isHeld: boolean): void;
    /**
     * Responds to when this button enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    protected onHoldStarted(button: ValueTouchButton<S>, state: S): TouchButtonHoldAction;
    /**
     * A callback which is called every frame when this button is held.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that this button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that this button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    protected onHoldTick(button: ValueTouchButton<S>, state: S, dt: number, totalTime: number, timeSinceLastPress: number): TouchButtonHoldAction;
    /**
     * Responds to when this button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param totalHoldDuration The total amount of time, in milliseconds, that this button was held.
     * @param endReason The reason that this button exited the held state.
     */
    protected onHoldEnded(button: ValueTouchButton<S>, state: S, totalHoldDuration: number, endReason: TouchButtonHoldEndReason): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for UiListSelectTouchButton.
 */
interface UiListSelectTouchButtonProps<S extends MutableSubscribable<any, any>> extends Omit<UiValueTouchButtonProps<S>, 'state' | 'onPressed' | 'gduFormat'> {
    /** The UI service. */
    uiService: UiService;
    /** The view stack layer in which to open the button's UI list dialog. */
    listDialogLayer: UiViewStackLayer;
    /** The key of the UI list dialog the button will open as a selection list. */
    listDialogKey: string;
    /**
     * Whether to open the button's UI list dialog as a positioned popup. If `false`, then the dialog will be opened as a
     * normal popup. Defaults to `false`.
     */
    openDialogAsPositioned?: boolean;
    /**
     * A reference to the UI view container that contains the button. Required in order to open the button's UI list
     * dialog as a positioned popup.
     */
    containerRef?: NodeReference<HTMLElement>;
    /**
     * The reference corner of the button's UI list dialog, which will be aligned to the button if
     * `openDialogAsPositioned` is `true`. Defaults to `top-left`.
     */
    dialogPositionReference?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
     * The edges of the button to which to align the reference corner of the button's UI list dialog. Ignored if
     * `openDialogAsPositioned` is `false`. Defaults to `top-left`.
     */
    dialogPositionAlign?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    /**
     * The horizontal offset to apply to the button's UI list dialog positioning after alignment with the button, in
     * pixels. Ignored if `openDialogAsPositioned` is `false`. Defaults to `0`.
     */
    dialogPositionXOffset?: number;
    /**
     * The vertical offset to apply to the button's UI list dialog positioning after alignment with the button, in
     * pixels. Ignored if `openDialogAsPositioned` is `false`. Defaults to `0`.
     */
    dialogPositionYOffset?: number;
    /** The occlusion type to apply to views beneath the UI list dialog popup. Defaults to `'darken'`. */
    dialogBackgroundOcclusion?: UiViewOcclusionType;
    /** Whether to hide the button's dropdown arrow. Defaults to `false`. */
    hideDropdownArrow?: boolean;
    /** A mutable subscribable whose state will be bound to the button. */
    state: S;
    /**
     * When true, the button will be highlighted while the list is open, and the isHighlighted prop will be ignored.
     * Defaults to false.
     */
    highlightButtonWhileListIsOpen?: boolean;
    /**
     * Parameters to pass to the selection list dialog, or a function which will return the parameters when called each
     * time the list is opened.
     */
    listParams: UiListDialogParams<MutableSubscribableInputType<S>> | ((state: S) => UiListDialogParams<MutableSubscribableInputType<S>>);
    /**
     * A callback function which will be called each time a value is selected from a list dialog opened by the button. If
     * not defined, then selecting a value from the list will automatically set the button's bound state.
     */
    onSelected?: <B extends UiListSelectTouchButton<S> = UiListSelectTouchButton<S>>(value: MutableSubscribableInputType<S>, state: S, button: B) => void;
    /**
     * A callback function which will be called each time a list dialog opened by the button is closed before a value is
     * selected.
     */
    onCancelled?: <B extends UiListSelectTouchButton<S> = UiListSelectTouchButton<S>>(state: S, button: B) => void;
}
/**
 * A touchscreen button which displays the value of a bound state and when pressed, opens a selection list dialog to
 * optionally set the value of the bound state.
 *
 * The button uses a {@link UiValueTouchButton} for rendering and touch functionality. All children are rendered as
 * children of the `UiValueTouchButton`.
 */
declare class UiListSelectTouchButton<S extends MutableSubscribable<any>> extends DisplayComponent<UiListSelectTouchButtonProps<S>> {
    private static readonly RESERVED_CLASSES;
    private readonly buttonRef;
    private readonly isListOpen;
    private readonly listParamsFunc;
    /** A reference to this button's focusable component. */
    readonly focusableComponentRef: NodeReference<UiFocusableComponent & DisplayComponent<any, []>>;
    private cssClassSub?;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param state The button's bound state.
     */
    private onPressed;
    /**
     * Gets the options to use when opening the UI list dialog.
     * @returns The options to use when opening the UI list dialog.
     */
    private getDialogOpenOptions;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this button's dropdown arrow and divider.
     * @returns This button's rendered dropdown arrow and divider, as a VNode.
     */
    private renderDropdownArrow;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Selection list dialog parameters used by {@link MapRangeSettingSelectButton}.
 */
type MapRangeSettingSelectButtonListParams = Omit<UiListDialogParams<number>, 'inputData' | 'selectedValue'>;
/**
 * Component props for MapRangeSettingSelectButton.
 */
interface MapRangeSettingSelectButtonProps extends Omit<UiListSelectTouchButtonProps<MutableSubscribable<number>>, 'listParams'> {
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** The index of the smallest selectable map range, inclusive. */
    startIndex: number;
    /** The index of the largest selectable map range, inclusive. */
    endIndex: number;
    /** Whether to include the 'Off' (`-1`) setting in the selection list. */
    includeOff?: boolean;
    /** Parameters to pass to the selection list dialog. */
    listParams: Readonly<MapRangeSettingSelectButtonListParams>;
}
/**
 * A touchscreen button which displays the value of a map range setting and when pressed, opens a selection list dialog
 * to set the value of the setting.
 */
declare class MapRangeSettingSelectButton extends DisplayComponent<MapRangeSettingSelectButtonProps> {
    private readonly buttonRef;
    /** A reference to this button's focusable component. */
    readonly focusableComponentRef: _microsoft_msfs_sdk.NodeReference<UiFocusableComponent & DisplayComponent<any, []>>;
    private readonly mapRangeArray;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link UiWaypointDisplay}.
 */
interface UiWaypointDisplayProps extends ComponentProps {
    /** The waypoint to display. */
    waypoint: FacilityWaypoint | null | Subscribable<FacilityWaypoint | null>;
    /** The string to display in place of the ident when the displayed waypoint is `null`. Defaults to the empty string. */
    nullIdent?: string | Subscribable<string>;
    /** The string to display in place of the name when the displayed waypoint is `null`. Defaults to the empty string. */
    nullName?: string | Subscribable<string>;
    /** Whether to the hide the information displayed on the right side of the display. Defaults to `false`. */
    hideRightInfo?: boolean | Subscribable<boolean>;
    /** The CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * Displays information about a waypoint, including its identifier, name, type, and city.
 */
declare class UiWaypointDisplay extends DisplayComponent<UiWaypointDisplayProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly VOR_TYPE_TEXT;
    private readonly iconRef;
    private readonly waypoint;
    private readonly facility;
    private readonly nullIdent;
    private readonly nullName;
    private readonly identText;
    private readonly nameText;
    private readonly nameTextHidden;
    private readonly rightHidden;
    private readonly typeText;
    private readonly cityText;
    private readonly cityTextHidden;
    private readonly subscriptions;
    private facilityPipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for UiTouchButton.
 */
interface UiTouchButtonProps extends Omit<TouchButtonProps, 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'focusOnDrag' | 'class'> {
    /**
     * A callback function which will be called every time the button is touched (i.e. a mouse down event on the button
     * is detected). If not defined, then the button will default to attempting to set focus on its focus module and
     * entering the primed state when touched.
     * @param button The button that was touched.
     * @returns The action to take as a result of the button being touched.
     */
    onTouched?: <B extends UiTouchButton = UiTouchButton>(button: B) => TouchButtonOnTouchedAction;
    /**
     * A callback function which will be called every time the button is pressed.
     * @param button The button that was pressed.
     * @param isHeld Whether the button was held when it was pressed.
     */
    onPressed?: <B extends UiTouchButton = UiTouchButton>(button: B, isHeld: boolean) => void;
    /**
     * A function which is called when the button enters the held state. If not defined, then the button will default to
     * taking no specific action when it enters the held state.
     * @param button The button that is held.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    onHoldStarted?: <B extends UiTouchButton = UiTouchButton>(button: B) => TouchButtonHoldAction;
    /**
     * A function which is called every frame when the button is held. If not defined, then the button will default to
     * taking no specific action with each frame tick.
     * @param button The button that is held.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that the button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that the button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    onHoldTick?: <B extends UiTouchButton = UiTouchButton>(button: B, dt: number, totalTime: number, timeSinceLastPress: number) => TouchButtonHoldAction;
    /**
     * A function which is called when the button exits the held state.
     * @param button The button that was held.
     * @param totalHoldDuration The total amount of time, in milliseconds, that the button was held.
     * @param endReason The reason that the button exited the held state.
     */
    onHoldEnded?: <B extends UiTouchButton = UiTouchButton>(button: B, totalHoldDuration: number, endReason: TouchButtonHoldEndReason) => void;
    /**
     * A function which is called when the button gains UI focus.
     * @param button The button that gained UI focus.
     */
    onFocusGained?: <B extends UiTouchButton = UiTouchButton>(button: B, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the button loses UI focus.
     * @param button The button that lost UI focus.
     */
    onFocusLost?: <B extends UiTouchButton = UiTouchButton>(button: B) => void;
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The format of the button's parent GDU display. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the button after it is rendered. If not defined, then
     * the button will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the button can be focused. Irrespective of this value, the button cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the button's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchButtonFocusModuleOptions>;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of {@link TouchButton}. Supports UI focus, enables focus on drag by default and provides
 * convenience props for handling drag behavior while in a scrollable list.
 *
 * The root element of the button conditionally contains the `ui-button-focused` CSS class when the button has UI
 * focus.
 */
declare class UiTouchButton extends DisplayComponent<UiTouchButtonProps> implements UiFocusableComponent {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    protected readonly buttonRef: _microsoft_msfs_sdk.NodeReference<TouchButton<TouchButtonProps>>;
    protected readonly focusModule: UiTouchButtonFocusModule;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Attempts to set focus on this button.
     */
    focusSelf(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this button is touched.
     * @returns The action to take as a result of the button being touched.
     */
    protected onTouched(): TouchButtonOnTouchedAction;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param isHeld Whether the button was held when it was pressed.
     */
    protected onPressed(button: TouchButton, isHeld: boolean): void;
    /**
     * Responds to when this button enters the held state.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    protected onHoldStarted(): TouchButtonHoldAction;
    /**
     * A callback which is called every frame when this button is held.
     * @param button The button that is held.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that this button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that this button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    protected onHoldTick(button: TouchButton, dt: number, totalTime: number, timeSinceLastPress: number): TouchButtonHoldAction;
    /**
     * Responds to when this button exits the held state.
     * @param button The button that was held.
     * @param totalHoldDuration The total amount of time, in milliseconds, that this button was held.
     * @param endReason The reason that this button exited the held state.
     */
    protected onHoldEnded(button: TouchButton, totalHoldDuration: number, endReason: TouchButtonHoldEndReason): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link UiWaypointTouchButton}.
 */
interface UiWaypointTouchButtonProps extends Omit<UiTouchButtonProps, 'label'>, UiWaypointDisplayProps {
    /** The label to display when the button's bound waypoint is `null`. */
    nullLabel?: string | Subscribable<string>;
}
/**
 * A touchscreen button which displays information about a waypoint, including its identifier, name, type, and city.
 */
declare class UiWaypointTouchButton extends DisplayComponent<UiWaypointTouchButtonProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly buttonRef;
    private readonly displayRef;
    private readonly waypoint;
    private readonly nullLabel;
    private readonly cssClass;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Supported facility search types for use in a G3X waypoint search.
 */
type G3XWaypointSearchType = FacilitySearchType.Airport | FacilitySearchType.Intersection | FacilitySearchType.Vor | FacilitySearchType.Ndb | FacilitySearchType.User | FacilitySearchType.AllExceptVisual;
/**
 * A map from G3X waypoint search types to waypoint types.
 */
type G3XWaypointSearchTypeMap = {
    /** Airports. */
    [FacilitySearchType.Airport]: AirportWaypoint;
    /** VORs. */
    [FacilitySearchType.Vor]: FacilityWaypoint<VorFacility>;
    /** NDBs. */
    [FacilitySearchType.Ndb]: FacilityWaypoint<NdbFacility>;
    /** Intersections. */
    [FacilitySearchType.Intersection]: FacilityWaypoint<IntersectionFacility>;
    /** User waypoints. */
    [FacilitySearchType.User]: FacilityWaypoint<UserFacility>;
    /** All waypoints. */
    [FacilitySearchType.AllExceptVisual]: FacilityWaypoint;
};

/**
 * Component props for {@link UiWaypointSelectButton}.
 */
interface UiWaypointSelectButtonProps<T extends G3XWaypointSearchType, S extends Subscribable<G3XWaypointSearchTypeMap[T] | null>> extends Omit<UiWaypointTouchButtonProps, 'waypoint' | 'onPressed' | 'gtcOrientation'> {
    /** The UI service instance. */
    uiService: UiService;
    /** The type of facility allowed to be selected by the button. */
    type: T;
    /** The waypoint state bound to the button. */
    waypoint: S;
    /** A cache used by the button to retrieve waypoints for facilities. */
    waypointCache: GarminFacilityWaypointCache;
    /**
     * A callback function which will be called every time a value is selected from the list. If not defined and the
     * button's bound waypoint state is a mutable subscribable, the bound state will be set to the selected waypoint.
     * @param selectedWaypoint The waypoint that was selected.
     * @param waypointState The waypoint state bound to the button.
     * @param button The button used to initiate the selection.
     */
    onSelected?: <B extends UiWaypointSelectButton<T, S> = UiWaypointSelectButton<T, S>>(selectedWaypoint: G3XWaypointSearchTypeMap[T], waypointState: S, button: B) => void;
    /**
     * A callback function which will be called every time a waypoint selection from the button is cancelled.
     * @param button The button used to initiate the selection that was cancelled.
     * @param waypointState The waypoint state bound to the button.
     */
    onCancelled?: <B extends UiWaypointSelectButton<T, S> = UiWaypointSelectButton<T, S>>(waypointState: S, button: B) => void;
}
/**
 * A touchscreen button which displays information about a waypoint and when pressed allows the user to select a
 * a facility waypoint by ident.
 */
declare class UiWaypointSelectButton<T extends G3XWaypointSearchType, S extends Subscribable<G3XWaypointSearchTypeMap[T] | null>> extends DisplayComponent<UiWaypointSelectButtonProps<T, S>> {
    private readonly buttonRef;
    private readonly mutableWaypoint;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for TabbedContent.
 */
interface TabbedContentProps extends ComponentProps {
    /** The label to display for the tab. */
    tabLabel: string | Subscribable<string> | (() => VNode);
    /** Whether the tab is enabled. Defaults to `true`. */
    isEnabled?: boolean | Subscribable<boolean>;
    /** Whether the tab is visible in the tab list. Defaults to `true`. */
    isVisible?: boolean | Subscribable<boolean>;
}
/**
 * Tab-associated content which can be rendered inside a tabbed container.
 */
interface TabbedContent<P extends TabbedContentProps = TabbedContentProps> extends DisplayComponent<P>, UiInteractionHandler {
    /** Flags this component as a TabbedContent. */
    readonly isTabbedContent: true;
    /** The bezel rotary knob label state requested by this content. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    /**
     * Responds to when this content is selected to be displayed in its parent container.
     */
    onSelect(): void;
    /**
     * Responds to when this content is deselected.
     */
    onDeselect(): void;
    /**
     * Responds to when this content is opened. Content is opened when it is selected and its parent container is
     * open.
     */
    onOpen(): void;
    /**
     * Responds to when this content is closed. Content is closed when it is deselected or its parent container is
     * closed.
     */
    onClose(): void;
    /**
     * Responds to when this content is resumed. Content is resumed when it is selected and its parent container is
     * resumed.
     */
    onResume(): void;
    /**
     * Responds to when this content is paused. Content is paused when it is deselected or its parent container is
     * paused.
     */
    onPause(): void;
    /**
     * Responds to when this content is updated. Content is updated when it is selected and its parent container is
     * updated.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * An abstract implementation of {@link TabbedContent}.
 */
declare abstract class AbstractTabbedContent<P extends TabbedContentProps = TabbedContentProps> extends DisplayComponent<P> implements TabbedContent {
    /** @inheritdoc */
    readonly isTabbedContent = true;
    protected readonly _knobLabelState: MapSubject<UiKnobId, string>;
    /** @inheritdoc */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    /** @inheritdoc */
    onSelect(): void;
    /** @inheritdoc */
    onDeselect(): void;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
}

/**
 * Component props for {@link AirportFreqTab}.
 */
interface AirportFreqTabProps extends TabbedContentProps {
    /** The UI service */
    uiService: UiService;
    /** The facility loader */
    facLoader: FacilityLoader;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
    /** The facility to display */
    facility: Subscribable<Facility | null>;
    /** The dimensions of the tab's content area, as `[width, height]` in pixels. */
    tabContentDimensions: Subscribable<ReadonlyFloat64Array>;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
}
/**
 * An airport frequencies tab.
 */
declare class AirportFreqTab extends AbstractTabbedContent<AirportFreqTabProps> {
    private static readonly FREQ_NAME_MAP;
    private static readonly FREQ_TYPE_PRIORITY;
    private static readonly FREQ_SORT;
    private static readonly NAV_FORMATTER;
    private static readonly COM_25_FORMATTER;
    private static readonly COM_833_FORMATTER;
    private static readonly ILS_LOC_APPROACH_TYPES;
    private readonly listRef;
    private readonly listVerticalMargin;
    private readonly listItemHeightPx;
    private readonly listItemSpacingPxMin;
    private readonly listItemSpacingPxMax;
    private readonly itemsPerPage;
    private readonly listItemSpacingPx;
    private readonly frequencies;
    private generateFrequencyDataOpId;
    private readonly facilityState;
    private readonly navComControlEventPub;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to changes in the dimensions of this tab's content area.
     * @param tabContentDimensions The new dimensions of this tab's content area, as `[width, height]` in pixels.
     */
    private onTabContentDimensionsChanged;
    /**
     * Sets the standby frequency of a COM radio
     *
     * @param radioIndex the radio index
     * @param frequency the frequency to set
     * @param name the name of the radio station
     */
    private setStandbyComFrequency;
    /**
     * Sets the standby frequency of a COM radio
     *
     * @param radioIndex the radio index
     * @param frequency the frequency to set
     * @param name the name of the radio station
     */
    private setStandbyNavFrequency;
    /**
     * Generates a frequency data array from an airport facility.
     * @param facility An airport facility.
     * @param comSpacingMode The current COM channel spacing mode.
     * @returns An array of frequency data for the specified airport.
     */
    private generateFrequencyData;
    /**
     * Responds to when one of this tab's frequency buttons is pressed.
     * @param data The frequency data associated with the button that was pressed.
     */
    private onFrequencyPressed;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a frequency list item.
     * @param data The frequency data associated with the item to render.
     * @returns A frequency list item for the specified data, as a VNode.
     */
    private renderListItem;
    /**
     * Gets the remark text to display for a frequency.
     * @param data Data describing the frequency for which to get remark text.
     * @returns The remark text to display for the specified frequency.
     */
    private getRemarkText;
    /**
     * Formats a frequency value.
     * @param data Data describing the frequency to format.
     * @returns A formatted string for the specified frequency.
     */
    private formatFrequency;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Names of Garmin map user settings that delegate to a G3X-specific user setting.
 */
type G3XMapDelegatedUserSettingNames = never;
/**
 * Names of Garmin map user settings that are not supported by the G3X Touch.
 */
type G3XMapOmittedUserSettingNames = 'mapTrackVectorShow';
/**
 * Map label text size setting modes.
 */
declare enum G3XMapLabelTextSizeSettingMode {
    None = "None",
    Small = "Small",
    Medium = "Medium",
    Large = "Large"
}
/**
 * Map track vector setting modes.
 */
declare enum G3XMapTrackVectorSettingMode {
    Off = "Off",
    Distance = "Distance",
    Time = "Time"
}
/**
 * G3X Touch-specific map user settings.
 */
type G3XSpecificMapUserSettingTypes = {
    /** Whether to show the compass arc. */
    mapCompassArcShow: boolean;
    /** Airport runway label maximum range. */
    mapRunwayLabelRangeIndex: number;
    /** The size of large airport label text. */
    mapAirportLargeTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of medium airport label text. */
    mapAirportMediumTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of small airport label text. */
    mapAirportSmallTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of VOR label text. */
    mapVorTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of NDB label text. */
    mapNdbTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of intersection label text. */
    mapIntersectionTextSize: G3XMapLabelTextSizeSettingMode;
    /** The size of user waypoint label text. */
    mapUserWaypointTextSize: G3XMapLabelTextSizeSettingMode;
    /** The track vector mode. */
    mapTrackVectorMode: G3XMapTrackVectorSettingMode;
    /** The track vector distance, in nautical miles. */
    mapTrackVectorDistance: number;
    /** Whether to show weather data products. */
    mapWeatherShow: boolean;
};
/**
 * Aliased G3X Touch map user settings.
 */
type G3XMapUserSettingTypes = Omit<MapUserSettingTypes, G3XMapDelegatedUserSettingNames | G3XMapOmittedUserSettingNames> & G3XSpecificMapUserSettingTypes;
/**
 * True G3X Touch map user settings.
 */
type G3XMapTrueUserSettingTypes = {
    [P in keyof G3XMapUserSettingTypes as `${P}_g3x`]: G3XMapUserSettingTypes[P];
};
/**
 * Utility class for retrieving G3X Touch map user setting managers.
 */
declare class MapUserSettings {
    private static masterInstance?;
    private static standardInstance?;
    /**
     * Retrieves a manager for all true map settings.
     * @param bus The event bus.
     * @returns A manager for all true map settings.
     */
    static getMasterManager(bus: EventBus): UserSettingManager<G3XMapTrueUserSettingTypes>;
    /**
     * Retrieves a manager for aliased map settings for a standard map.
     * @param bus The event bus.
     * @returns A manager for aliased map settings for a standard map.
     */
    static getStandardManager(bus: EventBus): UserSettingManager<G3XMapUserSettingTypes & Omit<MapUserSettingTypes, G3XMapOmittedUserSettingNames>>;
    /**
     * Gets the default values for a full set of aliased map settings.
     * @returns The default values for a full set of aliased map settings.
     */
    static getDefaultValues(): G3XMapUserSettingTypes;
    /**
     * Gets an array of user setting definitions for a full set of aliased map settings.
     * @returns An array of user setting definitions for a full set of aliased map settings.
     */
    static getAliasedSettingDefs(): readonly UserSettingDefinition<G3XMapUserSettingTypes[keyof G3XMapUserSettingTypes]>[];
    /**
     * Gets an array of definitions for true map settings.
     * @returns An array of definitions for true map settings.
     */
    private static getStandardSettingDefs;
    /**
     * Gets a setting name alias mapping for a standard map.
     * @returns A setting name alias mapping for a standard map.
     */
    private static getStandardAliasMap;
}
/**
 * A utility class for working with G3X Touch map user settings.
 */
declare class G3XMapUserSettingUtils {
    /** An array of all G3X Touch map user setting names. */
    static readonly SETTING_NAMES: readonly (keyof G3XMapUserSettingTypes)[];
    /** An array of names of all G3X Touch-specific map user settings. */
    static readonly SPECIFIC_SETTING_NAMES: readonly (keyof G3XSpecificMapUserSettingTypes)[];
    /** A mapping of delegated map user settings to the user setting to which each is delegated. */
    static readonly DELEGATE_MAP: Record<G3XMapDelegatedUserSettingNames, keyof G3XSpecificMapUserSettingTypes>;
}

/**
 * Component props for {@link AirportRunwayTab}.
 */
interface AirportRunwayTabProps extends TabbedContentProps {
    /** The UI service. */
    uiService: UiService;
    /** A reference to the root element of the container of the tab's parent UI view. */
    containerRef: NodeReference<HTMLElement>;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** Information on the waypoint to display. */
    waypointInfo: WaypointInfoStore;
    /** The dimensions of the tab's content area, as `[width, height]` in pixels. */
    tabContentDimensions: Subscribable<ReadonlyFloat64Array>;
    /** The ID to assign to the Bing instance bound to the tab's map. */
    mapBingId: string;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for map user settings. */
    mapSettingManager: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An airport runway tab.
 */
declare class AirportRunwayTab extends AbstractTabbedContent<AirportRunwayTabProps> {
    private static readonly EMPTY_RUNWAYS;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private static readonly UNIT_FORMATTER;
    private static readonly LABEL_TEXT_FORMATTER;
    private static readonly SURFACE_TEXT_FORMATTER;
    private static readonly DIMENSIONS_FORMATTER;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapDragPanModule;
    private readonly mapWptSelectionModule;
    private readonly mapDragPanController;
    private readonly mapWptRTRController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private readonly selectListItemHeightPx;
    private readonly selectListItemSpacingPx;
    private readonly facilityRunways;
    private readonly isRunwayButtonVisible;
    private readonly selectedRunway;
    private readonly selectedAirportPipe;
    private readonly selectedRunwayPipe;
    private readonly selectedRunwayLabelText;
    private readonly selectedRunwaySurfaceText;
    private readonly selectedRunwayDimensionsText;
    private readonly metar;
    private readonly runwayWindData;
    private readonly windTitleText;
    private readonly windValue1Text;
    private readonly windValue2Text;
    private readonly windValue1Preferred;
    private readonly windValue2Preferred;
    private readonly focusController;
    private readonly tabContentDimensionsSub;
    private readonly subscriptions;
    private readonly pauseable;
    private needInitialTarget;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to changes in the dimensions of this tab's content area.
     * @param tabContentDimensions The new dimensions of this tab's content area, as `[width, height]` in pixels.
     */
    private onTabContentDimensionsChanged;
    /**
     * Responds to when the list of runways for the displayed facility changes.
     * @param runways The new list of runways for the displayed facility.
     */
    private onFacilityRunwaysChanged;
    private updateMetarOpId;
    /**
     * Updates METAR data for the displayed facility.
     * @param facility The displayed facility.
     */
    private updateMetar;
    /**
     * Updates wind data for the selected runway.
     * @param state The wind data input state, as `[selected runway, METAR data]`.
     */
    private updateRunwayWindData;
    /**
     * Responds to when wind data for the selected runway changes.
     * @param state The wind data state, as `[selected runway, wind data, display unit]`.
     */
    private onRunwayWindDataChanged;
    /**
     * Gets the wind data text to display for a runway.
     * @param name The name of the runway.
     * @param headwind The amount of headwind, in units of type `displayUnit`.
     * @param rightCrosswind The amount of right crosswind, in units of type `displayUnit`.
     * @param gustFactor The scaling factor relating steady-state wind speed to gust speed, or `NaN` if there is no
     * reported gust.
     * @param displayUnit The unit type in which the wind speeds are displayed.
     * @returns The wind data text to display for a runway.
     */
    private getWindDataText;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Generates a set of selection list dialog parameters for the user to select a runway from the currently displayed
     * airport.
     * @returns A set of selection list dialog parameters for the user to select a runway from the currently displayed
     * airport.
     */
    private generateRunwayListParams;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link AirportWeatherTab}.
 */
interface AirportWeatherTabProps extends TabbedContentProps {
    /** The UI service. */
    uiService: UiService;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** Information on the waypoint to display. */
    waypointInfo: WaypointInfoStore;
    /** The dimensions of the tab's content area, as `[width, height]` in pixels. */
    tabContentDimensions: Subscribable<ReadonlyFloat64Array>;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /** A manager for date/time user settings. */
    dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>;
    /** A manager for display unit user settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
}
/**
 * An airport weather tab.
 */
declare class AirportWeatherTab extends AbstractTabbedContent<AirportWeatherTabProps> {
    private static readonly METAR_AUTO_REGEXP;
    private static readonly METAR_RMK_REGEXP;
    private static readonly DATE_TIME_FORMAT_SETTING_MAP;
    private static readonly DISPLAY_TIME_MAP_FUNC;
    private static readonly DATE_FORMATTER;
    private static readonly AGE_FORMATTER;
    private static readonly FREQ_FORMATTERS;
    private static readonly MILE_FORMATTER;
    private static readonly SPEED_UNIT_FORMATTER;
    private static readonly DISTANCE_UNIT_FORMATTER;
    private static readonly TEMPERATURE_UNIT_FORMATTER;
    private static readonly BARO_PRESSURE_UNIT_FORMATTER;
    private static readonly CLOUD_COVER_TEXT;
    private static readonly CLOUD_TYPE_TEXT;
    private readonly listRef;
    private readonly listContentRef;
    private readonly metarCloudLayersContainerRef;
    private readonly listHeight;
    private readonly listItemHeight;
    private readonly metar;
    private readonly isWeatherDataAvailable;
    private readonly simTime;
    private readonly dateTimeFormat;
    private readonly airportFreqState;
    private readonly airportNameText;
    private readonly airportCityText;
    private readonly airportFreqText;
    private readonly time;
    private readonly metarTime;
    private readonly metarAgeMinutes;
    private readonly metarDisplayTime;
    private readonly metarIdentText;
    private readonly metarTypeText;
    private readonly metarDateText;
    private readonly metarAgeText;
    private readonly metarWindHidden;
    private readonly metarWindText;
    private readonly metarVisHidden;
    private readonly metarVisText;
    private readonly metarCloudLayers;
    private metarCloudLayersList?;
    private readonly metarTempHidden;
    private readonly metarDewpointHidden;
    private readonly metarTemperatureText;
    private readonly metarDewpointText;
    private readonly metarBaroHidden;
    private readonly metarBaroText;
    private readonly metarRemarksHidden;
    private readonly metarRemarksText;
    private readonly subscriptions;
    private readonly pauseable;
    private readonly displayUnitSubs;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /**
     * Responds to changes in the dimensions of this tab's content area.
     * @param tabContentDimensions The new dimensions of this tab's content area, as `[width, height]` in pixels.
     */
    private onTabContentDimensionsChanged;
    /**
     * Updates this tab's displayed airport name.
     * @param name The name to display, or `undefined` if there is no name to display.
     */
    private updateAirportNameText;
    /**
     * Updates this tab's displayed airport city.
     * @param city The city to display, or `undefined` if there is no city to display.
     */
    private updateAirportCityText;
    /**
     * Updates this tab's airport weather reporting frequency display.
     * @param state The state of this tab's airport weather reporting frequency display, as
     * `[facility to display, com radio spacing mode]`.
     */
    private updateAirportFreqText;
    private updateMetarOpId;
    /**
     * Updates METAR data for the displayed facility.
     * @param facility The displayed facility.
     */
    private updateMetar;
    /**
     * Responds to when this tab's loaded METAR changes.
     * @param metar The new METAR.
     */
    private onMetarChanged;
    /**
     * Updates this tab's displayed METAR wind text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarWind;
    /**
     * Updates this tab's displayed METAR visibility text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarVis;
    /**
     * Updates this tab's displayed METAR cloud layers text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarCloudLayers;
    /**
     * Renders a METAR cloud layer item.
     * @param layer The METAR cloud layer to render.
     * @param index The index of the layer.
     * @returns A rendered item for the specified METAR cloud layer, as a VNode.
     */
    private renderMetarCloudLayer;
    /**
     * Updates this tab's displayed METAR temperature and dewpoint text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarTemperatureDewpoint;
    /**
     * Updates this tab's displayed METAR altimeter barometric setting text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarBaro;
    /**
     * Updates this tab's displayed METAR remarks text.
     * @param metar The METAR data to use for the update.
     */
    private updateMetarRemarks;
    /**
     * Responds to when the speed display unit type changes.
     */
    private onSpeedUnitChanged;
    /**
     * Responds to when the temperature display unit type changes.
     */
    private onTemperatureUnitChanged;
    /**
     * Responds to when the barometric pressure display unit type changes.
     */
    private onBaroUnitChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link WaypointInfo}.
 */
interface WaypointInfoProps extends ComponentProps {
    /** The UI service instance. */
    uiService: UiService;
    /** A reference to the root element of the container of the display's parent UI view. */
    containerRef: NodeReference<HTMLElement>;
    /** The IDs of the valid bezel rotary knobs that can be used to control the display. */
    validKnobIds: Iterable<UiKnobId>;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /** The ID to assign to the Bing instance bound to the display's map. */
    mapBingId: string;
    /** The ID to assign to the Bing instance bound to the display's airport runway tab map. */
    runwayTabMapBingId: string;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A manager for date/time user settings. */
    dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>;
    /** A manager for map user settings. */
    mapSettingManager: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A manager for display units user settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
    /**
     * A mutable subscribable to which to bind the display's selected waypoint. If not defined, then the display's
     * selected waypoint will be initialized to `null`.
     */
    selectedWaypoint?: MutableSubscribable<FacilityWaypoint | null>;
    /** Whether to allow the user to select the display's waypoint. */
    allowSelection: boolean | Subscribable<boolean>;
}
/**
 * A component which displays waypoint information.
 */
declare class WaypointInfo extends DisplayComponent<WaypointInfoProps> implements UiInteractionHandler {
    private thisNode?;
    private readonly tabsRef;
    private readonly infoRef;
    private readonly allowSelection;
    private sizeMode;
    private readonly dimensions;
    private readonly tabsPerListPage;
    private readonly tabLength;
    private readonly tabSpacing;
    private readonly tabKnobLabel;
    private readonly ppos;
    private readonly pposPipe;
    private readonly selectedWaypoint;
    private readonly waypointInfoStore;
    private readonly contentMode;
    private readonly tabsHidden;
    private readonly tabContentDimensions;
    private readonly isInfoInTab;
    private readonly isInfoTabSelected;
    private readonly infoHidden;
    private updateFocusSub?;
    private readonly updateTabsVisSub;
    private readonly updateTabsResumeSub;
    private readonly updateInfoSizeSub;
    private readonly updateInfoResumeSub;
    private readonly focusController;
    private readonly baseRequestedKnobLabelState;
    private readonly _knobLabelState;
    /** The bezel rotary knob label state requested by this display. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private isResumed;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Selects a waypoint for this display.
     * @param waypoint The waypoint to select, or `null` to clear the selected waypoint.
     */
    selectWaypoint(waypoint: FacilityWaypoint | null): void;
    /**
     * Responds to when this display's parent view is opened.
     * @param sizeMode The new size mode of this display's parent view.
     * @param dimensions The new dimensions of this display, as `[width, height]` in pixels.
     */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this display's parent view is closed.
     */
    onClose(): void;
    /**
     * Responds to when this display's parent view is resumed.
     */
    onResume(): void;
    /**
     * Responds to when this display's parent view is paused.
     */
    onPause(): void;
    /**
     * Responds to when this display's parent view is resized while open.
     * @param sizeMode The new size mode of this display's parent view.
     * @param dimensions The new dimensions of this display, as `[width, height]` in pixels.
     */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this display when the size of its parent view changes.
     * @param sizeMode The new size mode of this display's parent view.
     * @param dimensions The new dimensions of this display, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /**
     * Responds to when the occlusion type applied to this display's parent view changes while the view is open.
     * @param occlusionType The new occlusion type applied to this display's parent view.
     */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /**
     * Responds to when this display's parent view is updated.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Updates this display's base requested knob label state.
     * @param allowSelection Whether the user is allowed to select the display's waypoint.
     */
    private updateBaseRequestedKnobLabelState;
    /**
     * Updates this display's focused component.
     * @param allowSelection Whether the user is allowed to select the display's waypoint.
     */
    private updateFocus;
    /**
     * Updates the visibility of this display's tab container.
     */
    private updateTabsVisibility;
    /**
     * Updates the pause/resume state of this display's tab container.
     */
    private updateTabsResumeState;
    /**
     * Updates the size of this display's information component.
     */
    private updateInfoSize;
    /**
     * Updates the pause/resume state of this display's information component.
     */
    private updateInfoResumeState;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Content modes for {@link WaypointInfo}.
 */
declare enum WaypointInfoContentMode {
    Airport = "Airport",
    Vor = "Vor",
    Ndb = "Ndb",
    Intersection = "Intersection",
    User = "User",
    None = "None"
}

/**
 * Component props for {@link WaypointInfoInfo}.
 */
interface WaypointInfoInfoProps extends ComponentProps {
    /** The UI service instance. */
    uiService: UiService;
    /** The IDs of the valid bezel rotary knobs that can be used to control the display. */
    validKnobIds: Iterable<UiKnobId>;
    /** A store containing information about the waypoint for which to display information. */
    waypointInfoStore: WaypointInfoStore;
    /** The content mode associated with the waypoint for which to display information. */
    contentMode: Subscribable<WaypointInfoContentMode>;
    /** Whether to show the component's title. */
    showTitle: Subscribable<boolean>;
    /** Whether the inner bezel rotary knobs are allowed to control the zoom of the component's map. */
    allowKnobZoom: Subscribable<boolean>;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** The ID to assign to the Bing instance bound to the component's map. */
    mapBingId: string;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A manager for map user settings. */
    mapSettingManager: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A waypoint info display information component, which displays a map and summary information about a waypoint.
 */
declare class WaypointInfoInfo extends DisplayComponent<WaypointInfoInfoProps> implements UiInteractionHandler {
    private static readonly DEFAULT_TARGET_RANGE_INDEX;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private static readonly KNOB_LABEL_STATE;
    private thisNode?;
    private readonly rootRef;
    private readonly dimensions;
    private readonly titleHidden;
    private readonly showAirportContent;
    private readonly showVorContent;
    private readonly showNdbContent;
    private readonly showIntersectionContent;
    private readonly showUserWaypointContent;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapDragPanModule;
    private readonly mapWptSelectionModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapSizeState;
    private readonly contentModeSizeSub;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private readonly allowKnobZoom;
    private readonly allowKnobZoomSub;
    private readonly validKnobIds;
    private readonly _knobLabelState;
    /** The bezel rotary knob label state requested by this component. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private isPaused;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Resumes this component.
     */
    resume(): void;
    /**
     * Pauses this component.
     */
    pause(): void;
    /**
     * Sets the size of this component.
     * @param width The new width, in pixels.
     * @param height The new height, in pixels.
     */
    setSize(width: number, height: number): void;
    /**
     * Updates this component. Has no effect if this component is paused.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    update(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this component's map range index.
     * @param delta The change in index to apply.
     */
    private changeMapRangeIndex;
    /**
     * Updates the size of this component's map.
     */
    private updateMapSize;
    /**
     * Responds to when whether the inner bezel rotary knobs are allowed to control the zoom of this component's map
     * changes.
     * @param allow Whether the inner bezel rotary knobs are allowed to control map zoom.
     */
    private onAllowKnobZoomChanged;
    /**
     * Responds to when this component's waypoint changes.
     * @param waypoint The new waypoint.
     */
    private onWaypointChanged;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A type of character selection mode for a {@link CursorInputSlot}.
 */
type CursorInputCharSelectionMode = 'none' | 'blink' | 'highlight';
/**
 * A slot for a scrolling cursor input.
 */
interface CursorInputSlot<T> {
    /** Flags this object as a CursorInputSlot. */
    readonly isCursorInputSlot: true;
    /** Whether this slot supports backfill operations. */
    readonly allowBackfill: boolean;
    /** The number of characters contained in this slot. */
    readonly characterCount: number;
    /** The value of this slot's characters, in order. */
    readonly characters: Subscribable<readonly (string | null)[]>;
    /** The current value of this slot. */
    readonly value: Subscribable<T>;
    /**
     * Sets the value of this slot. The value of this slot after the operation is complete may be different from the
     * requested value, depending on whether this slot can accurately represent the requested value.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: T): T;
    /**
     * Increments this slot's value.
     * @returns Whether the operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     * @throws RangeError if `index` is out of bounds.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Checks if one of this slot's characters can accept a value.
     * @param index The index of the character to query.
     * @param char The value to query.
     * @param force Whether the character should be forced to accept a value that would normally be invalid. Defaults to
     * `false`.
     * @returns Whether the character can accept the specified value.
     * @throws RangeError if `index` is out of bounds.
     */
    canSetChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Sets the selection mode for one of this slot's characters.
     * @param index The index of the character for which to set a selection mode.
     * @param mode A character selection mode.
     * @throws RangeError if `index` is out of bounds.
     */
    setCharSelected(index: number, mode: CursorInputCharSelectionMode): void;
    /**
     * Populates all of this slot's characters with non-empty values, if possible, using this slot's current value as a
     * template.
     */
    populateCharsFromValue(): void;
    /**
     * Gets the x coordinate, in pixels, of the left edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The x coordinate, in pixels, of the left edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getLeft(): number;
    /**
     * Gets the x coordinate, in pixels, of the right edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The x coordinate, in pixels, of the right edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getRight(): number;
    /**
     * Gets the width, in pixels, of this slot's border box.
     * @returns The width, in pixels, of this slot's border box.
     */
    getWidth(): number;
    /**
     * Gets the y coordinate, in pixels, of the top edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The y coordinate, in pixels, of the top edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getTop(): number;
    /**
     * Gets the y coordinate, in pixels, of the bottom edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The y coordinate, in pixels, of the bottom edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getBottom(): number;
    /**
     * Gets the height, in pixels, of this slot's border box.
     * @returns The height, in pixels, of this slot's border box.
     */
    getHeight(): number;
    /**
     * Gets the x coordinate, in pixels, of the left edge of the border box of one of this slot's characters, relative
     * to this slot's nearest positioned ancestor.
     * @param index The index of the character to query.
     * @returns The x coordinate, in pixels, of the left edge of the border box of one of the specified character,
     * relative to this slot's nearest positioned ancestor.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharLeft(index: number): number;
    /**
     * Gets the x coordinate, in pixels, of the right edge of the border box of one of this slot's characters, relative
     * to this slot's nearest positioned ancestor.
     * @param index The index of the character to query.
     * @returns The x coordinate, in pixels, of the right edge of the border box of one of the specified character,
     * relative to this slot's nearest positioned ancestor.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharRight(index: number): number;
    /**
     * Gets the width, in pixels, of one of this slot's characters.
     * @param index The index of the character to query.
     * @returns The width, in pixels, of one of the specified character.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharWidth(index: number): number;
}
/**
 * Component props for GenericCursorInputSlot.
 */
interface GenericCursorInputSlotProps<T> extends ComponentProps {
    /** Whether the slot supports backfill operations. */
    allowBackfill: boolean | Subscribable<boolean>;
    /** The number of characters contained in the slot. */
    characterCount: number;
    /**
     * A function which parses a slot value from individual character values.
     * @param characters An array of character values. The order of the values is the same as the order of the characters
     * in the slot (from left to right).
     * @returns The slot value parsed from the specified character values.
     */
    parseValue: (characters: readonly (string | null)[]) => T;
    /**
     * A function which assigns values to individual characters from a slot value.
     * @param value A slot value.
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     */
    digitizeValue: (value: T, setCharacters: readonly ((char: string | null) => void)[], characters: readonly (string | null)[]) => void;
    /**
     * A function which checks if two slot values are equal. If not defined, equality is checked using the strict
     * equality operator (`===`).
     */
    valueEquals?: (a: T, b: T) => boolean;
    /**
     * A function which renders a character value into a string.
     * @param charToRender The character to render.
     * @param index The index of the character to render.
     * @param characters An array of the slot's character values.
     */
    renderChar: (charToRender: string | null, index: number, characters: readonly (string | null)[]) => string;
    /**
     * A function which increments the slot value.
     * @param value The slot's current value.
     * @param setValue A function which sets the slot's value.
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @returns Whether the operation was accepted.
     */
    incrementValue: (value: T, setValue: (value: T) => void, characters: readonly (string | null)[], setCharacters: readonly ((char: string | null) => void)[]) => boolean;
    /**
     * A function which decrements the slot value.
     * @param value The slot's current value.
     * @param setValue A function which sets the slot's value.
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @returns Whether the operation was accepted.
     */
    decrementValue: (value: T, setValue: (value: T) => void, characters: readonly (string | null)[], setCharacters: readonly ((char: string | null) => void)[]) => boolean;
    /**
     * A function which sets the value of a slot character, and returns whether the operation was accepted.
     */
    setChar: (characters: readonly MutableSubscribable<string | null>[], index: number, charToSet: string | null, force: boolean) => boolean;
    /**
     * A function which checks if a slot character can accept a value.
     */
    canSetChar: (characters: readonly (string | null)[], index: number, charToSet: string | null, force: boolean) => boolean;
    /** CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A generic implementation of {@link CursorInputSlot} whose behavior is largely defined though props.
 */
declare class GenericCursorInputSlot<T, P extends GenericCursorInputSlotProps<T> = GenericCursorInputSlotProps<T>> extends DisplayComponent<P> implements CursorInputSlot<T> {
    private static readonly RESERVED_CSS_CLASSES;
    /** @inheritdoc */
    readonly isCursorInputSlot = true;
    /** @inheritdoc */
    get allowBackfill(): boolean;
    /** @inheritdoc */
    readonly characterCount: number;
    protected readonly rootRef: _microsoft_msfs_sdk.NodeReference<HTMLDivElement>;
    protected readonly characterRefs: _microsoft_msfs_sdk.NodeReference<HTMLDivElement>[];
    protected readonly characterCssClasses: SetSubject<string>[];
    protected readonly characterArray: Subject<string | null>[];
    protected readonly characterSetFuncs: ((value: string | null) => void)[];
    protected readonly _characters: MappedSubject<(string | null)[], readonly (string | null)[]>;
    /** @inheritdoc */
    readonly characters: Subscribable<readonly (string | null)[]>;
    protected readonly charactersText: _microsoft_msfs_sdk.MappedSubscribable<string>[];
    protected readonly isEmpty: _microsoft_msfs_sdk.MappedSubscribable<boolean>[];
    protected readonly selectionMode: Subject<CursorInputCharSelectionMode>[];
    protected readonly valueEqualsFunc: (a: T, b: T) => boolean;
    protected readonly _value: _microsoft_msfs_sdk.MappedSubscribable<T>;
    /** @inheritdoc */
    readonly value: Subscribable<T>;
    protected readonly setValueFunc: (value: T) => T;
    private cssClassSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    setValue(value: T): T;
    /** @inheritdoc */
    incrementValue(): boolean;
    /** @inheritdoc */
    decrementValue(): boolean;
    /** @inheritdoc */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    canSetChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    setCharSelected(index: number, mode: CursorInputCharSelectionMode): void;
    /** @inheritdoc */
    populateCharsFromValue(): void;
    /** @inheritdoc */
    getLeft(): number;
    /** @inheritdoc */
    getRight(): number;
    /** @inheritdoc */
    getWidth(): number;
    /** @inheritdoc */
    getTop(): number;
    /** @inheritdoc */
    getBottom(): number;
    /** @inheritdoc */
    getHeight(): number;
    /** @inheritdoc */
    getCharLeft(index: number): number;
    /** @inheritdoc */
    getCharRight(index: number): number;
    /** @inheritdoc */
    getCharWidth(index: number): number;
    /**
     * Recomputes this slot's value from its characters and re-renders all characters.
     */
    refreshFromChars(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for NumberInput.
 */
interface NumberInputProps extends ComponentProps {
    /**
     * A mutable subscribable to bind to the input's composite value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    value: MutableSubscribable<number>;
    /**
     * A function which assigns values to individual sign and digit slots based on a composite value.
     * @param value A composite value.
     * @param setSignValues An array of functions which set the values of the input's individual sign slots. The order of
     * the functions is the same as order of their associated sign slots in the input (from left to right).
     * @param setDigitValues An array of functions which set the values of the input's individual digit slots. The order
     * of the functions is the same as order of their associated digit slots in the input (from left to right).
     * @param signValues An array containing the current values of the input's individual sign slots. The order of the
     * values is the same as the order of the sign slots in the input (from left to right).
     * @param digitValues An array containing the current values of the input's individual digit slots. The order of the
     * values is the same as the order of the digit slots in the input (from left to right).
     */
    digitizeValue: (value: number, setSignValues: readonly ((value: 1 | -1) => void)[], setDigitValues: readonly ((value: number, unscaled?: boolean) => void)[], signValues: readonly (1 | -1)[], digitValues: readonly number[]) => void;
    /**
     * Whether to allow backfill of character positions. If `true`, when directly inserting values into the last
     * character position, any existing values will be shifted to the left as long as there are empty positions to
     * accommodate them.
     */
    allowBackFill: boolean;
    /**
     * Checks whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters. Ignored if `allowBackFill` is `false`. If not defined, the designated character slot
     * will accept shifted characters if and only if its current character value is `null` or `'0'`.
     * @param char The current character in the designated character slot.
     * @param slot The designated character slot's parent input slot.
     * @returns Whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters.
     */
    canShiftForBackfill?: (char: string | null, slot: CursorInputSlot<number>) => boolean;
    /**
     * The character index to initially select with the cursor when editing is activated. If not defined, the initial
     * index will default to the last index if backfill is allowed and cursor selection is in per-character mode, or
     * the first index (`0`) otherwise.
     */
    initialEditIndex?: number;
    /**
     * A function or {@link VNode} which renders the input's value when editing is not active. If defined, the rendered
     * inactive value replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: VNode | ((value: number) => string | VNode);
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string>;
}
/**
 * An input with a scrolling cursor which allows users to select a numeric value. The composite numeric value bound to
 * the input is derived from the sum of the values of all child DigitInputSlots, multiplied by the product of the
 * values of all child SignInputSlots.
 */
declare class NumberInput extends DisplayComponent<NumberInputProps> {
    private static readonly VALUE_EQUALS;
    private readonly inputRef;
    private readonly canShiftForBackfillFunc;
    private readonly value;
    private readonly signSlots;
    private readonly digitSlots;
    private signValues?;
    private digitValues?;
    private signSetValueFuncs?;
    private digitSetValueFuncs?;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private isInit;
    private valuePipeOut?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the composite value of this input. As part of the operation, all of this input's child slots will have their
     * values set according to this input's value digitizer, and all slot characters will be set to non-null
     * representations of their slot's value, if possible. The composite value of this input after the operation is
     * complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this input.
     * @param value The new composite value.
     * @returns The composite value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setValue(value: number): number;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value. If cursor selection is in per-slot mode, it will be forced to per-character
     * mode, and the first character of the slot will be selected before setting the value. If the cursor is past the
     * last slot, this method does nothing.
     * @param value The value to set.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): void;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @param selectionPerSlot The selection per slot state to apply before carrying out the backspace operation. If not
     * defined, the selection per slot state will remain unchanged from its current value.
     * @throws Error if this input is not initialized.
     */
    backspace(selectionPerSlot?: boolean): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Parses a value from this input's individual digit and sign slots.
     * @returns The value represented by this input's individual digit and sign slots.
     */
    private parseValue;
    /**
     * Digitizes a value into individual values to assign to this input's digit and sign slots.
     * @param value The value to digitize.
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for NumberPad.
 */
interface NumberPadProps extends ComponentProps {
    /** A callback function to execute when a number pad button is pressed. */
    onNumberPressed?: (value: number) => void;
    /** A callback function to execute when the sign button is pressed. */
    onSignPressed?: () => void;
    /** A callback function to execute when the decimal button is pressed. */
    onDecimalPressed?: () => void;
    /** CSS class(es) to apply to the number pad's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
    /** Whether to show the sign button. Defaults to `false`. */
    showSignButton?: Subscribable<boolean> | boolean;
    /** Whether to show the decimal button. Defaults to `false`. */
    showDecimalButton?: Subscribable<boolean> | boolean;
}
/**
 * A number pad with buttons for each integer from zero to nine, inclusive, and optional sign (`+/−`) and decimal
 * (`.`) buttons.
 */
declare class NumberPad extends DisplayComponent<NumberPadProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly numButtonRefs;
    private readonly signButtonRef;
    private readonly decimalButtonRef;
    private readonly rootCssClass;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when one of this number pad's numeric buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    private onNumButtonPressed;
    /**
     * Responds to when this number pad's sign button is pressed.
     */
    private onSignButtonPressed;
    /**
     * Responds to when this number pad's decimal button is pressed.
     */
    private onDecimalButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A request input for {@link AbstractUiNumberDialog}.
 */
interface UiNumberDialogInput {
    /** The value initially loaded into the dialog at the start of a request. */
    initialValue: number;
}
/**
 * A definition for a {@link NumberInput} used in a {@link AbstractUiNumberDialog}.
 */
interface UiNumberDialogInputDefinition {
    /** A reference to this definition's input. */
    readonly ref: NodeReference<NumberInput>;
    /** The value bound to this definition's input. */
    readonly value: MutableSubscribable<number>;
    /** A mutable subscribable which controls the visibility of this definition's input. */
    readonly isVisible: MutableSubscribable<boolean>;
    /**
     * Renders this definition's input.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This definition's input, as a VNode.
     */
    render(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>, rootCssClassName: string | undefined): VNode;
}
/**
 * An abstract implementation of a UI dialog view which allows the user to select an arbitrary numeric value. The
 * dialog includes a 0-9 number pad and backspace button by default. Subclasses can register an arbitrary number of
 * {@link NumberInput} components. The different inputs may be used to allow the user to input numbers with different
 * formatting, number of digits, etc. However, only one input is active and visible at a time. Subclasses may also
 * choose to render additional dialog content by overriding the `renderOtherNumberPadContents()` and
 * `renderOtherContents()` methods.
 */
declare abstract class AbstractUiNumberDialog<Input extends UiNumberDialogInput = UiNumberDialogInput, Output = number, InputDef extends UiNumberDialogInputDefinition = UiNumberDialogInputDefinition, P extends UiViewProps = UiViewProps> extends AbstractUiView<P> implements UiDialogView<Input, Output> {
    protected readonly inputContainerRef: NodeReference<HTMLDivElement>;
    protected readonly numpadRef: NodeReference<NumberPad>;
    protected readonly backspaceRef: NodeReference<ImgTouchButton>;
    protected readonly backRef: NodeReference<ImgTouchButton>;
    protected readonly enterRef: NodeReference<ImgTouchButton>;
    protected readonly rootCssClass: SetSubject<string>;
    protected readonly title: Subject<string>;
    protected readonly backButtonLabel: Subject<string>;
    protected readonly backButtonImgSrc: Subject<string>;
    protected readonly inputDefinitions: Map<string, InputDef>;
    protected activeInputDef?: InputDef;
    protected resolveFunction?: (value: any) => void;
    protected resultObject: UiDialogResult<Output>;
    protected isAlive: boolean;
    /** Whether the sign button is shown. Defaults to false. */
    protected readonly showSignButton: Subject<boolean>;
    /** Whether the decimal button is shown. Defaults to false. */
    protected readonly showDecimalButton: Subject<boolean>;
    /** Whether the enter button is enabled. */
    protected readonly isEnterButtonEnabled: Subject<boolean>;
    /**
     * Registers an input definition with this dialog. Definitions must be registered before they are requested as the
     * active input in order to function properly.
     * @param key The key to register the definition under. If an existing definition is already registered under the
     * same key, it will be replaced.
     * @param def The definition to register.
     */
    protected registerInputDefinition(key: string, def: InputDef): void;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Sets the style of this dialog's back/cancel button.
     * @param style The style to set.
     */
    protected setBackButtonStyle(style: 'back' | 'cancel'): void;
    /**
     * Responds to when the editing state of this dialog's active number input changes.
     * @param isEditingActive Whether editing is active.
     * @param activeInputDef The active input definition.
     */
    protected onEditingActiveChanged(isEditingActive: boolean, activeInputDef: InputDef): void;
    /** @inheritDoc */
    request(input: Input): Promise<UiDialogResult<Output>>;
    /**
     * A callback method which is called when this dialog receives a request.
     * @param input The input for the request.
     */
    protected abstract onRequest(input: Input): void;
    /**
     * Resets the active input.
     * @param key The key of the input to set as the active input. Defaults to the key of the current active input.
     * @param initialValue The initial value to set on the new active input. If not defined, the new active input will
     * retain its current value.
     * @param resetEditing Whether to reset the editing state of this dialog, in effect resetting the Back/Cancel button
     * on the button bar to Back. Defaults to `false`.
     */
    protected resetActiveInput(key?: string, initialValue?: number, resetEditing?: boolean): void;
    /**
     * Renders one of this dialog's registered inputs to the input container.
     * @param def The definition for the input to render.
     */
    protected renderInputToContainer(def: InputDef): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Validates the currently selected value, and if valid sets the value to be returned for the currently pending
     * request and closes this dialog.
     */
    protected validateValueAndClose(): Promise<void>;
    /**
     * Checks if a value is valid to be returned for a request.
     * @param value The value to check.
     * @param activeInputDef The input definition used to generate the value to check.
     * @returns Whether the specified value is valid to be returned for a request.
     */
    protected abstract isValueValid(value: number, activeInputDef: InputDef): boolean;
    /**
     * Gets the message to display when attempting to return an invalid value.
     * @param value The invalid value.
     * @param activeInputDef The input definition used to generate the invalid value.
     * @returns The message to display when attempting to return an invalid value.
     */
    protected abstract getInvalidValueMessage(value: number, activeInputDef: InputDef): string | VNode;
    /**
     * Gets the payload for a completed request.
     * @param value The numeric value to return with the request.
     * @param activeInputDef The active input definition at the time the request was completed.
     * @returns The payload for a completed request.
     */
    protected abstract getPayload(value: number, activeInputDef: InputDef): Output;
    /**
     * Gets the view stack layer and key of the message dialog to open to display the invalid value message.
     * @returns The view stack layer and key of the message dialog to open to display the invalid value message, as
     * `[layer, key]`.
     */
    protected getInvalidValueMessageDialogLayerAndKey(): [UiViewStackLayer, string];
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    protected cleanupRequest(): void;
    /**
     * A callback method which is called when this dialog cleans up a request. This method is called before the pending
     * request Promise is fulfilled, if one exists.
     */
    protected onCleanupRequest(): void;
    /**
     * Responds to when one of this dialog's number pad buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    protected onNumberPressed(value: number): void;
    /**
     * Called when this dialog's sign button is pressed.
     */
    protected onSignPressed(): void;
    /**
     * Called when this dialog's decimal button is pressed.
     */
    protected onDecimalPressed(): void;
    /**
     * Responds to when this dialog's backspace button is pressed.
     */
    protected onBackspacePressed(): void;
    /**
     * Responds to when this dialog's back/cancel button is pressed.
     */
    protected onBackPressed(): void;
    /**
     * Responds to when this dialog's enter button is pressed.
     */
    protected onEnterPressed(): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Gets the CSS class name (singular) for this dialog's root element.
     * @returns The CSS class name (singular) for this dialog's root element.
     */
    protected abstract getRootCssClassName(): string | undefined;
    /**
     * Renders this dialog's number pad.
     * @param ref The reference to which to assign the rendered number pad.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's number pad, as a VNode.
     */
    protected renderNumberPad(ref: NodeReference<NumberPad>, rootCssClassName: string | undefined): VNode;
    /**
     * Renders additional contents in this dialog's number pad container.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns Additional contents in this dialog's number pad container, as a VNode, or `null` if there are no
     * additional contents.
     */
    protected renderOtherNumberPadContents(rootCssClassName: string | undefined): VNode | null;
    /**
     * Renders this dialog's backspace button.
     * @param ref The reference to which to assign the rendered button.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's backspace button, as a VNode, or `null` if this dialog does not have a backspace button.
     */
    protected renderBackspaceButton(ref: NodeReference<DisplayComponent<any>>, rootCssClassName: string | undefined): VNode | null;
    /**
     * Renders this dialog's back/cancel button.
     * @param ref The reference to which to assign the rendered button.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's back/cancel button, as a VNode, or `null` if this dialog does not have a backspace button.
     */
    protected renderBackButton(ref: NodeReference<DisplayComponent<any>>, rootCssClassName: string | undefined): VNode | null;
    /**
     * Renders this dialog's enter button.
     * @param ref The reference to which to assign the rendered button.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's enter button, as a VNode, or `null` if this dialog does not have a backspace button.
     */
    protected renderEnterButton(ref: NodeReference<DisplayComponent<any>>, rootCssClassName: string | undefined): VNode | null;
    /**
     * Renders additional contents in this dialog's root container.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns Additional contents in this dialog's root container, as a VNode, or `null` if there are no additional
     * contents.
     */
    protected renderOtherContents(rootCssClassName: string | undefined): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * An abstract implementation of a UI dialog view that allows the user to select an arbitrary numeric value. The dialog
 * includes a 0-9 number pad and backspace button by default. It is up to subclasses to render the number input
 * component. Subclasses may also choose to render additional dialog content.
 */
declare abstract class AbstractSimpleUiNumberDialog<Input extends UiNumberDialogInput = UiNumberDialogInput, Output = number, P extends UiViewProps = UiViewProps> extends AbstractUiNumberDialog<Input, Output, UiNumberDialogInputDefinition, P> {
    protected readonly inputRef: NodeReference<NumberInput>;
    /** This dialog's current selected value. */
    protected readonly value: Subject<number>;
    /** @inheritDoc */
    constructor(props: P);
    /** @inheritDoc */
    request(input: Input): Promise<UiDialogResult<Output>>;
    /**
     * A callback method which is called when this dialog receives a request.
     * @param input The input for the request.
     * @returns The initial numeric value to load into this dialog's number input.
     */
    protected onRequest(input: Input): number;
    /**
     * Renders this dialog's number input.
     * @param ref The reference to which to assign the rendered input.
     * @param valueToBind The value to bind to the input.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's number input, as a VNode.
     */
    protected abstract renderInput(ref: NodeReference<NumberInput>, valueToBind: MutableSubscribable<number>, rootCssClassName: string | undefined): VNode;
}

/**
 * Component props for {@link BaroPressureDialog}.
 */
interface BaroPressureDialogProps extends UiViewProps {
    /** A provider of airplane position and heading data. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
}
/**
 * A request input for {@link BaroPressureDialog}.
 */
interface BaroPressureDialogInput extends UiNumberDialogInput {
    /**
     * The initial pressure unit. If not defined, the initial unit will default to a value based on the units mode.
     */
    initialUnit?: Unit<UnitFamily.Pressure>;
    /** Whether the dialog should operate in units of inches of mercury, hectopascals, or millibars. */
    unitsMode: 'inhg' | 'hpa' | 'mb';
    /** The minimum valid numeric value allowed by the dialog's input. */
    minimumValue: number;
    /** The maximum valid numeric value allowed by the dialog's input. */
    maximumValue: number;
    /** The title to display with the dialog. */
    title: string;
    /** Whether to show the Set To Standard/Set For Field button. */
    showSetToButton: boolean;
}
/**
 * A request result returned by {@link BaroPressureDialog}.
 */
interface BaroPressureDialogOutput {
    /** The selected pressure. */
    value: number;
    /** The unit type of the selected pressure. */
    unit: Unit<UnitFamily.Pressure>;
}
/**
 * A definition for a `NumberInput` used in a {@link BaroPressureDialog}.
 */
interface BaroPressureDialogInputDefinition extends UiNumberDialogInputDefinition {
    /** The unit type associated with this definition's input. */
    readonly unit: Unit<UnitFamily.Pressure>;
    /** The scaling factor used by this definition's input to represent the dialog's numeric values. */
    readonly factor: number;
    /** A function which formats minimum/maximum values used by this definition's input. */
    readonly formatter: (value: number) => string;
    /** The value of standard pressure in this definition's unit type. */
    readonly std: number;
}
/**
 * A dialog which allows the user to enter a barometric pressure in inches of mercury, hectopascals, or millibars.
 */
declare class BaroPressureDialog extends AbstractUiNumberDialog<BaroPressureDialogInput, BaroPressureDialogOutput, BaroPressureDialogInputDefinition, BaroPressureDialogProps> {
    private readonly setToButtonRef;
    private readonly isOnGround;
    private readonly isAltitudeDataValid;
    private readonly pressureAltitude;
    private readonly fmsPosMode;
    private readonly ppos;
    private readonly isSetToButtonVisible;
    private readonly isSetToButtonEnabled;
    private readonly setToButtonLabel;
    private minValue;
    private maxValue;
    private readonly subscriptions;
    /** @inheritdoc */
    constructor(props: BaroPressureDialogProps);
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    protected onRequest(input: BaroPressureDialogInput): void;
    /** @inheritDoc */
    protected isValueValid(value: number, activeInputDef: BaroPressureDialogInputDefinition): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(value: number, activeInputDef: BaroPressureDialogInputDefinition): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number, activeInputDef: BaroPressureDialogInputDefinition): BaroPressureDialogOutput;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /**
     * Responds to when this dialog's Set To Standard/Set For Field button is pressed.
     */
    private onSetToButtonPressed;
    /** @inheritDoc */
    protected renderOtherContents(): VNode | null;
    /**
     * Renders this dialog's inches of mercury value input.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @returns This dialog's inches of mercury value input, as a VNode.
     */
    private renderInhgInput;
    /**
     * Renders one of this dialog's metric value inputs.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @param unit The unit type to use for the input.
     * @returns A metric value input, as a VNode.
     */
    private renderMetricInput;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A request input for {@link CourseDialog}.
 */
interface CourseDialogInput extends UiNumberDialogInput {
    /** The dialog title. */
    title: string;
    /** The unit for dialog. */
    unit: 'magnetic' | 'true' | 'none';
}
/**
 * A dialog that allows the user to enter course value.
 */
declare class CourseDialog extends AbstractSimpleUiNumberDialog<CourseDialogInput> {
    private readonly unitText;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected onRequest(input: CourseDialogInput): number;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number): number;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
}

/**
 * Events related to autopilot nav-to-nav guidance from G3X external navigators, keyed by base topic names.
 */
interface BaseG3XAPNavToNavEvents {
    /**
     * The index of the NAV radio that can be armed for a CDI source switch on an external navigator, or `-1` if CDI
     * source switch cannot be armed.
     */
    g3x_external_nav_to_nav_armable_nav_radio_index: NavRadioIndex | -1;
    /**
     * The autopilot lateral mode that can be armed prior to a CDI source switch on an external navigator, or
     * `APLateralModes.NONE` if no mode can be armed.
     */
    g3x_external_nav_to_nav_armable_lateral_mode: APLateralModes;
    /**
     * The autopilot vertical mode that can be armed prior to a CDI source switch on an external navigator, or
     * `APVerticalModes.NONE` if no mode can be armed.
     */
    g3x_external_nav_to_nav_armable_vertical_mode: APVerticalModes;
    /** Whether a CDI source switch is currently allowed for an an external navigator. */
    g3x_external_nav_to_nav_can_switch: boolean;
    /** Whether an external navigator is currently automatically switching its CDI source. */
    g3x_external_nav_to_nav_external_switch_in_progress: boolean;
}
/**
 * Events related to autopilot nav-to-nav guidance from an indexed G3X external navigators, keyed by indexed topic names.
 */
type IndexedG3XAPNavToNavEvents<Index extends G3XExternalNavigatorIndex = G3XExternalNavigatorIndex> = {
    [P in keyof BaseG3XAPNavToNavEvents as `${P}_${Index}`]: BaseG3XAPNavToNavEvents[P];
};
/**
 * All events related to the G3X autopilot.
 */
type G3XAPEvents = IndexedG3XAPNavToNavEvents<G3XExternalNavigatorIndex>;

/**
 * A provider of autopilot nav-to-nav guidance data for the G3X autopilot. The provider sources guidance data from
 * the internal GPS navigator (which does not support the nav-to-nav function) and any supported external navigators
 * and selects the data for the navigator currently in use.
 */
declare class G3XNavToNavGuidanceProvider implements GarminNavToNavManager2Guidance {
    private readonly bus;
    private readonly fplSourceDataProvider;
    private readonly _cdiId;
    /** @inheritDoc */
    readonly cdiId: Accessible<string>;
    private readonly _armableNavRadioIndex;
    /** @inheritDoc */
    readonly armableNavRadioIndex: Accessible<-1 | NavRadioIndex>;
    private readonly _armableLateralMode;
    /** @inheritDoc */
    readonly armableLateralMode: Accessible<APLateralModes>;
    private readonly _armableVerticalMode;
    /** @inheritDoc */
    readonly armableVerticalMode: Accessible<APVerticalModes>;
    private readonly _canSwitchCdi;
    /** @inheritDoc */
    readonly canSwitchCdi: Accessible<boolean>;
    private readonly _isExternalCdiSwitchInProgress;
    /** @inheritDoc */
    readonly isExternalCdiSwitchInProgress: Accessible<boolean>;
    private readonly setArmableNavRadioIndex;
    private readonly setArmableLateralMode;
    private readonly setArmableVerticalMode;
    private readonly setCanSwitchCdi;
    private readonly setIsExternalCdiSwitchInProgress;
    private isAlive;
    private isInit;
    private readonly sourceSubs;
    private navigatorIndexSub?;
    /**
     * Creates a new instance of G3XNavToNavGuidanceProvider.
     * @param bus The event bus.
     * @param fplSourceDataProvider A provider of flight plan source data.
     */
    constructor(bus: EventBus, fplSourceDataProvider: G3XFplSourceDataProvider);
    /**
     * Initializes this provider. Once initialized, the provider will automatically update its guidance data.
     * @throws Error if this provider has been destroyed.
     */
    init(): void;
    /**
     * Responds to when the index of the current flight plan source's parent navigator changes.
     * @param index The index of the current flight plan source's parent navigator.
     */
    private onNavigatorIndexChanged;
    /**
     * Destroys this provider. Once destroyed, the provider will no longer automatically update its guidance data.
     */
    destroy(): void;
}

/**
 * A manager for G3X Touch avionics unit (GDU) status. Processes status updates received from instances of
 * {@link AvionicsStatusClient} and publishes avionics unit status events, including global power state events.
 */
declare class AvionicsStatusManager {
    private readonly bus;
    private readonly syncPublisher;
    private readonly eventSyncPublisher;
    private readonly clients;
    private currentGlobalPower;
    private previousGlobalPower;
    private isAlive;
    private isInit;
    private syncSub?;
    private eventHandshakeRequestSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes this manager. Once initialized, this manager will keep track of the status of all
     * {@link AvionicsStatusClient} instances and publish them on the event bus, along with the avionics global power
     * state.
     * @throws Error if this manager was destroyed.
     */
    init(): void;
    /**
     * Responds to when a status sync event is received.
     * @param data The event data.
     */
    private onStatusSyncReceived;
    /**
     * Updates the avionics global power state and if it has changed, publishes the change to the event bus.
     */
    private updateGlobalPower;
    /**
     * Responds to when an event client initializes a handshake.
     * @param uid The UID of the event client.
     */
    private onEventHandshakeInitialized;
    /**
     * Destroys this manager. Once destroyed, this manager will no longer keep track of avionics unit statuses or publish
     * events to the event bus.
     */
    destroy(): void;
}
/**
 * A client which tracks and sends the status of a G3X Touch avionics unit (GDU) to a central manager for processing.
 */
declare class AvionicsStatusClient {
    private readonly instrumentIndex;
    private readonly bus;
    private readonly syncPublisher;
    /** The UID of this client's avionics unit. */
    readonly uid: string;
    private status;
    private isAlive;
    private isInit;
    private hasSentInitialSync;
    private syncRequestSub?;
    /**
     * Constructor.
     * @param instrumentIndex The instrument index of this client's avionics unit.
     * @param bus The event bus.
     */
    constructor(instrumentIndex: number, bus: EventBus);
    /**
     * Initializes this client. Once initialized, this client will automatically send its status to a central manager.
     * @throws Error if this client was destroyed.
     */
    init(): void;
    /**
     * Sets the status of this client's avionics unit. If this client has been initialized, then the new status will
     * automatically be sent to the client's central manager.
     * @param status The status to set.
     * @throws Error if this client was destroyed.
     */
    setStatus(status: AvionicsStatus): void;
    /**
     * Sends this client's status to a central manager over the event bus.
     * @param isInitial Whether the status is to be sent as an initial sync.
     */
    private sendSyncData;
    /**
     * Destroys this client.
     */
    destroy(): void;
}
/**
 * A client which receives avionics status data from a central manager and publishes the data locally (i.e. only on the
 * client's hosting JS instrument) to the event bus as avionics status events.
 */
declare class AvionicsStatusEventClient {
    readonly uid: string;
    private readonly bus;
    private readonly publisher;
    private readonly syncPublisher;
    private isAlive;
    private isInit;
    private isHandshakeComplete;
    private handshakeRequestSub?;
    private statusSyncSub?;
    private globalPowerSyncSub?;
    /**
     * Constructor.
     * @param uid This client's unique ID.
     * @param bus The event bus.
     */
    constructor(uid: string, bus: EventBus);
    /**
     * Initializes this client. Once initialized, this client will begin communicating with the central manager and
     * publish avionics status events as appropriate.
     * @throws Error if this client was destroyed.
     */
    init(): void;
    /**
     * Responds to when avionics unit status sync data is received from the central manager.
     * @param data The avionics unit status sync data that was received.
     */
    private onStatusSyncReceived;
    /**
     * Responds to when global power status sync data is received from the central manager.
     * @param data The global power status sync data that was received.
     */
    private onGlobalPowerSyncReceived;
    /**
     * Destroys this client.
     */
    destroy(): void;
}

/**
 * Configuration options for {@link G3XAutoBacklightManager}.
 */
type G3XAutoBacklightManagerOptions = {
    /** The input ambient light intensity, in lux, at which the manager outputs an automatic backlight level of 0. */
    minInputIntensity: number;
    /** The input ambient light intensity, in lux, at which the manager outputs an automatic backlight level of 1. */
    maxInputIntensity: number;
    /** The time constant, in milliseconds, with which the manager smooths input ambient light intensities. */
    timeConstant: number;
    /** The gamma value to use when mapping input light intensities to output backlight levels. */
    gamma: number;
};
/**
 * A manager for G3X Touch automatic backlight levels. The manager calculates automatic backlight levels based on the
 * ambient light intensity and publishes the values to the standard G3X automatic backlight level SimVar
 * (`L:1:WTG3X_Auto_Backlight`).
 */
declare class G3XAutoBacklightManager {
    private readonly simVar;
    private readonly minInputIntensity;
    private readonly maxInputIntensity;
    private readonly inverseGamma;
    private readonly ambientLightIntensity;
    private readonly ambientLightIntensitySmoother;
    private isAlive;
    private isAwake;
    private prevUpdateTime;
    private publishedLevel;
    private readonly updateSub;
    /**
     * Creates a new instance of G3XAutoBacklightManager. The manager is initialized as asleep.
     * @param gduIndex The index of this manager's parent GDU.
     * @param bus The event bus.
     * @param options Options with which to configure the manager.
     */
    constructor(gduIndex: number, bus: EventBus, options: Readonly<G3XAutoBacklightManagerOptions>);
    /**
     * Wakes this manager. When this manager is awake, it automatically calculates automatic backlight levels and
     * publishes the values to the standard G3X automatic backlight level SimVar (`L:1:WTG3X_Auto_Backlight`).
     * @throws Error if this manager has been destroyed.
     */
    wake(): void;
    /**
     * Puts this manager to sleep. When this manager is asleep, it stops calculating and publishing automatic backlight
     * levels.
     * @throws Error if this manager has been destroyed.
     */
    sleep(): void;
    /**
     * Updates this manager.
     * @param activeSimDuration The total amount of simulated time at the current update, in milliseconds.
     */
    private update;
    /**
     * Publishes a value to the automatic backlight level SimVar.
     * @param level The value to publish.
     */
    private publishLevel;
    /**
     * Destroys this manager. Once this manager is destroyed, it will no longer calculate or publish automatic backlight
     * levels, and cannot be awakened or put to sleep.
     */
    destroy(): void;
}

/**
 * Unsuffixed roots for G3X Touch backlight events.
 */
interface G3XBacklightEventsRoot {
    /** The automatic software backlight level for a G3X Touch GDU screen, in the range `[0, 1]`. */
    g3x_backlight_auto_level: number;
    /** The backlight level for a G3X Touch GDU screen, in the range `[0, 1]`. */
    g3x_backlight_screen_level: number;
}
/**
 * Events related to G3X Touch backlight levels.
 */
interface G3XBacklightEvents {
    /** The automatic software backlight level for a G3X Touch GDU screen, in the range `[0, 1]`. */
    [g3x_backlight_auto_level: `g3x_backlight_auto_level_${number}`]: number;
    /** The backlight level for a G3X Touch GDU screen, in the range `[0, 1]`. */
    [g3x_backlight_screen_level: `g3x_backlight_screen_level_${number}`]: number;
}
/**
 * A publisher for G3X Touch backlight levels.
 */
declare class G3XBacklightPublisher extends SimVarPublisher<G3XBacklightEvents, G3XBacklightEventsRoot> {
    /**
     * Creates a new instance of G3XBacklightPublisher.
     * @param bus The EventBus to publish to.
     * @param pacer An optional pacer to use to control the rate of publishing.
     */
    constructor(bus: EventBus, pacer?: PublishPacer<G3XBacklightEvents>);
}

/**
 * A manager for G3X Touch backlight levels. The manager calculates backlight levels for a single GDU based on the
 * user-selected backlight mode and publishes the values to a standard G3X backlight level SimVar
 * (`L:1:WTG3X_Screen_Backlight_[index]` where `[index]` is the GDU index).
 */
declare class G3XBacklightManager {
    private readonly gduIndex;
    private readonly screenBacklightSimVar;
    private readonly autoBacklightLevel;
    private readonly lightBusLevelLogic?;
    private readonly lightBusInputLevel?;
    private readonly lightBusOutputLevel?;
    private readonly screenBacklightLevel;
    private readonly manualBacklightPipe;
    private readonly autoBacklightPipe;
    private readonly lightBusPipe?;
    private readonly settingModeSub;
    private readonly updateLightBusSub?;
    private isAlive;
    private isAwake;
    /**
     * Creates a new instance of G3XBacklightManager. The manager is initialized as asleep.
     * @param gduIndex The index of this manager's parent GDU.
     * @param bus The event bus.
     * @param settingManager A manager for backlight user settings.
     * @param config The backlight configuration object.
     */
    constructor(gduIndex: number, bus: EventBus, settingManager: UserSettingManager<BacklightUserSettingTypes>, config: BacklightConfig);
    /**
     * Wakes this manager. When this manager is awake, it publishes backlight levels for its GDU to the appropriate
     * SimVar (`L:1:WTG3X_Screen_Backlight_[index]` where `[index]` is the GDU index).
     * @throws Error if this manager has been destroyed.
     */
    wake(): void;
    /**
     * Puts this manager to sleep. When this manager is asleep, it stops publishing backlight levels.
     * @throws Error if this manager has been destroyed.
     */
    sleep(): void;
    /**
     * Responds to when the backlight setting mode changes.
     * @param settingMode The new backlight setting mode.
     */
    private onSettingModeChanged;
    /**
     * Updates this manager's backlight level from the light bus.
     */
    private updateLightBus;
    /**
     * Publishes a value to this manager's screen backlight level SimVar.
     * @param level The value to publish.
     */
    private publishScreenBacklightLevel;
    /**
     * Destroys this manager. Once this manager is destroyed, it will no longer publish backlight levels, and cannot be
     * awakened or put to sleep.
     */
    destroy(): void;
}

/**
 * A utility class for working with G3X backlight SimVars.
 */
declare class G3XBacklightUtils {
    /**
     * Gets the screen backlight level SimVar name for a GDU.
     * @param index A GDU index.
     * @returns The backlight level SimVar name for the specified GDU.
     * @throws Error if {@link index} is not a valid value.
     */
    static getScreenLevelSimVarName(index: number): string;
    /**
     * Gets the automatic software backlight level SimVar name for a GDU.
     * @param index A GDU index.
     * @returns The automatic software backlight level SimVar name for the specified GDU.
     */
    static getAutoLevelSimVarName(index: number): string;
}

/**
 * A manager of CAS alert acknowledgement state in response to avionics power.
 */
declare class CasPowerStateManager {
    private readonly bus;
    /** The delay, in milliseconds, after avionics power on before newly activated CAS alerts appear as unacknowledged. */
    private static readonly POWER_ON_CAS_ACKNOWLEDGE_DELAY;
    private readonly casPublisher;
    private readonly casAckDebounceTimer;
    /**
     * Constructor.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes this manager. Once initialized, this manager will automatically control CAS alert acknowledgement
     * state in response to changes in avionics power.
     */
    init(): void;
    /**
     * Responds to changes in the avionics global power state.
     * @param event The event describing the change in the avionics global power state.
     */
    private onGlobalPowerChanged;
}

/**
 * Component props for {@link UiBearingArrow}.
 */
interface UiBearingArrowProps extends ComponentProps {
    /** The relative bearing to display, in degrees. If the value is `NaN`, the arrow will be hidden. */
    relativeBearing: Subscribable<number>;
}
/**
 * A cyan arrow which rotates to point to a relative bearing.
 */
declare class UiBearingArrow extends DisplayComponent<UiBearingArrowProps> {
    private readonly cssClass;
    private readonly cssTransform;
    private bearingSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for CharInput.
 */
interface CharInputProps extends ComponentProps {
    /**
     * A mutable subscribable to bind to the input's composite value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    value: MutableSubscribable<string>;
    /** The character index to initially select with the cursor when editing is activated. Defaults to `0`. */
    initialEditIndex?: number;
    /**
     * A function or {@link VNode} which renders the input's value when editing is not active. If defined, the rendered
     * inactive value replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: VNode | ((value: string) => string | VNode);
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An input with a scrolling cursor that allows users to select an arbitrary string. The composite value bound to the
 * input is derived from the in-order concatenation of the values of all child `CharInputSlot` components.
 */
declare class CharInput extends DisplayComponent<CharInputProps> {
    private static readonly LAST_NON_EMPTY_SLOT_INDEX;
    private readonly inputRef;
    private readonly value;
    private readonly slots;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private isInit;
    private valuePipeOut?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Updates whether each of this input's slots should allow empty values.
     * @param lastNonEmptySlotIndex The index of the last slot with a non-empty value.
     */
    private updateAllowEmptySlotValues;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the composite value of this input. As part of the operation, all of this input's child slots will have their
     * values set according to this input's value digitizer, and all slot characters will be set to non-null
     * representations of their slot's value, if possible. The composite value of this input after the operation is
     * complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this input.
     * @param value The new composite value.
     * @returns The composite value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setValue(value: string): string;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, then it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, then this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @param eraseCharsToRightOnEdit Whether to erase (set to `null`) all characters to the right of the edited
     * character. Defaults to `false`.
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1, eraseCharsToRightOnEdit?: boolean): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, then it will be
     * activated before setting the value. If the cursor is past the last slot, then this method does nothing.
     * @param value The value to set.
     * @param eraseCharsToRightOnEdit Whether to erase (set to `null`) all characters to the right of the edited
     * character. Defaults to `false`.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string, eraseCharsToRightOnEdit?: boolean): void;
    /**
     * Removes the character at the cursor's current position and shifts the cursor one position to the left after the
     * character is removed.
     * @throws Error if this input is not initialized.
     */
    backspace(): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Parses a composite value from this input's individual slots.
     * @returns The composite value represented by this input's individual slots.
     */
    private parseValue;
    /**
     * Digitizes a composite value into individual slot values to assign to this input's slots.
     * @param value The value to digitize.
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for CharInputSlot.
 */
interface CharInputSlotProps extends ComponentProps {
    /**
     * An array of valid character values for the slot. The order of characters in the array determines the order in
     * which the slot will cycle through characters when incrementing/decrementing its value.
     */
    charArray: readonly string[];
    /**
     * Whether the slot should wrap from the last valid character to the first valid character and vice-versa when
     * incrementing/decrementing its value.
     */
    wrap: boolean | Subscribable<boolean>;
    /** The default character value for the slot when the character value is `null`. */
    defaultCharValue: string | Subscribable<string>;
    /**
     * A function which renders slot characters into string. If not defined, non-null characters will be rendered as-is,
     * and null characters will be rendered according to the default value assigned to that character.
     */
    renderChar?: (character: string | null, index: number) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A cursor input slot which allows the user to select a single arbitrary character.
 */
declare class CharInputSlot extends DisplayComponent<CharInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly defaultCharValue;
    private readonly parseValue;
    private readonly digitizeValue;
    private readonly renderChar;
    private readonly wrap;
    /** The value bound to this slot. */
    get value(): Subscribable<string>;
    private allowEmptyValue;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets whether this slot should allow its value to be set to the empty string. Disallowing empty string values will
     * not cause this slot's current value to change, even if the current value is the empty string.
     * @param allow Whether this slot should allow its value to be set to the empty string.
     */
    setAllowEmptyValue(allow: boolean): void;
    /**
     * Sets the value of this slot. As part of the operation, this slot's character will be set to a non-null
     * representation of the new value, if possible. The value of this slot after the operation is complete may differ
     * from the requested value depending on whether the requested value can be accurately represented by this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: string): string;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of this slot's character.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(char: string | null, force?: boolean): boolean;
    /**
     * Changes this slot's value in a specified direction.
     * @param direction The direction in which to change the value.
     * @param value This slot's current value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XNavDataBar.
 */
interface G3XNavDataBarProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /** A navigation data bar field model factory. */
    modelFactory: NavDataBarFieldModelFactory;
    /** A navigation data field renderer. */
    fieldRenderer: NavDataFieldRenderer;
    /** A user setting manager for the settings that control the data bar's field types. */
    dataBarSettingManager: UserSettingManager<NavDataBarSettingTypes>;
    /** The number of data fields that are visible. */
    visibleDataFieldCount: Subscribable<number>;
    /**
     * Whether data field editing is active. While editing is active, the fields are rendered and act as touchscreen
     * buttons which the user can press.
     */
    isEditingActive: Subscribable<boolean>;
    /**
     * A callback function to execute when a data field is pressed during editing.
     */
    onEditPressed?: (index: number) => void;
    /** The update frequency of the data fields, in hertz. */
    updateFreq: number;
    /** CSS class(es) to add to the data bar's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch navigation data bar. Displays zero or more navigation data fields.
 *
 * The root element of the status bar contains the `nav-data-bar` CSS class by default.
 */
declare class G3XNavDataBar extends DisplayComponent<G3XNavDataBarProps> {
    private static readonly FIELD_COUNT;
    private static readonly RESERVED_CSS_CLASSES;
    private readonly rootCssClass;
    private readonly fieldEntries;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to changes in field settings.
     * @param index The index of the field whose setting changed.
     * @param type The new setting.
     */
    private onFieldSettingChanged;
    /**
     * Responds to update events.
     */
    private onUpdated;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A G3X implementation of NavDataBarFieldModelFactory.
 */
declare class G3XNavDataBarFieldModelFactory extends DefaultNavDataBarFieldModelFactory {
    /**
     * Creates a new instance of G3XNavDataBarFieldModelFactory.
     * @param bus The event bus.
     * @param gpsValidity The GPS validity state to pass to the models created by the factory.
     * @param options Options with which to configure the factory.
     */
    constructor(bus: EventBus, gpsValidity: Subscribable<NavDataFieldGpsValidity>, options?: Readonly<DefaultNavDataBarFieldModelFactoryOptions>);
}

/**
 * A G3X implementation of {@link NavDataFieldRenderer} which supports all navigation data bar field types.
 */
declare class G3XNavDataBarFieldRenderer implements NavDataFieldRenderer {
    private readonly renderer;
    /** @inheritDoc */
    constructor(unitsSettingManager: G3XUnitsUserSettingManager, dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>);
    /** @inheritdoc */
    render<T extends NavDataFieldType>(type: T, model: NavDataFieldTypeModelMap[T]): VNode;
}

/** Props for {@link CnsAudioButtonGroup} */
interface CnsAudioButtonGroupProps {
    /** The ui service */
    uiService: UiService;
    /** The button type */
    type: 'audio-only' | 'minimized' | 'normal';
    /** The shape of the selection indicator */
    shape: 'square' | 'triangle';
    /** The radios config */
    radiosConfig: RadiosConfig;
}
/**
 * CNS data bar button for a transponder
 */
declare class CnsAudioButtonGroup extends DisplayComponent<CnsAudioButtonGroupProps> {
    private readonly comButtonClasses;
    private readonly micButtonClasses;
    private readonly subscriptions;
    private readonly g3xIndexToSimIndex;
    private thisNode?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** Opens the audio view */
    private openAudioView;
    /** On mic pressed handler */
    private onMicPressed;
    /** On com pressed handler */
    private onComPressed;
    /**
     * Gets the normal indicator left
     * @returns The indicator left
     */
    private getNormalIndicatorLeft;
    /**
     * Gets the normal indicator right
     * @returns The indicator right
     */
    private getNormalIndicatorRight;
    /**
     * Gets the minimized indicator left
     * @returns The indicator left
     */
    private getMinimizedIndicatorLeft;
    /**
     * Gets the minimized indicator right
     * @returns The indicator right
     */
    private getMinimizedIndicatorRight;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link CnsComButtonGroup}.
 */
interface CnsComButtonProps {
    /** The index of the button's radio. */
    radioIndex: 1 | 2;
    /** The radios config */
    radiosConfig: RadiosConfig;
    /** The UI service instance. */
    uiService: UiService;
    /** Whether the button is minimized. */
    isMinimized: boolean;
    /** Whether to use the volume indicator. */
    useVolumeIndicator: Subscribable<boolean>;
}
/**
 * A CNS data bar button that allows the user to tune a COM radio.
 */
declare class CnsComButtonGroup extends DisplayComponent<CnsComButtonProps> {
    private static readonly FREQ_25_FORMATTER;
    private static readonly FREQ_833_FORMATTER;
    private static readonly FREQ_FORMATTER;
    private thisNode?;
    private readonly comSpacing;
    private readonly activeFreq;
    private readonly activeFreqDisplay;
    private readonly standbyFreq;
    private readonly standbyFreqDisplay;
    private readonly volume;
    private readonly volumeSub;
    private readonly volumeIndicatorClippingStyle;
    private readonly volumeIndicatorVisible;
    private readonly hideVolumeIndicator;
    private readonly volumeHideTimer;
    private useVolumeIndicatorSub;
    private simIndex;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Handles when the volume changes.
     */
    private volumeHandler;
    /**
     * Swaps the active and standby frequencies of this button's radio.
     */
    private swapFrequencies;
    /**
     * Sets the standby frequency of this button's radio.
     * @param frequency The frequency to set, in hertz.
     */
    private setStandbyFrequency;
    /**
     * Responds to when the standby button is pressed.
     */
    private onStandbyPressed;
    /**
     * Renders the volume indicator for the button.
     * @returns The rendered element.
     */
    private renderVolumeIndicator;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link CnsNavButtonGroup}.
 */
interface CnsNavButtonProps {
    /** The index of the button's radio. */
    radioIndex: 1 | 2;
    /** The radios config */
    radiosConfig: RadiosConfig;
    /** The UI service instance. */
    uiService: UiService;
    /** Whether the button is minimized. */
    isMinimized: boolean;
    /** Whether to use the volume indicator. */
    useVolumeIndicator: Subscribable<boolean>;
}
/**
 * A CNS data bar button that allows the user to tune a NAV radio.
 */
declare class CnsNavButtonGroup extends DisplayComponent<CnsNavButtonProps> {
    private static readonly FREQ_HZ_FORMATTER;
    private static readonly FREQ_FORMATTER;
    private thisNode?;
    private readonly activeFreq;
    private readonly activeFreqDisplay;
    private readonly standbyFreq;
    private readonly standbyFreqDisplay;
    private readonly volume;
    private readonly volumeSub;
    private readonly volumeIndicatorClippingStyle;
    private readonly volumeIndicatorVisible;
    private readonly hideVolumeIndicator;
    private readonly volumeHideTimer;
    private useVolumeIndicatorSub;
    private simIndex;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Handles when the volume changes.
     */
    private volumeHandler;
    /**
     * Swaps the active and standby frequencies of this button's radio.
     */
    private swapFrequencies;
    /**
     * Sets the standby frequency of this button's radio.
     * @param frequency The frequency to set, in hertz.
     */
    private setStandbyFrequency;
    /**
     * Responds to when the standby button is pressed.
     */
    private onStandbyPressed;
    /**
     * Renders the volume indicator for the button .
     * @returns The rendered element.
     */
    private renderVolumeIndicator;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link CnsXpdrButtonGroup}.
 */
interface CnsXpdrButtonGroupProps {
    /** The ui service */
    uiService: UiService;
}
/**
 * A CNS data bar transponder button.
 */
declare class CnsXpdrButtonGroup extends DisplayComponent<CnsXpdrButtonGroupProps> {
    private readonly controlPublisher;
    private readonly combinedButtonRef;
    private readonly xpdrMode;
    private readonly xpdrCode;
    private readonly isIdent;
    private readonly xpdrViewCodeState;
    private readonly isInTransmittingMode;
    private readonly isCodeStateValid;
    private readonly transponderModeText;
    private readonly xpdrCodeText;
    private readonly isIdentButtonEnabled;
    private readonly identButtonLabel;
    private readonly interrogationSymbolIsHidden;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Handle code side pressed
     */
    private handleCodeSidePressed;
    /**
     * Send ident event to a bus
     */
    private ident;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A utility class for working with the CNS data bar.
 */
declare class CnsDataBarUtils {
    /** A record that maps data bar item types to their widths, in pixels, for the GDU460 format. */
    static readonly GDU_460_ITEM_WIDTHS: Record<CnsDataBarItemType, number>;
    /**
     * Returns true if the given type is a communication item type.
     * @param type The type to check.
     * @returns True if the given type is a communication item type.
     */
    static isItemTypeCom(type: CnsDataBarItemType): type is CnsDataBarItemType.Com | CnsDataBarItemType.ComMinimized;
    /**
     * Returns true if the given type is a navigation item type.
     * @param type The type to check.
     * @returns True if the given type is a navigation item type.
     */
    static isItemTypeNav(type: CnsDataBarItemType): type is CnsDataBarItemType.Nav | CnsDataBarItemType.NavMinimized;
    /**
     * Returns true if the given type is a radio item type.
     * @param type The type to check.
     * @returns True if the given type is a radio (communication or navigation) item type.
     */
    static isItemTypeRadio(type: CnsDataBarItemType): type is CnsDataBarItemType.Com | CnsDataBarItemType.ComMinimized | CnsDataBarItemType.Nav | CnsDataBarItemType.NavMinimized;
    /**
     * Returns true if the given type is an audio item type.
     * @param type The type to check.
     * @returns True if the given type is an audio item type.
     */
    static isItemTypeAudio(type: CnsDataBarItemType): type is CnsDataBarItemType.Audio | CnsDataBarItemType.AudioMinimized | CnsDataBarItemType.AudioOnly;
}

/**
 * Component props for G3XBearingDisplay.
 */
interface G3XBearingDisplayProps extends BearingDisplayProps {
    /**
     * Whether to use basic unit text formatting instead of G3X-style unit text formatting. Ignored if `unitFormatter` is
     * defined. Defaults to `false`.
     */
    useBasicUnitFormat?: boolean;
}
/**
 * A G3X Touch component which displays a bearing value.
 */
declare class G3XBearingDisplay extends DisplayComponent<G3XBearingDisplayProps> {
    /**
     * A function which formats units to default G3X-style text for G3XBearingDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     */
    static readonly DEFAULT_G3X_UNIT_FORMATTER: (out: [string, string], unit: NavAngleUnit) => void;
    /**
     * A function which formats units to default basic-style text for G3XBearingDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     */
    static readonly DEFAULT_BASIC_UNIT_FORMATTER: (out: [string, string], unit: NavAngleUnit) => void;
    private readonly ref;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link G3XFailureBox}.
 */
interface G3XFailureBoxProps extends ComponentProps {
    /** Whether to show the box. */
    show: Subscribable<boolean>;
    /** The box's label. */
    label?: string | Subscribable<string> | VNode;
    /** CSS class(es) to apply to the box's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch failure box.
 */
declare class G3XFailureBox extends DisplayComponent<G3XFailureBoxProps> {
    private static readonly RESERVED_CLASSES;
    private thisNode?;
    private readonly display;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this box's label.
     * @returns This box's label, as a VNode, or `null` if this box does not have a label.
     */
    private renderLabel;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for G3XMapRangeSettingDisplay.
 */
interface G3XMapRangeSettingDisplayProps extends ComponentProps {
    /** The index of the displayed range. */
    rangeIndex: number | Subscribable<number>;
    /** The map range array. */
    rangeArray: Subscribable<readonly NumberUnitInterface<UnitFamily.Distance>[]>;
    /** The displayed unit type. */
    displayUnit: Unit<UnitFamily.Distance> | null | Subscribable<Unit<UnitFamily.Distance> | null>;
    /**
     * Whether to use basic unit text formatting instead of G3X-style unit text formatting. Ignored if `unitFormatter` is
     * defined. Defaults to `false`.
     */
    useBasicUnitFormat?: boolean;
    /** CSS class(es) to apply to the display's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A component which displays a map range setting value.
 *
 * Displays the distance value for non-negative range indexes and `Off` for negative indexes.
 */
declare class G3XMapRangeSettingDisplay extends DisplayComponent<G3XMapRangeSettingDisplayProps> {
    private readonly displayRef;
    private readonly displayStyle;
    private readonly offStyle;
    private readonly rangeIndex;
    private readonly rangeState;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XMapRangeValueDisplay describing raw range values.
 */
type G3XMapRangeValueDisplayRawRangeProps = {
    /** The displayed range. */
    range: NumberUnitInterface<UnitFamily.Distance> | Subscribable<NumberUnitInterface<UnitFamily.Distance>>;
};
/**
 * Component props for G3XMapRangeValueDisplay describing indexed range values.
 */
type G3XMapRangeValueDisplayIndexedRangeProps = {
    /** The index of the displayed range. */
    rangeIndex: number | Subscribable<number>;
    /** The map range array. */
    rangeArray: Subscribable<readonly NumberUnitInterface<UnitFamily.Distance>[]>;
};
/**
 * Component props for G3XMapRangeValueDisplay describing the displayed range.
 */
type G3XMapRangeValueDisplayRangeProps = G3XMapRangeValueDisplayIndexedRangeProps | G3XMapRangeValueDisplayRawRangeProps;
/**
 * Component props for G3XMapRangeValueDisplay.
 */
type G3XMapRangeValueDisplayProps = G3XMapRangeValueDisplayRangeProps & ComponentProps & {
    /** The displayed unit type. */
    displayUnit: Unit<UnitFamily.Distance> | null | Subscribable<Unit<UnitFamily.Distance> | null>;
    /**
     * Whether to use basic unit text formatting instead of G3X-style unit text formatting. Ignored if `unitFormatter` is
     * defined. Defaults to `false`.
     */
    useBasicUnitFormat?: boolean;
    /** CSS class(es) to apply to the display's root element. */
    class?: string | SubscribableSet<string>;
};
/**
 * A component which displays a map range value.
 */
declare class G3XMapRangeValueDisplay extends DisplayComponent<G3XMapRangeValueDisplayProps> {
    private static readonly DEFAULT_RANGE;
    private readonly numberUnitDisplayRef;
    private readonly nominalDisplayUnit;
    private readonly range;
    private readonly displayUnit;
    private readonly formatter;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Updates this component's display unit.
     */
    private updateDisplayUnit;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XNumberUnitDisplay.
 */
interface G3XNumberUnitDisplayProps<F extends string> extends NumberUnitDisplayProps<F> {
    /**
     * Whether to use basic unit text formatting instead of G3X-style unit text formatting. Ignored if `unitFormatter` is
     * defined. Defaults to `false`.
     */
    useBasicUnitFormat?: boolean;
    /**
     * Whether to format unit text with up and down vertical speed arrows for supported unit types. Ignored if
     * `unitFormatter` is defined or `useStandardUnitFormat` is `true`. Defaults to `false`.
     */
    useVsArrows?: boolean;
}
/**
 * A G3X Touch component which displays a number with units.
 */
declare class G3XNumberUnitDisplay<F extends string> extends DisplayComponent<G3XNumberUnitDisplayProps<F>> {
    private static readonly BASIC_UNIT_TEXT_MAP;
    private static readonly G3X_UNIT_FORMATTER_FUNC;
    private static readonly G3X_VS_ARROWS_TEXT;
    /**
     * A function which formats units to default basic text for G3XNumberUnitDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     */
    static readonly DEFAULT_BASIC_UNIT_FORMATTER: (out: [string, string], unit: Unit<any>) => void;
    /**
     * A function which formats units to default G3X-style text for G3XNumberUnitDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     */
    static readonly DEFAULT_G3X_UNIT_FORMATTER: (out: [string, string], unit: Unit<any>) => void;
    /**
     * A function which formats units to default G3X-style text with vertical speed arrows for G3XNumberUnitDisplay.
     * @param out The 2-tuple to which to write the formatted text, as `[bigText, smallText]`.
     * @param unit The unit to format.
     * @param number The numeric value that is displayed.
     */
    static readonly DEFAULT_G3X_VS_ARROW_UNIT_FORMATTER: (out: [string, string], unit: Unit<any>, number: number) => void;
    private readonly ref;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
    /**
     * Creates the standard mapping from unit to displayed text.
     * @returns The standard mapping from unit to displayed text.
     */
    private static createBasicUnitTextMap;
}

/**
 * Component props for G3XTimeDisplay.
 */
interface G3XTimeDisplayProps extends TimeDisplayProps {
    /**
     * Whether to the pad the hour text with leading zeroes (up to two digits). Defaults to `false` when the display
     * format is equal to `TimeDisplayFormat.Local12` and to `true` when when the display format is any other value.
     */
    padHour?: boolean | Subscribable<boolean>;
    /** Whether to use vertical suffix formatting instead of standard suffix formatting. Defaults to `false`. */
    useVerticalSuffix?: boolean;
    /** Whether to only show the 'AM/PM' suffix. Ignored if `suffixFormatter` is defined. Defaults to `false`. */
    onlyShowAmPmSuffix?: boolean;
}
/**
 * A G3X Touch component which displays a time value.
 */
declare class G3XTimeDisplay extends DisplayComponent<G3XTimeDisplayProps> {
    /**
     * A function which formats standard suffixes for G3XTimeDisplay.
     * @param onlyShowAmPm Whether to only show the 'AM/PM' suffix.
     * @param format The current format used to display the time.
     * @param isAm Whether or not the current time is AM.
     * @returns The suffix to append to the displayed time.
     */
    static readonly DEFAULT_STANDARD_SUFFIX_FORMATTER: (onlyShowAmPm: boolean, format: TimeDisplayFormat, isAm: boolean) => string;
    /**
     * A function which formats vertical suffixes for G3XTimeDisplay.
     * @param onlyShowAmPm Whether to only show the 'AM/PM' suffix.
     * @param format The current format used to display the time.
     * @param isAm Whether or not the current time is AM.
     * @returns The suffix to append to the displayed time.
     */
    static readonly DEFAULT_VERTICAL_SUFFIX_FORMATTER: (onlyShowAmPm: boolean, format: TimeDisplayFormat, isAm: boolean) => string;
    private readonly ref;
    private readonly format;
    private readonly padHour;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for CursorInput.
 */
interface CursorInputProps<M extends MutableSubscribable<any>> extends ComponentProps {
    /**
     * A mutable subscribable to bind to the input's composite value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    value: M;
    /**
     * A function which parses the input's individual slot values to generate a composite value.
     * @param slotValues An array of the bound values of the input's individual slots. The order of the values is the
     * same as the order of the slots in the input (from left to right).
     * @returns The composite value parsed from the specified slot values.
     */
    parseValue: (slotValues: readonly any[]) => SubscribableType<M>;
    /**
     * A function which assigns values to the input's individual slots based on a composite value.
     * @param value A composite value.
     * @param setSlotValues An array of functions which set the values of the input's individual slots. The order of the
     * functions is the same as the order of the their associated slots in the input (from left to right).
     * @param slotValues An array containing the current values of the input's individual slots. The order of the values
     * is the same as the order of the slots in the input (from left to right).
     */
    digitizeValue: (value: SubscribableType<M>, setSlotValues: readonly ((slotValue: any) => void)[], slotValues: readonly any[]) => void;
    /**
     * A function which checks if two composite values are equal.
     */
    valueEquals?: (a: SubscribableType<M>, b: SubscribableType<M>) => boolean;
    /**
     * Whether to allow backfill of character positions. If `true`, when directly inserting values into the last
     * character position, any existing values will be shifted to the left as long as there are empty positions to
     * accommodate them.
     */
    allowBackFill: boolean;
    /**
     * Checks whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters. Ignored if `allowBackFill` is `false`. If not defined, the designated character slot
     * will accept shifted characters if and only if its current character value is `null`.
     * @param char The current character in the designated character slot.
     * @param slot The designated character slot's parent input slot.
     * @returns Whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters.
     */
    canShiftForBackfill?: (char: string | null, slot: CursorInputSlot<any>) => boolean;
    /**
     * The character index to initially select with the cursor when editing is activated. If not defined, the initial
     * index will default to the last index if backfill is allowed and cursor selection is in per-character mode, or
     * the first index (`0`) otherwise.
     */
    initialEditIndex?: number | Subscribable<number>;
    /**
     * A function or {@link VNode} which renders the input's value when editing is not active. If defined, the rendered
     * inactive value replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: VNode | ((value: SubscribableType<M>) => string | VNode);
    /** CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An input display with a scrolling cursor.
 *
 * Each input has zero or more child slots of type {@link CursorInputSlot} (though to be practically useful, at least
 * one slot is required). When editing is active, the input's cursor selects either one slot or one character (a slot
 * may have more than one character) at a time. The input supports incrementing or decrementing the value of a
 * selected slot, or directly setting/deleting the value of a selected character.
 *
 * Each input is bound to a composite value. This value is computed from the values of the input's individual slots,
 * and vice versa, so that changes in either will be reflected in the other.
 */
declare class CursorInput<M extends MutableSubscribable<any>> extends DisplayComponent<CursorInputProps<M>> {
    private static readonly RESERVED_CLASSES;
    private readonly slotsContainerRef;
    private readonly cursorRef;
    private readonly inactiveRef;
    private readonly activeStyle;
    private readonly inactiveStyle;
    private readonly cursorStyle;
    private readonly rootCssClass;
    private readonly initialEditIndex;
    private slotsRootNode?;
    private readonly charPositions;
    private readonly slots;
    private readonly slotValueArray;
    private slotValueSetFuncs?;
    private readonly valueEqualsFunc;
    private slotsState?;
    private value?;
    private readonly canShiftForBackfillFunc;
    private readonly renderInactiveValueFunc;
    private renderedInactiveValue;
    /** -1 When it should highlight the whole input. */
    private readonly _cursorPosition;
    /** The index of the character position currently selected by this input's cursor. */
    readonly cursorPosition: Subscribable<number>;
    private readonly _isEditingActive;
    /** Whether editing is active for this input. */
    readonly isEditingActive: Subscribable<boolean>;
    private readonly _isSelectionPerSlot;
    /** Whether this input's cursor selection mode is per-slot. */
    readonly isSelectionPerSlot: Subscribable<boolean>;
    private readonly selectedCharIndexes;
    private readonly cursorUpdateTimer;
    private isInit;
    private cssClassSub?;
    private valuePipeOut?;
    private inactiveValueSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the composite value of this input. As part of the operation, all of this input's child slots will have their
     * values set according to this input's value digitizer, and all slot characters will be set to non-null
     * representations of their slot's value, if possible. The composite value of this input after the operation is
     * complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this input.
     * @param value The new composite value.
     * @returns The composite value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setValue(value: SubscribableType<M>): SubscribableType<M>;
    /**
     * Updates this input's rendered editing-inactive value. If editing is currently active, the rendered editing-
     * inactive value will be hidden. If editing is not active, it will be displayed and updated to reflect this input's
     * current value.
     */
    private updateInactiveDisplay;
    /**
     * Cleans up this input's rendered editing-inactive value, destroying any top-level DisplayComponents that are part
     * of the rendered value's VNode tree.
     */
    private cleanUpRenderedInactiveValue;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @param charToSet The value to set at the cursor's selected character position as the initial edit. If defined
     * and the character position cannot accept the value, editing will not be activated. Ignored if `isSelectionPerSlot`
     * is `true`.
     * @returns Whether editing is active.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean, charToSet?: string | null): boolean;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Moves the cursor right, if possible.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     */
    private moveCursorRight;
    /**
     * Moves the cursor left, if possible.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     */
    private moveCursorLeft;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @returns Whether the value of the slot was changed.
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): boolean;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value (unless the selected character cannot accept the value, in which case the
     * operation will be aborted). If cursor selection is in per-slot mode, it will be forced to per-character mode,
     * and the first character of the slot will be selected before setting the value. If the cursor is past the last
     * slot, this method does nothing.
     * @param value The value to set.
     * @returns Whether the operation was accepted.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): boolean;
    /**
     * Inserts a value into a character position and starts a backfill operation. Any existing character values are
     * shifted one position to the left as long as there is room.
     * @param charPosIndex The character position at which to insert the value.
     * @param valueToInsert The value to insert.
     * @returns Whether after the current operation is complete, a backfill operation will still be possible when
     * inserting a value into the same character position.
     */
    private backfillValues;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @param selectionPerSlot The selection per slot state to apply before carrying out the backspace operation. If not
     * defined, the selection per slot state will remain unchanged from its current value.
     * @throws Error if this input is not initialized.
     */
    backspace(selectionPerSlot?: boolean): void;
    /**
     * Finds the index of the left-most character position that is connected to a given character position (including
     * itself) by an unbroken chain of positions supporting backfill.
     * @param fromCharPosIndex The index of the query character position.
     * @returns The index of the left-most character position that is connected to a given character position (including
     * itself) by an unbroken chain of positions supporting backfill.
     */
    private findLeftMostBackfillCharPosIndex;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Moves the cursor to the correct position.
     */
    private updateCursorPosition;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link UiFlightPlanLegDisplay}.
 */
interface UiFlightPlanLegDisplayProps extends ComponentProps {
    /** The flight plan leg to display. */
    leg: FlightPlanLeg;
    /**
     * The ICAO of the waypoint fix associated with the displayed flight plan leg, or the empty string if no such
     * waypoint fix exists.
     */
    fixIcao: string;
    /**
     * Data describing the approach procedure associated with the displayed flight plan leg, or `undefined` if the leg
     * is not associated with an approach.
     */
    approachData?: Readonly<G3XFmsFplLoadedApproachData>;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A cache used to retrieve waypoints. */
    facWaypointCache: GarminFacilityWaypointCache;
    /**
     * Whether to center the waypoint icon vertically within the display instead of aligning it with the top row text.
     * Defaults to `false`.
     */
    centerIconVertically?: boolean;
    /** The string to display in place of the ident when the displayed waypoint is `null`. Defaults to the empty string. */
    nullIdent?: string | Subscribable<string>;
    /** Whether to display shortened versions of special leg identifiers. Defaults to `false`. */
    useShortSpecialLegIdent?: boolean;
    /** The CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * Displays information about a flight plan leg.
 */
declare class UiFlightPlanLegDisplay extends DisplayComponent<UiFlightPlanLegDisplayProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly iconRef;
    private readonly rootCssClass;
    private readonly shouldRenderWaypoint;
    private readonly shouldRenderBottomText;
    private readonly waypoint;
    private readonly facility;
    private readonly nullIdent;
    private readonly identText;
    private readonly bottomText;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Retrieves this list item's waypoint fix.
     */
    private retrieveWaypoint;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this display's inner components.
     * @returns This display's inner components, as a VNode, or `null` if this display's flight plan leg type is not
     * recognized.
     */
    private renderInner;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Checks whether waypoint information should be rendered for a given flight plan leg.
     * @param leg The flight plan leg to check.
     * @returns Whether waypoint information should be rendered for the specified flight plan leg.
     */
    private static shouldRenderWaypoint;
    /**
     * Checks whether the the information in the bottom row of the display should be rendered for a given flight plan
     * leg.
     * @param leg The flight plan leg to check.
     * @returns Whether information in the bottom row of the display should be rendered for the specified flight plan
     * leg.
     */
    private static shouldRenderBottomText;
    /**
     * Gets the fix type flag text to display for a given flight plan leg.
     * @param leg The flight plan leg for which to get fix type flag text.
     * @returns The fix type flag text to display for the specified flight plan leg.
     */
    private static getFlagText;
    /**
     * Gets the name to display for a loaded approach.
     * @param approachData Data describing the loaded approach for which to get a name.
     * @returns The name to display for the specified loaded approach.
     */
    private static getApproachName;
}

/**
 * A subscribable array of flight plan data items describing how to display details of a flight plan in a list format.
 */
interface FlightPlanDataArray extends SubscribableArray<FlightPlanDataItem> {
    /** The index of the data item associated with the FROM flight plan leg, or `-1` if there is no such leg. */
    readonly fromLegIndex: Subscribable<number>;
    /** The index of the data item associated with the TO flight plan leg, or `-1` if there is no such leg. */
    readonly toLegIndex: Subscribable<number>;
    /** The data fields representing cumulative total values over this array's entire flight plan. */
    readonly cumulativeDataFields: readonly Subscribable<FlightPlanDataField<FlightPlanDataFieldType> | null>[];
}

/**
 * Formatting props for UiList.
 */
type UiListFormattingProps = Omit<TouchListProps, 'scrollAxis' | 'itemCount' | 'maxRenderedItemCount'>;
/**
 * Component props for UiList.
 */
interface UiListProps<DataType> extends ComponentProps, UiListFormattingProps {
    /** The event bus. */
    bus: EventBus;
    /**
     * The IDs of the valid bezel rotary knobs that can be used to change the list's focused item. If not defined, then
     * knobs cannot be used to change the list's focused item.
     */
    validKnobIds?: Iterable<UiKnobId>;
    /**
     * The data to display in the list. If both this property and `renderItem` are defined, the list will display
     * rendered data items instead of its children.
     */
    data?: SubscribableArray<DataType>;
    /**
     * A function that renders a single data item into the list. If both this property and `data` are defined, the
     * list will display rendered data items instead of its children.
     */
    renderItem?: (data: DataType, index: number) => VNode;
    /**
     * The maximum number of items that can be rendered simultaneously. Ignored if `data`, `renderItem`, or
     * `itemsPerPage` is not defined. The value will be clamped to be greater than or equal to `itemsPerPage * 3`.
     * Defaults to infinity.
     */
    maxRenderedItemCount?: number | Subscribable<number>;
    /**
     * Whether to automatically disable overscrolling when the total height of all the list's items does not exceed the
     * list's visible height. Defaults to `false`.
     */
    autoDisableOverscroll?: boolean | Subscribable<boolean>;
    /**
     * Whether to show the list's scroll bar. If `true`, then space is always reserved for the scroll bar, and its
     * visibility depends on the `fadeScrollBar` option. If `false`, then no space is reserved for the scroll bar and it
     * is always hidden. If `auto`, then space is reserved for the scroll bar if and only if the total height of all the
     * list's items exceeds the list's visible height. Defaults to `true`.
     */
    showScrollBar?: boolean | 'auto' | Subscribable<boolean | 'auto'>;
    /**
     * Whether to fade out the scroll bar when the total height of all the list's items is less than or equal to the
     * list's visible height. Space is reserved for the scroll bar even when it is faded out. Defaults to `true`.
     */
    fadeScrollBar?: boolean | Subscribable<boolean>;
    /**
     * Whether to animate scrolling when the list automatically scrolls to a newly focused item. Defaults to `true`.
     */
    animateScrollToFocus?: boolean | Subscribable<boolean>;
    /**
     * Whether the list should automatically try to focus another item if the focused item loses focus because it could
     * no longer be focused or if it was removed from the list. Defaults to `false`.
     */
    autoRefocus?: boolean;
    /**
     * A VNode which will be rendered into the list's translating container and positioned after the container that
     * holds the list's rendered items.
     */
    staticChildren?: VNode;
    /**
     * A function to sort data items before rendering them. The function should return a negative number if the first
     * item should be rendered before the second, a positive number if the first item should be rendered after the
     * second, or zero if the two items' relative order does not matter. If not defined, items will be rendered in the
     * order in which they appear in the data array.
     */
    sortItems?: (a: DataType, b: DataType) => number;
    /** A callback that will be called with the topVisibleIndex when it changes. */
    onTopVisibleIndexChanged?: (topVisibleIndex: number) => void;
    /** A callback function to execute when the list is destroyed. */
    onDestroy?: () => void;
    /** CSS class(es) to add to the list's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A touchscreen vertically scrollable list which includes an animated scroll bar and supports rendering either a
 * static or dynamic sequence of list items.
 */
declare class UiList<DataType extends DynamicListData> extends DisplayComponent<UiListProps<DataType>> implements UiInteractionHandler {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly rootRef;
    private readonly scrollBarRef;
    private readonly touchListRef;
    private readonly rootCssClass;
    private readonly validKnobIds;
    private readonly listItemLengthPx;
    private readonly maxOverscrollPx;
    private readonly showScrollBar;
    private readonly fadeScrollBar;
    private readonly animateScrollToFocus;
    private readonly _itemCount;
    /** The total number of items in this list, including hidden items. */
    readonly itemCount: Subscribable<number>;
    private readonly _visibleItemCount;
    /** The total number of visible items in this list. */
    readonly visibleItemCount: Subscribable<number>;
    private readonly _renderWindow;
    /**
     * The window of rendered list items, as `[startIndex, endIndex]`, where `startIndex` is the index of the first
     * rendered item, inclusive, and `endIndex` is the index of the last rendered item, exclusive.
     */
    readonly renderWindow: Subscribable<Readonly<Omit<Float64Array, "set" | "sort" | "copyWithin">>>;
    private readonly _knobLabelState;
    /** The bezel rotary knob label state requested by this list. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private staticChildrenRootNode?;
    private readonly staticChildrenFocusableComponents;
    private dynamicList?;
    private readonly updateRenderedWrappersTimer;
    private readonly focusController;
    private lastFocusedComponent;
    private lastFocusedVisibleSortedIndex;
    private readonly autoMaxOverscrollPx;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Gets the sorted index of a data item index. If this list does not support dynamic data or has not been rendered,
     * then this method will return `-1`.
     * @param index A data item index.
     * @returns The index to which the specified data item index is sorted, or `-1` if the data index is out of bounds,
     * this list does not support dynamic data, or this list has not been rendered.
     */
    sortedIndexOfIndex(index: number): number;
    /**
     * Gets the sorted index of a data item. If this list does not support dynamic data or has not been rendered, then
     * this method will return `-1`.
     * @param data A data item.
     * @returns The index to which the specified data item is sorted, or `-1` if the item is not in this list, this list
     * does not support dynamic data, or this list has not been rendered.
     */
    sortedIndexOfData(data: DataType): number;
    /**
     * Gets the sorted index of a data item index after hidden items have been excluded. If this list does not support
     * dynamic data or has not been rendered, then this method will return `-1`.
     * @param index A data item index.
     * @returns The index to which the specified data item index is sorted after hidden items have been excluded, or `-1`
     * if the data index is out of bounds, the data item whose index was given is itself hidden, this list does not
     * support dynamic data, or this list has not been rendered.
     */
    sortedVisibleIndexOfIndex(index: number): number;
    /**
     * Gets the sorted index of a data item after hidden items have been excluded. If this list does not support dynamic
     * data or has not been rendered, then this method will return `-1`.
     * @param data A data item.
     * @returns The index to which the specified data item is sorted after hidden items have been excluded, or `-1` if
     * the item is not in this list, the item is itself hidden, this list does not support dynamic data, or this list has
     * not been rendered.
     */
    sortedVisibleIndexOfData(data: DataType): number;
    /**
     * Gets the data item index of a sorted index. If this list does not support dynamic data or has not been rendered,
     * then this method will return `-1`.
     * @param sortedIndex A sorted index.
     * @returns The index of the data item that is sorted to the specified index, or `-1` if the sorted index is out of
     * bounds, this list does not support dynamic data, or this list has not been rendered.
     */
    indexOfSortedIndex(sortedIndex: number): number;
    /**
     * Gets the data item index of a sorted index after hidden items have been excluded. If this list does not support
     * dynamic data or has not been rendered, then this method will return `-1`.
     * @param sortedVisibleIndex A sorted index after hidden items have been excluded.
     * @returns The index of the data item that is sorted to the specified index after hidden items have been excluded,
     * or `-1` if the sorted index is out of bounds, this list does not support dynamic data, or this list has not been
     * rendered.
     */
    indexOfSortedVisibleIndex(sortedVisibleIndex: number): number;
    /**
     * Scrolls until the item at a specified index is in view.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndex(index: number, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls the minimum possible distance until the item at a specified index is in view with a given margin from the
     * edges of the visible list.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndexWithMargin(index: number, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Gets the index of this list's focused item after sorting has been applied and hidden items have been excluded.
     * @returns The index of this list's focused item after sorting has been applied and hidden items have been
     * excluded, or `-1` if no item is focused.
     */
    getFocusedIndex(): number;
    /**
     * Focuses an item at a specified index in this list.
     * @param index The index of the item to focus, after sorting has been applied and hidden items have been excluded.
     * If the index is out of bounds, then focus will not be set.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusIndex(index: number, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls until the specified item is in view. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItem(item: DataType, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Scrolls the minimum possible distance until the specified item is in view with a given margin from the edges of
     * the visible list. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItemWithMargin(item: DataType, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Focuses an item in this list. If this is a static list, then this method does nothing.
     * @param item The item to focus.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusItem(item: DataType, focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the first focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusFirst(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the last focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusLast(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the most recently focused item in this list. Has no effect if an item is currently focused or if there is
     * no most recently focused item.
     */
    focusRecent(): void;
    /**
     * Removes focus from the currently focused item in this list.
     */
    removeFocus(): void;
    /**
     * Clears this list's memory of the most recently focused item. Has no effect if an item is currently focused.
     */
    clearRecentFocus(): void;
    /**
     * Updates the order of rendered items in this list.
     */
    updateOrder(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Scrolls this list. If this list has no focused item, then the list will scroll by one full page. If this list has
     * a focused item, then the list will focus and scroll to the next or previous focusable item.
     * @param direction The direction in which to scroll (`1` = forward/down, `-1` = back/up).
     */
    private scroll;
    /**
     * Changes the focused item in this list by focusing the next or previous item relative to the currently focused
     * item.
     * @param direction The direction in which to change focus (`1` = focus the next item, `-1` = focus the previous
     * item).
     */
    private changeFocus;
    /**
     * Responds to when this list's focused item changes.
     * @param component The new focused list item component, or `null` if none of this list's items are focused.
     */
    private onFocusedComponentChanged;
    /**
     * Attempts to focus another item in this list after the most recently focused component has lost focus. Another item
     * will be focused only if the most recently focused component can no longer be focused or was removed from this list.
     * @param lastFocusedComponent The most recently focused component.
     * @param lastFocusedVisibleSortedIndex The index of the most recently focused component when it was focused, after
     * sorting is applied and hidden items are excluded.
     */
    private tryRefocus;
    /**
     * Updates the element transforms.
     */
    private updateScrollBarTranslation;
    /**
     * Updates the visibility of rendered list item wrappers. Has no effect if a dynamic list has not been created
     * for this list or if a maximum rendered item count is not defined.
     */
    private updateRenderedWrappers;
    /**
     * Updates the index of the most recently focused item in this list, after sorting is applied and hidden items are
     * excluded.
     */
    private updateLastFocusedVisibleSortedIndex;
    /**
     * Renders a list item and wrapper for a data item.
     * @param data The data item for which to render the list item.
     * @param index The index of the data item in its containing array.
     * @returns A wrapper containing the rendered list item for the specified data item.
     */
    private renderItemWrapper;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link UiFlightPlanList}.
 */
interface UiFlightPlanListProps extends Omit<UiListProps<FlightPlanDataItem>, 'itemsPerPage' | 'sortItems' | 'data' | 'staticChildren'> {
    /** The flight plan data to display in the list. */
    data: FlightPlanDataArray;
    /** The number of visible items per page. */
    itemsPerPage: number | Subscribable<number>;
    /** The format of the list's parent GDU. */
    gduFormat: GduFormat;
}
/**
 * A scrollable UI list of flight plan waypoints.
 */
declare class UiFlightPlanList extends DisplayComponent<UiFlightPlanListProps> implements UiInteractionHandler {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    /** The total number of items in this list, including hidden items. */
    get itemCount(): Subscribable<number>;
    /** The total number of visible items in this list. */
    get visibleItemCount(): Subscribable<number>;
    /**
     * The window of rendered list items, as `[startIndex, endIndex]`, where `startIndex` is the index of the first
     * rendered item, inclusive, and `endIndex` is the index of the last rendered item, exclusive.
     */
    get renderWindow(): Subscribable<ReadonlyFloat64Array>;
    /** The bezel rotary knob label state requested by this list. */
    get knobLabelState(): SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private readonly toLegVisibleIndex;
    private readonly fromLegVisibleIndex;
    private readonly visibleIndexesDebounceTimer;
    private readonly updateLegVisibleIndexesFunc;
    private readonly arrowPartYOffset;
    private readonly arrowPartHeight;
    private readonly arrowFromToHidden;
    private readonly arrowDtoHidden;
    private readonly arrowFromTransform;
    private readonly arrowStemTransform;
    private readonly arrowToTransform;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Gets the transformed index of a data item index after hidden items have been excluded. If this list has not been
     * rendered, then this method will return `-1`.
     * @param index A data item index.
     * @returns The index to which the specified data item index is transformed after hidden items have been excluded, or
     * `-1`  if the data index is out of bounds, the data item whose index was given is itself hidden, or this list has
     * not been rendered.
     */
    visibleIndexOfIndex(index: number): number;
    /**
     * Gets the index of a data item after hidden items have been excluded. If this list has not been rendered, then this
     * method will return `-1`.
     * @param data A data item.
     * @returns The index at which the specified data item is placed after hidden items have been excluded, or `-1` if
     * the item is not in this list, the item is itself hidden, or this list has not been rendered.
     */
    visibleIndexOfData(data: FlightPlanDataItem): number;
    /**
     * Gets the original data item index of a transformed index after hidden items have been excluded. If this list has
     * not been rendered, then this method will return `-1`.
     * @param visibleIndex A transformed index after hidden items have been excluded.
     * @returns The original index of the data item that is placed at the specified index after hidden items have been
     * excluded, or `-1` if the transformed index is out of bounds, or this list has not been rendered.
     */
    indexOfVisibleIndex(visibleIndex: number): number;
    /**
     * Scrolls until the item at a specified index is in view.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndex(index: number, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls the minimum possible distance until the item at a specified index is in view with a given margin from the
     * edges of the visible list.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndexWithMargin(index: number, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Gets the index of this list's focused item after sorting has been applied and hidden items have been excluded.
     * @returns The index of this list's focused item after sorting has been applied and hidden items have been
     * excluded, or `-1` if no item is focused.
     */
    getFocusedIndex(): number;
    /**
     * Focuses an item at a specified index in this list.
     * @param index The index of the item to focus, after sorting has been applied and hidden items have been excluded.
     * If the index is out of bounds, then focus will not be set.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusIndex(index: number, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls until the specified item is in view. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItem(item: FlightPlanDataItem, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Scrolls the minimum possible distance until the specified item is in view with a given margin from the edges of
     * the visible list. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItemWithMargin(item: FlightPlanDataItem, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Focuses an item in this list. If this is a static list, then this method does nothing.
     * @param item The item to focus.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusItem(item: FlightPlanDataItem, focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the first focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusFirst(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the last focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusLast(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the most recently focused item in this list. Has no effect if an item is currently focused or if there is
     * no most recently focused item.
     */
    focusRecent(): void;
    /**
     * Removes focus from the currently focused item in this list.
     */
    removeFocus(): void;
    /**
     * Clears this list's memory of the most recently focused item. Has no effect if an item is currently focused.
     */
    clearRecentFocus(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Updates the visible indexes of the FROM and TO legs.
     */
    private updateLegVisibleIndexes;
    /**
     * Responds to when the state of the active arrow changes.
     * @param state The new state of the active arrow, as
     * `[toLegIndex, fromLegIndex, itemLength, itemSpacing, renderWindow]`.
     */
    private onActiveArrowStateChanged;
    /**
     * Positions an arrow-end element at a list item.
     * @param transform The CSS transform controlling the position of the element to position.
     * @param index The index of the list item at which to position the element, after sorting has been applied and
     * hidden items have been excluded.
     * @param itemLength The length, in pixels, of each list item.
     * @param itemSpacing The spacing, in pixels, between each list item.
     * @param renderWindowStart The index of the first rendered list item.
     */
    private positionArrowEnd;
    /**
     * Positions and sizes an arrow stem element to span between two list items.
     * @param transform The CSS transform controlling the position and size of the element to change.
     * @param fromIndex The index of the list item at which to position the top end of the element, after sorting has
     * been applied and hidden items have been excluded.
     * @param toIndex The index of the list item at which to position the bottom end of the element, after sorting has
     * been applied and hidden items have been excluded.
     * @param itemLength The length, in pixels, of each list item.
     * @param itemSpacing The spacing, in pixels, between each list item.
     * @param renderWindowStart The index of the first rendered list item.
     */
    private positionArrowStem;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this list's active arrow elements.
     * @returns This list's active arrow elements, as a VNode.
     */
    private renderArrowElements;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Channel spacing modes supported by {@link ChannelInputSlot}.
 */
declare enum ChannelSpacing {
    Spacing50Khz = "50Khz",
    Spacing25Khz = "25Khz",
    Spacing8_33Khz = "8.33Khz",
    Spacing500Hz = "500Hz"
}
/**
 * Component props for ChannelInputSlot.
 */
interface ChannelInputSlotProps extends ComponentProps {
    /** The channel spacing supported by the slot. */
    spacing: ChannelSpacing;
}
/**
 * A cursor input slot which allows the user to select a radio frequency channel.
 */
declare class ChannelInputSlot extends DisplayComponent<ChannelInputSlotProps> {
    private static readonly SPACING;
    private static readonly COM_833_BASE_CHAR_ARRAY;
    private static readonly CHAR_ARRAYS;
    private static readonly COM_833_BASE_FREQ_ARRAY;
    private static readonly FREQ_ARRAYS;
    private readonly slotRef;
    private readonly characterCount;
    private readonly spacing;
    private readonly charArray;
    private readonly freqArray;
    /** The number of unique channels supported by this slot. */
    readonly channelCount: number;
    /** This slot's channel value. */
    get value(): Subscribable<number>;
    private readonly _frequency;
    /** The frequency associated with this slot's channel value. */
    readonly frequency: Subscribable<number>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the frequency value of this slot. As part of the operation, all of this slot's characters will be set to
     * non-null representations of the new slot value, if possible. The frequency value of this slot after the operation
     * is complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this slot.
     * @param freq The new frequency value, in hertz.
     * @returns The frequency value of this slot after the operation is complete.
     */
    setFrequency(freq: number): number;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Populates all of this slot's characters with non-empty values, if possible, using this slot's current value as a
     * template.
     */
    populateCharsFromValue(): void;
    /**
     * Changes this slot's value by a specified amount.
     * @param value This slot's value.
     * @param delta The amount by which to change the value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param characters This slot's current character values.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /**
     * Parses a channel value from individual character values.
     * @param characters An array of character values.
     * @returns The channel value parsed from the specified characters.
     */
    private parseValue;
    /**
     * Assigns values to individual characters from a channel value.
     * @param value A channel value.
     * @param setCharacters An array of functions which set this slot's character values. Each function is indexed
     * according to its associated character.
     */
    private digitizeValue;
    /**
     * Renders one of this slot's character value into a string.
     * @param charToRender The character to render.
     * @param index The index of the character to render.
     * @param characters An array of this slot's characters.
     * @returns The rendered character.
     */
    private renderChar;
    /**
     * Gets the default numeric value of one of this slot's characters.
     * @param characters An array of this slot's characters.
     * @param index The index of the character to query.
     * @returns The default numeric value of the specified character.
     */
    private getDefaultCharValue;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for FrequencyInput.
 */
interface FrequencyInputProps extends ComponentProps {
    /**
     * The radio type supported by the input. This determines the range of frequencies and the frequency spacing accepted
     * by the input as follows:
     * * NAV: 108.00 to 117.95 Mhz, 50 Khz spacing.
     * * COM: 118.00 to 136.99 Mhz, 25 or 8.33 Khz spacing.
     * * ADF: 190.0 to 1799.5 Khz, 0.5 Khz spacing.
     */
    radioType: RadioType;
    /** The COM channel spacing to use. Ignored if `radioType` is not `RadioType.Com`. Defaults to 25 Khz. */
    comChannelSpacing?: ChannelSpacing.Spacing25Khz | ChannelSpacing.Spacing8_33Khz;
    /**
     * A mutable subscribable to bind to the input's frequency value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    frequency: MutableSubscribable<number>;
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An input with a scrolling cursor which allows users to select a radio frequency.
 */
declare class FrequencyInput extends DisplayComponent<FrequencyInputProps> implements UiInteractionHandler {
    private static readonly DEFAULT_ZERO;
    private static readonly DEFAULT_ONE;
    private static readonly DEFAULT_EIGHT;
    private static readonly DEFAULT_NINE;
    private static readonly PRECISION;
    private static readonly BASE_FREQ_PARAMS;
    private readonly inputRef;
    private readonly channelSlotRef;
    private readonly comHundredMhzSlotRef;
    private readonly comHundredMhzSlotCssClass;
    private readonly navComTenMhzSlotRef;
    private readonly adfOneMhzSlotRef;
    private readonly adfHundredKhzSlotRef;
    private readonly navComOneMhzSlotMin;
    private readonly navComOneMhzSlotMax;
    private readonly navComOneMhzSlotDefault;
    private readonly adfHundredKhzSlotMin;
    private readonly adfHundredKhzSlotMax;
    private readonly adfHundredKhzSlotDefault;
    private readonly adfTenKhzSlotMin;
    private readonly adfTenKhzSlotMax;
    private readonly adfTenKhzSlotDefault;
    private readonly precision;
    private readonly baseFreqParams;
    private readonly digitSlots;
    /**
     * The base frequency value represented by this input's digit slots. The base frequency value is the truncated
     * megahertz component of the frequency for nav and com radios, and the truncated kilohertz component for ADF radios.
     */
    private readonly inputBaseValue;
    private frequency?;
    private freqPipeOut?;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private comAutoShiftArmed;
    private isInit;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the frequency value of this slot. As part of the operation, all of this slot's characters will be set to
     * non-null representations of the new slot value, if possible. The frequency value of this slot after the operation
     * is complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this slot.
     * @param freq The new frequency value, in hertz.
     * @returns The frequency value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setFrequency(freq: number): number;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value. If cursor selection is in per-slot mode, it will be forced to per-character
     * mode, and the first character of the slot will be selected before setting the value. If the cursor is past the
     * last slot, this method does nothing.
     * @param value The value to set.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): void;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @throws Error if this input is not initialized.
     */
    backspace(): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Arms this input's COM auto-shift function. When armed, and the user attempts to enter a '1', '2', '3' after
     * entering a '1' into the ten Mhz slot, the digit will be entered into the ten Mhz slot instead of the one Mhz
     * slot.
     */
    private armComAutoShift;
    /**
     * Disarm's this input's COM auto-shift function.
     */
    private disarmComAutoShift;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this input's base frequency value by a specified amount.
     * @param delta The amount by which to change the value.
     */
    private changeBaseFreqValue;
    /**
     * Parses a base frequency value from this input's individual digit slots.
     * @param slotValues The values of this input's individual input slots.
     * @returns The base frequency value represented by this input's digit slots.
     */
    private parseValue;
    /**
     * Digitizes a base frequency value into individual values to assign to this input's digit slots.
     * @param value The value to digitize.
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this input's slots.
     * @returns This input's slots, as a VNode.
     */
    private renderSlots;
    /**
     * Renders slots for nav radio frequencies.
     * @returns Slots for nav radio frequencies, as a VNode.
     */
    private renderNavSlots;
    /**
     * Renders slots for com radio frequencies.
     * @returns Slots for com radio frequencies, as a VNode.
     */
    private renderComSlots;
    /**
     * Renders slots for ADF radio frequencies.
     * @returns Slots for ADF radio frequencies, as a VNode.
     */
    private renderAdfSlots;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for UiListButton.
 */
interface UiListButtonProps extends ComponentProps, Pick<UiTouchButtonProps, 'isEnabled' | 'isHighlighted' | 'label' | 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'onFocusGained' | 'onFocusLost' | 'gduFormat' | 'canBeFocused'> {
    /**
     * Whether to render the button as a full-size button. A full-size button takes up the entire space allotted to the
     * the list item and is not surrounded by a visible border (besides the button's own border). Defaults to `false`.
     */
    fullSize?: boolean;
    /**
     * Whether to style the button to appear as a list item instead of a touchscreen button. Ignored if `fullSize` is
     * `false`. Defaults to `false`.
     */
    useListItemStyle?: boolean;
    /** A callback function to execute when the list item is destroyed. */
    onDestroy?: () => void;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A touchscreen button used at the top level of a GtcList list item. Handles cleaning up the TouchButton on destroy.
 */
declare class UiListButton extends DisplayComponent<UiListButtonProps> {
    private static readonly RESERVED_CLASSES;
    private static readonly BASE_CLASSES;
    private thisNode?;
    private childrenNode?;
    private cssClassSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link UiListFocusable}.
 */
interface UiListFocusableProps extends ComponentProps {
    /**
     * Whether the wrapper should automatically try to focus another descendant if the focused descendant loses focus
     * because it could no longer be focused. Defaults to `false`.
     */
    autoRefocus?: boolean;
}
/**
 * A wrapper which designates one or more descendants as components to focus for a rendered item in a UI list. If
 * multiple focusable components are designated, then changing focus between the designated components using the bezel
 * rotary knobs is supported.
 */
declare class UiListFocusable extends DisplayComponent<UiListFocusableProps> implements UiFocusableComponent {
    /** @inheritDoc */
    readonly isUiFocusableComponent = true;
    private thisNode?;
    private readonly _canBeFocused;
    /** @inheritDoc */
    readonly canBeFocused: Subscribable<boolean>;
    private readonly focusController;
    private lastFocusedComponent;
    private parentController?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onDeregistered(): void;
    /** @inheritDoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritDoc */
    onFocusLost(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this component's focused descendant changes.
     * @param component This component's focused descendant, or `null` if none of this component's designated descendants
     * have focus.
     */
    private onFocusedComponentChanged;
    /**
     * Attempts to focus another descendant after the most recently focused descendant has lost focus. Another
     * descendant will be focused only if the most recently focused descendant can no longer be focused.
     * @param lastFocusedComponent The most recently focused descendant.
     */
    private tryRefocus;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * G3X Touch user settings controlling the display of NEXRAD.
 */
type G3XMapNexradUserSettings = Pick<G3XMapUserSettingTypes, 'mapWeatherShow' | 'mapNexradShow'>;
/**
 * Modules required by {@link G3XMapNexradController}.
 */
interface G3XMapNexradControllerModules {
    /** Range module. */
    [GarminMapKeys.Range]: MapIndexedRangeModule;
    /** Range module. */
    [GarminMapKeys.Nexrad]: MapNexradModule;
}
/**
 * Controls the display of NEXRAD based on user settings and the nominal range of the map.
 */
declare class G3XMapNexradController extends MapSystemController<G3XMapNexradControllerModules> {
    private readonly minRangeIndex;
    private readonly nexradModule;
    private readonly rangeIndex;
    private readonly showWeatherSetting?;
    private readonly showNexradSetting?;
    private show?;
    /**
     * Creates a new instance of G3XMapNexradController.
     * @param context This controller's map context.
     * @param minRangeIndex The minimum range range index, inclusive, at which NEXRAD is visible.
     * @param settingManager A setting manager containing the user settings controlling the display of NEXRAD. If not
     * defined, then the display of NEXRAD will not be bound to user settings.
     */
    constructor(context: MapSystemContext<G3XMapNexradControllerModules, any, any, any>, minRangeIndex: number, settingManager?: UserSettingManager<Partial<G3XMapNexradUserSettings>>);
    /** @inheritDoc */
    onAfterMapRender(): void;
    /** @inheritDoc */
    onMapDestroyed(): void;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A collection of common keys used by G3X Touch maps.
 */
declare class G3XMapKeys {
    static readonly RangeEndpoints: "rangeEndpoints";
    static readonly OrientationOverride: "orientationOverride";
    static readonly LabelText: "labelText";
    static readonly CompassArc: "compassArc";
    static readonly WaypointLabelText: "waypointLabelText";
    static readonly DragPan: "dragPan";
    static readonly DragPanRTR: "dragPanRTR";
}

/**
 * A module describing the map orientation.
 */
declare class MapOrientationOverrideModule {
    /** The actual orientation of the map. */
    readonly orientationOverride: Subject<MapOrientation | null>;
}

/**
 * Modules required for G3XMapOrientationModeController.
 */
interface G3XMapOrientationModeControllerModules {
    /** Orientation module. */
    [GarminMapKeys.Orientation]: MapOrientationModule;
    /** Orientation override module. */
    [G3XMapKeys.OrientationOverride]?: MapOrientationOverrideModule;
}
/**
 * Context properties required by G3XMapOrientationModeController.
 */
interface G3XMapOrientationModeControllerContext {
    /** Resource moderator for control of the map's orientation mode. */
    [GarminMapKeys.OrientationControl]: ResourceModerator;
}
/**
 * Controls the orientation of a map based on the desired orientation mode.
 */
declare class G3XMapOrientationModeController extends MapSystemController<G3XMapOrientationModeControllerModules, any, any, G3XMapOrientationModeControllerContext> {
    private readonly orientationModule;
    private readonly orientationOverrideModule;
    private readonly orientationControl;
    private readonly orientationControlConsumer;
    private readonly orientationMode;
    private orientationPipe?;
    private commandedOrientationSub?;
    /** @inheritdoc */
    onAfterMapRender(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * G3X map track vector display modes.
 */
declare enum G3XMapTrackVectorMode {
    Off = "Off",
    Distance = "Distance",
    Time = "Time"
}
/**
 * A module describing the display of the track vector.
 */
declare class G3XMapTrackVectorModule {
    /** The track vector's display mode. */
    readonly mode: Subject<G3XMapTrackVectorMode>;
    /** The track vector's lookahead distance. */
    readonly lookaheadDistance: NumberUnitSubject<_microsoft_msfs_sdk.UnitFamily.Distance, _microsoft_msfs_sdk.SimpleUnit<_microsoft_msfs_sdk.UnitFamily.Distance>>;
    /** The track vector's lookahead time. */
    readonly lookaheadTime: NumberUnitSubject<_microsoft_msfs_sdk.UnitFamily.Duration, _microsoft_msfs_sdk.SimpleUnit<_microsoft_msfs_sdk.UnitFamily.Duration>>;
}

/**
 * User settings controlling the map track vector.
 */
type G3XMapTrackVectorUserSettings = Pick<G3XMapUserSettingTypes, 'mapTrackVectorMode' | 'mapTrackVectorDistance' | 'mapTrackVectorLookahead'>;
/**
 * Modules required for G3XMapTrackVectorController.
 */
interface G3XMapTrackVectorControllerModules {
    /** Data integrity module. */
    [GarminMapKeys.TrackVector]: G3XMapTrackVectorModule;
}
/**
 * Controls the map's track vector based on user settings.
 */
declare class G3XMapTrackVectorController extends MapSystemController<G3XMapTrackVectorControllerModules> {
    private readonly settingManager;
    private static readonly MODE_MAP;
    private readonly subscriptions;
    /**
     * Creates a new instance of MapDataIntegrityController.
     * @param context This controller's map context.
     * @param settingManager A setting manager containing the user settings controlling waypoint label text.
     */
    constructor(context: MapSystemContext<G3XMapTrackVectorControllerModules, any, any, any>, settingManager: UserSettingManager<Partial<G3XMapTrackVectorUserSettings>>);
    /** @inheritdoc */
    onAfterMapRender(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Modules required for {@link G3XNearestMapRTRController}.
 */
interface G3XNearestMapRTRControllerModules {
    /** Range module. */
    [GarminMapKeys.Range]: MapIndexedRangeModule;
    /** Waypoint highlight module. */
    [GarminMapKeys.WaypointHighlight]: MapWaypointHighlightModule;
}
/**
 * Controllers required for {@link G3XNearestMapRTRController}.
 */
interface G3XNearestMapRTRControllerControllers {
    /** Range controller. */
    [GarminMapKeys.Range]: MapRangeController;
}
/**
 * Context properties required for {@link G3XNearestMapRTRController}.
 */
interface NearestMapRTRControllerContext {
    /** Resource moderator for control of the map's range. */
    [MapSystemKeys.RangeControl]?: ResourceModerator;
}
/**
 * Controls the range of a G3X Touch nearest waypoint map to keep a highlighted waypoint in view.
 */
declare class G3XNearestMapRTRController extends MapSystemController<G3XNearestMapRTRControllerModules, any, G3XNearestMapRTRControllerControllers, NearestMapRTRControllerContext> {
    private readonly margins;
    private static readonly vec2Cache;
    private readonly rangeModule;
    private readonly waypointHighlightModule;
    private readonly rangeControl;
    private hasRangeControl;
    private readonly rangeControlConsumer;
    private waypointSub?;
    /**
     * Creates a new instance of G3XNearestMapRTRController.
     * @param context This controller's map context.
     * @param margins The margins around the projected map boundaries to respect when selecting a range to place a
     * highlighted waypoint in view, as `[left, top, right, bottom]` in pixels. Positive values move the margin inwards
     * toward the center of the projection.
     */
    constructor(context: MapSystemContext<G3XNearestMapRTRControllerModules, any, any, NearestMapRTRControllerContext>, margins: ReadonlyFloat64Array);
    /** @inheritDoc */
    onAfterMapRender(): void;
    /**
     * Attempts to set the range of this controller's map so that the highlighted waypoint is in view. If there is no
     * highlighted waypoint or this controller does not have map range control privileges, this method does nothing.
     */
    trySetRangeForWaypoint(): void;
    /**
     * Sets the range index of this controller's map.
     * @param index The index to set.
     */
    private setRangeIndex;
    /** @inheritDoc */
    onMapDestroyed(): void;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Modules required for MapDataIntegrityController.
 */
interface MapDataIntegrityControllerModules {
    /** Data integrity module. */
    [MapSystemKeys.DataIntegrity]: MapGarminDataIntegrityModule;
}
/**
 * Controls the map's position, heading, attitude, and air data signal validity states.
 */
declare class MapDataIntegrityController extends MapSystemController<MapDataIntegrityControllerModules> {
    private readonly gduIndex;
    private readonly gduSettingManager;
    private readonly dataIntegrityModule;
    private readonly ahrsHeadingDataValid;
    private readonly ahrsAttitudeDataValid;
    private readonly adcSystemState;
    private readonly fmsPosMode;
    private ahrsIndexSub?;
    private adcIndexSub?;
    /**
     * Creates a new instance of MapDataIntegrityController.
     * @param context This controller's map context.
     * @param gduIndex The index of the GDU from which the map sources data.
     * @param gduSettingManager A manager for GDU user settings.
     */
    constructor(context: MapSystemContext<MapDataIntegrityControllerModules, any, any, any>, gduIndex: number, gduSettingManager: UserSettingManager<GduUserSettingTypes>);
    /** @inheritdoc */
    onAfterMapRender(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A module describing the state of the map's drag-to-pan function.
 */
declare class MapDragPanModule {
    /** Whether drag-to-pan is active. */
    readonly isActive: Subject<boolean>;
    /** The desired map target. */
    readonly target: GeoPointSubject;
}

/**
 * Modules required for MapDragPanController.
 */
interface MapDragPanControllerModules {
    /** Pointer module. */
    [G3XMapKeys.DragPan]: MapDragPanModule;
}
/**
 * Controls the pointer of a map.
 */
declare class MapDragPanController extends MapSystemController<MapDragPanControllerModules> {
    private readonly dragPanModule;
    /**
     * Activates or deactivates the map pointer.
     * @param isActive Whether to activate the map pointer.
     */
    setDragPanActive(isActive: boolean): void;
    /**
     * Toggles activation of the map pointer.
     * @returns Whether the map pointer is active after the toggle operation.
     */
    toggleDragPanActive(): boolean;
    private readonly dragVec2Cache;
    private readonly dragGeoPointCache;
    /**
     * Executes a drag action.
     * @param dx The horizontal displacement of the drag motion, in pixels.
     * @param dy The vertical dispacement of the drag motion, in pixels.
     */
    drag(dx: number, dy: number): void;
}

/**
 * Modules required for MapDragPanRTRController.
 */
interface MapDragPanRTRControllerModules {
    /** Drag-to-pan module. */
    [G3XMapKeys.DragPan]: MapDragPanModule;
    /** Panning module. */
    [GarminMapKeys.Panning]: MapPanningModule;
    /** Orientation module. */
    [GarminMapKeys.Orientation]?: MapOrientationModule;
    /** Orientation override module. */
    [G3XMapKeys.OrientationOverride]?: MapOrientationOverrideModule;
}
/**
 * Controls the target, orientation, and range of a map while drag-to-pan is active.
 */
declare class MapDragPanRTRController extends MapSystemController<MapDragPanRTRControllerModules> {
    private readonly dragPanModule;
    private readonly panningModule;
    private readonly orientationModule;
    private readonly orientationOverrideModule;
    private targetPipe?;
    private dragPanActiveSub?;
    private commandedOrientationSub?;
    private orientationOverrideSub?;
    /** @inheritdoc */
    onAfterMapRender(): void;
    /**
     * Responds to map pointer activation changes.
     * @param isActive Whether the map pointer is active.
     */
    protected onDragPanActiveChanged(isActive: boolean): void;
    /**
     * Responds to map pointer activation.
     */
    protected onDragPanActivated(): void;
    /**
     * Responds to map pointer deactivation.
     */
    protected onPointerDeactivated(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Controls the map's nominal range endpoints.
 */
declare class MapRangeEndpointsController extends MapSystemController {
    private readonly nominalRangeEndpoints;
    private readonly projectedRange;
    private needUpdateEndpoints;
    private readonly endpoints;
    private readonly subscriptions;
    /**
     * Creates a new instance of MapRangeEndpointsController.
     * @param context This controller's map context.
     * @param projectedRange The projected scale of the map's nominal range, in pixels.
     * @param nominalRangeEndpoints The mutable subscribable to which to write computed nominal range endpoints.
     */
    constructor(context: MapSystemContext, projectedRange: number | Subscribable<number>, nominalRangeEndpoints: MutableSubscribable<any, ReadonlyFloat64Array>);
    /** @inheritdoc */
    onAfterMapRender(): void;
    /** @inheritdoc */
    onMapProjectionChanged(mapProjection: MapProjection, changeFlags: number): void;
    /** @inheritdoc */
    onBeforeUpdated(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Map label text size modes.
 */
declare enum MapLabelTextSizeMode {
    None = "None",
    Small = "Small",
    Medium = "Medium",
    Large = "Large"
}
/**
 * A module describing the map's label text.
 */
declare class MapLabelTextModule {
    readonly airportLargeTextSize: Subject<MapLabelTextSizeMode>;
    readonly airportMediumTextSize: Subject<MapLabelTextSizeMode>;
    readonly airportSmallTextSize: Subject<MapLabelTextSizeMode>;
    readonly vorTextSize: Subject<MapLabelTextSizeMode>;
    readonly ndbTextSize: Subject<MapLabelTextSizeMode>;
    readonly intTextSize: Subject<MapLabelTextSizeMode>;
    readonly userTextSize: Subject<MapLabelTextSizeMode>;
}

/**
 * User settings controlling map waypoint label text.
 */
type MapWaypointLabelTextUserSettings = Pick<G3XMapUserSettingTypes, 'mapAirportLargeTextSize' | 'mapAirportMediumTextSize' | 'mapAirportSmallTextSize' | 'mapVorTextSize' | 'mapNdbTextSize' | 'mapIntersectionTextSize' | 'mapUserWaypointTextSize'>;
/**
 * Modules required for MapWaypointLabelTextController.
 */
interface MapWaypointLabelTextControllerModules {
    /** Data integrity module. */
    [G3XMapKeys.LabelText]: MapLabelTextModule;
}
/**
 * Controls the map's waypoint label text based on user settings.
 */
declare class MapWaypointLabelTextController extends MapSystemController<MapWaypointLabelTextControllerModules> {
    private readonly settingManager;
    private static readonly SIZE_MAP;
    private static readonly SIZE_MAP_FUNC;
    private readonly subscriptions;
    /**
     * Creates a new instance of MapDataIntegrityController.
     * @param context This controller's map context.
     * @param settingManager A setting manager containing the user settings controlling waypoint label text.
     */
    constructor(context: MapSystemContext<MapWaypointLabelTextControllerModules, any, any, any>, settingManager: UserSettingManager<Partial<MapWaypointLabelTextUserSettings>>);
    /** @inheritdoc */
    onAfterMapRender(): void;
    /** @inheritdoc */
    onMapDestroyed(): void;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A module describing the map compass arc.
 */
declare class G3XMapCompassArcModule {
    /** Whether to show the compass arc. */
    readonly show: Subject<boolean>;
    /** Whether to show the compass arc's minor bearing labels. */
    readonly showMinorBearingLabels: Subject<boolean>;
    /** Whether to show the compass arc's digital heading/track readout. */
    readonly showReadout: Subject<boolean>;
    /**
     * Whether to show the compass arc's selected heading bug. Showing the selected heading bug requires a
     * `MapGarminAutopilotPropsModule` to be added to the map under the key `MapSystemKeys.AutopilotProps`.
     */
    readonly showHeadingBug: Subject<boolean>;
}

/**
 * Modules required by G3XMapCompassArcLayer.
 */
interface G3XMapCompassArcLayerModules {
    /** Own airplane properties module. */
    [MapSystemKeys.OwnAirplaneProps]: MapOwnAirplanePropsModule;
    /** Autopilot properties module. */
    [MapSystemKeys.AutopilotProps]?: MapGarminAutopilotPropsModule;
    /** Follow airplane module. */
    [MapSystemKeys.FollowAirplane]: MapFollowAirplaneModule;
    /** Orientation module. */
    [GarminMapKeys.Orientation]: MapOrientationModule;
    /** Compass arc module. */
    [G3XMapKeys.CompassArc]: G3XMapCompassArcModule;
    /** Display units module. */
    [GarminMapKeys.Units]?: MapUnitsModule;
}
/**
 * Component props for G3XMapCompassArcLayer.
 */
interface G3XMapCompassArcLayerProps extends MapLayerProps<G3XMapCompassArcLayerModules> {
    /** The angular width of the arc, in degrees. */
    arcAngularWidth: number | Subscribable<number>;
    /**
     * The margin, in pixels, from the top of the arc (excluding the reference arrow and heading/track readout) to the
     * top of the map's projected window.
     */
    arcTopMargin: number | Subscribable<number>;
    /**
     * Whether to support autopilot selected heading sync behavior. If `true`, then
     * {@link MapGarminAutopilotPropsModule.manualHeadingSelect} will be used to determine when manual adjustments to
     * selected heading are made. If `false`, then any change to selected heading is considered a manual adjustment.
     * Defaults to `false`.
     */
    supportHeadingSync?: boolean;
    /** The width, in pixels, of the compass arc stroke. Defaults to 2 pixels. */
    arcStrokeWidth?: number;
    /** The color of the compass arc stroke. Defaults to `'white'`. */
    arcStrokeColor?: string;
    /** The width, in pixels, of the compass arc outline. Defaults to 1 pixel. */
    arcOutlineWidth?: number;
    /** The color of the compass arc outline. Defaults to `'black'`.  */
    arcOutlineColor?: string;
    /** The length, in pixels, of major bearing ticks. */
    bearingTickMajorLength: number;
    /** The length, in pixels, of minor bearing ticks. */
    bearingTickMinorLength: number;
    /** The font type used for the bearing labels. */
    bearingLabelFont: string;
    /** The color of the bearing label font. Defaults to the arc stroke color. */
    bearingLabelFontColor?: string;
    /** The size, in pixels, of the major bearing label font. */
    bearingLabelMajorFontSize: number;
    /** The size, in pixels, of the minor bearing label font. */
    bearingLabelMinorFontSize: number;
    /** The width, in pixels, of the bearing label font's outline. Defaults to 6 pixels. */
    bearingLabelOutlineWidth?: number;
    /** The color of the bearing label outline. Defaults to `'black'`. */
    bearingLabelOutlineColor?: string;
    /**
     * The radial offset, in pixels, of bearing labels from the arc. Positive values shift the labels toward the center
     * of the arc. Defaults to 0 pixels.
     */
    bearingLabelRadialOffset?: number;
    /**
     * The size of the border of the digital heading/track readout, as `[width, height]` in pixels. Required to render
     * the readout border.
     */
    readoutBorderSize?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /**
     * The width, in pixels, of the reference arrow. The reference arrow is not shown if the heading/track readout is
     * shown. Defaults to the reference arrow height.
     */
    referenceArrowWidth?: number;
    /**
     * The height, in pixels, of the reference arrow. The reference arrow is not shown if the heading/track readout is
     * shown. Defaults to the minor bearing tick length.
     */
    referenceArrowHeight?: number;
    /** The width, in pixels, of the selected heading line. Defaults to the arc stroke width. */
    headingLineWidth?: number;
    /** The color of the selected heading line. Defaults to `'cyan'`. */
    headingLineColor?: string;
    /**
     * The dash array of the selected heading line. Defaults to `[3 * width, 3 * width]`, where `width` is the width of
     * the heading line.
     */
    headingLineDash?: readonly number[];
    /**
     * The width, in pixels, of the selected heading bug. Defaults to 24 pixels.
     */
    headingBugWidth?: number;
    /**
     * The height, in pixels, of the selected heading bug. Defaults to 12 pixels.
     */
    headingBugHeight?: number;
    /** The color of the selected heading bug. Defaults to `'cyan'`. */
    headingBugColor?: string;
    /**
     * The width, in pixels, of the selected heading bug's outline Defaults to 1 pixel.
     */
    headingBugOutlineWidth?: number;
    /** The color of the selected heading bug's outline. Defaults to `'cyan'`. */
    headingBugOutlineColor?: string;
}
/**
 * A map layer which draws a compass arc centered on and above the map target while the map orientation is heading up
 * or track up and the map is following the player airplane.
 */
declare class G3XMapCompassArcLayer extends MapLayer<G3XMapCompassArcLayerProps> {
    private static readonly HEADING_UNSUPPRESS_DURATION;
    private static readonly DEFAULT_ARC_STROKE_WIDTH;
    private static readonly DEFAULT_ARC_STROKE_COLOR;
    private static readonly DEFAULT_ARC_OUTLINE_WIDTH;
    private static readonly DEFAULT_ARC_OUTLINE_COLOR;
    private static readonly DEFAULT_BEARING_LABEL_OUTLINE_WIDTH;
    private static readonly DEFAULT_BEARING_LABEL_OUTLINE_COLOR;
    private static readonly DEFAULT_BEARING_LABEL_RADIAL_OFFSET;
    private static readonly DEFAULT_HEADING_LINE_COLOR;
    private static readonly DEFAULT_HEADING_BUG_COLOR;
    private static readonly DEFAULT_HEADING_BUG_OUTLINE_WIDTH;
    private static readonly DEFAULT_HEADING_BUG_OUTLINE_COLOR;
    private readonly rootRef;
    private readonly canvasLayerRef;
    private readonly arcAngularWidth;
    private readonly arcTopMargin;
    private readonly arcStrokeWidth;
    private readonly arcStrokeColor;
    private readonly arcOutlineWidth;
    private readonly arcOutlineColor;
    private readonly bearingLabelFontColor;
    private readonly bearingLabelOutlineWidth;
    private readonly bearingLabelOutlineColor;
    private readonly bearingLabelRadialOffset;
    private readonly readoutBorderSize;
    private readonly referenceArrowHeight;
    private readonly referenceArrowWidth;
    private readonly headingLineWidth;
    private readonly headingLineColor;
    private readonly headingLineDash;
    private readonly headingBugWidth;
    private readonly headingBugHeight;
    private readonly headingBugColor;
    private readonly headingBugOutlineWidth;
    private readonly headingBugOutlineColor;
    private readonly unitsModule;
    private readonly orientationModule;
    private readonly compassArcModule;
    private readonly isFollowingAirplane;
    private readonly magVar;
    private readonly centerSubject;
    private readonly radiusSubject;
    private readonly rotationSubject;
    private readonly magVarCorrectionSubject;
    private readonly readoutDisplay;
    private readonly readoutCssTransform;
    private readonly readoutValue;
    private readonly showHeadingIndicator;
    private readonly headingIndicatorSuppressTimer;
    private readonly suppressHeadingCallback;
    private needUpdateRootVisibility;
    private needUpdateReadoutVisibility;
    private needUpdateReadoutPosition;
    private needUpdateReadoutValue;
    private readonly subscriptions;
    private manualHeadingSelectSub?;
    /** @inheritdoc */
    onVisibilityChanged(isVisible: boolean): void;
    /** @inheritdoc */
    onAttached(): void;
    /**
     * Initializes listeners.
     */
    private initListeners;
    /** @inheritdoc */
    onMapProjectionChanged(mapProjection: MapProjection, changeFlags: number): void;
    /** @inheritdoc */
    onUpdated(time: number, elapsed: number): void;
    /**
     * Updates the visibility of this layer's root.
     */
    private updateRootVisibility;
    /**
     * Updates this layer's digital heading/track readout.
     */
    private updateReadout;
    /**
     * Updates this layer's visibility.
     */
    private updateVisibility;
    /**
     * Updates the parameters (center, radius, rotation) of this layer's arc rose.
     */
    private updateParameters;
    /**
     * Responds to changes in the location of the center of the compass.
     */
    private onCenterChanged;
    /**
     * Responds to changes in the radius of the compass.
     */
    private onRadiusChanged;
    /**
     * Responds to changes in the rotation of the compass.
     */
    private onRotationChanged;
    /**
     * Responds to changes in whether to show the compass arc.
     */
    private onCompassArcShowChanged;
    /**
     * Updates the visibility of this layer's heading indicator.
     */
    private updateHeadingIndicatorVisibility;
    /**
     * Suppresses the heading indicator, making it invisible.
     */
    private suppressHeadingIndicator;
    /**
     * Unsuppresses the heading indicator, making it visible for a short duration.
     */
    private unsuppressHeadingIndicator;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Modules required for G3XMapMiniCompassLayer.
 */
interface G3XMapMiniCompassLayerModules {
    /** Map orientation module. */
    [GarminMapKeys.Orientation]?: MapOrientationModule;
    /** Map orientation override module. */
    [G3XMapKeys.OrientationOverride]?: MapOrientationOverrideModule;
}
/**
 * Component props for G3XMapMiniCompassLayer.
 */
interface G3XMapMiniCompassLayerProps extends MapLayerProps<G3XMapMiniCompassLayerModules> {
    /**
     * Whether the compass should support the orientation toggle feature. If defined, then the compass will function as
     * a touchscreen button. If not defined, then the compass will not function as a button. The orientation toggle
     * feature requires the following modules:
     *
     * * `[GarminMapKeys.Orientation]: MapOrientationModule`
     * * `[G3XMapKeys.OrientationOverride]: MapOrientationOverrideModule`
     *
     * Defaults to `false`.
     */
    supportOrientationToggle?: boolean;
}
/**
 * A map layer which depicts a rotating compass arrow pointing to true north and optionally functions as a touchscreen
 * button allowing the user to toggle the map orientation setting.
 */
declare class G3XMapMiniCompassLayer extends MapLayer<G3XMapMiniCompassLayerProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly rootCssClass;
    private readonly arrowTransform;
    private readonly orientationModule;
    private readonly overrideModule;
    private readonly isOverrideActive;
    private needUpdate;
    private cssClassSub?;
    /** @inheritdoc */
    onVisibilityChanged(isVisible: boolean): void;
    /** @inheritdoc */
    onAttached(): void;
    /** @inheritdoc */
    onMapProjectionChanged(mapProjection: MapProjection, changeFlags: number): void;
    /** @inheritdoc */
    onUpdated(): void;
    /**
     * Updates the rotation of this compass's arrow.
     */
    private updateRotation;
    /**
     * Responds to when this compass's button is pressed.
     */
    private onButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this compass's arrow.
     * @returns This compass's rendered arrow, as a VNode.
     */
    private renderArrow;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Modules required for G3XMapTrackVectorLayer.
 */
interface G3XMapTrackVectorLayerModules {
    /** Own airplane properties module. */
    [MapSystemKeys.OwnAirplaneProps]: MapOwnAirplanePropsModule;
    /** Track vector module. */
    [GarminMapKeys.TrackVector]: G3XMapTrackVectorModule;
    /** Data integrity module. */
    [MapSystemKeys.DataIntegrity]?: MapDataIntegrityModule;
    /** Display units module. */
    [GarminMapKeys.Units]?: MapUnitsModule;
}
/**
 * Component props for G3XMapTrackVectorLayer.
 */
interface G3XMapTrackVectorLayerProps extends MapLayerProps<G3XMapTrackVectorLayerModules> {
    /** The width of the vector stroke, in pixels. Defaults to 2 pixels. */
    strokeWidth?: number;
    /** The color of the vector stroke. Defaults to `'cyan'`. */
    strokeColor?: string;
    /** The width of the vector outline, in pixels. Defaults to 1 pixel. */
    outlineWidth?: number;
    /** The color of the vector outline. Defaults to `'#505050'`. */
    outlineColor?: string;
    /** The length of each vector tick, in pixels. Defaults to 10 pixels. */
    tickLength?: number;
}
/**
 * A map layer which displays a track vector.
 */
declare class G3XMapTrackVectorLayer extends MapLayer<G3XMapTrackVectorLayerProps> {
    private static readonly DEFAULT_STROKE_WIDTH;
    private static readonly DEFAULT_STROKE_STYLE;
    private static readonly DEFAULT_OUTLINE_WIDTH;
    private static readonly DEFAULT_OUTLINE_STYLE;
    private static readonly DEFAULT_TICK_LENGTH;
    private static readonly vec2Cache;
    private readonly canvasLayerRef;
    private readonly strokeWidth;
    private readonly strokeStyle;
    private readonly outlineWidth;
    private readonly outlineStyle;
    private readonly tickLength;
    private readonly ownAirplanePropsModule;
    private readonly trackVectorModule;
    private readonly dataIntegrityModule;
    private readonly unitsModule;
    private readonly projectedPlanePosition;
    private readonly projectPlanePositionHandler;
    private readonly isVectorVisible;
    private readonly clipBounds;
    private readonly clipPathStream;
    private readonly transformPathStream;
    private needUpdate;
    private distanceSub?;
    private timeSub?;
    private distanceUnitsSub?;
    private gsSub?;
    private readonly subscriptions;
    /** @inheritdoc */
    onVisibilityChanged(isVisible: boolean): void;
    /** @inheritdoc */
    onAttached(): void;
    /**
     * Initializes this layer's static canvas styles.
     */
    private initCanvasStyles;
    /**
     * Updates this layer's clipping boundaries.
     */
    private updateClipBounds;
    /** @inheritdoc */
    onMapProjectionChanged(mapProjection: MapProjection, changeFlags: number): void;
    /** @inheritdoc */
    onUpdated(): void;
    /**
     * Draws this layer's track vector.
     * @param context The canvas 2D rendering context to which to draw the vector.
     * @param projection The map projection to use to draw the vector.
     * @param track The vector's true ground track, in degrees.
     * @param distance The vector's total distance, in great-arc radians.
     * @param tickInterval The distance interval between each vector tick, in great-arc radians.
     */
    drawVector(context: CanvasRenderingContext2D, projection: MapProjection, track: number, distance: number, tickInterval: number): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * G3X Touch user settings controlling the visibility of map waypoints.
 */
type G3XMapWaypointVisUserSettings = MapWaypointVisUserSettings & Pick<G3XMapUserSettingTypes, 'mapRunwayLabelRangeIndex'>;
/**
 * Styling options for the map compass arc.
 */
type G3XMapCompassArcOptions = Omit<G3XMapCompassArcLayerProps, keyof MapLayerProps<any>>;
/**
 * Options for the map track vector.
 */
type G3XMapTrackVectorOptions = Omit<G3XMapTrackVectorLayerProps, keyof MapLayerProps<any>>;
/**
 * Options for the nearest waypoints layer.
 */
type G3XMapWaypointsLayerOptions = Pick<GarminMapBuilderWaypointsLayerOptions, 'supportRunwayOutlines'>;
/**
 * A builder for G3X Touch maps.
 */
declare class G3XMapBuilder {
    /**
     * Configures a map builder to generate a map which supports different orientations, as enumerated by
     * {@link MapOrientation}. Each orientation defines a different rotation behavior and target offset.
     *
     * Adds the following...
     *
     * Context properties:
     * * `[MapSystemKeys.RotationControl]: ResourceModerator<void>`
     * * `[GarminMapKeys.OrientationControl]: ResourceModerator<void>`
     * * `[GarminMapKeys.DesiredOrientationControl]: ResourceModerator<void>`
     *
     * Modules:
     * * `[MapSystemKeys.Rotation]: MapRotationModule`
     * * `[GarminMapKeys.Orientation]: MapOrientationModule`
     * * `[GarminMapKeys.Range]: MapIndexedRangeModule`
     * * `[MapSystemKeys.OwnAirplaneProps]: MapOwnAirplanePropsModule`
     *
     * Controllers:
     * * `[G3XMapKeys.RangeEndpoints]: MapRangeEndpointsController`
     * * `[MapSystemKeys.Rotation]: MapRotationController`
     * * `[GarminMapKeys.OrientationRTR]: MapOrientationRTRController`
     * * `[GarminMapKeys.Orientation]: G3XMapOrientationModeController`
     * * `[GarminMapKeys.DesiredOrientation]: MapDesiredOrientationController`
     * * `[GarminMapKeys.OrientationSettings]: MapOrientationSettingsController` (only with user setting support)
     * @param mapBuilder The map builder to configure.
     * @param projectedRange The projected scale of the map's nominal range, in pixels.
     * @param nominalTargetOffsets The nominal projected target offsets defined by each orientation. Each target offset
     * is a 2-tuple `[x, y]`, where each component is expressed relative to the width or height of the map's projected
     * window, *excluding* the dead zone. If an orientation does not have a defined offset, it will default to `[0, 0]`.
     * @param settingManager A setting manager containing user settings used to control the map orientation. If not
     * defined, map orientation will not be bound to user settings.
     * @returns The map builder, after it has been configured.
     */
    static orientation<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, projectedRange: number | Subscribable<number>, nominalTargetOffsets?: Partial<Record<MapOrientation, ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>>>, settingManager?: UserSettingManager<Partial<MapOrientationSettingsControllerSettings>>): MapBuilder;
    /**
     * Configures a map builder to generate a map which supports different orientations, as enumerated by
     * {@link MapOrientation}. Each orientation defines a different rotation behavior and target offset.
     *
     * Adds the module `[G3XMapKeys.OrientationOverride]: MapOrientationOverrideModule`.
     * @param mapBuilder The map builder to configure.
     * @returns The map builder, after it has been configured.
     */
    static orientationOverride<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder): MapBuilder;
    /**
     * Configures a map builder to generate a map which supports data integrity state. During loss of valid heading
     * information, the map will default to North Up orientation, and the player airplane icon will optionally be changed
     * to reflect this state. During loss of valid GPS signal, the map will stop attempting to follow the player
     * airplane, and the player airplane icon will be hidden.
     * @param mapBuilder The map builder to configure.
     * @param gduIndex The index of the GDU from which the map sources data.
     * @param gduSettingManager A manager for GDU user settings.
     * @param airplaneIconSrc A mutable subscribable which controls the player airplane icon's image source URI.
     * Required for this controller to change the player airplane icon.
     * @param airplaneIconAnchor A mutable subscribable which controls the anchor point of the player airplane icon.
     * Required for this controller to change the player airplane icon.
     * @param normalIconSrc The URI of the normal player airplane icon's image source, or a subscribable which provides
     * it. Required for the player airplane icon to change during loss of valid heading information.
     * @returns The map builder, after it has been configured.
     */
    static dataIntegrity<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, gduIndex: number, gduSettingManager: UserSettingManager<GduUserSettingTypes>, airplaneIconSrc?: MutableSubscribable<string>, airplaneIconAnchor?: MutableSubscribable<ReadonlyFloat64Array>, normalIconSrc?: string | Subscribable<string>): MapBuilder;
    /**
     * Configures a map builder to generate a map which supports NEXRAD, and optionally binds the display of NEXRAD to
     * user settings.
     *
     * Requires the module `[MapSystemKeys.Weather]: MapWxrModule`.
     *
     * Adds the following...
     *
     * Modules:
     * * `[GarminMapKeys.Range]: MapIndexedRangeModule`
     * * `[GarminMapKeys.Nexrad]: MapNexradModule`
     *
     * Controllers:
     * * `[MapSystemKeys.Weather]: MapWxrController`
     * * `[GarminMapKeys.Nexrad]: G3XMapNexradController`
     * @param mapBuilder The map builder to configure.
     * @param minRangeIndex The minimum range index, inclusive, at which NEXRAD is visible. Defaults to `0`.
     * @param settingManager A user setting manager containing settings which control NEXRAD. If not defined, NEXRAD will
     * not be controlled by user settings.
     * @param colors The color array for the NEXRAD overlay. If not defined, default colors will be applied.
     * @returns The map builder, after it has been configured.
     */
    static nexrad<MapBuilder extends MapSystemBuilder<{
        [MapSystemKeys.Weather]: MapWxrModule;
    }>>(mapBuilder: MapBuilder, minRangeIndex?: number, settingManager?: UserSettingManager<Partial<G3XMapNexradUserSettings>>, colors?: readonly (readonly [number, number])[]): MapBuilder;
    /**
     * Configures a map builder to generate a map which displays a compass arc. The compass arc is displayed only in
     * Heading Up and Track Up orientation while the map is following the player airplane.
     *
     * Requires the following...
     *
     * Modules:
     * * `[MapSystemKeys.OwnAirplaneProps]: MapOwnAirplanePropsModule`
     * * `[MapSystemKeys.AutopilotProps]: MapGarminAutopilotPropsModule` (only if the heading bug is shown)
     * * `[MapSystemKeys.FollowAirplane]: MapFollowAirplaneModule`
     * * `[GarminMapKeys.Orientation]: MapOrientationModule`
     * * `[GarminMapKeys.Units]: MapUnitsModule` (only if magnetic/true bearing toggle is desired)
     *
     * Adds the following...
     *
     * Modules:
     * * `[G3XMapKeys.CompassArc]: G3XMapCompassArcModule`
     *
     * Layers:
     * * `[G3XMapKeys.CompassArc]: G3XMapCompassArcLayer`
     *
     * Controllers:
     * * `[G3XMapKeys.CompassArc]: MapRangeCompassController`
     * @param mapBuilder The map builder to configure.
     * @param options Styling options for the compass arc.
     * @param order The order to assign to the compass arc layer. Layers with lower assigned order will be attached to
     * the map before and appear below layers with greater assigned order values. Defaults to the number of layers
     * already added to the map builder.
     * @returns The map builder, after it has been configured.
     */
    static compassArc<MapBuilder extends MapSystemBuilder<Omit<G3XMapCompassArcLayerModules, typeof G3XMapKeys.CompassArc>>>(mapBuilder: MapBuilder, options: Readonly<G3XMapCompassArcOptions>, order?: number): MapBuilder;
    /**
     * Configures a map builder to generate a map which supports the display of waypoints located within the boundaries
     * of the map's projected window. Waypoints displayed in this manner are rendered by a `MapWaypointRenderer` under
     * the role `MapWaypointRenderRole.Normal`. Optionally binds the visibility of waypoints to user settings.
     *
     * If a text layer has already been added to the builder, its order will be changed so that it is rendered above the
     * waypoint layer. Otherwise, a text layer will be added to the builder after the waypoint layer.
     *
     * Adds the following...
     *
     * Context properties:
     * * `[MapSystemKeys.TextManager]: MapCullableTextLabelManager`
     * * `[MapSystemKeys.WaypointRenderer]: MapWaypointRenderer`
     * * `[GarminMapKeys.WaypointDisplayBuilder]: MapWaypointDisplayBuilder`
     *
     * Modules:
     * * `[MapSystemKeys.NearestWaypoints]: MapWaypointsModule`
     * * `[G3XMapKeys.LabelText]: G3XMapLabelTextModule`
     * * `[GarminMapKeys.Range]: MapIndexedRangeModule` (only if user settings are supported)
     *
     * Layers:
     * * `[MapSystemKeys.NearestWaypoints]: MapWaypointsLayer`
     * * `[MapSystemKeys.TextLayer]: MapCullableTextLayer`
     *
     * Controllers:
     * * `[MapSystemKeys.WaypointRenderer]: MapSystemCustomController` (handles initialization and updating of the
     * waypoint renderer)
     * * `[GarminMapKeys.WaypointsVisibility]: MapWaypointsVisController` (only if user settings are supported)
     * * `[GarminMapKeys.RunwayVisibility]: MapSymbolVisController` (only if runway outlines are supported)
     * * `[GarminMapKeys.RunwayLabelVisibility]: MapSymbolVisController` (only if runway outlines are supported)
     * * `[G3XMapKeys.WaypointLabelText]: MapWaypointLabelTextController` (only if user settings are supported)
     * @param mapBuilder The map builder to configure.
     * @param configure A function used to configure the display and styling of waypoint icons and labels.
     * @param settingManager A setting manager containing the user settings controlling waypoint visibility and label
     * text. If not defined, waypoint visibility and label text will not be bound to user settings.
     * @param options Options with which to configure the layer.
     * @param order The order to assign to the waypoint layer. Layers with lower assigned order will be attached to the
     * map before and appear below layers with greater assigned order values. Defaults to the number of layers already
     * added to the map builder.
     * @returns The map builder, after it has been configured.
     */
    static waypoints<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, configure: (builder: MapWaypointDisplayBuilder, context: MapSystemContext<any, any, any, any>) => void, settingManager?: UserSettingManager<Partial<G3XMapWaypointVisUserSettings & MapWaypointLabelTextUserSettings>>, options?: Readonly<G3XMapWaypointsLayerOptions>, order?: number): MapBuilder;
    /**
     * Configures a map builder to generate a map which displays airspaces, and optionally binds the visibility of
     * airspaces to user settings.
     *
     * Adds the following...
     *
     * Context properties:
     * * `[MapSystemKeys.AirspaceManager]: GenericAirspaceRenderManager`
     *
     * Modules:
     * * `[MapSystemKeys.Airspace]: MapAirspaceModule`
     *
     * Layers:
     * * `[MapSystemKeys.Airspace]: MapAirspaceLayer`
     *
     * Controllers:
     * * `[GarminMapKeys.AirspaceVisibility]: MapAirspaceVisController` (only with user settings support)
     * @param mapBuilder The map builder to configure.
     * @param gduFormat The format of the map's parent GDU.
     * @param settingManager A setting manager containing the user settings controlling airspace visibility. If not
     * defined, airspace visibility will not be controlled by user settings.
     * @param order The order to assign to the airspace layer. Layers with lower assigned order will be attached to the
     * map before and appear below layers with greater assigned order values. Defaults to the number of layers already
     * added to the map builder.
     * @returns The map builder, after it has been configured.
     */
    static airspaces<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, gduFormat: GduFormat, settingManager?: UserSettingManager<Partial<MapAirspaceVisUserSettings>>, order?: number): MapBuilder;
    /**
     * Configures a map builder to generate a map with a track vector, and optionally binds the display options of the
     * vector to user settings.
     *
     * Adds the following...
     *
     * Modules:
     * * `[GarminMapKeys.TrackVector]: G3XMapTrackVectorModule`
     *
     * Layers:
     * * `[GarminMapKeys.TrackVector]: G3XMapTrackVectorLayer`
     *
     * Controllers:
     * * `[GarminMapKeys.TrackVector]: G3XMapTrackVectorController` (only if user settings are supported)
     * @param mapBuilder The map builder to configure.
     * @param options Options for the track vector.
     * @param settingManager A setting manager containing user settings used to control the track vector. If not defined,
     * the track vector will not be bound to user settings.
     * @param order The order to assign to the track vector layer. Layers with lower assigned order will be attached to
     * the map before and appear below layers with greater assigned order values. Defaults to the number of layers
     * already added to the map builder.
     * @returns The map builder, after it has been configured.
     */
    static trackVector<MapBuilder extends MapSystemBuilder<Omit<G3XMapTrackVectorLayerModules, typeof GarminMapKeys.TrackVector>>>(mapBuilder: MapBuilder, options: G3XMapTrackVectorOptions, settingManager?: UserSettingManager<Partial<G3XMapTrackVectorUserSettings>>, order?: number): MapBuilder;
    /**
     * Configures a map builder to generate a map which displays a miniature compass.
     *
     * Adds the layer `GarminMapKeys.MiniCompass: G3XMapMiniCompassLayer`.
     * @param mapBuilder The map builder to configure.
     * @param supportOrientationToggle Whether the compass should support the orientation toggle feature. If defined,
     * then the compass will function as a touchscreen button. If not defined, then the compass will not function as a
     * button. The orientation toggle feature requires the following modules:
     *
     * * `[GarminMapKeys.Orientation]: MapOrientationModule`
     * * `[G3XMapKeys.OrientationOverride]: MapOrientationOverrideModule`
     *
     * Defaults to `false`.
     * @param order The order to assign to the mini-compass layer. Layers with lower assigned order will be attached to
     * the map before and appear below layers with greater assigned order values. Defaults to the number of layers
     * already added to the map builder.
     * @returns The map builder, after it has been configured.
     */
    static miniCompass<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, supportOrientationToggle?: boolean, order?: number): MapBuilder;
    /**
     * Configures a map builder to generate a map with drag-to-pan support. Activating drag-to-pan allows the user to
     * control map panning by dragging the map and stops the map from actively rotating.
     *
     * If map target, orientation, or rotation control resource moderators exist on the map context, the panning RTR
     * controller will attempt to claim those resources with a priority of `100`. Otherwise, the controller assumes
     * nothing else controls the map target or rotation.
     *
     * Adds the following...
     *
     * Modules:
     * * `[GarminMapKeys.Panning]: MapPanningModule`
     * * `[G3XMapKeys.DragPan]: MapDragPanModule`
     *
     * Controllers:
     * * `[GarminMapKeys.PanningRTR]: MapPanningRTRController`
     * * `[G3XMapKeys.DragPan]: MapDragPanController` (can be used to control the behavior of drag-to-pan)
     * * `[G3XMapKeys.DragPanRTR]: MapDragPanRTRController`
     * @param mapBuilder The map builder to configure.
     * @returns The map builder, after it has been configured.
     */
    static dragPan<MapBuilder extends MapSystemBuilder<any, any, any, MapPanningRTRControllerContext>>(mapBuilder: MapBuilder): MapBuilder;
}

/**
 * Configuration options for traffic intruder icons for G3X Touch navigation maps.
 */
type G3XNavMapTrafficIconOptions = Pick<TrafficIconOptions, 'iconSize' | 'fontSize'>;
/**
 * Options for creating a G3X Touch navigation map.
 */
type G3XNavMapOptions = {
    /** The format of the map's parent GDU. */
    gduFormat: GduFormat;
    /** The ID to assign to the map's bound Bing Map instance. */
    bingId: string;
    /** The amount of time, in milliseconds, to delay binding the map's Bing Map instance. Defaults to 0. */
    bingDelay?: number;
    /** The frequency, in hertz, with which player airplane and autopilot properties are updated from event bus data. */
    dataUpdateFreq: number | Subscribable<number>;
    /** The index of the GDU from which the map sources data. */
    gduIndex: number;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** The scaling factor of waypoint icons and labels. Defaults to `1`. */
    waypointStyleScale?: number;
    /** The projected scale of the map's nominal range, in pixels. */
    projectedRange: number | Subscribable<number>;
    /**
     * The nominal projected target offset of the map for each orientation mode, as `[x, y]`, where each component is
     * expressed relative to the width or height of the map's projected window, *excluding* the dead zone. Defaults to
     * the following:
     * ```
     * {
     *   [MapOrientation.NorthUp]: [0, 0],
     *   [MapOrientation.TrackUp]: [0, 0.25],
     *   [MapOrientation.DtkUp]: [0, 0.25]
     * }
     * ```
     */
    targetOffsets?: Partial<Record<MapOrientation, ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>>>;
    /** The map range array to use for nautical units mode. Defaults to a standard range array. */
    nauticalRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** The map range array to use for metric units mode. Defaults to a standard range array. */
    metricRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** Whether to include support for drag-to-pan. Defaults to `true`. */
    includeDragPan?: boolean;
    /** The text of the banner that is displayed when GPS position is not available. Defaults to `'NO GPS POSITION'`. */
    noGpsBannerText?: string;
    /** Styling options for the compass arc. Required to display the compass arc. */
    compassArcOptions?: Readonly<G3XMapCompassArcOptions>;
    /** Whether to display airport runway outlines. Defaults to `true`. */
    includeRunwayOutlines?: boolean;
    /** Whether to display airspaces. Defaults to `true`. */
    includeAirspaces?: boolean;
    /** The URI of the player airplane icon's image asset */
    airplaneIconSrc: string | Subscribable<string>;
    /** The orientation of the player airplane icon. Defaults to `MapOwnAirplaneIconOrientation.HeadingUp`. */
    airplaneIconOrientation?: MapOwnAirplaneIconOrientation | Subscribable<MapOwnAirplaneIconOrientation>;
    /** The flight planner containing the active flight plan. Required to display the active flight plan. */
    flightPlanner?: FlightPlanner | Subscribable<FlightPlanner>;
    /** The index of the LNAV instance associated with the active flight plan. Required to display the active flight plan. */
    lnavIndex?: number | Subscribable<number>;
    /** The index of the VNAV instance associated with the active flight plan. Required to display the active flight plan. */
    vnavIndex?: number | Subscribable<number>;
    /**
     * Whether to always draw the entire active flight plan, or a subscribable which provides it. Defaults to `false`.
     * Ignored if the active flight plan is not displayed.
     */
    drawEntirePlan?: boolean | Subscribable<boolean>;
    /** Whether to support flight plan focus. Defaults to `false`. Ignored if the active flight plan is not displayed. */
    supportFlightPlanFocus?: boolean;
    /**
     * A subscribable which provides the nominal focus margins, as `[left, top, right, bottom]` in pixels. The nominal
     * margins define the offset of the boundaries of the focus region relative to the map's projected window,
     * *excluding* the dead zone. Positive values represent offsets toward the center of the window. When the flight plan
     * is focused, the focused elements of the plan are guaranteed to be contained within the focus region. Defaults to
     * `[0, 0, 0, 0]`.
     */
    nominalFocusMargins?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /**
     * The default map range index to apply when the procedure focus consists of only a single point in space. Defaults
     * to `7` (0.8 NM with standard range arrays).
     */
    defaultFocusRangeIndex?: number;
    /** The traffic system from which to retrieve traffic intruder data. Required to display traffic. */
    trafficSystem?: TrafficSystem;
    /** Configuration options for traffic icons. Required to display traffic. */
    trafficIconOptions?: G3XNavMapTrafficIconOptions;
    /** Whether to include the track vector display. Defaults to `true`. */
    includeTrackVector?: boolean;
    /** Whether to include the altitude intercept arc display. Defaults to `true`. */
    includeAltitudeArc?: boolean;
    /** Whether to include a mini-compass. Defaults to `true`. */
    includeMiniCompass?: boolean;
    /**
     * Whether the mini-compass should function as a toggle button for map orientation. Ignored if `includeMiniCompass`
     * is `false`. Defaults to `false`.
     */
    includeOrientationToggle?: boolean;
    /** The indicator group in which to render the range/target control indicator. Defaults to `'top-right'`. */
    rangeTargetControlGroup?: 'top-right' | 'bottom-left' | 'bottom-right';
    /** Whether to include a detail indicator. Defaults to `true`. */
    includeDetailIndicator?: boolean;
    /** Whether to show the detail indicator title. Defaults to `true`. Ignored if `includeDetailIndicator` is `false`. */
    showDetailIndicatorTitle?: boolean;
    /** Whether to include a traffic off-scale status indicator. Defaults to `true`. */
    includeTrafficOffScaleIndicator?: boolean;
    /** Whether to include a traffic failed mode indicator. Defaults to `true`. */
    includeTrafficFailedIndicator?: boolean;
    /** Whether to include a terrain scale indicator. Defaults to `true`. */
    includeTerrainScale?: boolean;
    /** Whether to include a relative terrain mode status indicator. Defaults to `true`. */
    includeRelativeTerrainStatusIndicator?: boolean;
    /** Whether to include a traffic status indicator. Defaults to `true`. */
    includeTrafficStatusIndicator?: boolean;
    /**
     * Whether to show the traffic altitude restriction mode on the traffic status indicator. Defaults to `true`. Ignored
     * if `includeTrafficStatusIndicator` is `false`.
     */
    showTrafficAltRestriction?: boolean;
    /**
     * A user setting manager containing map settings. If not defined, map options will not be controlled by user
     * settings.
     */
    settingManager?: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /**
     * A user setting manager containing settings controlling the operation of the traffic system. If not defined,
     * certain traffic display options will not be controlled by user settings.
     */
    trafficSettingManager?: UserSettingManager<Partial<TrafficUserSettingTypes>>;
    /** A display units user setting manager. If not defined, map display units will not be controlled by user settings. */
    unitsSettingManager?: UnitsUserSettingManager;
    /** Whether the map's range should be controlled by user setting by default. Defaults to `true`. */
    useRangeUserSettingByDefault?: boolean;
    /** Whether to bind map orientation to user settings. Defaults to `true`. Ignored if `settingManager` is not defined. */
    useOrientationUserSettings?: boolean;
    /** Whether to bind terrain colors to user settings. Defaults to `true`. Ignored if `settingManager` is not defined. */
    useTerrainUserSettings?: boolean;
    /**
     * Whether to allow relative terrain mode. Defaults to `true`. Ignored if `useTerrainUserSettings` is `false` or
     * `settingManager` is not defined.
     */
    allowRelativeTerrainMode?: boolean;
    /**
     * The amount of time, in milliseconds, over which to blend the on-ground and relative terrain mode colors when
     * transitioning between the two. Defaults to 10000 milliseconds.
     */
    groundRelativeTerrainBlendDuration?: number;
    /**
     * The minimum range index, inclusive, at which NEXRAD is visible.
     */
    nexradMinRangeIndex?: number;
    /**
     * Whether to bind the display of NEXRAD to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useNexradUserSettings?: boolean;
    /**
     * Whether to bind the display of the compass arc to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useCompassArcUserSettings?: boolean;
    /**
     * Whether to bind the global declutter function to user settings. Defaults to `true`. Ignored if `settingManager` is
     * not defined.
     */
    useDeclutterUserSetting?: boolean;
    /**
     * Whether to bind waypoint visibility and label text to user settings. Ignored if `settingManager` is not
     * defined. Defaults to `true`.
     */
    useWaypointUserSettings?: boolean;
    /**
     * Whether to bind airspace visibility to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useAirspaceVisUserSettings?: boolean;
    /**
     * Whether to bind track vector options to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useTrackVectorUserSettings?: boolean;
    /**
     * Whether to bind altitude intercept arc options to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useAltitudeArcUserSettings?: boolean;
};
/**
 * Builds G3X Touch navigation maps.
 */
declare class G3XNavMapBuilder {
    /**
     * Configures a map builder to generate a G3X Touch navigation map.
     *
     * The controller `[GarminMapKeys.Range]: MapRangeController` is added to the map context and can be used to control
     * the range of the map.
     *
     * If flight plan focus is supported, the module `[GarminMapKeys.FlightPlanFocus]: MapFlightPlanFocusModule` is added
     * to the map model and can be used to control the focus.
     *
     * If drag-to-pan is supported, then the controller `[G3XMapKeys.DragPan]: MapDragPanController` is added to the
     * map context and can be used to control drag-to-pan functionality.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static build<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XNavMapOptions): MapBuilder;
}

/**
 * Configuration options for traffic intruder icons for G3X Touch nearest maps.
 */
type G3XNearestMapTrafficIconOptions = Pick<TrafficIconOptions, 'iconSize' | 'fontSize'>;
/**
 * Options for creating a G3X Touch nearest map.
 */
type G3XNearestMapOptions = {
    /** The format of the map's parent GDU. */
    gduFormat: GduFormat;
    /** The ID to assign to the map's bound Bing Map instance. */
    bingId: string;
    /** The amount of time, in milliseconds, to delay binding the map's Bing Map instance. Defaults to 0. */
    bingDelay?: number;
    /** The frequency, in hertz, with which player airplane and autopilot properties are updated from event bus data. */
    dataUpdateFreq: number | Subscribable<number>;
    /** The index of the GDU from which the map sources data. */
    gduIndex: number;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /**
     * Styling options for the waypoint highlight line. Defaults to the options returned by
     * `G3XMapUtils.waypointHighlightLineOptions()` for the appropriate GDU format.
     */
    highlightLineOptions?: Readonly<WaypointHighlightLineOptions>;
    /**
     * The margins around the projected map boundaries to respect when automatically selecting a range to place a
     * highlighted waypoint in view, as `[left, top, right, bottom]` in pixels. Positive values move the margin inwards
     * toward the center of the projection. Defaults to `[0, 0, 0, 0]`.
     */
    highlightMargins?: ReadonlyFloat64Array;
    /** The scaling factor of waypoint icons and labels. Defaults to `1`. */
    waypointStyleScale?: number;
    /** The projected scale of the map's nominal range, in pixels. */
    projectedRange: number | Subscribable<number>;
    /**
     * The nominal projected target offset of the map, as `[x, y]`, where each component is expressed relative to the
     * width or height of the map's projected window, *excluding* the dead zone. Defaults to `[0, 0]`.
     */
    targetOffset?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The map range array to use for nautical units mode. Defaults to a standard range array. */
    nauticalRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** The map range array to use for metric units mode. Defaults to a standard range array. */
    metricRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** Whether to include support for drag-to-pan. Defaults to `true`. */
    includeDragPan?: boolean;
    /** The text of the banner that is displayed when GPS position is not available. Defaults to `'NO GPS POSITION'`. */
    noGpsBannerText?: string;
    /** Whether to display airport runway outlines. Defaults to `true`. */
    includeRunwayOutlines?: boolean;
    /** Whether to display airspaces. Defaults to `true`. */
    includeAirspaces?: boolean;
    /** The URI of the player airplane icon's image asset */
    airplaneIconSrc: string | Subscribable<string>;
    /** The orientation of the player airplane icon. Defaults to `MapOwnAirplaneIconOrientation.HeadingUp`. */
    airplaneIconOrientation?: MapOwnAirplaneIconOrientation | Subscribable<MapOwnAirplaneIconOrientation>;
    /** The flight planner containing the active flight plan. Required to display the active flight plan. */
    flightPlanner?: FlightPlanner | Subscribable<FlightPlanner>;
    /** The index of the LNAV instance associated with the active flight plan. Required to display the active flight plan. */
    lnavIndex?: number | Subscribable<number>;
    /** The index of the VNAV instance associated with the active flight plan. Required to display the active flight plan. */
    vnavIndex?: number | Subscribable<number>;
    /** The traffic system from which to retrieve traffic intruder data. Required to display traffic. */
    trafficSystem?: TrafficSystem;
    /** Configuration options for traffic icons. Required to display traffic. */
    trafficIconOptions?: G3XNearestMapTrafficIconOptions;
    /** Whether to include the track vector display. Defaults to `true`. */
    includeTrackVector?: boolean;
    /** Whether to include the altitude intercept arc display. Defaults to `true`. */
    includeAltitudeArc?: boolean;
    /** Whether to include a mini-compass. Defaults to `false`. */
    includeMiniCompass?: boolean;
    /** The indicator group in which to render the range/target control indicator. Defaults to `'top-right'`. */
    rangeTargetControlGroup?: 'top-right' | 'bottom-left' | 'bottom-right';
    /** Whether to include a detail indicator. Defaults to `true`. */
    includeDetailIndicator?: boolean;
    /** Whether to show the detail indicator title. Defaults to `true`. Ignored if `includeDetailIndicator` is `false`. */
    showDetailIndicatorTitle?: boolean;
    /** Whether to include a traffic off-scale status indicator. Defaults to `true`. */
    includeTrafficOffScaleIndicator?: boolean;
    /** Whether to include a traffic failed mode indicator. Defaults to `true`. */
    includeTrafficFailedIndicator?: boolean;
    /** Whether to include a terrain scale indicator. Defaults to `true`. */
    includeTerrainScale?: boolean;
    /** Whether to include a relative terrain mode status indicator. Defaults to `true`. */
    includeRelativeTerrainStatusIndicator?: boolean;
    /** Whether to include a traffic status indicator. Defaults to `true`. */
    includeTrafficStatusIndicator?: boolean;
    /**
     * Whether to show the traffic altitude restriction mode on the traffic status indicator. Defaults to `true`. Ignored
     * if `includeTrafficStatusIndicator` is `false`.
     */
    showTrafficAltRestriction?: boolean;
    /**
     * A user setting manager containing map settings. If not defined, map options will not be controlled by user
     * settings.
     */
    settingManager?: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /**
     * A user setting manager containing settings controlling the operation of the traffic system. If not defined,
     * certain traffic display options will not be controlled by user settings.
     */
    trafficSettingManager?: UserSettingManager<Partial<TrafficUserSettingTypes>>;
    /** A display units user setting manager. If not defined, map display units will not be controlled by user settings. */
    unitsSettingManager?: UnitsUserSettingManager;
    /** Whether to bind terrain colors to user settings. Defaults to `true`. Ignored if `settingManager` is not defined. */
    useTerrainUserSettings?: boolean;
    /**
     * Whether to allow relative terrain mode. Defaults to `true`. Ignored if `useTerrainUserSettings` is `false` or
     * `settingManager` is not defined.
     */
    allowRelativeTerrainMode?: boolean;
    /**
     * The amount of time, in milliseconds, over which to blend the on-ground and relative terrain mode colors when
     * transitioning between the two. Defaults to 10000 milliseconds.
     */
    groundRelativeTerrainBlendDuration?: number;
    /**
     * The minimum range index, inclusive, at which NEXRAD is visible.
     */
    nexradMinRangeIndex?: number;
    /**
     * Whether to bind the display of NEXRAD to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useNexradUserSettings?: boolean;
    /**
     * Whether to bind the global declutter function to user settings. Defaults to `true`. Ignored if `settingManager` is
     * not defined.
     */
    useDeclutterUserSetting?: boolean;
    /**
     * Whether to bind waypoint visibility and label text to user settings. Ignored if `settingManager` is not
     * defined. Defaults to `true`.
     */
    useWaypointUserSettings?: boolean;
    /**
     * Whether to bind airspace visibility to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useAirspaceVisUserSettings?: boolean;
    /**
     * Whether to bind track vector options to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useTrackVectorUserSettings?: boolean;
    /**
     * Whether to bind altitude intercept arc options to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useAltitudeArcUserSettings?: boolean;
};
/**
 * Builds G3X Touch nearest maps.
 */
declare class G3XNearestMapBuilder {
    /**
     * Configures a map builder to generate a G3X Touch nearest map.
     *
     * The controller `[GarminMapKeys.Range]: MapRangeController` is added to the map context and can be used to control
     * the range of the map.
     *
     * If drag-to-pan is supported, then the controller `[G3XMapKeys.DragPan]: MapDragPanController` is added to the
     * map context and can be used to control drag-to-pan functionality.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static build<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XNearestMapOptions): MapBuilder;
}

/**
 * Options for creating a G3X Touch procedure preview map.
 */
type G3XProcPreviewMapOptions = {
    /** The format of the map's parent GDU. */
    gduFormat: GduFormat;
    /** The ID to assign to the map's bound Bing Map instance. */
    bingId: string;
    /** The amount of time, in milliseconds, to delay binding the map's Bing Map instance. Defaults to 0. */
    bingDelay?: number;
    /** The frequency, in hertz, with which player airplane and autopilot properties are updated from event bus data. */
    dataUpdateFreq: number | Subscribable<number>;
    /** The index of the GDU from which the map sources data. */
    gduIndex: number;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** The projected scale of the map's nominal range, in pixels. */
    projectedRange: number | Subscribable<number>;
    /**
     * The nominal projected target offset of the map, as `[x, y]`, where each component is expressed relative to the
     * width or height of the map's projected window, *excluding* the dead zone. Defaults to `[0, 0]`.
     */
    targetOffset?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The map range array to use for nautical units mode. Defaults to a standard range array. */
    nauticalRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** The map range array to use for metric units mode. Defaults to a standard range array. */
    metricRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** The text of the banner that is displayed when GPS position is not available. Defaults to `'NO GPS POSITION'`. */
    noGpsBannerText?: string;
    /** Whether to display airport runway outlines. Defaults to `true`. */
    includeRunwayOutlines?: boolean;
    /** Whether to display airspaces. Defaults to `true`. */
    includeAirspaces?: boolean;
    /** The URI of the player airplane icon's image asset */
    airplaneIconSrc: string | Subscribable<string>;
    /** The orientation of the player airplane icon. Defaults to `MapOwnAirplaneIconOrientation.HeadingUp`. */
    airplaneIconOrientation?: MapOwnAirplaneIconOrientation | Subscribable<MapOwnAirplaneIconOrientation>;
    /**
     * A subscribable which provides the nominal focus margins, as `[left, top, right, bottom]` in pixels. The nominal
     * margins define the offset of the boundaries of the focus region relative to the map's projected window,
     * *excluding* the dead zone. Positive values represent offsets toward the center of the window. When the flight plan
     * is focused, the focused elements of the plan are guaranteed to be contained within the focus region. Defaults to
     * `[0, 0, 0, 0]`.
     */
    nominalFocusMargins?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /**
     * The default map range index to apply when the procedure focus consists of only a single point in space. Defaults
     * to `17` (25 NM/50 KM with standard range arrays).
     */
    defaultFocusRangeIndex?: number;
    /** Whether to include the track vector display. Defaults to `true`. */
    includeTrackVector?: boolean;
    /** Whether to include the altitude intercept arc display. Defaults to `true`. */
    includeAltitudeArc?: boolean;
    /** Whether to include a detail indicator. Defaults to `true`. */
    includeDetailIndicator?: boolean;
    /** Whether to show the detail indicator title. Defaults to `true`. Ignored if `includeDetailIndicator` is `false`. */
    showDetailIndicatorTitle?: boolean;
    /**
     * A user setting manager containing map settings. If not defined, map options will not be controlled by user
     * settings.
     */
    settingManager?: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A display units user setting manager. If not defined, map display units will not be controlled by user settings. */
    unitsSettingManager?: UnitsUserSettingManager;
    /**
     * Whether to bind the display of the compass arc to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useCompassArcUserSettings?: boolean;
    /**
     * Whether to bind the global declutter function to user settings. Defaults to `true`. Ignored if `settingManager` is
     * not defined.
     */
    useDeclutterUserSetting?: boolean;
    /**
     * Whether to bind waypoint visibility and label text to user settings. Ignored if `settingManager` is not
     * defined. Defaults to `true`.
     */
    useWaypointUserSettings?: boolean;
    /**
     * Whether to bind airspace visibility to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useAirspaceVisUserSettings?: boolean;
    /**
     * Whether to bind track vector options to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useTrackVectorUserSettings?: boolean;
    /**
     * Whether to bind altitude intercept arc options to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useAltitudeArcUserSettings?: boolean;
};
/**
 * Builds G3X Touch procedure preview maps.
 */
declare class G3XProcPreviewMapBuilder {
    /**
     * Configures a map builder to generate a G3X Touch procedure preview map.
     *
     * The controller `[GarminMapKeys.Range]: MapRangeController` is added to the map context and can be used to control
     * the range of the map.
     *
     * If drag-to-pan is supported, then the controller `[G3XMapKeys.DragPan]: MapDragPanController` is added to the
     * map context and can be used to control drag-to-pan functionality.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static build<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XProcPreviewMapOptions): MapBuilder;
}

/**
 * Configuration options for traffic intruder icons for G3X Touch traffic maps.
 */
type G3XTrafficMapIconOptions = Pick<TrafficIconOptions, 'iconSize' | 'fontSize'>;
/**
 * Options for creating a base G3X Touch traffic map.
 */
type G3XTrafficMapBaseOptions = Pick<TrafficMapOptions, 'trafficSystem' | 'dataUpdateFreq' | 'targetOffset' | 'rangeEndpoints' | 'offScaleStatus' | 'rangeRingOptions' | 'airplaneIconSrc' | 'flightPlanner' | 'includeStandbyBanner' | 'includeFailedBanner' | 'trafficSettingManager' | 'unitsSettingManager'> & {
    /** The format of the map's parent GDU. */
    gduFormat: GduFormat;
    /** The index of the GDU from which the map sources data. */
    gduIndex: number;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** The source of traffic data. */
    trafficSource: G3XTrafficSystemSource;
    /** Configuration options for traffic icons. */
    trafficIconOptions: G3XTrafficMapIconOptions;
    /** Whether to include range rings. Defaults to `true`. */
    includeRangeRings?: boolean;
    /** The index of the LNAV instance associated with the active flight plan. Required to display the active flight plan. */
    lnavIndex?: number | Subscribable<number>;
    /** The index of the VNAV instance associated with the active flight plan. Required to display the active flight plan. */
    vnavIndex?: number | Subscribable<number>;
};
/**
 * Options for creating a G3X Touch traffic map.
 */
type G3XTrafficMapOptions = G3XTrafficMapBaseOptions;
/**
 * Options for creating a G3X Touch traffic inset map.
 */
type G3XTrafficInsetMapOptions = G3XTrafficMapBaseOptions & {
    /** The indicator group in which to render the range control indicator. */
    rangeControlGroup: 'bottom-left' | 'bottom-right';
};
/**
 * Builds G3X Touch traffic maps.
 */
declare class G3XTrafficMapBuilder {
    private static readonly RANGE_FORMATTER;
    /**
     * Configures a map builder to generate a base G3X Touch traffic map. The map consists of an optional active flight
     * plan layer, an optional traffic range ring layer, a traffic intruder layer, and an airplane icon layer. The map is
     * centered on the player airplane and is locked in Heading Up orientation. No indicators are added to the map except
     * for center banner indicators.
     *
     * The controller `[GarminMapKeys.TrafficRange]: TrafficMapRangeController` is added to the map context and can be
     * used to control the range of the traffic map.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    private static buildBase;
    /**
     * Configures a map builder to generate a G3X Touch traffic map. The map consists of an optional active flight
     * plan layer, an optional traffic range ring layer, a traffic intruder layer, and an airplane icon layer. The map is
     * centered on the player airplane and is locked in Heading Up orientation.
     *
     * The controller `[GarminMapKeys.TrafficRange]: TrafficMapRangeController` is added to the map context and can be
     * used to control the range of the traffic map.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static build<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XTrafficMapOptions): MapBuilder;
    /**
     * Configures a map builder to generate a G3X Touch traffic inset map. The map consists of an optional active flight
     * plan layer, an optional traffic range ring layer, a traffic intruder layer, and an airplane icon layer. The map is
     * centered on the player airplane and is locked in Heading Up orientation.
     *
     * The controller `[GarminMapKeys.TrafficRange]: TrafficMapRangeController` is added to the map context and can be
     * used to control the range of the traffic map.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static buildInset<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XTrafficInsetMapOptions): MapBuilder;
}

/**
 * Configuration options for traffic intruder icons for G3X Touch waypoint maps.
 */
type G3XWaypointMapTrafficIconOptions = Pick<TrafficIconOptions, 'iconSize' | 'fontSize'>;
/**
 * Options for creating a G3X Touch waypoint map.
 */
type G3XWaypointMapOptions = {
    /** The format of the map's parent GDU. */
    gduFormat: GduFormat;
    /** The ID to assign to the map's bound Bing Map instance. */
    bingId: string;
    /** The amount of time, in milliseconds, to delay binding the map's Bing Map instance. Defaults to 0. */
    bingDelay?: number;
    /** The frequency, in hertz, with which player airplane and autopilot properties are updated from event bus data. */
    dataUpdateFreq: number | Subscribable<number>;
    /** The index of the GDU from which the map sources data. */
    gduIndex: number;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /**
     * Whether the map should automatically adjust its range when the selected waypoint is an airport to give an
     * appropriate view of the selected runway, or all runways if there is no selected runway. Defaults to `false`.
     */
    supportAirportAutoRange?: boolean;
    /**
     * The default map range index to apply when a range cannot be automatically selected for an airport. Ignored if
     * `supportAirportAutoRange` is `false`. If not defined, the map range will not be reset when targeting an airport
     * and a range cannot be automatically selected.
     */
    defaultAirportRangeIndex?: number | Subscribable<number>;
    /**
     * The nominal margins (relative to the map's dead zone boundaries), to respect when calculating the map range for
     * airports, as `[left, top, right, bottom]` in pixels. Ignored if `supportAirportAutoRange` is `false`. Defaults to
     * `[0, 0, 0, 0]`.
     */
    airportAutoRangeMargins?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The projected scale of the map's nominal range, in pixels. */
    projectedRange: number | Subscribable<number>;
    /**
     * The nominal projected target offset of the map, as `[x, y]`, where each component is expressed relative to the
     * width or height of the map's projected window, *excluding* the dead zone. Defaults to `[0, 0]`.
     */
    targetOffset?: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The map range array to use for nautical units mode. Defaults to a standard range array. */
    nauticalRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** The map range array to use for metric units mode. Defaults to a standard range array. */
    metricRangeArray?: readonly NumberUnitInterface<UnitFamily.Distance>[];
    /** Whether to include support for drag-to-pan. Defaults to `true`. */
    includeDragPan?: boolean;
    /** The text of the banner that is displayed when GPS position is not available. Defaults to `'NO GPS POSITION'`. */
    noGpsBannerText?: string;
    /** Whether to display airport runway outlines. Defaults to `true`. */
    includeRunwayOutlines?: boolean;
    /** Whether to display airspaces. Defaults to `true`. */
    includeAirspaces?: boolean;
    /** The URI of the player airplane icon's image asset */
    airplaneIconSrc: string | Subscribable<string>;
    /** The orientation of the player airplane icon. Defaults to `MapOwnAirplaneIconOrientation.HeadingUp`. */
    airplaneIconOrientation?: MapOwnAirplaneIconOrientation | Subscribable<MapOwnAirplaneIconOrientation>;
    /** The flight planner containing the active flight plan. Required to display the active flight plan. */
    flightPlanner?: FlightPlanner | Subscribable<FlightPlanner>;
    /** The index of the LNAV instance associated with the active flight plan. Required to display the active flight plan. */
    lnavIndex?: number | Subscribable<number>;
    /** The index of the VNAV instance associated with the active flight plan. Required to display the active flight plan. */
    vnavIndex?: number | Subscribable<number>;
    /** Whether to include the track vector display. Defaults to `true`. */
    includeTrackVector?: boolean;
    /** Whether to include the altitude intercept arc display. Defaults to `true`. */
    includeAltitudeArc?: boolean;
    /** The indicator group in which to render the range/target control indicator. Defaults to `'top-right'`. */
    rangeTargetControlGroup?: 'top-right' | 'bottom-left' | 'bottom-right';
    /** Whether to include a detail indicator. Defaults to `true`. */
    includeDetailIndicator?: boolean;
    /** Whether to show the detail indicator title. Defaults to `true`. Ignored if `includeDetailIndicator` is `false`. */
    showDetailIndicatorTitle?: boolean;
    /**
     * A user setting manager containing map settings. If not defined, map options will not be controlled by user
     * settings.
     */
    settingManager?: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A display units user setting manager. If not defined, map display units will not be controlled by user settings. */
    unitsSettingManager?: UnitsUserSettingManager;
    /**
     * The minimum range index, inclusive, at which NEXRAD is visible.
     */
    nexradMinRangeIndex?: number;
    /**
     * Whether to bind the display of NEXRAD to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useNexradUserSettings?: boolean;
    /**
     * Whether to bind the display of the compass arc to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useCompassArcUserSettings?: boolean;
    /**
     * Whether to bind the global declutter function to user settings. Defaults to `true`. Ignored if `settingManager` is
     * not defined.
     */
    useDeclutterUserSetting?: boolean;
    /**
     * Whether to bind waypoint visibility and label text to user settings. Ignored if `settingManager` is not
     * defined. Defaults to `true`.
     */
    useWaypointUserSettings?: boolean;
    /**
     * Whether to bind airspace visibility to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useAirspaceVisUserSettings?: boolean;
    /**
     * Whether to bind track vector options to user settings. Defaults to `true`. Ignored if `settingManager` is not
     * defined.
     */
    useTrackVectorUserSettings?: boolean;
    /**
     * Whether to bind altitude intercept arc options to user settings. Defaults to `true`. Ignored if `settingManager`
     * is not defined.
     */
    useAltitudeArcUserSettings?: boolean;
};
/**
 * Builds G3X Touch waypoint maps.
 */
declare class G3XWaypointMapBuilder {
    /**
     * Configures a map builder to generate a G3X Touch waypoint map.
     *
     * The controller `[GarminMapKeys.Range]: MapRangeController` is added to the map context and can be used to control
     * the range of the map.
     *
     * If drag-to-pan is supported, then the controller `[G3XMapKeys.DragPan]: MapDragPanController` is added to the
     * map context and can be used to control drag-to-pan functionality.
     *
     * The map builder will **not** be configured to apply a custom projected size, dead zone, or to automatically update
     * the map.
     * @param mapBuilder The map builder to configure.
     * @param options Options for configuring the map.
     * @returns The builder, after it has been configured.
     */
    static build<MapBuilder extends MapSystemBuilder>(mapBuilder: MapBuilder, options: G3XWaypointMapOptions): MapBuilder;
}

/**
 * Component props for G3XMapDetailIndicator.
 */
interface G3XMapDetailIndicatorProps extends ComponentProps {
    /** The map's current declutter mode. */
    declutterMode: Subscribable<MapDeclutterMode>;
}
/**
 * Displays map detail level.
 */
declare class G3XMapDetailIndicator extends DisplayComponent<G3XMapDetailIndicatorProps> {
    private readonly rootDisplay;
    private readonly detailLevelText;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XMapTerrainScaleIndicator.
 */
interface G3XMapTerrainScaleIndicatorProps extends ComponentProps {
    /** The current map terrain mode. */
    terrainMode: Subscribable<MapTerrainMode>;
}
/**
 * Displays a terrain color scale for relative and ground terrain modes.
 */
declare class G3XMapTerrainScaleIndicator extends DisplayComponent<G3XMapTerrainScaleIndicatorProps> {
    private static readonly FORMATTER;
    private readonly rootCssClass;
    private readonly rootDisplay;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XMapTrafficStatusIndicator.
 */
interface G3XMapTrafficStatusIndicatorProps extends ComponentProps {
    /** Whether to show the indicator. */
    show: Subscribable<boolean>;
    /** The current traffic system operating mode. */
    operatingMode: Subscribable<TcasOperatingMode>;
}
/**
 * Displays a traffic operating status indication.
 */
declare class G3XMapTrafficStatusIndicator extends DisplayComponent<G3XMapTrafficStatusIndicatorProps> {
    private static readonly FAILED_MODES;
    private readonly rootDisplay;
    private readonly isFailed;
    private readonly failedDisplay;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for G3XTrafficMapOperatingModeIndicator.
 */
interface G3XTrafficMapOperatingModeIndicatorProps extends ComponentProps {
    /** The current traffic system operating mode. */
    operatingMode: Subscribable<TcasOperatingMode>;
    /** The current traffic data source. */
    source: Subscribable<G3XTrafficSystemSource>;
    /** Whether ADS-B is supported by the current traffic data source. */
    supportAdsb: Subscribable<boolean>;
}
/**
 * Displays a traffic system operating mode/traffic source indication.
 */
declare class G3XTrafficMapOperatingModeIndicator extends DisplayComponent<G3XTrafficMapOperatingModeIndicatorProps> {
    private readonly sourceDisplay;
    private readonly sourceText;
    private readonly modeText;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Modules required for MapRangeTargetControlIndicator.
 */
interface MapRangeTargetControlIndicatorModules {
    /** Map drag-to-pan module. */
    [G3XMapKeys.DragPan]?: MapDragPanModule;
}
/**
 * Controllers required for MapRangeTargetControlIndicator.
 */
interface MapRangeTargetControlIndicatorControllers {
    /** Map range controller. */
    [GarminMapKeys.Range]: MapRangeController;
    /** Map drag-to-pan controller. */
    [G3XMapKeys.DragPan]?: MapDragPanController;
}
/**
 * Component props for MapRangeTargetControlIndicator.
 */
interface MapRangeTargetControlIndicatorProps extends ComponentProps {
    /** The map's context. */
    context: MapSystemContext<MapRangeTargetControlIndicatorModules, any, MapRangeTargetControlIndicatorControllers>;
}
/**
 * Displays a set of touchscreen buttons which allow the user to control map range and optionally reset the map target
 * to follow the airplane.
 */
declare class MapRangeTargetControlIndicator extends DisplayComponent<MapRangeTargetControlIndicatorProps> {
    private thisNode?;
    private readonly isTargetAirplaneButtonVisible;
    private dragPanActivePipe?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when one of this indicator's range control buttons is pressed.
     * @param direction The direction in which the pressed button changes the map range.
     */
    private onRangeButtonPressed;
    /**
     * Responds to when this indicator's target airplane button is pressed.
     */
    private onTargetAirplaneButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for MapScaleBarIndicator.
 */
interface MapScaleBarIndicatorProps extends ComponentProps {
    /** The map's nominal range. */
    range: Subscribable<NumberUnitInterface<UnitFamily.Distance>>;
    /** The unit type in which to display the range. */
    displayUnit: Subscribable<Unit<UnitFamily.Distance> | null>;
    /** The projected scale of the map's nominal range, in pixels. */
    projectedRange: number | Subscribable<number>;
}
/**
 * Displays a map scale bar.
 */
declare class MapScaleBarIndicator extends DisplayComponent<MapScaleBarIndicatorProps> {
    private readonly valueRef;
    private readonly barWidth;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for TrafficMapCombinedIndicator.
 */
interface TrafficMapCombinedIndicatorProps extends ComponentProps {
    /** The current traffic system operating mode. */
    operatingMode: Subscribable<TcasOperatingMode>;
    /** The current traffic data source. */
    source: Subscribable<G3XTrafficSystemSource>;
    /** Whether ADS-B is supported by the current traffic data source. */
    supportAdsb: Subscribable<boolean>;
    /** The current ADS-B operating mode. */
    adsbOperatingMode: Subscribable<AdsbOperatingMode>;
    /** The current traffic altitude restriction mode. */
    altitudeRestrictionMode: Subscribable<MapTrafficAltitudeRestrictionMode>;
}
/**
 * Displays traffic system operating mode/traffic source, ADS-B operating mode, and altitude restriction mode
 * indications.
 */
declare class TrafficMapCombinedIndicator extends DisplayComponent<TrafficMapCombinedIndicatorProps> {
    private readonly bottomDisplay;
    private readonly adsbDisplay;
    private readonly mainText;
    private readonly adsbText;
    private readonly altText;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Controllers required for TrafficMapRangeControlIndicator.
 */
interface TrafficMapRangeControlIndicatorControllers {
    /** Traffic map range controller. */
    [GarminMapKeys.TrafficRange]: TrafficMapRangeController;
}
/**
 * Component props for TrafficMapRangeControlIndicator.
 */
interface TrafficMapRangeControlIndicatorProps extends ComponentProps {
    /** The map's context. */
    context: MapSystemContext<any, any, TrafficMapRangeControlIndicatorControllers>;
}
/**
 * Displays a set of touchscreen buttons which allow the user to control map range and optionally reset the map target
 * to follow the airplane.
 */
declare class TrafficMapRangeControlIndicator extends DisplayComponent<TrafficMapRangeControlIndicatorProps> {
    private thisNode?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when one of this indicator's range control buttons is pressed.
     * @param direction The direction in which the pressed button changes the map range.
     */
    private onRangeButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Utility class containing functions defining the rendering behavior of airspaces for G3X Touch maps.
 */
declare class G3XMapAirspaceRendering {
    private static readonly RENDERERS;
    /**
     * Determines the rendering order of airspaces for G3X Touch maps.
     * @returns The relative rendering order of two airspaces for G3X Touch maps.
     */
    static renderOrder(): number;
    /**
     * Selects airspace renderers for G3X Touch maps.
     * @param gduFormat The format of the map's parent GDU.
     * @param airspace The airspace to render.
     * @returns The renderer to use to render the specified airspace.
     */
    static selectRenderer(gduFormat: GduFormat, airspace: LodBoundary): MapAirspaceRenderer;
}

/**
 * G3X Touch user settings controlling the display of map terrain and weather overlays.
 */
type G3XMapTerrainWxUserSettings = Pick<G3XMapUserSettingTypes, 'mapTerrainMode' | 'mapWeatherShow'>;
/**
 * Manages settings controlling the display of map relative terrain and weather overlays such that the two are never
 * active at the same time.
 */
declare class G3XMapTerrainWxSettingCompatManager {
    private readonly terrainModeSetting?;
    private readonly weatherShowSetting?;
    private isInit;
    private isAlive;
    private terrainModeSub?;
    private weatherShowSub?;
    /**
     * Constructor.
     * @param settingManager A setting manager containing the user settings controlling the display of relative terrain
     * and weather overlays for this manager to manage.
     */
    constructor(settingManager: UserSettingManager<Partial<G3XMapTerrainWxUserSettings>>);
    /**
     * Initializes this manager. Once initialized, this manager will automatically control its managed settings such that
     * the relative terrain and weather overlays are never active at the same time.
     * @throws Error if this manager has been destroyed.
     */
    init(): void;
    /**
     * Destroys this manager.
     */
    destroy(): void;
}

/**
 * A utility class for working with G3X Touch maps.
 */
declare class G3XMapUtils {
    private static readonly MAP_RANGES;
    private static readonly TRAFFIC_MAP_RANGES;
    /** The default minimum nominal range index at which the NEXRAD overlay can be displayed. */
    static readonly DEFAULT_NEXRAD_MIN_RANGE_INDEX = 8;
    /**
     * Gets the standard map range array.
     * @param units The distance units mode for which to get the array.
     * @returns The standard map range array.
     */
    static mapRanges(units: UnitsDistanceSettingMode): readonly NumberUnitReadOnly<UnitFamily.Distance>[];
    /**
     * Gets the standard traffic map range array.
     * @returns The standard traffic map range array.
     */
    static trafficMapRanges(): readonly NumberUnitReadOnly<UnitFamily.Distance>[];
    private static readonly NO_TERRAIN_EARTH_COLORS;
    private static readonly ABSOLUTE_TERRAIN_EARTH_COLORS;
    /**
     * Creates a terrain colors definition for absolute terrain colors.
     * @returns A terrain colors definition for absolute terrain colors.
     */
    private static createAbsoluteTerrainEarthColors;
    private static readonly RELATIVE_TERRAIN_EARTH_COLORS;
    private static readonly GROUND_TERRAIN_EARTH_COLORS;
    /**
     * Gets the earth colors definition for no terrain colors.
     * @returns The earth colors definition for no terrain colors.
     */
    static noTerrainEarthColors(): Readonly<MapTerrainColorsDefinition>;
    /**
     * Gets the earth colors definition for absolute terrain colors.
     * @returns The earth colors definition for absolute terrain colors.
     */
    static absoluteTerrainEarthColors(): Readonly<MapTerrainColorsDefinition>;
    /**
     * Gets the earth colors definition for relative terrain colors.
     * @returns The earth colors definition for relative terrain colors.
     */
    static relativeTerrainEarthColors(): Readonly<MapTerrainColorsDefinition>;
    /**
     * Gets the earth colors definition for on ground relative terrain colors.
     * @returns The earth colors definition for on ground relative terrain colors.
     */
    static groundTerrainEarthColors(): Readonly<MapTerrainColorsDefinition>;
    /**
     * Gets the size of the own airplane icon, in pixels, for a given GDU format.
     * @param gduFormat The GDU format for which to get the own airplane icon size.
     * @returns The size of the own airplane icon, in pixels, for the specified GDU format.
     */
    static ownAirplaneIconSize(gduFormat: GduFormat): number;
    /**
     * Gets waypoint highlight line options for a given GDU format.
     * @param gduFormat The GDU format for which to get the options.
     * @returns Waypoint highlight line options for the specified GDU format.
     */
    static waypointHighlightLineOptions(gduFormat: GduFormat): WaypointHighlightLineOptions;
}

/**
 * A definition for a function that retrieves map waypoint label styles.
 */
type G3XMapWaypointLabelStyleFuncDef = {
    /** A function which retrieves map waypoint label styles. */
    styles: (waypoint: Waypoint) => MapWaypointLabelStyles;
    /** The subscriptions maintained by the style retrieval function. */
    subscriptions: Subscription[];
};
/**
 * A utility class for generating G3X Touch map waypoint styles.
 */
declare class G3XMapWaypointStyles {
    private static readonly LABEL_FONT_SIZES;
    private static readonly LABEL_FONT_SIZE_MAP_FUNC;
    /**
     * Creates a function which retrieves G3X Touch map icon styles for normal waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base icon render priority. Icon priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map icon styles for normal waypoints.
     */
    static normalIconStyles(gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointIconStyles;
    /**
     * Creates a function which retrieves G3X Touch map label styles for normal waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base label render priority. Label priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @param airportLargeTextSize The text size mode with which to render large airport labels.
     * @param airportMediumTextSize The text size mode with which to render medium airport labels.
     * @param airportSmallTextSize The text size mode with which to render small airport labels.
     * @param vorTextSize The text size mode with which to render VOR labels.
     * @param ndbTextSize The text size mode with which to render NDB labels.
     * @param intTextSize The text size mode with which to render intersection labels.
     * @param userTextSize The text size mode with which to render user waypoint labels.
     * @returns A function which retrieves G3X Touch map label styles for normal waypoints.
     */
    static normalLabelStyles(gduFormat: GduFormat, basePriority: number, airportLargeTextSize: Subscribable<MapLabelTextSizeMode>, airportMediumTextSize: Subscribable<MapLabelTextSizeMode>, airportSmallTextSize: Subscribable<MapLabelTextSizeMode>, vorTextSize: Subscribable<MapLabelTextSizeMode>, ndbTextSize: Subscribable<MapLabelTextSizeMode>, intTextSize: Subscribable<MapLabelTextSizeMode>, userTextSize: Subscribable<MapLabelTextSizeMode>): G3XMapWaypointLabelStyleFuncDef;
    /**
     * Creates initialization options for G3X Touch map style waypoint labels rendered in a normal role.
     * @param offset The label offset, in pixels.
     * @param fontSize The font size of the label, in pixels.
     * @returns Initialization options for G3X Touch map style waypoint labels rendered in a normal role.
     */
    private static createNormalLabelOptions;
    /**
     * Creates initialization options for G3X Touch map style runway labels.
     * @param offset The label offset, in pixels.
     * @param fontSize The font size of the label, in pixels.
     * @returns Initialization options for G3X Touch map style runway labels rendered in a normal
     * role.
     */
    private static createRunwayLabelOptions;
    /**
     * Creates a function which retrieves G3X Touch map icon styles for runway outline waypoints.
     * @param basePriority The base icon render priority. Icon priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map icon styles for normal waypoints.
     */
    static runwayOutlineIconStyles(basePriority: number): (waypoint: MapRunwayOutlineWaypoint) => MapRunwayOutlineIconStyles;
    /**
     * Creates a function which retrieves G3X Touch map icon styles for flight plan waypoints.
     * @param active Whether to retrieve styles for active flight plan waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base icon render priority. Icon priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map icon styles for flight plan waypoints.
     */
    static flightPlanIconStyles(active: boolean, gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointIconStyles;
    /**
     * Creates a function which retrieves G3X Touch map label styles for flight plan waypoints.
     * @param active Whether to retrieve styles for active flight plan waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base label render priority. Label priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map label styles for flight plan waypoints.
     */
    static flightPlanLabelStyles(active: boolean, gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointLabelStyles;
    /**
     * Creates initialization options for G3X Touch map style waypoint labels rendered in an inactive flight plan role.
     * @param offset The label offset, in pixels.
     * @param fontSize The font size of the label, in pixels.
     * @param bgPadding The padding of the label's background, in pixels. Expressed as `[top, right, bottom, left]`.
     * @returns Initialization options for G3X Touch map style waypoint labels rendered in an inactive flight plan role.
     */
    private static createFplInactiveLabelOptions;
    /**
     * Creates initialization options for G3X Touch map style waypoint labels rendered in an active flight plan role.
     * @param offset The label offset, in pixels.
     * @param fontSize The font size of the label, in pixels.
     * @param bgPadding The padding of the label's background, in pixels. Expressed as `[top, right, bottom, left]`.
     * @returns Initialization options for G3X Touch map style waypoint labels rendered in an active flight plan role.
     */
    private static createFplActiveLabelOptions;
    /**
     * Creates a function which retrieves G3X Touch map icon styles for highlighted waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base icon render priority. Icon priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map icon styles for highlighted waypoints.
     */
    static highlightIconStyles(gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointIconHighlightStyles;
    /**
     * Creates a function which retrieves G3X Touch map label styles for highlighted waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base label render priority. Label priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map label styles for highlighted waypoints.
     */
    static highlightLabelStyles(gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointLabelStyles;
    /**
     * Creates initialization options for G3X Touch map style waypoint labels rendered in a highlight
     * role.
     * @param offset The label offset, in pixels.
     * @param fontSize The font size of the label, in pixels.
     * @param bgPadding The padding of the label's background, as `[top, right, bottom, left]` in pixels.
     * @returns Initialization options for G3X Touch map style waypoint labels rendered in a highlight
     * role.
     */
    private static createHighlightLabelOptions;
    /**
     * Creates a function which retrieves G3X Touch map icon styles for VNAV waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base icon render priority. Icon priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map icon styles for VNAV waypoints.
     */
    static vnavIconStyles(gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointIconStyles;
    /**
     * Creates a function which retrieves G3X Touch map label styles for VNAV waypoints.
     * @param gduFormat The format of the map's parent GDU.
     * @param basePriority The base label render priority. Label priorities are guaranteed to fall in the range
     * `[basePriority, basePriority + 1)`.
     * @returns A function which retrieves G3X Touch map label styles for VNAV waypoints.
     */
    static vnavLabelStyles(gduFormat: GduFormat, basePriority: number): (waypoint: Waypoint) => MapWaypointLabelStyles;
}

/**
 * A cache of map waypoint icon images.
 */
declare class MapWaypointIconImageCache {
    private static INSTANCE?;
    /**
     * Gets a map waypoint icon image cache.
     * @returns A map waypoint icon image cache.
     */
    static getCache(): WaypointIconImageCache;
    /**
     * Creates a waypoint icon image cache.
     * @returns A new waypoint icon image cache.
     */
    private static createCache;
}

/**
 * A utility class for working with formatting options for G3X Touch navigation data fields.
 */
declare class G3XNavDataFieldFormatting {
    static readonly ALTITUDE_FORMATTER: (number: number) => string;
    static readonly ANGLE_FORMATTER: (number: number) => string;
    static readonly BEARING_FORMATTER: (number: number) => string;
    static readonly DISTANCE_FORMATTER: (number: number) => string;
    static readonly FUEL_FORMATTER: (number: number) => string;
    static readonly FUEL_ECON_FORMATTER: (number: number) => string;
    static readonly ISA_FORMATTER: (number: number) => string;
    static readonly CLIMB_GRADIENT_FORMATTER: (number: number) => string;
    static readonly SPEED_FORMATTER: (number: number) => string;
    static readonly VERTICAL_SPEED_FORMATTER: (number: number) => string;
    static readonly TEMPERATURE_FORMATTER: (number: number) => string;
    static readonly MACH_FORMATTER: (number: number) => string;
    static readonly G_FORCE_FORMATTER: (number: number) => string;
    static readonly DURATION_OPTIONS: {
        readonly pad: 0;
        readonly format: DurationDisplayFormat.hh_mm_or_mm_ss;
        readonly delim: DurationDisplayDelim.ColonOrCross;
        readonly nanString: "__:__";
    };
    static readonly FORMAT_SETTING_MAP: {
        readonly Local12: TimeDisplayFormat.Local12;
        readonly Local24: TimeDisplayFormat.Local24;
        readonly UTC: TimeDisplayFormat.UTC;
    };
}
/**
 * Renders G3X Touch Above Ground Level navigation data fields.
 */
declare class G3XNavDataFieldAglRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.AboveGroundLevel> {
    /**
     * Creates a new instance of NextGenNavDataFieldAglRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Bearing to Waypoint navigation data fields.
 */
declare class G3XNavDataFieldBrgRenderer extends NavDataFieldBearingRenderer<NavDataFieldType.BearingToWaypoint> {
    /**
     * Creates a new instance of G3XNavDataFieldBrgRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Cabin Altitude data fields.
 */
declare class G3XNavDataFieldCabinAltitudeRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.CabinAltitude> {
    /**
     * Creates a new instance of G3XNavDataFieldCabinAltitudeRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Climb Gradient data fields.
 */
declare class G3XNavDataFieldClgRenderer extends NavDataFieldTextRenderer<NavDataFieldType.ClimbGradient> {
    private static readonly OPTIONS;
    /**
     * Creates a new instance of G3XNavDataFieldClimbGradientRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Climb Gradient Per Nautical Mile data fields.
 */
declare class G3XNavDataFieldClmRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.ClimbGradientPerDistance> {
    /**
     * Creates a new instance of NextGenNavDataFieldClmRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Density Altitude data fields.
 */
declare class G3XNavDataFieldDensityAltitudeRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.DensityAltitude> {
    /**
     * Creates a new instance of NextGenNavDataFieldDensityAltitudeRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Distance to Waypoint navigation data fields.
 */
declare class G3XNavDataFieldDistRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.DistanceToWaypoint> {
    /**
     * Creates a new instance of G3XNavDataFieldDistRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Distance to Destination navigation data fields.
 */
declare class G3XNavDataFieldDistdRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.DistanceToDestination> {
    /**
     * Creates a new instance of G3XNavDataFieldDistdRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Desired Track navigation data fields.
 */
declare class G3XNavDataFieldDtkRenderer extends NavDataFieldBearingRenderer<NavDataFieldType.DesiredTrack> {
    /**
     * Creates a new instance of G3XNavDataFieldDtkRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Fuel Economy navigation data fields.
 */
declare class G3XNavDataFieldEcoRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.FuelEconomy> {
    /**
     * Creates a new instance of G3XNavDataFieldEcoRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Fuel Endurance navigation data fields.
 */
declare class G3XNavDataFieldEdrRenderer extends NavDataFieldDurationRenderer<NavDataFieldType.Endurance> {
    /**
     * Creates a new instance of G3XNavDataFieldEdrRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Estimated Time of Arrival navigation data fields.
 */
declare class G3XNavDataFieldEtaRenderer extends NavDataFieldTimeRenderer<NavDataFieldType.TimeOfWaypointArrival> {
    /**
     * Creates a new instance of G3XNavDataFieldEtaRenderer.
     * @param dateTimeSettingManager A manager for date/time user settings.
     */
    constructor(dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>);
}
/**
 * Renders G3X Touch Estimated Time of Arrival at Destination navigation data fields.
 */
declare class G3XNavDataFieldEtadRenderer extends NavDataFieldTimeRenderer<NavDataFieldType.TimeOfDestinationArrival> {
    /**
     * Creates a new instance of G3XNavDataFieldEtadRenderer.
     * @param dateTimeSettingManager A manager for date/time user settings.
     */
    constructor(dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>);
}
/**
 * Renders G3X Touch Time to Waypoint navigation data fields.
 */
declare class G3XNavDataFieldEteRenderer extends NavDataFieldDurationRenderer<NavDataFieldType.TimeToWaypoint> {
    /**
     * Creates a new instance of G3XNavDataFieldEteRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Time to Destination navigation data fields.
 */
declare class G3XNavDataFieldEtedRenderer extends NavDataFieldDurationRenderer<NavDataFieldType.TimeToDestination> {
    /**
     * Creates a new instance of G3XNavDataFieldEtedRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Flight level data fields.
 */
declare class G3XNavDataFieldFlightLevelRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.FlightLevel> {
    /**
     * Creates a new instance of NextGenNavDataFieldFlightLevelRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Fuel Flow data fields.
 */
declare class G3XNavDataFieldFuelFlowRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.FuelFlow> {
    /**
     * Creates a new instance of NextGenNavDataFieldFuelFlowRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Fuel Over Destination data fields.
 */
declare class G3XNavDataFieldFodRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.FuelOverDestination> {
    /**
     * Creates a new instance of G3XNavDataFieldFodRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch G-Meter fields.
 */
declare class G3XNavDataFieldGMeterRenderer extends NavDataFieldTextRenderer<NavDataFieldType.GMeter> {
    private static readonly OPTIONS;
    /**
     * Creates a new instance of G3XNavDataFieldGMeterRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch GPS Altitude data fields.
 */
declare class G3XNavDataFieldGpsAltitudeRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.GpsAltitude> {
    /**
     * Creates a new instance of NextGenNavDataFieldGPSAltitudeRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Ground Speed navigation data fields.
 */
declare class G3XNavDataFieldGsRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.GroundSpeed> {
    /**
     * Creates a new instance of G3XNavDataFieldGsRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch ISA navigation data fields.
 */
declare class G3XNavDataFieldIsaRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.ISA> {
    /**
     * Creates a new instance of G3XNavDataFieldIsaRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Local Time navigation data fields.
 */
declare class G3XNavDataFieldLclRenderer extends NavDataFieldTimeRenderer<NavDataFieldType.LocalTime> {
    /**
     * Creates a new instance of NextGenNavDataFieldGPSAltitudeRenderer.
     * @param dateTimeSettingManager A manager for date/time user settings.
     */
    constructor(dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>);
}
/**
 * Renders G3X Touch Mach Number data fields.
 */
declare class G3XNavDataFieldMachRenderer extends NavDataFieldTextRenderer<NavDataFieldType.MachNumber> {
    private static readonly OPTIONS;
    /**
     * Creates a new instance of G3XNavDataFieldMachNumberRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Outside temperature data fields.
 */
declare class G3XNavDataFieldOatRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.OutsideTemperature> {
    /**
     * Creates a new instance of G3XNavDataFieldOatRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Ram Air Temperature data fields.
 */
declare class G3XNavDataFieldRatRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.RamAirTemperature> {
    /**
     * Creates a new instance of G3XNavDataFieldRatRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Fuel Remaining data fields.
 */
declare class G3XNavDataFieldRemRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.FuelOnBoard> {
    /**
     * Creates a new instance of G3XNavDataFieldRemRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch True Airspeed navigation data fields.
 */
declare class G3XNavDataFieldTasRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.TrueAirspeed> {
    /**
     * Creates a new instance of G3XNavDataFieldTasRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Ground Track navigation data fields.
 */
declare class G3XNavDataFieldTrkRenderer extends NavDataFieldBearingRenderer<NavDataFieldType.GroundTrack> {
    /**
     * Creates a new instance of G3XNavDataFieldTrkRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch UTC Time navigation data fields.
 */
declare class G3XNavDataFieldUtcRenderer extends NavDataFieldTimeRenderer<NavDataFieldType.UtcTime> {
    /**
     * Creates a new instance of NextGenNavDataFieldUtcRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Vertical Speed Required navigation data fields.
 */
declare class G3XNavDataFieldVsrRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.VerticalSpeedRequired> {
    /**
     * Creates a new instance of G3XNavDataFieldVsrRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}
/**
 * Renders G3X Touch Waypoint data fields.
 */
declare class G3XNavDataFieldWptRenderer extends NavDataFieldTextRenderer<NavDataFieldType.Waypoint> {
    private static readonly OPTIONS;
    /**
     * Creates a new instance of G3XNavDataFieldWptRenderer.
     */
    constructor();
}
/**
 * Renders G3X Touch Cross Track navigation data fields.
 */
declare class G3XNavDataFieldXtkRenderer extends NavDataFieldNumberUnitRenderer<NavDataFieldType.CrossTrack> {
    /**
     * Creates a new instance of G3XNavDataFieldXtkRenderer.
     * @param unitSettingManager A manager for display units user settings.
     */
    constructor(unitSettingManager: UnitsUserSettingManager);
}

/**
 * Component props for {@link UiNearestWaypointList}.
 */
interface UiNearestWaypointListProps<DataType extends NearestWaypointEntry<Waypoint> & DynamicListData = NearestWaypointEntry<Waypoint> & DynamicListData> extends Omit<UiListProps<DataType>, 'sortItems' | 'data' | 'staticChildren'> {
    /** The data to display in the list. */
    data: SubscribableArray<DataType>;
    /** The text to display when the list is empty. */
    noResultsText: string | Subscribable<string>;
}
/**
 * A scrollable UI list of nearest waypoints.
 */
declare class UiNearestWaypointList<DataType extends NearestWaypointEntry<Waypoint> & DynamicListData = NearestWaypointEntry<Waypoint> & DynamicListData> extends DisplayComponent<UiNearestWaypointListProps<DataType>> implements UiInteractionHandler {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly listRef;
    private readonly noResultsHidden;
    /** The total number of items in this list, including hidden items. */
    get itemCount(): Subscribable<number>;
    /** The total number of visible items in this list. */
    get visibleItemCount(): Subscribable<number>;
    /**
     * The window of rendered list items, as `[startIndex, endIndex]`, where `startIndex` is the index of the first
     * rendered item, inclusive, and `endIndex` is the index of the last rendered item, exclusive.
     */
    get renderWindow(): Subscribable<ReadonlyFloat64Array>;
    /** The bezel rotary knob label state requested by this list. */
    get knobLabelState(): SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Gets the sorted index of a data item index. If this list does not support dynamic data or has not been rendered,
     * then this method will return `-1`.
     * @param index A data item index.
     * @returns The index to which the specified data item index is sorted, or `-1` if the data index is out of bounds,
     * this list does not support dynamic data, or this list has not been rendered.
     */
    sortedIndexOfIndex(index: number): number;
    /**
     * Gets the sorted index of a data item. If this list does not support dynamic data or has not been rendered, then
     * this method will return `-1`.
     * @param data A data item.
     * @returns The index to which the specified data item is sorted, or `-1` if the item is not in this list, this list
     * does not support dynamic data, or this list has not been rendered.
     */
    sortedIndexOfData(data: DataType): number;
    /**
     * Gets the sorted index of a data item index after hidden items have been excluded. If this list does not support
     * dynamic data or has not been rendered, then this method will return `-1`.
     * @param index A data item index.
     * @returns The index to which the specified data item index is sorted after hidden items have been excluded, or `-1`
     * if the data index is out of bounds, the data item whose index was given is itself hidden, this list does not
     * support dynamic data, or this list has not been rendered.
     */
    sortedVisibleIndexOfIndex(index: number): number;
    /**
     * Gets the sorted index of a data item after hidden items have been excluded. If this list does not support dynamic
     * data or has not been rendered, then this method will return `-1`.
     * @param data A data item.
     * @returns The index to which the specified data item is sorted after hidden items have been excluded, or `-1` if
     * the item is not in this list, the item is itself hidden, this list does not support dynamic data, or this list has
     * not been rendered.
     */
    sortedVisibleIndexOfData(data: DataType): number;
    /**
     * Gets the data item index of a sorted index. If this list does not support dynamic data or has not been rendered,
     * then this method will return `-1`.
     * @param sortedIndex A sorted index.
     * @returns The index of the data item that is sorted to the specified index, or `-1` if the sorted index is out of
     * bounds, this list does not support dynamic data, or this list has not been rendered.
     */
    indexOfSortedIndex(sortedIndex: number): number;
    /**
     * Gets the data item index of a sorted index after hidden items have been excluded. If this list does not support
     * dynamic data or has not been rendered, then this method will return `-1`.
     * @param sortedVisibleIndex A sorted index after hidden items have been excluded.
     * @returns The index of the data item that is sorted to the specified index after hidden items have been excluded,
     * or `-1` if the sorted index is out of bounds, this list does not support dynamic data, or this list has not been
     * rendered.
     */
    indexOfSortedVisibleIndex(sortedVisibleIndex: number): number;
    /**
     * Scrolls until the item at a specified index is in view.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndex(index: number, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls the minimum possible distance until the item at a specified index is in view with a given margin from the
     * edges of the visible list.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. The target item will still be focused if `focus` is
     * `true` even if the scroll operation is skipped. Defaults to `false`.
     * @param focusDirection The direction from which to focus the item to which to scroll. Ignored if `focus` is
     * `false`. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    scrollToIndexWithMargin(index: number, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean, focusDirection?: UiFocusDirection): void;
    /**
     * Gets the index of this list's focused item after sorting has been applied and hidden items have been excluded.
     * @returns The index of this list's focused item after sorting has been applied and hidden items have been
     * excluded, or `-1` if no item is focused.
     */
    getFocusedIndex(): number;
    /**
     * Focuses an item at a specified index in this list.
     * @param index The index of the item to focus, after sorting has been applied and hidden items have been excluded.
     * If the index is out of bounds, then focus will not be set.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusIndex(index: number, focusDirection?: UiFocusDirection): void;
    /**
     * Scrolls until the specified item is in view. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top/left-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. Negative values will be interpreted as counting backwards from the
     * bottom/right-most visible slot starting with `-1`. Ignored if this list does not support snapping to list items.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItem(item: DataType, position: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Scrolls the minimum possible distance until the specified item is in view with a given margin from the edges of
     * the visible list. If this is a static list, then this method does nothing.
     * @param item The item to which to scroll.
     * @param margin The margin from the edges of the visible list to respect when scrolling to the target item. In other
     * words, the scrolling operation will attempt to place the target item at least as far from the edges of the visible
     * list as the specified margin. If this list supports snapping to items, then the margin should be expressed as an
     * item count. If this list does not support snapping to items, then the margin should be expressed as pixels. The
     * margin will be clamped between zero and the largest possible value such that an item can be placed within the
     * visible list while respecting the margin value on both sides.
     * @param focus Whether to focus the item to which to scroll.
     * @param animate Whether to animate the scroll.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the target item is already in view. The
     * target item will still be focused if {@linkcode focus} is `true` even if the scroll operation is skipped. Defaults
     * to `false`.
     */
    scrollToItemWithMargin(item: DataType, margin: number, focus: boolean, animate: boolean, skipScrollIfItemInView?: boolean): void;
    /**
     * Focuses an item in this list. If this is a static list, then this method does nothing.
     * @param item The item to focus.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusItem(item: DataType, focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the first focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusFirst(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the last focusable item in this list.
     * @param focusDirection The direction from which to focus the item. Defaults to {@link UiFocusDirection.Unspecified}.
     */
    focusLast(focusDirection?: UiFocusDirection): void;
    /**
     * Focuses the most recently focused item in this list. Has no effect if an item is currently focused or if there is
     * no most recently focused item.
     */
    focusRecent(): void;
    /**
     * Removes focus from the currently focused item in this list.
     */
    removeFocus(): void;
    /**
     * Clears this list's memory of the most recently focused item. Has no effect if an item is currently focused.
     */
    clearRecentFocus(): void;
    /**
     * Updates the order of rendered items in this list.
     */
    updateOrder(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Sorts this list's nearest waypoint entries in order of increasing distance from the airplane's current position.
     * @param a The first entry.
     * @param b The second entry.
     * @returns A negative number if the first entry's waypoint is closer to the airplane than the second's waypoint,
     * a positive number if the opposite is true, or zero if both are equidistant to the airplane or one or both
     * distances are unknown.
     */
    private sortListItems;
}

/**
 * Component props for DigitInputSlot.
 */
interface DigitInputSlotProps extends ComponentProps {
    /** Whether the slot supports backfill operations. Defaults to `true`. */
    allowBackfill?: boolean | Subscribable<boolean>;
    /** The number of characters in the slot. */
    characterCount: number;
    /** The minimum un-scaled value of the input, or a subscribable which provides it. */
    minValue: Subscribable<number> | number;
    /** The maximum un-scaled value of the input (exclusive if `wrap` is true), or a subscribable which provides it. */
    maxValue: Subscribable<number> | number;
    /**
     * The amount to increment/decrement the input's un-scaled value when the inner FMS knob is scrolled, or a
     * subscribable which provides it.
     */
    increment: Subscribable<number> | number;
    /** Whether the input should wrap from the max value to the min value, or a subscribable which provides it. */
    wrap: Subscribable<boolean> | boolean;
    /**
     * The scaling factor applied to this input's value, or a subscribable which provides it. The scaling factor
     * determines the relationship between this input's bound data value and the displayed value as follows:
     * `data_value = display_value * scale`. When the scaling factor changes, this input's displayed value is
     * preserved, and the bound data value is changed to reflect the new scaling factor.
     */
    scale: Subscribable<number> | number;
    /** The default numeric values for each of the slot's character positions when the character value is `null`. */
    defaultCharValues: readonly number[] | Subscribable<readonly number[]>;
    /**
     * A function which parses a slot value from individual character values. If not defined, characters will be parsed
     * as standard base-10 integers.
     * @param characters An array of character values. The order of the values is the same as the order of the characters
     * in the slot (from left to right).
     * @returns The slot value parsed from the specified character values.
     */
    parseValue?: (characters: readonly (string | null)[]) => number;
    /**
     * A function which assigns values to individual characters from a slot value. If not defined, values will be
     * digitized according to their standard base-10 string representations, with each character assigned to exactly one
     * base-10 digit ("0" through "9") in right-to-left order (the last character is assigned to the right-most digit,
     * the second-to-last character to the second right-most digit, etc, until there are no more characters or digits).
     * @param value A slot value.
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     */
    digitizeValue?: (value: number, setCharacters: readonly ((char: string | null) => void)[], characters: readonly (string | null)[]) => void;
    /**
     * A function which renders slot characters into string. If not defined, non-null characters will be rendered as-is,
     * and null characters will be rendered according to the default value assigned to that character.
     */
    renderChar?: (character: string | null, index: number) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A cursor input slot which allows the user to select a numeric digit. Digits are integers, but are not necessarily
 * constrained to be in the range [0, 9].
 */
declare class DigitInputSlot extends DisplayComponent<DigitInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly defaultCharValues;
    private readonly parseValue;
    private readonly digitizeValue;
    private readonly renderChar;
    private readonly characterCount;
    private readonly minValue;
    private readonly maxValue;
    private readonly increment;
    private readonly wrap;
    private readonly scale;
    /** The value bound to this slot. */
    get value(): Subscribable<number>;
    private cssClassSub?;
    private valueSub?;
    private scaleSub?;
    private defaultCharsSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the value of this slot. As part of the operation, all of this slot's characters will be set to non-null
     * representations of the new value, if possible. The value of this slot after the operation is complete may differ
     * from the requested value depending on whether the requested value can be accurately represented by this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: number): number;
    /**
     * Sets the unscaled value of this slot. The unscaled value of this slot after the operation is complete may be
     * different from the requested value, depending on whether this slot can accurately represent the requested value.
     * @param unscaled The new unscaled value.
     * @returns The new unscaled value of this slot after the operation is complete.
     */
    setUnscaledValue(unscaled: number): number;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Changes this slot's value by a specified amount.
     * @param value This slot's value.
     * @param delta The amount by which to change the value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for SignInputSlot.
 */
interface SignInputSlotProps extends ComponentProps {
    /**
     * A function which renders a character value into a string.
     * @param charToRender The character to render.
     */
    renderChar?: (character: string | null) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A cursor input slot which allows the user to select a numeric sign, either `+1` or `-1`.
 */
declare class SignInputSlot extends DisplayComponent<SignInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly renderChar;
    /** The value bound to this slot. */
    get value(): Subscribable<1 | -1>;
    private cssClassSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the value of this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: 1 | -1): 1 | -1;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/** A saved radio frequency. */
interface SavedFrequenciesData {
    /** The frequency, in MHz. */
    frequency: number;
    /** The name of the radio station. */
    name: string;
}
/** Data for frequency array changed events. */
type FrequencyArrayChangedEventData = {
    /** The type of radio to update. */
    radioType: 'com' | 'nav';
    /** The type of frequency array to update. */
    frequencyType: 'recent' | 'user';
    /** The new frequency array. */
    frequencyArray: readonly SavedFrequenciesData[];
};
/** Data for saved frequency events. */
type SavedFrequencyEventData = {
    /** The type of radio to add or remove the frequency from. */
    radioType: 'com' | 'nav';
    /** The type of frequency to add or remove. */
    frequencyType: 'recent' | 'user';
    /** The frequency to add or remove. */
    frequency: number;
    /** The name of the frequency to add or remove. */
    name: string;
};
/** Events for the NavComControlPublisher. */
interface G3XNavComControlEvents {
    /** Event for adding a saved com frequency. */
    add_saved_frequency: SavedFrequencyEventData;
    /** Event for removing a saved com frequency. */
    remove_saved_frequency: SavedFrequencyEventData;
    /** Event for updating the saved frequency data. */
    frequency_array_changed: FrequencyArrayChangedEventData;
}
/** A publisher for G3XNavComControlEvents. */
declare class G3XNavComControlPublisher extends BasePublisher<G3XNavComControlEvents> {
    /**
     * Create a {@link G3XNavComControlPublisher}.
     * @param bus The EventBus to publish to.
     * @param pacer An optional pacer to use to control the rate of publishing.
     */
    constructor(bus: EventBus, pacer?: PublishPacer<G3XNavComControlEvents> | undefined);
    /**
     * Publish a G3X NavCom control event.
     * @param event The event from G3XNavComControlEvents.
     * @param value The value of the event.
     */
    publishEvent<K extends keyof G3XNavComControlEvents>(event: K, value: G3XNavComControlEvents[K]): void;
}

/**
 * A default data provider for ${@link RadioSavedFrequenciesDataProvider}.
 */
declare class DefaultRadioSavedFrequenciesDataProvider {
    private readonly bus;
    private readonly _recentComFrequencies;
    readonly recentComFrequencies: SubscribableArray<SavedFrequenciesData>;
    private readonly _userComFrequencies;
    readonly userComFrequencies: SubscribableArray<SavedFrequenciesData>;
    private readonly _recentNavFrequencies;
    readonly recentNavFrequencies: SubscribableArray<SavedFrequenciesData>;
    private readonly _userNavFrequencies;
    readonly userNavFrequencies: SubscribableArray<SavedFrequenciesData>;
    private isInit;
    private isAlive;
    private isPaused;
    private readonly navComSub;
    private navComSubscription?;
    /**
     * Constructor for the provider.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes the provider.
     * @param paused Whether the provider should be paused after initialization. Defaults to false.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * A data provider for a temperature information display.
 */
interface TemperatureInfoDataProvider {
    /** The current outside (static) air temperature, in degrees Celsius. */
    readonly oat: Subscribable<number>;
    /** The current deviation of outside air temperature from ISA, in degrees Celsius. */
    readonly deltaIsa: Subscribable<number>;
    /** Whether this provider's data is in a failed state. */
    readonly isDataFailed: Subscribable<boolean>;
}

/**
 * Component props for StatusBar.
 */
interface StatusBarProps extends ComponentProps {
    /** The UI service instance. */
    uiService: UiService;
    /** A temperature data provider for the status bar. */
    temperatureDataProvider: TemperatureInfoDataProvider;
    /** A manager for date/time user settings. */
    dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * Status bar display component for the G3X Touch.
 */
declare class StatusBar extends DisplayComponent<StatusBarProps> {
    private readonly knobLeftInnerText;
    private readonly knobLeftInnerPushText;
    private readonly knobLeftOuterText;
    private readonly knobRightInnerText;
    private readonly knobRightInnerPushText;
    private readonly knobRightOuterText;
    /** @inheritDoc */
    render(): VNode;
}

/**
 * Member properties of a {@link GenericTabbedContent}.
 */
type GenericTabbedContentMembers = {
    /** The bezel rotary knob label state requested by the content. */
    readonly knobLabelState: MutableSubscribableMap<UiKnobId, string> & MutableSubscribable<ReadonlyMap<UiKnobId, string>, Iterable<readonly [UiKnobId, string]>>;
};
/**
 * Component props for {@link GenericTabbedContent}.
 */
interface GenericTabbedContentProps extends TabbedContentProps {
    /** A function which is called after the content is rendered. */
    onAfterRender?: (thisNode: VNode, members: GenericTabbedContentMembers) => void;
    /** A function which is called when the content is selected to be displayed in its parent container. */
    onSelect?: (members: GenericTabbedContentMembers) => void;
    /** A function which is called when the content is deselected. */
    onDeselect?: (members: GenericTabbedContentMembers) => void;
    /**
     * A function which is called when the content is opened. Content is opened when it is selected and its parent
     * container is open.
     */
    onOpen?: (members: GenericTabbedContentMembers) => void;
    /**
     * A function which is called when the content is closed. Content is closed when it is deselected or its parent
     * container is closed.
     */
    onClose?: (members: GenericTabbedContentMembers) => void;
    /**
     * A function which is called when the content is resumed. Content is resumed when it is selected and its parent
     * container is resumed.
     */
    onResume?: (members: GenericTabbedContentMembers) => void;
    /**
     * A function which is called when the content is paused. Content is paused when it is deselected or its parent
     * container is paused.
     */
    onPause?: (members: GenericTabbedContentMembers) => void;
    /**
     * A function which is called when the content is updated. Content is updated when it is selected and its parent
     * container is updated.
     */
    onUpdate?: (time: number, members: GenericTabbedContentMembers) => void;
    /**
     * A function which handles UI interaction events routed to the content. If not defined, then the content will not
     * handle any events.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent, members: GenericTabbedContentMembers) => boolean;
    /** A function which is called when the content is destroyed. */
    onDestroy?: () => void;
}
/**
 * A generic implementation of `TabbedContent` which renders its children as-is and defers callback logic to
 * functions passed to its props.
 */
declare class GenericTabbedContent extends AbstractTabbedContent<GenericTabbedContentProps> {
    private thisNode?;
    private readonly members;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onSelect(): void;
    /** @inheritDoc */
    onDeselect(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for TabbedContainer.
 */
interface TabbedContainerProps extends ComponentProps {
    /**
     * The event bus. Required for the container's tab list to respond appropriately to the mouse leaving the virtual
     * cockpit instrument screen while the user is dragging the list.
     */
    bus?: EventBus;
    /**
     * The IDs of the valid bezel rotary knobs that can be used to change the container's selected tab. If not defined,
     * then knobs cannot be used to change the container's selected tab.
     */
    validKnobIds?: Iterable<UiKnobId>;
    /**
     * The bezel rotary knob label to request for the knobs that can be used to change the container's selected tab.
     * Defaults to `'Select Tab'`.
     */
    knobLabel?: string | Subscribable<string>;
    /** The position of the container's tabs relative to the content box. */
    tabPosition: 'left' | 'right' | 'top' | 'bottom';
    /** The maximum number of tabs visible at any one time in the container's tab list. */
    tabsPerListPage: number | Subscribable<number>;
    /** The length of each tab along the axis along which the tabs are arranged, in pixels. */
    tabLength: number | Subscribable<number>;
    /**
     * The spacing between each tab, in pixels. For best results, this value should be greater than or equal to the
     * border radius of the tabs.
     */
    tabSpacing: number | Subscribable<number>;
    /** The format of the container's parent GDU display. */
    gduFormat: GduFormat;
    /** CSS class(es) to apply to the container's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A container which displays content organized into an arbitrary number of tabs. Only the content associated with one
 * tab is displayed at any given time. Tabs are displayed on one of the four edges of the container in a list which
 * supports scrolling if the total number of tabs exceeds the amount that can be displayed simultaneously.
 *
 * The container's contents are added as children that implement the {@link TabbedContent} interface. It is forbidden
 * to add children to TabbedContainer that do not implement TabbedContent. Each TabbedContent child defines one tab and
 * its contents. The order in which tabs are presented in the container's tab list is the same as the order in which
 * their associated TabbedContents were added to the container as children.
 */
declare class TabbedContainer extends DisplayComponent<TabbedContainerProps> implements UiInteractionHandler {
    private static readonly RESERVED_CLASSES;
    private readonly tabListRef;
    private readonly selectedTabContainerRef;
    private readonly isTabListHorizontal;
    private readonly rootCssClass;
    private readonly tabsPerListPage;
    private readonly tabLength;
    private readonly tabSpacing;
    private readonly tabbedContentEntries;
    private readonly tabCount;
    private readonly tabListLength;
    private readonly selectedTabEnabledHandler;
    private selectedTabIndex;
    private selectedTabEnabledSub?;
    private selectedTabVisibleSub?;
    private readonly selectedTabTranslateLimitIndex;
    private readonly selectedTabScrollLimitState;
    private readonly selectedTabScrollLimits;
    private readonly selectedTabTransform;
    private readonly tabArrowsHidden;
    private readonly isBackTabArrowDisabled;
    private readonly isForwardTabArrowDisabled;
    private readonly validKnobIds;
    private readonly knobLabel;
    private readonly baseRequestedKnobLabelState;
    private readonly selectedTabRequestedKnobLabelState;
    private selectedTabRequestedKnobLabelStatePipe?;
    private knobLabelStateReconciliationPipe?;
    private readonly _knobLabelState;
    /** The bezel rotary knob label state requested by this container. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    private isAlive;
    private isInit;
    private isOpen;
    private isResumed;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Opens this container. This will open the currently selected tab, if one exists. While open, this container can
     * be updated.
     * @throws Error if this container has been destroyed.
     */
    open(): void;
    /**
     * Closes this container. This will close the currently selected tab, if one exists. If the container is resumed,
     * then this will also pause the container before closing it.
     * @throws Error if this container has been destroyed.
     */
    close(): void;
    /**
     * Resumes this container. This will resume the currently selected tab, if one exists. If the container is closed,
     * then this will also open the container before resuming it. While resumed, the container will forward requested
     * bezel rotary knob label states from the selected tab and handle UI interaction events (including routing events
     * to the selected tab).
     * @throws Error if this container has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this container. This will pause the currently selected tab, if one exists.
     * @throws Error if this container has been destroyed.
     */
    pause(): void;
    /**
     * Updates this container. This will update the currently selected tab, if one exists. If this container is closed,
     * then this method does nothing.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     * @throws Error if this container has been destroyed.
     */
    update(time: number): void;
    /**
     * Selects a tab by index. Tabs are indexed in the order in which they were added to this container as children.
     * @param index The index of the tab to select, or `-1` to deselect the currently selected tab without selecting a
     * new tab.
     * @throws Error if this container has been destroyed or has not been rendered.
     */
    selectTabIndex(index: number): void;
    /**
     * Selects the lowest-indexed enabled tab with a higher index than the currently selected tab. If there is no
     * currently selected tab, then selects the overall lowest-indexed enabled tab. Tabs are indexed in the order in
     * which they were added to this container as children.
     * @returns The index of the selected tab, or `-1` if there were no enabled tabs to select.
     * @throws Error if this container has been destroyed or has not been rendered.
     */
    selectNextTab(): number;
    /**
     * Selects the highest-indexed enabled tab with a lower index than the currently selected tab. If there is no
     * currently selected tab, then selects the overall highest-indexed enabled tab. Tabs are indexed in the order in
     * which they were added to this container as children.
     * @returns The index of the selected tab, or `-1` if there were no enabled tabs to select.
     * @throws Error if this container has been destroyed or has not been rendered.
     */
    selectPrevTab(): number;
    /**
     * Selects the lowest-indexed enabled tab. Tabs are indexed in the order in which they were added to this container
     * as children.
     * @param startIndex The index from which to start the search for enabled tabs to select. Defaults to `0`.
     * @returns The index of the selected tab, or `-1` if there were no enabled tabs to select.
     * @throws Error if this container has been destroyed or has not been rendered.
     */
    selectFirstTab(startIndex?: number): number;
    /**
     * Selects the highest-indexed enabled tab. Tabs are indexed in the order in which they were added to this container
     * as children.
     * @param startIndex The index from which to start the search for enabled tabs to select. Defaults to the index of
     * this container's highest-indexed tab.
     * @returns The index of the selected tab, or `-1` if there were no enabled tabs to select.
     * @throws Error if this container has been destroyed or has not been rendered.
     */
    selectLastTab(startIndex?: number): number;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this container's selected tab becomes disabled.
     */
    private onSelectedTabDisabled;
    /**
     * Updates the scroll position limits of this container's tab list beyond which the selected tab container needs to
     * be translated to keep the currently selected tab in view.
     * @param root0 The scroll limit input state.
     * @param root0."0" The index of the currently selected tab.
     * @param root0."1" The maximum number of tabs visible at any one time in the tab list.
     * @param root0."2" The length of each tab along the axis along which the tabs are arranged, in pixels.
     * @param root0."3" The spacing between each tab, in pixels.
     */
    private updateSelectedTabScrollLimits;
    /**
     * Updates the x-translation of this container's selected tab container.
     * @param translate The new translation, in pixels.
     */
    private updateSelectedTabTranslateX;
    /**
     * Updates the y-translation of this container's selected tab container.
     * @param translate The new translation, in pixels.
     */
    private updateSelectedTabTranslateY;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this container's tabbed content.
     * @returns This container's rendered tabbed content, as a VNode.
     * @throws Error if one or more of this container's children does not implement the {@link TabbedContent} interface.
     */
    private renderContent;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link UserTimerValueDisplay}
 */
interface UserTimerValueDisplayProps extends ComponentProps {
    /** The timer value, in milliseconds. */
    value: Subscribable<number>;
    /** Whether the timer is running. */
    isRunning: Subscribable<boolean>;
    /** CSS class(es) to add to the display's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A component that displays the value of a user timer.
 */
declare class UserTimerValueDisplay extends DisplayComponent<UserTimerValueDisplayProps> {
    private static readonly RESERVED_CLASSES;
    private readonly rootCssClass;
    private readonly formatter;
    private readonly valueText;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for CombinedTouchButton.
 */
interface CombinedTouchButtonProps extends ComponentProps {
    /** The direction along which the component's child buttons are arranged. */
    orientation: 'row' | 'col';
    /** Whether the combined button should be rendered as a focusable component. Defaults to `false`. */
    isFocusable?: boolean;
    /**
     * A UI focus controller with which to automatically register the component after it is rendered. If not defined,
     * then the component will not be automatically registered with any controller, but it may still be registered
     * manually. Ignored if `isFocusable` is `false`.
     */
    focusController?: UiFocusController;
    /** Whether the component can be focused. Ignored if `isFocusable` is `false`. Defaults to `false`. */
    canBeFocused?: boolean | Subscribable<boolean>;
    /**
     * Whether the combined button should attempt to focus itself when one of its child buttons is touched. Ignored if
     * `isFocusable` is `false`. Defaults to `false`.
     */
    focusSelfOnTouch?: boolean;
    /**
     * A function which is called when the component is registered with a UI focus controller.
     */
    onRegistered?: (combinedButton: CombinedTouchButton, controller: UiFocusController) => void;
    /**
     * A function which is called when the component is deregistered with a UI focus controller.
     */
    onDeregistered?: (combinedButton: CombinedTouchButton, controller: UiFocusController) => void;
    /**
     * A function which is called when the component gains focus.
     */
    onFocusGained?: (combinedButton: CombinedTouchButton, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the component loses focus.
     */
    onFocusLost?: (combinedButton: CombinedTouchButton) => void;
    /**
     * A function which handles {@link UiInteractionEvent|UiInteractionEvents} routed to the component. If not defined,
     * then the component will not handle any events.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent) => boolean;
    /** CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A wrapper component which renders child touchscreen buttons in a single row or column surrounded by a single
 * contiguous border and separated by border-like dividers.
 */
declare class CombinedTouchButton extends DisplayComponent<CombinedTouchButtonProps> implements UiFocusableComponent {
    private static readonly RESERVED_CLASSES;
    private thisNode?;
    private readonly cssClass;
    /** @inheritDoc */
    readonly isUiFocusableComponent: any;
    /** @inheritDoc */
    readonly canBeFocused: Subscribable<boolean> | Subscribable<false> | Subscribable<true>;
    private parentController?;
    private cssClassSub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Attempts to set focus on this combined button. If this button was not rendered as a focusable component, then this
     * method does nothing.
     */
    focusSelf(): void;
    /** @inheritDoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onDeregistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritDoc */
    onFocusLost(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when one of this combined button's child button is touched.
     * @param originalCallback The original `onTouched` callback assigned to the child button.
     * @param button The child button that was touched.
     * @returns The action to take as a result of the child button being touched.
     */
    private onChildButtonTouched;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this component's content.
     * @returns This component's rendered content, as a VNode.
     */
    private renderContent;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for UiImgTouchButton.
 */
interface UiImgTouchButtonProps extends Omit<ImgTouchButtonProps, 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'focusOnDrag' | 'class'> {
    /**
     * A callback function which will be called every time the button is touched (i.e. a mouse down event on the button
     * is detected). If not defined, then the button will default to attempting to set focus on its focus module and
     * entering the primed state when touched.
     * @param button The button that was touched.
     * @returns The action to take as a result of the button being touched.
     */
    onTouched?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B) => TouchButtonOnTouchedAction;
    /**
     * A callback function which will be called every time the button is pressed.
     * @param button The button that was pressed.
     * @param isHeld Whether the button was held when it was pressed.
     */
    onPressed?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B, isHeld: boolean) => void;
    /**
     * A function which is called when the button enters the held state. If not defined, then the button will default to
     * taking no specific action when it enters the held state.
     * @param button The button that is held.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    onHoldStarted?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B) => TouchButtonHoldAction;
    /**
     * A function which is called every frame when the button is held. If not defined, then the button will default to
     * taking no specific action with each frame tick.
     * @param button The button that is held.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that the button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that the button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    onHoldTick?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B, dt: number, totalTime: number, timeSinceLastPress: number) => TouchButtonHoldAction;
    /**
     * A function which is called when the button exits the held state.
     * @param button The button that was held.
     * @param totalHoldDuration The total amount of time, in milliseconds, that the button was held.
     * @param endReason The reason that the button exited the held state.
     */
    onHoldEnded?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B, totalHoldDuration: number, endReason: TouchButtonHoldEndReason) => void;
    /**
     * A function which is called when the button gains UI focus.
     * @param button The button that gained UI focus.
     */
    onFocusGained?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the button loses UI focus.
     * @param button The button that lost UI focus.
     */
    onFocusLost?: <B extends UiImgTouchButton = UiImgTouchButton>(button: B) => void;
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The format of the button's parent GDU display. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the button after it is rendered. If not defined, then
     * the button will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the button can be focused. Irrespective of this value, the button cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the button's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchButtonFocusModuleOptions>;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of {@link ImgTouchButton}. Supports UI focus, enables focus on drag by default and provides
 * convenience props for handling drag behavior while in a scrollable list.
 *
 * The root element of the button conditionally contains the `ui-button-focused` CSS class when the button has UI
 * focus.
 */
declare class UiImgTouchButton extends DisplayComponent<UiImgTouchButtonProps> implements UiFocusableComponent {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    protected readonly buttonRef: _microsoft_msfs_sdk.NodeReference<ImgTouchButton>;
    protected readonly focusModule: UiTouchButtonFocusModule;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Attempts to set focus on this button.
     */
    focusSelf(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this button is touched.
     * @returns The action to take as a result of the button being touched.
     */
    protected onTouched(): TouchButtonOnTouchedAction;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param isHeld Whether the button was held when it was pressed.
     */
    protected onPressed(button: TouchButton, isHeld: boolean): void;
    /**
     * Responds to when this button enters the held state.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    protected onHoldStarted(): TouchButtonHoldAction;
    /**
     * A callback which is called every frame when this button is held.
     * @param button The button that is held.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that this button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that this button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    protected onHoldTick(button: TouchButton, dt: number, totalTime: number, timeSinceLastPress: number): TouchButtonHoldAction;
    /**
     * Responds to when this button exits the held state.
     * @param button The button that was held.
     * @param totalHoldDuration The total amount of time, in milliseconds, that this button was held.
     * @param endReason The reason that this button exited the held state.
     */
    protected onHoldEnded(button: TouchButton, totalHoldDuration: number, endReason: TouchButtonHoldEndReason): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for UiSetValueTouchButton.
 */
interface UiSetValueTouchButtonProps<S extends MutableSubscribable<any>> extends Omit<SetValueTouchButtonProps<S>, 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'focusOnDrag' | 'class'> {
    /**
     * A callback function which will be called every time the button is touched (i.e. a mouse down event on the button
     * is detected). If not defined, then the button will default to entering the primed state when touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @returns The action to take as a result of the button being touched.
     */
    onTouched?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, state: S, setValue: SubscribableType<S>) => TouchButtonOnTouchedAction;
    /**
     * A callback function which will be called when the button is pressed. If not defined, pressing the button will
     * apply the button's set value to its bound state.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param isHeld Whether the button was held when it was pressed.
     */
    onPressed?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, state: S, setValue: SubscribableType<S>, isHeld: boolean) => void;
    /**
     * A function which is called when the button enters the held state. If not defined, then the button will default to
     * taking no specific action when it enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    onHoldStarted?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, state: S, setValue: SubscribableType<S>) => TouchButtonHoldAction;
    /**
     * A function which is called every frame when the button is held. If not defined, then the button will default to
     * taking no specific action with each frame tick.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that the button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that the button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    onHoldTick?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, state: S, setValue: SubscribableType<S>, dt: number, totalTime: number, timeSinceLastPress: number) => TouchButtonHoldAction;
    /**
     * A function which is called when the button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param totalHoldDuration The total amount of time, in milliseconds, that the button was held.
     * @param endReason The reason that the button exited the held state.
     */
    onHoldEnded?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, state: S, setValue: SubscribableType<S>, totalHoldDuration: number, endReason: TouchButtonHoldEndReason) => void;
    /**
     * A function which is called when the button gains UI focus.
     * @param button The button that gained UI focus.
     */
    onFocusGained?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the button loses UI focus.
     * @param button The button that lost UI focus.
     */
    onFocusLost?: <B extends UiSetValueTouchButton<S> = UiSetValueTouchButton<S>>(button: B) => void;
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The format of the button's parent GDU display. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the button after it is rendered. If not defined, then
     * the button will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the button can be focused. Irrespective of this value, the button cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the button's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchButtonFocusModuleOptions>;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of {@link SetValueTouchButton}. Supports UI focus, enables focus on drag by default and
 * provides convenience props for handling drag behavior while in a scrollable list.
 *
 * The root element of the button conditionally contains the `ui-button-focused` CSS class when the button has UI
 * focus.
 */
declare class UiSetValueTouchButton<S extends MutableSubscribable<any>> extends DisplayComponent<UiSetValueTouchButtonProps<S>> implements UiFocusableComponent {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    protected readonly buttonRef: _microsoft_msfs_sdk.NodeReference<SetValueTouchButton<S>>;
    protected readonly focusModule: UiTouchButtonFocusModule;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Attempts to set focus on this button.
     */
    focusSelf(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this button is touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @returns The action to take as a result of the button being touched.
     */
    protected onTouched(button: SetValueTouchButton<S>, state: S, setValue: SubscribableType<S>): TouchButtonOnTouchedAction;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param isHeld Whether the button was held when it was pressed.
     */
    protected onPressed(button: SetValueTouchButton<S>, state: S, setValue: SubscribableType<S>, isHeld: boolean): void;
    /**
     * Responds to when this button enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    protected onHoldStarted(button: SetValueTouchButton<S>, state: S, setValue: SubscribableType<S>): TouchButtonHoldAction;
    /**
     * A callback which is called every frame when this button is held.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that this button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that this button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    protected onHoldTick(button: SetValueTouchButton<S>, state: S, setValue: SubscribableType<S>, dt: number, totalTime: number, timeSinceLastPress: number): TouchButtonHoldAction;
    /**
     * Responds to when this button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param setValue The value that the button sets.
     * @param totalHoldDuration The total amount of time, in milliseconds, that this button was held.
     * @param endReason The reason that this button exited the held state.
     */
    protected onHoldEnded(button: SetValueTouchButton<S>, state: S, setValue: SubscribableType<S>, totalHoldDuration: number, endReason: TouchButtonHoldEndReason): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for UiToggleTouchButton.
 */
interface UiToggleTouchButtonProps<S extends Subscribable<boolean> | MutableSubscribable<boolean>> extends Omit<ToggleTouchButtonProps<S>, 'onTouched' | 'onPressed' | 'onHoldStarted' | 'onHoldTick' | 'onHoldEnded' | 'focusOnDrag' | 'class'> {
    /**
     * A callback function which will be called every time the button is touched (i.e. a mouse down event on the button
     * is detected). If not defined, then the button will default to entering the primed state when touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @returns The action to take as a result of the button being touched.
     */
    onTouched?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, state: S) => TouchButtonOnTouchedAction;
    /**
     * A callback function which will be called when the button is pressed. If not defined, pressing the button will
     * toggle its bound state if the state is mutable.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param isHeld Whether the button was held when it was pressed.
     */
    onPressed?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, state: S, isHeld: boolean) => void;
    /**
     * A function which is called when the button enters the held state. If not defined, then the button will default to
     * taking no specific action when it enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    onHoldStarted?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, state: S) => TouchButtonHoldAction;
    /**
     * A function which is called every frame when the button is held. If not defined, then the button will default to
     * taking no specific action with each frame tick.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that the button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that the button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    onHoldTick?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, state: S, dt: number, totalTime: number, timeSinceLastPress: number) => TouchButtonHoldAction;
    /**
     * A function which is called when the button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param totalHoldDuration The total amount of time, in milliseconds, that the button was held.
     * @param endReason The reason that the button exited the held state.
     */
    onHoldEnded?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, state: S, totalHoldDuration: number, endReason: TouchButtonHoldEndReason) => void;
    /**
     * A function which is called when the button gains UI focus.
     * @param button The button that gained UI focus.
     */
    onFocusGained?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the button loses UI focus.
     * @param button The button that lost UI focus.
     */
    onFocusLost?: <B extends UiToggleTouchButton<S> = UiToggleTouchButton<S>>(button: B) => void;
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The format of the button's parent GDU display. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the button after it is rendered. If not defined, then
     * the button will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the button can be focused. Irrespective of this value, the button cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the button's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchButtonFocusModuleOptions>;
    /** CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of {@link ToggleTouchButton}. Supports UI focus, enables focus on drag by default and
 * provides convenience props for handling drag behavior while in a scrollable list.
 *
 * The root element of the button conditionally contains the `ui-button-focused` CSS class when the button has UI
 * focus.
 */
declare class UiToggleTouchButton<S extends Subscribable<boolean> | MutableSubscribable<boolean>> extends DisplayComponent<UiToggleTouchButtonProps<S>> implements UiFocusableComponent {
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    protected readonly buttonRef: _microsoft_msfs_sdk.NodeReference<ToggleTouchButton<S>>;
    protected readonly focusModule: UiTouchButtonFocusModule;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets this button's root HTML element.
     * @returns This button's root HTML element.
     * @throws Error if this button has not yet been rendered.
     */
    getRootElement(): HTMLElement;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * Attempts to set focus on this button.
     */
    focusSelf(): void;
    /** @inheritdoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritdoc */
    onDeregistered(): void;
    /** @inheritdoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritdoc */
    onFocusLost(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this button is touched.
     * @param button The button that was touched.
     * @param state The state that is bound to the button.
     * @returns The action to take as a result of the button being touched.
     */
    protected onTouched(button: ToggleTouchButton<S>, state: S): TouchButtonOnTouchedAction;
    /**
     * Responds to when this button is pressed.
     * @param button The button that was pressed.
     * @param state The state that is bound to the button.
     * @param isHeld Whether the button was held when it was pressed.
     */
    protected onPressed(button: ToggleTouchButton<S>, state: S, isHeld: boolean): void;
    /**
     * Responds to when this button enters the held state.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @returns The action to take. Ignored if the value is equal to {@link TouchButtonHoldAction.EndHold}.
     */
    protected onHoldStarted(button: ToggleTouchButton<S>, state: S): TouchButtonHoldAction;
    /**
     * A callback which is called every frame when this button is held.
     * @param button The button that is held.
     * @param state The state that is bound to the button.
     * @param dt The elapsed time, in milliseconds, since the previous frame.
     * @param totalTime The total amount of time, in milliseconds, that this button has been held.
     * @param timeSinceLastPress The amount of time, in milliseconds, that this button has been held since the last time
     * the button was pressed as a tick action.
     * @returns The action to take.
     */
    protected onHoldTick(button: ToggleTouchButton<S>, state: S, dt: number, totalTime: number, timeSinceLastPress: number): TouchButtonHoldAction;
    /**
     * Responds to when this button exits the held state.
     * @param button The button that was held.
     * @param state The state that is bound to the button.
     * @param totalHoldDuration The total amount of time, in milliseconds, that this button was held.
     * @param endReason The reason that this button exited the held state.
     */
    protected onHoldEnded(button: ToggleTouchButton<S>, state: S, totalHoldDuration: number, endReason: TouchButtonHoldEndReason): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Options for {@link UiTouchSliderFocusModule}.
 */
type UiTouchSliderFocusModuleOptions = {
    /**
     * A function which handles `UiInteractionEvents` routed to the module. If not defined, then the module will not
     * handle any events.
     */
    onUiInteractionEvent?: (event: UiInteractionEvent) => boolean;
};
/**
 * A module which handles UI focus for a touchscreen slider.
 *
 * The module syncs whether it can be focused with whether its parent slider is enabled and visible. When registered
 * with a focus controller, the module will attempt to set focus on itself. Finally, the module handles adding the
 * `ui-slider-focused` CSS class to the slider's class list when focused.
 */
declare class UiTouchSliderFocusModule implements UiFocusableComponent {
    private readonly slider;
    private readonly options?;
    /** @inheritdoc */
    readonly isUiFocusableComponent = true;
    private parentController?;
    private readonly _canBeFocused;
    /** @inheritdoc */
    readonly canBeFocused: Subscribable<boolean>;
    /** Whether this module's parent button is enabled. */
    readonly isEnabled: Subscribable<boolean>;
    /** Whether this module's parent button is visible. */
    readonly isVisible: Subscribable<boolean>;
    private readonly _cssClass;
    /** The set of CSS classes to apply to this module's parent button, including any that are applied by this module. */
    readonly cssClass: SubscribableSet<string>;
    private readonly subs;
    /**
     * Creates a new instance of UiTouchSliderFocusModule.
     * @param slider This module's parent slider.
     * @param isSliderVisible Whether this module's parent slider is visible.
     * @param isSliderEnabled Whether this module's parent slider is enabled.
     * @param sliderCanBeFocused Whethe this module's parent slider can be focused.
     * @param cssClass CSS class(es) to apply to this module's parent slider.
     * @param options Options with which to configure this module.
     */
    constructor(slider: UiFocusableComponent, isSliderVisible: boolean | Subscribable<boolean> | undefined, isSliderEnabled: boolean | Subscribable<boolean> | undefined, sliderCanBeFocused: boolean | Subscribable<boolean> | undefined, cssClass?: string | SubscribableSet<string> | ToggleableClassNameRecord, options?: Readonly<UiTouchSliderFocusModuleOptions> | undefined);
    /**
     * Attempts to set focus on this module's parent slider.
     */
    focusSlider(): void;
    /**
     * Responds to when a drag motion has started on this module's parent slider.
     */
    onSliderDragStarted(): void;
    /** @inheritDoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onDeregistered(): void;
    /** @inheritDoc */
    onFocusGained(): void;
    /** @inheritDoc */
    onFocusLost(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Destroys this module.
     */
    destroy(): void;
}

/**
 * Component props for {@link UiTouchSlider}.
 */
interface UiTouchSliderProps<S extends Subscribable<number> | MutableSubscribable<number>> extends Omit<TouchSliderProps<S>, 'onValueChanged' | 'onDragStarted' | 'onDragMoved' | 'onDragEnded' | 'focusOnDrag' | 'lockFocusOnDrag' | 'class'> {
    /**
     * A function which is called when the slider's value changes from user input. If this function is not defined and
     * the slider's bound state is a mutable subscribable, the new value will be automatically written to the bound state.
     * @param value The new slider value.
     * @param state The slider's bound state.
     * @param slider The slider.
     */
    onValueChanged?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(value: number, state: S, slider: T) => void;
    /**
     * A function which is called when a drag motion starts. If not defined, then the slider will default to attempting
     * to set focus on itself when a drag motion starts.
     * @param position The current position of the mouse.
     * @param slider The slider.
     */
    onDragStarted?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(position: ReadonlyFloat64Array, slider: T) => void;
    /**
     * A function which is called when the mouse is moved during a drag motion.
     * @param position The current position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     * @param initialPosition The position of the mouse at the start of the current drag motion.
     * @param slider The slider.
     */
    onDragMoved?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(position: ReadonlyFloat64Array, prevPosition: ReadonlyFloat64Array, initialPosition: ReadonlyFloat64Array, slider: T) => void;
    /**
     * A function which is called when a drag motion ends.
     * @param position The current position of the mouse.
     * @param initialPosition The position of the mouse at the start of the drag motion.
     * @param slider The slider.
     */
    onDragEnded?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(position: ReadonlyFloat64Array, initialPosition: ReadonlyFloat64Array, slider: T) => void;
    /**
     * A function which is called when the slider gains UI focus.
     * @param slider The slider that gained UI focus.
     */
    onFocusGained?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(slider: T, direction: UiFocusDirection) => void;
    /**
     * A function which is called when the slider loses UI focus.
     * @param slider The slider that lost UI focus.
     */
    onFocusLost?: <T extends UiTouchSlider<S> = UiTouchSlider<S>>(slider: T) => void;
    /**
     * Whether the slider should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the slider should lock focus when dragging, consuming mouse events for the entire document window instead
     * of just the slider's root element and disabling the inhibit function. Defaults to `true`.
     */
    lockFocusOnDrag?: boolean;
    /**
     * The format of the slider's parent GDU display. Used to set the slider's drag lock focus and inhibit on drag
     * thresholds unless otherwise specified by the `dragLockFocusThresholdPx` and `dragInhibitThresholdPx` props,
     * respectively. Defaults to `'460'`.
     */
    gduFormat?: GduFormat;
    /**
     * A UI focus controller with which to automatically register the slider after it is rendered. If not defined, then
     * the slider will not be automatically registered with any controller, but it may still be registered manually.
     */
    focusController?: UiFocusController;
    /**
     * Whether the slider can be focused. Irrespective of this value, the slider cannot be focused while it is disabled
     * or not visible. Defaults to `true`.
     */
    canBeFocused?: boolean | Subscribable<boolean>;
    /** Options to configure the slider's behavior related to UI focus. */
    focusOptions?: Readonly<UiTouchSliderFocusModuleOptions>;
    /** CSS class(es) to apply to the slider's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A G3X Touch UI version of `TouchSlider`. Supports UI focus, enables focus on drag and lock focus on drag by default.
 *
 * The root element of the slider conditionally contains the `ui-slider-focused` CSS class when the slider has UI
 * focus.
 */
declare class UiTouchSlider<S extends Subscribable<number> | MutableSubscribable<number>> extends DisplayComponent<UiTouchSliderProps<S>> implements UiFocusableComponent {
    /** @inheritDoc */
    readonly isUiFocusableComponent = true;
    protected readonly sliderRef: _microsoft_msfs_sdk.NodeReference<TouchSlider<S, TouchSliderProps<S>>>;
    protected readonly focusModule: UiTouchSliderFocusModule;
    /** @inheritDoc */
    readonly canBeFocused: Subscribable<boolean>;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Attempts to set focus on this slider.
     */
    focusSelf(): void;
    /** @inheritDoc */
    onRegistered(controller: UiFocusController): void;
    /** @inheritDoc */
    onDeregistered(): void;
    /** @inheritDoc */
    onFocusGained(direction: UiFocusDirection): void;
    /** @inheritDoc */
    onFocusLost(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this slider's value changes from user input.
     * @param value The new slider value.
     * @param state The slider's bound state.
     */
    protected onValueChanged(value: number, state: S): void;
    /**
     * Responds to when a mouse drag is started on this slider.
     * @param position The current mouse position.
     */
    protected onDragStarted(position: ReadonlyFloat64Array): void;
    /**
     * Responds to when this slider is dragged.
     * @param position The current mouse position.
     * @param prevPosition The position of the mouse at the previous update.
     * @param initialPosition The position of the mouse at the start of the current drag motion.
     */
    protected onDragMoved(position: ReadonlyFloat64Array, prevPosition: ReadonlyFloat64Array, initialPosition: ReadonlyFloat64Array): void;
    /**
     * Responds to when a mouse drag is released on this slider.
     * @param position The current position of the mouse.
     * @param initialPosition The position of the mouse at the start of the drag motion.
     */
    protected onDragEnded(position: ReadonlyFloat64Array, initialPosition: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for UiWaypointIcon.
 */
type UiWaypointIconProps = Pick<WaypointIconProps, 'waypoint' | 'planeHeading' | 'class' | 'ref'>;
/**
 * A G3X Touch waypoint icon for display in UI views.
 */
declare class UiWaypointIcon extends DisplayComponent<UiWaypointIconProps> {
    private readonly ref;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A cache of UI waypoint icon images.
 */
declare class UiWaypointIconImageCache {
    private static INSTANCE?;
    /**
     * Gets a UI waypoint icon image cache.
     * @returns A UI waypoint icon image cache.
     */
    static getCache(): DefaultWaypointIconImageCache;
    /**
     * Creates a waypoint icon image cache.
     * @returns A new waypoint icon image cache.
     */
    private static createCache;
}

/**
 * A utility class for working with configuration objects.
 */
declare class ConfigUtils {
    /**
     * Parses a boolean value from an optional string input.
     * @param input The input to parse.
     * @returns The boolean value parsed from the specified input, or `null` if the input was nullish, or `undefined` if
     * the input string could not be parsed into a boolean value.
     */
    static parseBoolean(input: string | null | undefined): boolean | null | undefined;
    /**
     * Parses a boolean value from an optional string input.
     * @param input The input to parse.
     * @param defaultValue The default boolean value to return if the input is nullish.
     * @returns The boolean value parsed from the specified input, or `undefined` if the input string could not be parsed
     * into a boolean value.
     */
    static parseBoolean(input: string | null | undefined, defaultValue: boolean): boolean | undefined;
    /**
     * Parses a boolean value from an optional string input.
     * @param input The input to parse.
     * @param defaultValue The default boolean value to return if the input is nullish. If not defined, then a default
     * value will not be used.
     * @returns The boolean value parsed from the specified input, or `null` if the input was nullish and no default
     * value was specified, or `undefined` if the input string could not be parsed into a boolean value.
     */
    static parseBoolean(input: string | null | undefined, defaultValue?: boolean): boolean | null | undefined;
    /**
     * Parses a number value from an optional string input.
     * @param input The input to parse.
     * @returns The number value parsed from the specified input, or `null` if the input was nullish, or `undefined` if
     * the input string could not be parsed into a number value.
     */
    static parseNumber(input: string | null | undefined): number | null | undefined;
    /**
     * Parses a number value from an optional string input.
     * @param input The input to parse.
     * @param defaultValue The default number value to return if the input is nullish.
     * @returns The number value parsed from the specified input, or `undefined` if the input string could not be parsed
     * into a number value.
     */
    static parseNumber(input: string | null | undefined, defaultValue: number): number | undefined;
    /**
     * Parses a number value from an optional string input.
     * @param input The input to parse.
     * @param defaultValue The default number value to return if the input is nullish. If not defined, then a default
     * value will not be used.
     * @returns The number value parsed from the specified input, or `null` if the input was nullish and no default value
     * was specified, or `undefined` if the input string could not be parsed into a number value.
     */
    static parseNumber(input: string | null | undefined, defaultValue?: number): number | null | undefined;
    /**
     * Parses a validated number value from an optional string input.
     * @param input The input to parse.
     * @param validator A function that checks whether the number value parsed from the input is valid.
     * @returns The number value parsed from the specified input, or `null` if the input was nullish, or `undefined` if
     * the input string could not be parsed into a valid number value.
     */
    static parseNumber<T extends number = number>(input: string | null | undefined, validator: (value: number) => boolean): T | null | undefined;
    /**
     * Parses a validated number value from an optional string input.
     * @param input The input to parse.
     * @param validator A function that checks whether the number value parsed from the input is valid.
     * @param defaultValue The default number value to return if the input is nullish.
     * @returns The number value parsed from the specified input, or `undefined` if the input string could not be parsed
     * into a valid number value.
     */
    static parseNumber<T extends number = number>(input: string | null | undefined, validator: (value: number) => boolean, defaultValue: T): T | undefined;
    /**
     * Parses a validated number value from an optional string input.
     * @param input The input to parse.
     * @param validator A function that checks whether the number value parsed from the input is valid.
     * @param defaultValue The default number value to return if the input is nullish. If not defined, then a default
     * value will not be used.
     * @returns The number value parsed from the specified input, or `null` if the input was nullish and no default value
     * was specified, or `undefined` if the input string could not be parsed into a valid number value.
     */
    static parseNumber<T extends number = number>(input: string | null | undefined, validator: (value: number) => boolean, defaultValue?: T): T | null | undefined;
}

/**
 * A default implementation of {@link ConfigFactory}.
 */
declare class DefaultConfigFactory implements ConfigFactory {
    private static readonly TAG_MAP;
    /** @inheritdoc */
    create(element: Element): Config | undefined;
}

/**
 * A configuration object which defines a lookup table.
 */
declare class LookupTableConfig implements ResolvableConfig<LerpLookupTable> {
    /** @inheritdoc */
    readonly isResolvableConfig = true;
    /** The dimension count of this config's lookup table. */
    readonly dimensions: number;
    /** The breakpoints of this config's lookup table. */
    readonly breakpoints: readonly (readonly number[])[];
    /**
     * Creates a new LookupTableConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritdoc */
    resolve(): LerpLookupTable;
}

/**
 * A result resolved from a {@link NumericConfig} that defines a numeric value.
 */
interface NumericConfigResult {
    /** This result's numeric value. */
    value: number | Subscribable<number>;
    /**
     * Destroys this result. This frees any resources used by this result and allows the result and its value to be
     * garbage collected if no external references to this result exist.
     */
    destroy?(): void;
}
/**
 * A configuration object which defines a factory for a numeric value.
 */
interface NumericConfig extends ResolvableConfig<(context?: any) => NumericConfigResult> {
    /** Flags this object as a NumericConfig. */
    readonly isNumericConfig: true;
}
/**
 * A configuration object which defines a factory for a numeric constant.
 */
declare class NumericConstantConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The numeric value of this config. */
    readonly value: number;
    /**
     * Creates a new NumericConstantConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritDoc */
    resolve(): () => NumericConfigResult;
}
/**
 * A configuration object which defines a factory for a numeric value which is the minimum of one or more inputs.
 */
declare class NumericMinConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The inputs of this config. */
    readonly inputs: readonly NumericConfig[];
    /**
     * Creates a new NumericMinConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /** @inheritDoc */
    resolve(): (context?: any) => NumericConfigResult;
}
/**
 * A configuration object which defines a factory for a numeric value which is the maximum of one or more inputs.
 */
declare class NumericMaxConfig implements NumericConfig {
    readonly isResolvableConfig = true;
    readonly isNumericConfig = true;
    /** The inputs of this config. */
    readonly inputs: readonly NumericConfig[];
    /**
     * Creates a new NumericMaxConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /** @inheritDoc */
    resolve(): (context?: any) => NumericConfigResult;
}

/**
 * Types of speed configs.
 */
declare enum SpeedConfigType {
    Ias = "Ias",
    Mach = "Mach",
    Tas = "Tas",
    Aoa = "Aoa",
    Reference = "Reference",
    Bus = "Bus"
}
/**
 * A configuration object which defines a factory for an airspeed value presented as knots indicated airspeed.
 *
 * The airspeed value can be defined from a specific indicated airspeed, mach number, true airspeed, or angle-of-attack
 * value, from a one-dimensional lookup table of any of the previous value types keyed on pressure altitude, from an
 * aircraft reference speed, or from an arbitrary event bus topic.
 */
declare class SpeedConfig implements NumericConfig {
    /** @inheritDoc */
    readonly isResolvableConfig = true;
    /** @inheritDoc */
    readonly isNumericConfig = true;
    /** The type of this config. */
    readonly type: SpeedConfigType;
    /** The value of this config. */
    readonly value: number | LookupTableConfig | VSpeedValueKey | string;
    /**
     * Creates a new SpeedConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritDoc */
    resolve(): (context: AirspeedDefinitionContext) => NumericConfigResult;
    /**
     * Resolves this config as a factory for an airspeed value defined from indicated airspeed.
     * @returns A factory for an airspeed value defined from indicated airspeed.
     */
    private resolveIas;
    /**
     * Resolves this config as a factory for an airspeed value defined from mach number.
     * @returns A factory for an airspeed value defined from mach number.
     */
    private resolveMach;
    /**
     * Resolves this config as a factory for an airspeed value defined from true airspeed.
     * @returns A factory for an airspeed value defined from true airspeed.
     */
    private resolveTas;
    /**
     * Resolves this config as a factory for an airspeed value defined from angle of attack.
     * @returns A factory for an airspeed value defined from angle of attack.
     */
    private resolveAoa;
    /**
     * Resolves this config as a factory for an airspeed value defined from a reference speed.
     * @returns A factory for an airspeed value defined from a reference speed.
     */
    private resolveReference;
    /**
     * Resolves this config as a factory for an airspeed value defined from an event bus topic.
     * @returns A factory for an airspeed value defined from an event bus topic.
     */
    private resolveBus;
}

/**
 * The events that the EIS engine page can send to the EIS system.
 */
interface G3XEisEvents {
    /**
     * Whether the EIS engine page is open.
     */
    g3x_eis_engine_page_is_open: boolean;
}

/**
 * A calculator of flight plan data field values.
 */
interface FlightPlanDataFieldCalculator {
    /**
     * Calculates values for flight plan data fields and writes the values to the fields.
     * @param dataFieldIndex The index of the data field for which to calculate values.
     * @param dataItems The data items describing the flight plan for which to calculate data field values.
     * @param cumulativeDataField The data field representing the cumulative total value over the entire flight plan.
     */
    calculate(dataFieldIndex: number, dataItems: readonly FlightPlanDataItem[], cumulativeDataField: FlightPlanDataField | null): void;
}

/**
 * A repository from which flight plan data field calculators can be retrieved by data field type.
 */
interface FlightPlanDataFieldCalculatorRepo {
    /**
     * Retrieves a flight plan data field calculator.
     * @param type The data field type for which to retrieve a calculator.
     * @returns A flight plan data field calculator for the specified data field type.
     */
    get(type: FlightPlanDataFieldType): FlightPlanDataFieldCalculator;
}

/**
 * A factory that creates flight plan data fields.
 */
interface FlightPlanDataFieldFactory {
    /**
     * Creates a new flight plan data field of a given type.
     * @param type The type of data field to create.
     * @returns A new flight plan data field of the specified type, or `null` if one could not be created.
     */
    create<T extends FlightPlanDataFieldType>(type: T): FlightPlanDataField<T> | null;
}

/**
 * Configuration options for {@link FlightPlannerFlightPlanDataArray}.
 */
type FlightPlannerFlightPlanDataArrayOptions = {
    /** The number of data fields supported by the array. Defaults to `0`. */
    dataFieldCount?: number;
    /**
     * The amount of time, in milliseconds, by which to debounce data field calculations following flight plan changes.
     * Defaults to `250`.
     */
    calculateDebounce?: number;
};
/**
 * An implementation of `FlightPlanDataArray` that sources flight plan data from a flight planner. The flight planner
 * and flight plan from which data is sourced can be changed freely.
 */
declare class FlightPlannerFlightPlanDataArray extends AbstractSubscribableArray<Readonly<FlightPlanDataItem>> implements FlightPlanDataArray {
    private readonly dataFieldFactory;
    private readonly dataFieldCalculatorRepo;
    private readonly _array;
    private readonly isExternalFlightPlan;
    private flightPlanner;
    private flightPlanIndex;
    private approachLegPreviewItemCount;
    private readonly isApproachLegPreviewItemVisible;
    private readonly isAddWaypointItemVisibleCommand;
    private readonly isApproachLoaded;
    private readonly isAddWaypointItemVisible;
    private readonly fplSubs;
    private readonly dataFieldTypes;
    private readonly dataFieldFactoryFunc;
    private readonly nullFactoryFunc;
    private readonly calculateDebounce;
    private readonly calculateDebounceTimer;
    private readonly calculateFunc;
    /** @inheritDoc */
    get length(): number;
    private readonly _fromLegIndex;
    /** @inheritDoc */
    readonly fromLegIndex: Subscribable<number>;
    private readonly _toLegIndex;
    /** @inheritDoc */
    readonly toLegIndex: Subscribable<number>;
    private readonly _cumulativeDataFields;
    /** @inheritDoc */
    readonly cumulativeDataFields: readonly Subscribable<FlightPlanDataField<FlightPlanDataFieldType> | null>[];
    private isAlive;
    private isResumed;
    /**
     * Creates a new instance of FlightPlannerFlightPlanDataArray. Upon creation, the array is paused and has a null
     * flight plan source, the 'Add Waypoint' data item is flagged as hidden, and all data fields are cleared.
     * @param dataFieldFactory The factory used to create flight plan data fields for this array.
     * @param dataFieldCalculatorRepo The repository used by this array to retrieve calculators for flight plan data
     * fields.
     * @param options Options with which to configure this array.
     */
    constructor(dataFieldFactory: FlightPlanDataFieldFactory, dataFieldCalculatorRepo: FlightPlanDataFieldCalculatorRepo, options?: Readonly<FlightPlannerFlightPlanDataArrayOptions>);
    /** @inheritDoc */
    getArray(): readonly Readonly<FlightPlanDataItem>[];
    /**
     * Resumes this array. When this array is resumed, it will automatically re-calculate its data fields when its source
     * flight plan is changed or calculated.
     * @throws Error if this array has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this array. When this array is paused, it will not re-calculate its data fields when its source flight plan
     * is changed or calculated. In addition, calling `calculateDataFields()` has no effect when the array is paused.
     * @throws Error if this array has been destroyed.
     */
    pause(): void;
    /**
     * Sets the flight plan from which this array sources data.
     * @param isExternal Whether the new source flight plan is an external flight plan.
     * @param flightPlanner The flight planner containing the source flight plan. If `null` is specified instead, then
     * the array will behave as if it were sourcing data from an empty flight plan.
     * @param index The index of the source flight plan in its flight planner. Ignored if `flightPlanner` is `null`.
     * @throws Error if this array has been destroyed.
     */
    setFlightPlan(isExternal: boolean, flightPlanner: FlightPlanner | null, index?: number): void;
    /**
     * Sets whether the 'Add Waypoint' data item at the end of this array should be flagged as visible.
     * @param visible Whether the 'Add Waypoint' data item should be flagged as visible.
     * @throws Error if this array has been destroyed.
     */
    setAddWaypointItemVisible(visible: boolean): void;
    /**
     * Sets the type of one of this array's flight plan data fields.
     * @param index The index of the data field to change.
     * @param type The data field type to set, or `null` to clear the data field.
     * @throws Error if this array has been destroyed.
     */
    setDataFieldType(index: number, type: FlightPlanDataFieldType | null): void;
    /**
     * Calculates this array's flight plan data fields. This method does nothing if this array is paused.
     * @throws Error if this array has been destroyed.
     */
    calculateDataFields(): void;
    /**
     * Gets the flight plan from which this array is sourcing data.
     * @returns The flight plan from which this array is sourcing data, or `null` if there is no such flight plan.
     */
    private getFlightPlan;
    /**
     * Clears this array of all items except the 'Add Waypoint' item.
     */
    private clearArray;
    /**
     * Fully initializes this array from a flight plan. If the array is not empty, then it will first be emptied. Then, a
     * full set of data items will be inserted into the array from the specified flight plan and all data fields will be
     * calculated.
     * @param isExternal Whether the flight plan is from an external source.
     * @param flightPlan The flight plan from which to initialize this array.
     */
    private initializeFromFlightPlan;
    /**
     * Initializes subscriptions to a flight plan.
     * @param isExternal Whether the flight plan is from an external source.
     * @param flightPlanner The flight planner containing the flight plan to which to subscribe.
     * @param index The index of the flight plan to which to subscribe.
     */
    private initFplSubscriptions;
    /**
     * Handles when a flight plan segment change event is received for this array's source flight plan.
     * @param flightPlanner The flight planner containing the source flight plan.
     * @param event The received flight plan segment event.
     */
    private handlePlanSegmentChange;
    /**
     * Handles when a flight plan leg change event is received for this array's source flight plan.
     * @param flightPlanner The flight planner containing the source flight plan.
     * @param event The received flight plan leg event.
     */
    private handlePlanLegChange;
    /**
     * Creates a new data item for a flight plan leg.
     * @param flightPlan The flight plan containing the leg.
     * @param approachData Data describing the approach to which the flight plan leg belongs, or `undefined` if the leg
     * does not belong to an approach.
     * @param leg The leg for which to create the new data item.
     * @returns A new data item for the specified flight plan leg.
     */
    private createLegDataItem;
    /**
     * Handles when an approach is loaded into an internal flight plan.
     * @param flightPlan The flight plan into which the approach was loaded.
     * @param data Data describing the loaded approach.
     */
    private handleApproachLoaded;
    /**
     * Handles when an approach is removed from an internal flight plan.
     */
    private handleApproachRemoved;
    /**
     * Inserts data items for previewed approach flight plan legs into this array.
     * @param flightPlan The flight plan containing the previewed legs.
     * @param data Data describing the approach containing the previewed legs.
     */
    private insertApproachLegPreviewDataItems;
    /**
     * Creates a new data item for a previewed approach flight plan leg.
     * @param flightPlan The flight plan containing the previewed leg.
     * @param approachData Data describing the approach containing the previewed leg.
     * @param leg The leg for which to create the new data item.
     * @param index The index of the previewed leg in the approach procedure.
     * @returns A new data item for the specified previewed approach flight plan leg.
     */
    private createApproachLegPreviewDataItem;
    /**
     * Removes all data items for previewed approach flight plan legs from this array.
     */
    private removeApproachLegPreviewDataItems;
    /**
     * Refreshes the visibility state of each of this array's previewed approach flight plan leg data items.
     * @param data Data describing the loaded approach, or `undefined` if no approach is loaded.
     */
    private refreshApproachLegPreviewDataItemVisibility;
    /**
     * Refreshes the status of each of this array's flight plan leg data items relative to the active leg of the source
     * flight plan.
     */
    private refreshLegActiveStatus;
    /**
     * Schedules a flight plan data field calculate operation after a debounce delay. This method does nothing if this
     * array is paused.
     */
    private scheduleCalculate;
    /**
     * Calculates this array's flight plan data fields.
     */
    private doCalculateDataFields;
    /**
     * Destroys this array. Once destroyed, this array can no longer be manipulated and any further changes in the source
     * flight plan will not be reflected in the array.
     */
    destroy(): void;
    /**
     * Checks if a flight plan leg supports data fields.
     * @param leg The flight plan leg to check.
     * @returns Whether the specified flight plan leg supports data fields.
     */
    private static doesLegSupportDataFields;
}

/**
 * An implementation of `FlightPlanDataArray` that sources flight plan data from a flight planner's active flight plan.
 * The flight planner from which data is sourced can be changed freely.
 */
declare class ActiveFlightPlanDataArray implements FlightPlanDataArray {
    private readonly backingArray;
    private isExternalFlightPlan;
    private flightPlanner;
    private activeFlightPlanIndexSub?;
    /** @inheritDoc */
    readonly fromLegIndex: Subscribable<number>;
    /** @inheritDoc */
    readonly toLegIndex: Subscribable<number>;
    /** @inheritDoc */
    readonly cumulativeDataFields: readonly Subscribable<FlightPlanDataField<FlightPlanDataFieldType> | null>[];
    /** @inheritDoc */
    get length(): number;
    private isAlive;
    private isResumed;
    /**
     * Creates a new instance of ActiveFlightPlanDataArray. Upon creation, the array is paused and has a null flight
     * planner source, the 'Add Waypoint' data item is flagged as hidden, and all data fields are cleared.
     * @param dataFieldFactory The factory used to create flight plan data fields for this array.
     * @param dataFieldCalculatorRepo The repository used by this array to retrieve calculators for flight plan data
     * fields.
     * @param options Options with which to configure this array.
     */
    constructor(dataFieldFactory: FlightPlanDataFieldFactory, dataFieldCalculatorRepo: FlightPlanDataFieldCalculatorRepo, options?: Readonly<FlightPlannerFlightPlanDataArrayOptions>);
    /** @inheritDoc */
    get(index: number): FlightPlanDataItem;
    /** @inheritDoc */
    tryGet(index: number): FlightPlanDataItem | undefined;
    /** @inheritDoc */
    getArray(): readonly FlightPlanDataItem[];
    /** @inheritDoc */
    sub(handler: SubscribableArrayHandler<FlightPlanDataItem>, initialNotify?: boolean, paused?: boolean): Subscription;
    /**
     * Resumes this array. When this array is resumed, it will automatically re-calculate its data fields when its source
     * flight plan is changed or calculated.
     * @throws Error if this array has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this array. When this array is paused, it will not re-calculate its data fields when its source flight plan
     * is changed or calculated. In addition, calling `calculateDataFields()` has no effect when the array is paused.
     * @throws Error if this array has been destroyed.
     */
    pause(): void;
    /**
     * Sets the flight plan from which this array sources data.
     * @param isExternal Whether the new source flight plan is an external flight plan.
     * @param flightPlanner The flight planner containing the source flight plan. If `null` is specified instead, then
     * the array will behave as if it were sourcing data from an empty flight plan.
     * @throws Error if this array has been destroyed.
     */
    setFlightPlanner(isExternal: boolean, flightPlanner: FlightPlanner | null): void;
    /**
     * Sets whether the 'Add Waypoint' data item at the end of this array should be flagged as visible.
     * @param visible Whether the 'Add Waypoint' data item should be flagged as visible.
     * @throws Error if this array has been destroyed.
     */
    setAddWaypointItemVisible(visible: boolean): void;
    /**
     * Sets the type of one of this array's flight plan data fields.
     * @param index The index of the data field to change.
     * @param type The data field type to set, or `null` to clear the data field.
     * @throws Error if this array has been destroyed.
     */
    setDataFieldType(index: number, type: FlightPlanDataFieldType | null): void;
    /**
     * Calculates this array's flight plan data fields. This method does nothing if this array is paused.
     * @throws Error if this array has been destroyed.
     */
    calculateDataFields(): void;
    /**
     * Responds to when the index of the active flight plan for this array's current flight planner changes.
     * @param event The event describing
     */
    private onFlightPlanIndexChanged;
    /**
     * Destroys this array. Once destroyed, this array can no longer be manipulated and any further changes in the source
     * flight plan will not be reflected in the array.
     */
    destroy(): void;
}

/**
 * A store containing information about a flight plan.
 */
interface FlightPlanStore {
    /** The name of the flight plan, or `null` if the plan does not have a name. */
    readonly name: Subscribable<string | null>;
    /** The flight plan's origin airport, or `null` if the flight plan does not have an origin. */
    readonly originAirport: Subscribable<AirportFacility | null>;
    /** The flight plan's destination airport, or `null` if the flight plan does not have a destination. */
    readonly destinationAirport: Subscribable<AirportFacility | null>;
    /**
     * Data describing the flight plan's loaded VFR approach, or `null` if the flight plan does not have a loaded VFR
     * approach or does not support VFR approaches.
     */
    readonly loadedVfrApproachData: Subscribable<Readonly<G3XFmsFplLoadedApproachData> | null>;
    /**
     * The activation status of the flight plan's loaded VFR approach.
     *
     * * `none`: the approach is not active.
     * * `active`: the approach is active.
     * * `vtf`: the approach is active in vectors-to-final (VTF) form.
     *
     * If the flight plan has no loaded VFR approach, then the status will be `none`.
     */
    readonly vfrApproachActiveStatus: Subscribable<'none' | 'active' | 'vtf'>;
}

/**
 * A flight plan store containing information about the G3X's active primary flight plan. The active primary flight
 * plan is the primary flight plan of the selected flight plan source (either internal or external).
 */
declare class ActiveFlightPlanStore implements FlightPlanStore {
    private readonly fms;
    private readonly fplSource;
    private activePlanner;
    private readonly _name;
    /** @inheritDoc */
    readonly name: Subscribable<string | null>;
    private readonly _originAirport;
    /** @inheritDoc */
    readonly originAirport: Subscribable<AirportFacility | null>;
    private readonly _destinationAirport;
    /** @inheritDoc */
    readonly destinationAirport: Subscribable<AirportFacility | null>;
    private readonly _loadedVfrApproachData;
    /** @inheritDoc */
    readonly loadedVfrApproachData: Subscribable<Readonly<G3XFmsFplLoadedApproachData> | null>;
    private readonly _vfrApproachActiveStatus;
    /** @inheritDoc */
    readonly vfrApproachActiveStatus: Subscribable<"none" | "active" | "vtf">;
    private isAlive;
    private isInit;
    private isResumed;
    private readonly fplSubs;
    private readonly subscriptions;
    /**
     * Creates a new instance of ActiveFlightPlanStore.
     * @param fms The FMS.
     * @param fplSource The selected flight plan source.
     */
    constructor(fms: G3XFms, fplSource: Subscribable<G3XFplSource>);
    /**
     * Initializes this store. Once initialized, this store will continuously update its data until paused or destroyed.
     * @param paused Whether to initialize this store as paused. If `true`, then this store's data will not be
     * initialized until the first time it is resumed. Defaults to `false`.
     * @throws Error if this store has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this store. Once resumed, this store will continuously update its data until paused or destroyed.
     * @throws Error if this store has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this store. Once paused, this store will not update its data until it is resumed.
     * @throws Error if this store has been destroyed.
     */
    pause(): void;
    /**
     * Responds to when the selected flight plan source changes.
     * @param source The new flight plan source.
     */
    private onFplSourceChanged;
    /**
     * Refreshes this store's data based on the current state of the active flight plan.
     */
    private refreshData;
    private originFacilityOpId;
    /**
     * Retrieves an origin facility.
     * @param icao The ICAO of the origin facility.
     */
    private retrieveOriginFacility;
    private destinationFacilityOpId;
    /**
     * Retrieves a destination facility.
     * @param icao The ICAO of the destination facility.
     */
    private retrieveDestinationFacility;
    /**
     * Updates this store's approach data based on the current state of the active flight plan.
     * @param plan The active flight plan.
     */
    private updateApproachData;
    /**
     * Responds to when a flight plan user data event is received.
     * @param event The received event.
     */
    private onUserDataChanged;
    /**
     * Responds to when a flight plan origin/destination event is received.
     * @param event The received event.
     */
    private onOriginDestChanged;
    /**
     * Destroys this store. Once destroyed, this store will no longer update its provided data, and can no longer be
     * paused or resumed.
     */
    destroy(): void;
}

/**
 * Configuration options for {@link DefaultFlightPlanDataFieldCalculatorRepo}.
 */
type DefaultFlightPlanDataFieldCalculatorRepoOptions = {
    /** Whether sensed fuel flow can be used by the repository's calculators. Defaults to `false`. */
    supportSensedFuelFlow?: boolean;
    /** The type of fuel-on-board data used by the repository's calculators. Defaults to `'none'`. */
    fuelOnBoardType?: 'sensed' | 'totalizer' | 'none';
};
/**
 * An implementation of `FlightPlanDataFieldCalculatorRepo` that retrieves a flight plan data field calculators with
 * default behavior.
 */
declare class DefaultFlightPlanDataFieldCalculatorRepo implements FlightPlanDataFieldCalculatorRepo {
    private readonly bus;
    private readonly planSpeed;
    private readonly planFuelFlow;
    private readonly calculators;
    private readonly fmsPosIndex;
    private readonly simTime;
    private readonly isOnGround;
    private readonly magVar;
    private readonly fmsPosMode;
    private readonly groundSpeed;
    private readonly fuelFlow;
    private readonly fuelOnBoard;
    private readonly _isUsingPlanSpeed;
    /** Whether this repository's calculators are currently using fallback flight plan ground speed for calculations. */
    readonly isUsingPlanSpeed: Subscribable<boolean>;
    private readonly nominalGroundSpeed;
    private readonly _isUsingPlanFuelFlow;
    /** Whether this repository's calculators are currently using fallback flight plan fuel flow for calculations. */
    readonly isUsingPlanFuelFlow: Subscribable<boolean>;
    private readonly nominalFuelFlow;
    private lnavIndex;
    private readonly isLNavIndexValid;
    private readonly isLNavTracking;
    private readonly isLNavDataValid;
    private readonly lnavWptDistance;
    private readonly lnavDtk;
    private isAlive;
    private readonly subscriptions;
    /**
     * Creates a new instance of DefaultFlightPlanDataFieldCalculatorRepo.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system from which the repository's calculators will
     * source data.
     * @param planSpeed The fallback flight plan ground speed, in knots, used by this repository's calculators when the
     * airplane's sensed ground speed cannot be used.
     * @param planFuelFlow The fallback flight plan fuel flow, in gallons per hour, used by this repository's calculators
     * when the airplane's sensed fuel flow cannot be used.
     * @param options Options with which to configure the repository.
     */
    constructor(bus: EventBus, fmsPosIndex: number | Subscribable<number>, planSpeed: Subscribable<number>, planFuelFlow: Subscribable<number>, options?: Readonly<DefaultFlightPlanDataFieldCalculatorRepoOptions>);
    /**
     * Sets the index of the LNAV from which this repository's calculators source data.
     * @param index The index of the LNAV to set.
     * @throws Error if this reposity has been destroyed.
     */
    setLNavIndex(index: number): void;
    /** @inheritDoc */
    get(type: FlightPlanDataFieldType): FlightPlanDataFieldCalculator;
    /** @inheritDoc */
    private createCalculator;
    /**
     * Destroys this repository. Once this repository is destroyed, it can longer be manipulated and cannot be used to
     * retrieve calculators.
     */
    destroy(): void;
}

/**
 * A default implementation of `FlightPlanDataFieldFactory`.
 */
declare class DefaultFlightPlanDataFieldFactory implements FlightPlanDataFieldFactory {
    /** @inheritDoc */
    create<T extends FlightPlanDataFieldType>(type: T): FlightPlanDataField<T> | null;
}

/**
 * A default implementation of `G3XFplSourceDataProvider`.
 */
declare class DefaultG3XFplSourceDataProvider implements G3XFplSourceDataProvider {
    private readonly bus;
    readonly internalSourceDef: Readonly<G3XFplSourceDataProviderSourceDef>;
    /** @inheritDoc */
    readonly externalSourceDefs: readonly (Readonly<G3XFplSourceDataProviderSourceDef> | undefined)[];
    /** @inheritDoc */
    readonly externalSourceCount: 0 | 1 | 2;
    private readonly _source;
    /** @inheritDoc */
    readonly source: Subscribable<G3XFplSource>;
    private readonly def;
    /** @inheritDoc */
    readonly navigatorIndex: Subscribable<0 | G3XExternalNavigatorIndex>;
    /** @inheritDoc */
    readonly fms: Subscribable<Fms<any>>;
    /** @inheritDoc */
    readonly fmsId: _microsoft_msfs_sdk.MappedSubscribable<any>;
    /** @inheritDoc */
    readonly flightPlanner: Subscribable<FlightPlanner<any>>;
    /** @inheritDoc */
    readonly lnavIndex: Subscribable<number>;
    /** @inheritDoc */
    readonly vnavIndex: Subscribable<number>;
    /** @inheritDoc */
    readonly cdiId: Subscribable<string>;
    private isInit;
    private isAlive;
    private isPaused;
    /**
     * Creates a new instance of DefaultG3XFplSourceDataProvider.
     * @param bus The event bus.
     * @param internalSourceDef The definition describing the internal flight plan source.
     * @param externalSourceDefs Definitions describing the external flight plan sources. The index of each definition
     * should correspond with the index of the source's external navigator.
     */
    constructor(bus: EventBus, internalSourceDef: Readonly<G3XFplSourceDataProviderSourceDef>, externalSourceDefs: readonly (Readonly<G3XFplSourceDataProviderSourceDef> | undefined)[]);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * Methods for working with G3X flight plan routes.
 */
declare class G3XFlightPlanRouteUtils {
    /**
     * Creates a flight plan route representing the structure of a G3X internal flight plan.
     * @param facLoader The facility loader to use to retrieve facilities referenced in the flight plan.
     * @param flightPlan The flight plan from which to create the route.
     * @returns A flight plan route representing the structure of the specified flight plan.
     */
    static createRouteFromFlightPlan(facLoader: FacilityLoader, flightPlan: FlightPlan): Promise<FlightPlanRoute>;
}

/**
 * G3X FMS utils
 */
declare class G3XFmsUtils {
    private static readonly RUNWAY_DESIGNATOR_PRIORITIES;
    private static readonly APPROACH_TYPE_PRIORITIES;
    /**
     * Gets the sorting order of two runways.
     * @param a The first runway to sort.
     * @param b The second runway to sort.
     * @returns A negative number if runway `a` comes before runway `b`, a positive number if runway `a` comes after
     * runway `b`, or zero if both orderings are equivalent.
     */
    static sortRunway(a: AirportRunway, b: AirportRunway): number;
    /**
     * Gets the sorting order of two approaches.
     * @param a The first approach to sort.
     * @param b The second approach to sort.
     * @returns A negative number if approach `a` comes before approach `b`, a positive number if approach `a` comes
     * after approach `b`, or zero if both orderings are equivalent.
     */
    static sortApproach(a: ApproachProcedure, b: ApproachProcedure): number;
    /**
     * Gets the sorting order of two approach items.
     * @param a The first approach item to sort.
     * @param b The second approach item to sort.
     * @returns A negative number if approach item `a` comes before approach item `b`, a positive number if approach
     * item `a` comes after approach item `b`, or zero if both orderings are equivalent.
     */
    static sortApproachItem(a: ApproachListItem, b: ApproachListItem): number;
    /**
     * Gets a G3X Touch-formatted name for a VFR approach.
     * @param approach The approach for which to get a name.
     * @returns The G3X Touch-formatted name for the specified VFR approach.
     */
    static getVfrApproachName(approach: GarminVfrApproachProcedure): string;
    /**
     * Gets the sorting order of two VFR approaches.
     * @param a The first approach to sort.
     * @param b The second approach to sort.
     * @returns A negative number if approach `a` comes before approach `b`, a positive number if approach `a` comes
     * after approach `b`, or zero if both orderings are equivalent.
     */
    static sortVfrApproach(a: GarminVfrApproachProcedure, b: GarminVfrApproachProcedure): number;
    /**
     * Gets the sorting order of two VFR approach items.
     * @param a The first approach item to sort.
     * @param b The second approach item to sort.
     * @returns A negative number if approach item `a` comes before approach item `b`, a positive number if approach
     * item `a` comes after approach item `b`, or zero if both orderings are equivalent.
     */
    static sortVfrApproachItem(a: VfrApproachListItem, b: VfrApproachListItem): number;
}

/**
 * Events related to G3X flight plan data sources.
 */
interface G3XFplSourceEvents {
    /** The current flight plan source. */
    g3x_fpl_source_current: G3XFplSource;
    /** Whether an external flight plan source is available. */
    [g3x_fpl_source_external_available: `g3x_fpl_source_external_available_${number}`]: boolean;
}

/**
 * A loader of flight plan routes into the internal primary flight plan of an instance of {@link G3XFms}.
 */
declare class G3XInternalPrimaryFlightPlanRouteLoader implements GarminFlightPlanRouteLoader {
    private readonly fms;
    private static readonly USER_FACILITY_IDENT_PREFIX;
    private loadOpId;
    private activeLoadPromise?;
    /**
     * Creates a new instance of G3XInternalPrimaryFlightPlanRouteLoader.
     * @param fms The FMS containing the primary flight plan to which the loader loads flight plan routes.
     */
    constructor(fms: G3XFms);
    /** @inheritDoc */
    isLoadInProgress(): boolean;
    /** @inheritDoc */
    awaitLoad(): Promise<void>;
    /** @inheritDoc */
    loadRoute(route: ReadonlyFlightPlanRoute): Promise<boolean>;
    /** @inheritDoc */
    cancelLoad(): Promise<void>;
    /**
     * Schedules an operation to load a flight plan route into the primary flight plan.
     * @param route The flight plan route to load.
     * @returns A Promise which is fulfilled when the scheduled operation ends. The fulfillment value reports whether
     * the operation successfully completed without being cancelled.
     */
    private scheduleLoadFromRoute;
    /**
     * Loads a flight plan route into the primary flight plan.
     * @param opId The load operation ID.
     * @param route The flight plan route to load.
     * @returns A Promise which is fulfilled when the load operation ends. The fulfillment value reports whether the
     * operation successfully completed without being cancelled.
     */
    private loadFromRoute;
    /**
     * Loads the enroute legs of a flight plan route into the primary flight plan. This method should be called when the
     * primary flight plan does not have any loaded destination, arrival, or approach procedures.
     * @param opId The load operation ID.
     * @param plan The primary flight plan.
     * @param route The flight plan route to load.
     * @param pposLegIndex The index of the last PPOS leg in the enroute legs array, or `-1` if there are no PPOS legs.
     * @returns The desired on-route direct-to target leg within the enroute segments specified by the loaded flight plan
     * route, or `null` if there is no such leg.
     */
    private loadEnrouteLegs;
    /**
     * Retrieves a facility with a given ICAO.
     * @param icao The ICAO of the facility to retrieve.
     * @returns A Promise which is fulfilled with the requested facility, or `null` if such a facility could not be
     * found.
     */
    private retrieveFacility;
    /**
     * Retrieves an origin or destination airport and runway.
     * @param airportIcao The ICAO of the airport.
     * @param runwayIdentifier The runway identifier.
     * @returns The airport and runway defined by the specified ICAO and runway identifier.
     */
    private retrieveOriginDest;
    /**
     * Retrieves indexes for an approach procedure.
     * @param airport The airport in which to search for the approach procedure.
     * @param approachIdentifier The identifier for the approach procedure.
     * @param transitionName The name of the approach transition to retrieve.
     * @returns The indexes for the approach procedure defined by the specified parameters.
     */
    private retrieveApproachIndexes;
    /**
     * Retrieves an intersection facility with a given ICAO.
     * @param icao The ICAO of the intersection facility to retrieve.
     * @returns A Promise which is fulfilled with the requested intersection facility, or `null` if such a facility could
     * not be found.
     */
    private retrieveIntersectionFacility;
    /**
     * Retrieves the type-matched facility corresponding to an intersection facility.
     * @param facility The intersection facility for which to retrieve the type-matched facility.
     * @returns A Promise which is fulfilled with the requested facility, or `null` if such a facility could not be
     * found.
     */
    private retrieveFacilityFromIntersection;
    /**
     * Retrieves an airway connecting two waypoints.
     * @param airwayName The name of the airway to retrieve.
     * @param entryFacility The entry waypoint.
     * @param exitFacility The exit waypoint.
     * @returns A Promise which is fulfilled with the requested airway, or `null` if such an airway could not be found.
     */
    private retrieveAirway;
    /**
     * Gets an array of all user facility indexes that are currently in-use, sorted in ascending order.
     * @returns An array of all user facility indexes that are currently in-use, sorted in ascending order.
     */
    private getInUseUserFacilityIndexes;
    /**
     * Gets an array of all user facility indexes that are referenced in a flight plan.
     * @param plan The flight plan to check.
     * @returns An array of all user facility indexes that are references in the specified flight plan.
     */
    private getInUseUserFacilityIndexesFromPlan;
    /**
     * Creates a new user facility to reference from a flight plan leg.
     * @param latLon The latitude/longitude coordinates of the facility to create.
     * @param index The index of the facility to create.
     * @returns A new user facility with the specified parameters.
     */
    private createUserFacility;
}

/**
 * A provider of flight plan routes representing the structure of the internal primary flight plan of an instance of
 * {@link G3XFms}.
 */
declare class G3XInternalPrimaryFlightPlanRouteProvider implements GarminFlightPlanRouteProvider {
    private readonly fms;
    /**
     * Creates a new instance of G3XInternalPrimaryFlightPlanRouteProvider.
     * @param fms The FMS containing the primary flight plan from which this provider sources flight plan routes.
     */
    constructor(fms: G3XFms);
    /**
     * Gets a flight plan route representing the structure of the internal primary flight plan loaded in this provider's
     * `G3XFms` instance.
     * @returns A flight plan route representing the structure of the internal primary flight plan loaded in this
     * provider's `G3XFms` instance.
     */
    getRoute(): Promise<ReadonlyFlightPlanRoute>;
}

/** An instrument that tracks fuel state for use by the G3X. */
declare class FuelTotalizer implements Instrument {
    private fuelRemaining;
    private fuelBurned;
    private priorRawQty;
    /**
     * Constructor.
     * @param bus The event bus to publish / listen to.
     */
    constructor(bus: EventBus);
    /** Initialize the instrument. */
    init(): void;
    /** Perform events for the update loop. */
    onUpdate(): void;
}

/**
 * Events with which to control `FuelTotalizer`.
 */
interface FuelTotalizerControlEvents {
    /** Commands the fuel computer to set a new amount for fuel remaining. */
    fuel_totalizer_set_remaining: number;
    /** Commands the fuel computer to set a new amount for fuel burned. */
    fuel_totalizer_set_burned: number;
}

/**
 * SimVars related to fuel totalizer data.
 */
declare enum FuelTotalizerSimVars {
    Burned = "L:G3X_Fuel_Burned",
    Remaining = "L:G3X_Fuel_Remaining"
}
/**
 * Events related to fuel totalizer data.
 */
interface FuelTotalizerEvents {
    /** The amount of fuel burned, in gallons. */
    fuel_totalizer_burned: number;
    /** The amount of fuel remaining, in gallons. */
    fuel_totalizer_remaining: number;
}
/**
 * A publisher for fuel totalizer events.
 */
declare class FuelTotalizerSimVarPublisher extends SimVarPublisher<FuelTotalizerEvents> {
    private static simvars;
    constructor(bus: EventBus);
}

/**
 * Special characters in the G3X DejaVu font.
 */
declare enum G3XSpecialChar {
    Utc = "\u1100",
    Am = "\u1102",
    Pm = "\u1103",
    DegreeMagnetic = "\u1104",
    DegreeTrue = "\u1105",
    DegreeCelsius = "\u1106",
    DegreeFahrenheit = "\u1107",
    NauticalMile = "\u1108",
    StatuteMile = "\u1109",
    Kilometer = "\u110A",
    Knot = "\u110B",
    KilometerPerHour = "\u110D",
    Foot = "\u110E",
    Meter = "\u110F",
    Gallon = "\u1110",
    Pound = "\u1112",
    Kilogram = "\u1113",
    GallonPerHour = "\u1114",
    LiterPerHour = "\u1115",
    PoundPerHour = "\u1116",
    KilogramPerHour = "\u1117",
    InHg = "\u1118",
    Millibar = "\u1119",
    Hectopascal = "\u111A",
    FootPerMinute = "\u111B",
    FootPerMinutePos = "\u111C",
    FootPerMinuteNeg = "\u111D",
    NauticalMilePerGallon = "\u111E",
    StatuteMilePerGallon = "\u111F",
    KilometerPerLiter = "\u1120",
    LiterPer100Km = "\u1121",
    Kilohertz = "\u1128",
    Megahertz = "\u1129",
    SpaceBar = "\uFF3F"
}

/**
 * A utility class for creating G3X Touch unit formatters.
 *
 * Each unit formatter is a function which generates output strings from input measurement units.
 */
declare class G3XUnitFormatter {
    private static readonly UNIT_TEXT;
    private static readonly BASIC_UNIT_TEXT;
    /**
     * Creates a function which formats measurement units to G3X-style strings representing their abbreviated names.
     * @param defaultString The string to output when the input unit cannot be formatted. Defaults to the empty string.
     * @returns A function which formats measurement units to G3X-style strings representing their abbreviated names.
     */
    static create(defaultString?: string): (unit: Unit<any>) => string;
    /**
     * Creates a function which formats measurement units to basic-style strings representing their abbreviated names.
     * @param defaultString The string to output when the input unit cannot be formatted. Defaults to the empty string.
     * @returns A function which formats measurement units to basic-style strings representing their abbreviated names.
     */
    static createBasic(defaultString?: string): (unit: Unit<any>) => string;
    /**
     * Gets a mapping of unit family and name to G3X-style text used by G3XUnitFormatter to format units. The returned
     * object maps unit families to objects that map unit names within each family to formatted text.
     * @returns A mapping of unit family and name to G3X-style text used by G3XUnitFormatter to format units.
     */
    static getUnitTextMap(): Readonly<Partial<Record<string, Readonly<Partial<Record<string, string>>>>>>;
    /**
     * Gets a mapping of unit family and name to basic-style text used by G3XUnitFormatter to format units. The returned
     * object maps unit families to objects that map unit names within each family to formatted text.
     * @returns A mapping of unit family and name to basic-style text used by G3XUnitFormatter to format units.
     */
    static getBasicUnitTextMap(): Readonly<Partial<Record<string, Readonly<Partial<Record<string, string>>>>>>;
}

/**
 * Utility class for creating nav source name formatters.
 */
declare class NavSourceFormatter {
    /**
     * Creates a function which generates formatted nav source names.
     * @param showGpsIndex Whether to show the index for GPS-type nav sources.
     * @param showNavIndex Whether to show the index for NAV-type nav sources.
     * @returns A function which generates formatted nav source names.
     */
    static create(showGpsIndex: boolean, showNavIndex: boolean): (sourceName: G3XTouchNavSourceName) => string;
    /**
     * Creates a function which generates formatted nav source names for nav sources.
     * @param showGpsIndex Whether to show the index for GPS-type nav sources.
     * @param showNavIndex Whether to show the index for NAV-type nav sources.
     * @returns A function which generates formatted nav source names for nav sources.
     */
    static createForSource(showGpsIndex: boolean, showNavIndex: boolean): (source: NavReferenceSource<G3XTouchNavSourceName>) => string;
    /**
     * Creates a function which generates formatted nav source names for nav indicators.
     * @param showGpsIndex Whether to show the index for GPS-type nav sources.
     * @param showNavIndex Whether to show the index for NAV-type nav sources.
     * @param showNavType Whether to show the navaid type (VOR vs LOC) for NAV-type nav sources. If `false`, `'VLOC'`
     * will be used as the name for all NAV-type sources.
     * @returns A function which generates formatted nav source names for nav indicators.
     */
    static createForIndicator(showGpsIndex: boolean, showNavIndex: boolean, showNavType: boolean): (indicator: G3XTouchNavIndicator) => string;
    /**
     * Creates a function which generates formatted nav source names for nav sources.
     * @param showNavIndex Whether to show the index for NAV-type nav sources.
     * @returns A function which generates formatted nav source names for nav sources.
     */
    static createForBearingPointerSetting(showNavIndex: boolean): (bearingPointerSource: PfdBearingPointerSource) => string;
}

/**
 * Standard G3X Touch names for backplane instruments and publishers.
 */
declare enum InstrumentBackplaneNames {
    Accelerometer = "Accelerometer",
    Adc = "Adc",
    Ahrs = "Ahrs",
    Alert = "Alert",
    Ambient = "Ambient",
    Autopilot = "Autopilot",
    AutopilotRadioNav = "AutopilotRadioNav",
    Base = "Base",
    Backlight = "Backlight",
    Clock = "Clock",
    ControlSurfaces = "ControlSurfaces",
    Eis = "Eis",
    Electrical = "Electrical",
    Engine = "Engine",
    FuelTotalizer = "FuelTotalizer",
    GarminAutopilot = "GarminAutopilot",
    G3XNav = "G3XNav",
    Gnss = "Gnss",
    HEvents = "HEvents",
    LNavObs = "LNavObs",
    Minimums = "Minimums",
    NavCom = "NavCom",
    NavComControl = "NavComControl",
    NavEvents = "NavEvents",
    NavProc = "NavProc",
    Pressurization = "Pressurization",
    Sound = "Sound",
    Timer = "Timer",
    Traffic = "Traffic",
    VNav = "VNav",
    WeightFuel = "WeightFuel",
    Xpdr = "Xpdr"
}

/**
 * Predefined unit types.
 */
declare class G3XUnitType {
    /** One kilometer per weight equivalent of one liter of fuel. */
    static readonly KM_PER_LITER_FUEL: CompoundUnit<UnitFamily.DistancePerWeight>;
    /** One liter of fuel per weight equivalent of 100 kilometers. */
    static readonly LITER_PER_100KM: CompoundUnit<UnitFamily.WeightPerDistance>;
}

/**
 * Flight planning calculation user settings.
 */
type FplCalculationUserSettingTypes = {
    /** The user-defined flight plan ground speed, in knots. */
    fplSpeed: number;
    /** The user-defined flight plan fuel flow, in gallons per hour. */
    fplFuelFlow: number;
};
/**
 * True flight planning calculation user settings.
 */
type FplCalculationTrueUserSettingTypes = {
    [P in keyof FplCalculationUserSettingTypes as `${P}_g3x`]: FplCalculationUserSettingTypes[P];
};
/**
 * A utility class for retrieving flight planning calculation user setting managers.
 */
declare class FplCalculationUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for flight planning calculation user settings.
     * @param bus The event bus.
     * @returns a manager for flight planning calculation user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<FplCalculationUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased flight planning calculation settings.
     * @returns The default values for a full set of aliased flight planning calculation settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true flight planning calculation settings.
     * @returns An array of definitions for true flight planning calculation settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true flight planning calculation settings.
     * @returns A setting name alias mapping from aliased to true flight planning calculation settings.
     */
    private static getAliasMap;
}

/**
 * Flight planning display user settings.
 */
type FplDisplayUserSettingTypes = {
    /** Whether to show the map on the MFD FPL page. */
    fplShowMap: boolean;
    /** The type of the first MFD FPL page data field. */
    fplDataField1: FlightPlanDataFieldType;
    /** The type of the second MFD FPL page data field. */
    fplDataField2: FlightPlanDataFieldType;
    /** The type of the third MFD FPL page data field. */
    fplDataField3: FlightPlanDataFieldType;
};
/**
 * True flight planning display user settings.
 */
type FplDisplayTrueUserSettingTypes = {
    [P in keyof FplDisplayUserSettingTypes as `${P}_g3x`]: FplDisplayUserSettingTypes[P];
};
/**
 * A utility class for retrieving flight planning display user setting managers.
 */
declare class FplDisplayUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for flight planning display user settings.
     * @param bus The event bus.
     * @returns a manager for flight planning display user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<FplDisplayUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased flight planning display settings.
     * @returns The default values for a full set of aliased flight planning display settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true flight planning display settings.
     * @returns An array of definitions for true flight planning display settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true flight planning display settings.
     * @returns A setting name alias mapping from aliased to true flight planning display settings.
     */
    private static getAliasMap;
}

/**
 * Flight plan source setting modes.
 */
declare enum G3XFplSourceSettingMode {
    Internal = "Internal",
    External = "External"
}
/**
 * Flight plan source user settings.
 */
type FplSourceUserSettingTypes = {
    /** The desired flight plan source. */
    fplSource: G3XFplSourceSettingMode;
};
/**
 * True flight plan source user settings.
 */
type FplSourceTrueUserSettingTypes = {
    [P in keyof FplSourceUserSettingTypes as `${P}_g3x`]: FplSourceUserSettingTypes[P];
};
/**
 * A utility class for retrieving flight plan source user setting managers.
 */
declare class FplSourceUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for flight plan source user settings.
     * @param bus The event bus.
     * @returns a manager for flight plan source user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<FplSourceUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased flight plan source settings.
     * @returns The default values for a full set of aliased flight plan source settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true flight plan source settings.
     * @returns An array of definitions for true flight plan source settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true flight plan source settings.
     * @returns A setting name alias mapping from aliased to true flight plan source settings.
     */
    private static getAliasMap;
}

/**
 * True G3X Touch date/time user settings.
 */
type G3XDateTimeTrueUserSettingTypes = {
    [P in keyof DateTimeUserSettingTypes as `${P}_g3x`]: DateTimeUserSettingTypes[P];
};
/**
 * A utility class for retrieving G3X Touch date/time user setting managers.
 */
declare class G3XDateTimeUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for G3X Touch date/time user settings.
     * @param bus The event bus.
     * @returns A manager for G3X Touch date/time user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<DateTimeUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased date/time user settings.
     * @returns The default values for a full set of aliased date/time user settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true date/time user settings.
     * @returns An array of definitions for true date/time user settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true date/time settings.
     * @returns A setting name alias mapping from aliased to true date/time settings.
     */
    private static getAliasMap;
}

/**
 * Aliased G3X Touch nearest airport user settings.
 */
type G3XNearestAirportUserSettingTypes = NearestAirportUserSettingTypes & {
    /** Whether to show city names for nearest airports instead of facility names. */
    nearestAptShowCity: boolean;
};
/**
 * True G3X Touch nearest airport user settings.
 */
type G3XNearestAirportTrueUserSettingTypes = {
    [P in keyof G3XNearestAirportUserSettingTypes as `${P}_g3x`]: G3XNearestAirportUserSettingTypes[P];
};
/**
 * Utility class for retrieving G3X Touch nearest airport user setting managers.
 */
declare class G3XNearestAirportUserSettings {
    private static INSTANCE;
    /**
     * Retrieves a manager for nearest airport user settings.
     * @param bus The event bus.
     * @returns a manager for nearest airport user settings.
     */
    static getManager(bus: EventBus): UserSettingManager<G3XNearestAirportUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased nearest airport settings.
     * @returns The default values for a full set of aliased nearest airport settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true nearest airport settings.
     * @returns An array of definitions for true nearest airport settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true nearest airport settings.
     * @returns A setting name alias mapping from aliased to true nearest airport settings.
     */
    private static getAliasMap;
}

/**
 * Aliased names of G3X Touch traffic user settings with non-suffixed names.
 */
type NonSuffixedTrafficUserSettingNames = 'trafficOperatingMode' | 'trafficAdsbEnabled';
/**
 * Aliased G3X Touch traffic user settings with non-suffixed names.
 */
type NonSuffixedTrafficUserSettingTypes = Pick<TrafficUserSettingTypes, NonSuffixedTrafficUserSettingNames>;
/**
 * Aliased G3X Touch traffic user settings with G3X-suffixed names.
 */
type SuffixedTrafficUserSettingTypes = Omit<TrafficUserSettingTypes, NonSuffixedTrafficUserSettingNames>;
/**
 * True G3X Touch traffic user settings.
 */
type G3XTrafficTrueUserSettingTypes = NonSuffixedTrafficUserSettingTypes & {
    [P in keyof SuffixedTrafficUserSettingTypes as `${P}_g3x`]: SuffixedTrafficUserSettingTypes[P];
};
/**
 * Utility class for retrieving G3X Touch traffic user setting managers.
 */
declare class G3XTrafficUserSettings {
    private static readonly NON_SUFFIXED_NAMES;
    private static INSTANCE;
    /**
     * Gets an instance of the traffic user settings manager.
     * @param bus The event bus.
     * @returns An instance of the traffic user settings manager.
     */
    static getManager(bus: EventBus): UserSettingManager<TrafficUserSettingTypes>;
    /**
     * Gets the default values for a full set of aliased traffic user settings.
     * @returns The default values for a full set of aliased traffic user settings.
     */
    private static getDefaultValues;
    /**
     * Gets an array of definitions for true traffic user settings.
     * @returns An array of definitions for true traffic user settings.
     */
    private static getSettingDefs;
    /**
     * Gets a setting name alias mapping from aliased to true traffic settings.
     * @returns A setting name alias mapping from aliased to true traffic settings.
     */
    private static getAliasMap;
}

/** The user settings for the COM frequencies. */
type ComFrequencyUserSettingTypes = {
    /** The name and frequency of the radio station, separated by ';'. */
    frequencyComRecent: string;
    /** The name and frequency of the radio station, separated by ';'. */
    frequencyComUser: string;
};
/** The user settings for the NAV frequencies. */
type NavFrequencyUserSettingTypes = {
    /** The name and frequency of the radio station, separated by ';'. */
    frequencyNavRecent: string;
    /** The name and frequency of the radio station, separated by ';'. */
    frequencyNavUser: string;
};
/** The user settings for the saved frequencies. */
type SavedFrequencyUserSettingTypes = ComFrequencyUserSettingTypes & NavFrequencyUserSettingTypes;
/** Valid index types for saved frequencies. */
type SavedFrequencyIndex = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
/** The user settings for the saved frequencies, indexed by {@link SavedFrequencyIndex}. */
type SavedFrequencyIndexedUserSettingTypes<Index extends SavedFrequencyIndex> = {
    [Name in keyof SavedFrequencyUserSettingTypes as `${Name}_${Index}_g3x`]: SavedFrequencyUserSettingTypes[Name];
};
/** The user settings for the saved frequencies, indexed by {@link SavedFrequencyIndex}. */
type SavedFrequencyAllUserSettingTypes = SavedFrequencyIndexedUserSettingTypes<SavedFrequencyIndex>;
/**
 * A user setting manager for saved frequencies.
 */
declare class SavedFrequenciesUserSettingsManager implements UserSettingManager<SavedFrequencyAllUserSettingTypes> {
    private readonly manager;
    /**
     * Creates a new instance of SavedFrequenciesUserSettingsManager.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /** @inheritDoc */
    tryGetSetting<K extends string>(name: K): K extends keyof SavedFrequencyAllUserSettingTypes ? UserSetting<SavedFrequencyAllUserSettingTypes[K]> : undefined;
    /** @inheritDoc */
    getSetting<K extends keyof SavedFrequencyAllUserSettingTypes & string>(name: K): UserSetting<NonNullable<SavedFrequencyAllUserSettingTypes[K]>>;
    /** @inheritDoc */
    whenSettingChanged<K extends keyof SavedFrequencyAllUserSettingTypes & string>(name: K): Consumer<NonNullable<SavedFrequencyAllUserSettingTypes[K]>>;
    /** @inheritdoc */
    getAllSettings(): UserSetting<UserSettingValue>[];
    /** @inheritDoc */
    mapTo<M extends UserSettingRecord>(map: UserSettingMap<M, SavedFrequencyAllUserSettingTypes>): UserSettingManager<M & SavedFrequencyAllUserSettingTypes>;
    /**
     * Gets a manager for Saved Frequency user settings.
     * @returns A manager for Saved Frequency user settings.
     */
    getManager(): DefaultUserSettingManager<SavedFrequencyAllUserSettingTypes>;
    /**
     * Gets an array of definitions for true Saved Frequency settings for a single saved frequency slot.
     * @param index The index of the saved frequency slot.
     * @returns An array of definitions for true Saved Frequency settings for the specified saved frequency slot.
     */
    private static getIndexedSettingDefs;
    /**
     * Gets the default values for a full set of aliased indexed Saved Frequency settings.
     * @returns The default values for a full set of aliased indexed Saved Frequency settings.
     */
    private static getIndexedDefaultValues;
}

/** A manager for saved nav com frequencies. */
declare class SavedNavComFrequencyManager {
    private readonly bus;
    private readonly savedFrequencySettingManager;
    private readonly radiosConfig;
    private readonly publisher;
    private readonly MAXIMUM_FREQUENCY_SLOTS;
    private readonly facilityTypeMap;
    private readonly _recentComFrequencies;
    private readonly _userComFrequencies;
    private readonly _recentNavFrequencies;
    private readonly _userNavFrequencies;
    private readonly navComControlSub;
    private readonly navComSub;
    private readonly comRadioMap;
    private readonly navRadioMap;
    private readonly pausableSubscriptions;
    private isInit;
    private isAlive;
    private isPaused;
    /**
     * Creates a new instance of SavedNavComFrequencyManager.
     * @param bus The event bus.
     * @param savedFrequencySettingManager The user settings manager.
     * @param radiosConfig The radios config.
     * @param publisher The G3X NavCom control event publisher.
     */
    constructor(bus: EventBus, savedFrequencySettingManager: SavedFrequenciesUserSettingsManager, radiosConfig: RadiosConfig, publisher: G3XNavComControlPublisher);
    /**
     * Initializes the manager.
     * @param paused Whether the manager is paused.
     * @throws Error if the manager is dead.
     */
    init(paused?: boolean): void;
    /**
     * Initializes the recent and user-defined COM and NAV frequencies from the user settings.
     */
    private initFromUserSettings;
    /**
     * Initializes the COM radios.
     */
    private initComRadios;
    /**
     * Initializes the NAV radios.
     */
    private initNavRadios;
    /**
     * Initializes publishing the changed frequency arrays.
     */
    private initArrayUpdates;
    /**
     * Finds the index of a frequency in the list of recently used COM/NAV frequencies.
     * @param frequency The frequency, in MHz.
     * @param recentFrequencies The list of recently used COM/NAV frequencies.
     * @returns The index of the frequency, or `-1` if the frequency is not in the list.
     */
    private findRecentFrequencyIndex;
    /**
     * Inserts a frequency into the list of recently used COM/NAV frequencies.
     * @param frequency The frequency, in MHz.
     * @param name The name of the facility.
     * @param type The type of radio. Either `'com'` or `'nav'`.
     */
    private insertRecentFrequency;
    /**
     * Inserts a frequency into the list of user-defined COM/NAV frequencies.
     * @param frequency The frequency, in MHz.
     * @param name The name of the facility.
     * @param type The type of radio. Either `'com'` or `'nav'`.
     * @private
     */
    private insertUserFrequency;
    /**
     * Handles the "add_saved_frequency" event by adding the frequency to the proper array.
     * @param event The "add_saved_frequency" event.
     */
    private handleAddSavedFrequency;
    /**
     * Handles the "remove_saved_frequency" event by removing the frequency from the array.
     * @param event The "remove_saved_frequency" event.
     */
    private handleRemoveSavedFrequency;
    /**
     * Updates the user settings for recent COM frequencies.
     */
    private updateComRecentFrequencySettings;
    /**
     * Updates the user settings for user COM frequencies.
     */
    private updateComUserFrequencySettings;
    /**
     * Updates the user settings for recent NAV frequencies.
     */
    private updateNavRecentFrequencySettings;
    /**
     * Updates the user settings for user NAV frequencies.
     */
    private updateNavUserFrequencySettings;
    /**
     * Parses a frequency from a user setting, if data is present in the setting.
     * @param setting The user setting.
     * @returns The parsed frequency, or `null` if no data was present in the setting.
     */
    private parseFrequencyFromUserSetting;
    /**
     * Gets the name of a COM radio facility.
     * @param radio The radio data
     * @returns The name of the facility, or null if the facility is not a known station in the area.
     */
    private getComFacilityName;
    /**
     * Gets the name of a NAV radio facility.
     * @param radio The radio data.
     * @returns The name of the facility, or null if the facility is not a known station in the area.
     */
    private getNavFacilityName;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this manager. Once paused, this manager will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Resumes this manager. Once resumed, this manager will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * An external navigator definition for {@link ActiveNavSourceManager}.
 */
type ActiveNavSourceManagerExternalNavigatorDefinition = {
    /** Whether NAV radio data can be received from the external navigator. */
    supportNav: boolean;
    /** Whether GPS navigation data can be received from the external navigator. */
    supportGps: boolean;
    /** The ID of the CDI used by the external navigator. */
    cdiId?: string;
};
/**
 * Configuration options for {@link ActiveNavSourceManager}.
 */
type ActiveNavSourceManagerOptions = {
    /**
     * Whether to keep the active navigation source synchronized with the sim's `GPS DRIVES NAV1` and
     * `AUTOPILOT NAV SELECTED` SimVars.
     */
    syncWithSim: boolean;
    /** Whether to allow the active navigation source to be set using key events. */
    setFromKeyEvents: boolean;
};
/**
 * A manager for the active navigation source. Changes the active navigation source in response to control events and
 * keeps various data in sync with the active nav source.
 */
declare class ActiveNavSourceManager {
    private readonly bus;
    private readonly publisher;
    private readonly syncWithSim;
    private readonly setFromKeyEvents;
    private readonly externalNavigatorEntries;
    private readonly fplSourceSetting;
    private keyEventManager?;
    private keyEventManagerReadyPromiseResolve;
    private keyEventManagerReadyPromiseReject;
    private readonly keyEventManagerReadyPromise;
    private activeNavigatorIndex;
    private activeNavigatorIsGps;
    private fplSourceSettingSub?;
    private srcSetSub?;
    private srcSwitchSub?;
    private isAlive;
    private isInit;
    private keyEventSub?;
    /**
     * Creates a new instance of ActiveNavSourceManager.
     * @param bus The event bus.
     * @param externalNavigatorDefs Definitions describing external navigators, indexed by external navigator index.
     * @param options Options with which to configure the manager.
     */
    constructor(bus: EventBus, externalNavigatorDefs: readonly (Readonly<ActiveNavSourceManagerExternalNavigatorDefinition> | undefined)[], options: Readonly<ActiveNavSourceManagerOptions>);
    /**
     * Creates an entry for an external navigator from a definition.
     * @param def The external navigator definition from which to create an entry.
     * @param index The index of the external navigator.
     * @returns An entry for the external navigator described by the specified definition, or `undefined` if an entry
     * could not be created.
     */
    private createExternalNavigatorEntry;
    /**
     * Waits for this manager's key event manager to be ready.
     * @returns A Promise which will be fulfilled when this manager's key event manager is ready, or rejected if this
     * manager is destroyed before then.
     */
    private awaitKeyEventManagerReady;
    /**
     * Initializes this manager. Once this manager is initialized, it will manage the active navigation source in
     * response to control events and keep various data in sync with the active nav source.
     * @throws Error if this manager has been destroyed.
     */
    init(): Promise<void>;
    /**
     * Initializes the active navigation source.
     */
    private initSource;
    /**
     * Responds to when the flight plan source setting value changes.
     * @param setting The new setting value.
     */
    private onFplSourceSettingChanged;
    /**
     * Responds to when a key event is intercepted.
     * @param data The data for the intercepted key event.
     */
    private onKeyIntercepted;
    /**
     * Sets the active navigation source to the internal GPS navigator.
     */
    private setNavigationSourceToInternal;
    /**
     * Sets the active navigation source to an external navigator.
     * @param entry The entry describing the external navigator to which to set the active navigation source.
     * @param forceFplSourceToInternal Whether to force the flight plan source to the internal flight plan. If `true`,
     * then the active navigation source will be set the external navigator's NAV radio navigation source. If `false`,
     * then the active navigation source will be set according to the external navigator's CDI source selection.
     */
    private setNavigationSourceToExternal;
    /**
     * Responds to when the GPS state of an external navigator changes.
     * @param index The index of the external navigator whose GPS state changed.
     */
    private onExternalGpsStateChanged;
    /**
     * Publishes an active navigator index.
     * @param index The index to publish.
     */
    private publishActiveNavigatorIndex;
    /**
     * Publishes an active flight plan source.
     * @param source The source to publish.
     */
    private publishFplSource;
    /**
     * Publishes an active navigation source.
     * @param source The source to publish.
     */
    private publishActiveNavSource;
    /**
     * Switches the active navigator.
     */
    private switchActiveNavigator;
    /**
     * Destroys this manager.
     */
    destroy(): void;
}

/**
 * A manager that automatically slews a selected CDI course setting for a navigation radio to the localizer course when
 * a localizer is tuned and received.
 */
declare class CdiAutoSlewManager {
    private readonly navSource;
    /**
     * Creates a new instance of CdiAutoSlewManager.
     * @param navSource The navigation reference source associated with the navigation radio to manage.
     */
    constructor(navSource: NavReferenceSource<any>);
    /**
     * Attempts to slew the selected CDI course to the course of the tuned localizer, if one exists.
     */
    private trySlewObs;
}

/**
 * Active navigation sources for the G3X Touch.
 */
declare enum G3XActiveNavSource {
    Nav1 = 0,
    Nav2 = 1,
    GpsInternal = 2,
    Gps1 = 3,
    Gps2 = 4
}
/**
 * SimVar names for G3X Touch navigation data.
 */
declare enum G3XNavVars {
    /** The active navigation source for the G3X Touch. */
    ActiveNavSource = "L:WTG3X_Nav_Active_Nav_Source",
    /**
     * The index of the active navigator for the G3X Touch. Index 0 refers to the internal GPS navigator, and indexes 1
     * and 2 refer to external navigators.
     */
    ActiveNavigatorIndex = "L:WTG3X_Nav_Active_Navigator_Index"
}
/**
 * G3X Touch events related to navigation.
 */
interface G3XNavEvents {
    /** The active navigation source for the G3X Touch. */
    g3x_active_nav_source: G3XActiveNavSource;
    /**
     * The index of the active navigator for the G3X Touch. Index 0 refers to the internal GPS navigator, and indexes 1
     * and 2 refer to external navigators.
     */
    g3x_active_navigator_index: 0 | G3XExternalNavigatorIndex;
}
/**
 * A publisher for G3X Touch navigation SimVar events.
 */
declare class G3XNavSimVarPublisher extends SimVarPublisher<G3XNavEvents> {
    private static readonly simvars;
    /**
     * Creates a new instance of G3XNavSimVarPublisher.
     * @param bus The event bus to which to publish.
     * @param pacer An optional pacer to control the rate of publishing.
     */
    constructor(bus: EventBus, pacer?: PublishPacer<G3XNavEvents>);
}

/**
 * A `NavReferenceSource` that tracks the nearest airport to the airplane and provides information on the airport's
 * ident, location, bearing, and distance.
 */
declare class NearestAirportNavSource<NameType extends string> extends AbstractNavReferenceBase implements NavReferenceSource<NameType> {
    readonly name: NameType;
    readonly index: number;
    private readonly fmsPosIndex;
    private readonly fmsPosMode;
    private readonly ppos;
    private readonly magVar;
    private readonly airportSource;
    private readonly airport;
    private readonly airportPos;
    private readonly pposSub;
    /**
     * Creates a new instance of NearestAirportNavSource.
     * @param bus The event bus.
     * @param name The name of this source.
     * @param index The index of this source.
     * @param fmsPosIndex The index of the
     */
    constructor(bus: EventBus, name: NameType, index: number, fmsPosIndex: number | Subscribable<number>);
    /**
     * Initializes nearest airport updates.
     */
    private initNearestAirportUpdates;
    /** @inheritDoc */
    getType(): NavSourceType.Gps;
    /**
     * Responds to when the nearest airport changes.
     * @param airport The new nearest airport facility.
     */
    private onAirportChanged;
    /**
     * Responds to when the airplane's position changes.
     * @param ppos The airplane's new position.
     */
    private onPposChanged;
}

/**
 * A basic implementation of {@link NearestWaypointEntry}.
 */
declare class BasicNearestWaypointEntry<W extends Waypoint> implements NearestWaypointEntry<W> {
    readonly waypoint: W;
    /** @inheritDoc */
    readonly store: WaypointInfoStore;
    private readonly _relativeBearing;
    /** @inheritDoc */
    readonly relativeBearing: Subscribable<number>;
    /**
     * Constructor.
     * @param waypoint This data item's waypoint.
     * @param ppos The current airplane position.
     * @param planeHeading The current true heading of the airplane, in degrees.
     */
    constructor(waypoint: W, ppos: Subscribable<GeoPointInterface>, planeHeading: Subscribable<number>);
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A G3X Touch nearest facilities context. Maintains search subscriptions for the nearest airports, VORs, NDBs,
 * intersections, and user waypoints to the airplane's position.
 */
declare class G3XNearestContext {
    private readonly bus;
    private readonly context;
    private static INSTANCE?;
    private static instancePromiseResolve;
    private static readonly instancePromise;
    /** The nearest airports. */
    readonly airports: NearestSubscription<AirportFacility>;
    /** The nearest VOR stations. */
    readonly vors: NearestSubscription<VorFacility>;
    /** The nearest intersections. */
    readonly intersections: NearestSubscription<IntersectionFacility>;
    /** The nearest NDB stations. */
    readonly ndbs: NearestSubscription<NdbFacility>;
    /** The nearest USR facilities. */
    readonly usrs: NearestSubscription<UserFacility>;
    private readonly _updateEvent;
    /** A subscribable event which fires when this context is updated. */
    readonly updateEvent: ReadonlySubEvent<G3XNearestContext, void>;
    private readonly fmsPosIndex;
    private readonly nearestAirportSettingManager;
    private readonly nearestAirportFilterState;
    private readonly fmsPosMode;
    /**
     * Creates a new instance of G3XNearestContext.
     * @param bus The event bus.
     * @param context This context's child {@link AdaptiveNearestContext}.
     * @param fmsPosIndex The index of the FMS geo-positioning system used by this context to get the airplane's
     * position.
     */
    private constructor();
    /**
     * Initializes the filters on this context's searches.
     */
    private initFilters;
    /**
     * Gets the airport region letter to use for the first character in waypoint inputs.
     * @returns The airport region letter.
     */
    getRegionLetter(): string | undefined;
    /**
     * Gets the nearest facility for a given type.
     * @param facilityType The type of facility.
     * @returns The nearest facility for a given type.
     */
    getNearest<T extends FacilityType>(facilityType: T): FacilityTypeMap[T] | undefined;
    /**
     * Updates this context.
     */
    update(): Promise<void>;
    /**
     * Gets the `G3XNearestContext` instance on the local instrument.
     * @returns A Promise which will be fulfilled with the `G3XNearestContext` instance on the local instrument once it
     * is initialized.
     */
    static getInstance(): Promise<G3XNearestContext>;
    /**
     * Initializes and returns the `G3XNearestContext` instance on the local instrument. If the instance is already
     * initialized, this method returns the instance without performing any other actions.
     * @param facilityLoader A facility loader.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system used by the context to get the airplane's position.
     * @returns The initialized `G3XNearestContext` instance on the local instrument.
     */
    static initializeInstance(facilityLoader: FacilityLoader, bus: EventBus, fmsPosIndex: number | Subscribable<number>): G3XNearestContext;
}

/**
 * Types of facilities associated with nearest waypoints.
 */
type NearestWaypointFacilityType = Extract<FacilityType, FacilityType.Airport | FacilityType.VOR | FacilityType.NDB | FacilityType.Intersection | FacilityType.USR>;
/**
 * A map from nearest facility types to waypoint types.
 */
type NearestFacilityWaypointTypeMap = {
    /** Airports. */
    [FacilityType.Airport]: AirportWaypoint;
    /** VORs. */
    [FacilityType.VOR]: FacilityWaypoint<VorFacility>;
    /** NDBs. */
    [FacilityType.NDB]: FacilityWaypoint<NdbFacility>;
    /** Intersections. */
    [FacilityType.Intersection]: FacilityWaypoint<IntersectionFacility>;
    /** User waypoints. */
    [FacilityType.USR]: FacilityWaypoint<UserFacility>;
};

/**
 * An array of nearest waypoints backed by a nearest facilities subscription. Supports GPS data integrity state so that
 * the array will be empty when no GPS position is available. Also supports pausing and resuming automatic updates
 * from the backing nearest facilities subscription.
 */
declare class NearestFacilityWaypointArray<T extends NearestWaypointFacilityType, EntryType extends NearestWaypointEntry<NearestFacilityWaypointTypeMap[T]> = NearestWaypointEntry<NearestFacilityWaypointTypeMap[T]>> implements SubscribableArray<EntryType> {
    private readonly bus;
    private readonly waypointEntryFactory;
    private readonly isGpsDataFailed;
    private readonly gpsFailClearDelay;
    private readonly facWaypointCache;
    private readonly array;
    /** @inheritDoc */
    get length(): number;
    private readonly gpsFailDebounceTimer;
    private nearestSubscription?;
    private nearestFacilitiesSub?;
    private isGpsDataFailedSub?;
    private isAlive;
    private isInit;
    private isPaused;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param waypointEntryFactory A function which creates nearest waypoint entries for this array.
     * @param isGpsDataFailed Whether GPS data is in a failed state.
     * @param gpsFailClearDelay The delay, in milliseconds, after GPS data enters a failed state before this array is
     * cleared of all waypoints.
     */
    constructor(bus: EventBus, waypointEntryFactory: (waypoint: NearestFacilityWaypointTypeMap[T]) => EntryType, isGpsDataFailed: Subscribable<boolean>, gpsFailClearDelay: number);
    /**
     * Initializes this array.
     * @param nearestSubscription The nearest facility subscription that will provide this array's nearest waypoint data.
     * @param paused Whether the array should be paused when initialized.
     * @throws Error if this array has been destroyed.
     */
    init(nearestSubscription: NearestSubscription<FacilityTypeMap[T]>, paused?: boolean): void;
    /**
     * Resumes this array. Once resumed, this array will automatically update its contents until it is paused or
     * destroyed.
     * @throws Error if this array has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this array. Once paused, this array's contents will no longer automatically update until it is resumed.
     * @throws Error if this array has been destroyed.
     */
    pause(): void;
    /** @inheritDoc */
    get(index: number): EntryType;
    /** @inheritDoc */
    tryGet(index: number): EntryType | undefined;
    /** @inheritDoc */
    getArray(): readonly EntryType[];
    /** @inheritDoc */
    sub(handler: SubscribableArrayHandler<EntryType>, initialNotify?: boolean | undefined, paused?: boolean | undefined): Subscription;
    /**
     * Inserts an entry for a facility into this array. The entry will not be inserted if the facility is already
     * represented in this array.
     * @param facility The facility for which to insert an entry.
     */
    private insertEntryForFacility;
    /**
     * Removes an entry for a facility from this array.
     * @param facility The facility for which to remove an entry.
     * @returns The entry that was removed, or `undefined` if the specified facility is not represented in this array.
     */
    private removeEntryForFacility;
    /**
     * Reconciles this array with the array provided by its nearest facilities subscription.
     * @param facilityArray The array provided by this arrya's nearest facilities subscription.
     */
    private reconcileArray;
    /**
     * Clears this page's nearest waypoint data item array.
     */
    private clearArray;
    /**
     * Destroys this array. Once this array is destroyed, it will be emptied and will no longer automatically update
     * its contents and cannot be paused or resumed.
     */
    destroy(): void;
}

/** NAV radios */
type NavRadio = 'NAV1' | 'NAV2';
/** COM radios. */
type ComRadio = 'COM1' | 'COM2';

/**
 * A utility class for working with G3X radios.
 */
declare class G3XRadioUtils {
    /**
     * Sets the transmitting COM radio.
     * @param radioSimIndex The sim index of the radio to set as transmitting.
     * @returns A Promise which is fulfilled when the command to set the transmitting radio has been sent.
     */
    static setTransmittingComIndex(radioSimIndex: ComRadioIndex): Promise<void>;
    /**
     * Sets the receiving state of a COM radio.
     * @param radioSimIndex The sim index of the radio to set the receiving state of.
     * @param receive The receiving state to set.
     * @returns A Promise which is fulfilled when the command to set the receiving state has been sent.
     */
    static setComRadioReceiveState(radioSimIndex: ComRadioIndex, receive: boolean): Promise<void>;
    /**
     * Sets the receiving ident audio from a NAV radio.
     * @param radioSimIndex - The simulation index of the radio.
     * @param receive - The receiving state to set.
     * @returns - A Promise which is fulfilled when the command to set the receiving state has been sent.
     */
    static setNavRadioIdentReceiveState(radioSimIndex: NavRadioIndex, receive: boolean): Promise<void>;
    /**
     * Sets the marker beacon enabled or disabled.
     * @returns A Promise which is fulfilled when the command to set marker beacon sound state has been sent.
     */
    static setMarkerBeaconSoundState(): Promise<void>;
}

/**
 * A manager that tracks whether reversionary mode should be active for a GDU.
 */
declare class ReversionaryModeManager {
    private readonly bus;
    private readonly gduIndex;
    private static readonly DEBOUNCE_DELAY;
    private readonly pairedGduDef;
    private readonly debounceTimer;
    private isReversionaryModeArmed;
    private readonly setReversionaryModeFunc;
    private readonly _isReversionaryMode;
    /** Whether reversionary mode should be active. */
    readonly isReversionaryMode: Subscribable<boolean>;
    private isAlive;
    private isActive;
    private readonly pairedStatusSub?;
    /**
     * Creates a new instance of ReversionaryModeManager.
     * @param bus The event bus.
     * @param config The general avionics configuration object.
     * @param gduIndex The index of this manager's parent GDU.
     */
    constructor(bus: EventBus, config: AvionicsConfig, gduIndex: number);
    /**
     * Activates this manager. While activated, this manager will automatically keep track of whether reversionary mode
     * should be active for its parent GDU.
     * @throws Error if this manager has been destroyed.
     */
    activate(): void;
    /**
     * Deactivates this manager. While deactivated, this manager will not automatically keep track of whether reversionary mode
     * should be active for its parent GDU, and the value of the `this.isReversionaryMode` subscribable is set to `false`.
     * @throws Error if this manager has been destroyed.
     */
    deactivate(): void;
    /**
     * Responds to when the avionics status of this manager's paired GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onPairedGduStatusChanged;
    /**
     * Sets this manager to request that reversionary mode should be active if reversionary mode is armed.
     */
    private setReversionaryMode;
    /**
     * Destroys this manager. After this manager is destroyed, it will no longer keep track of whether reversionary mode
     * should be active and can no longer be activated or deactivated.
     */
    destroy(): void;
}

/**
 * Events related to G3X Touch transponders.
 */
interface G3XTransponderEvents {
    /** Whether a G3X Touch-connected transponder has determined the airplane is on the ground. */
    [g3x_xpdr_on_ground: `g3x_xpdr_on_ground_${number}`]: boolean;
}

/**
 * A manager that automatically switches a transponder from STBY to ALT mode in response to on-ground to in-air
 * transitions.
 */
declare class TransponderAutoAirborneManager {
    private readonly bus;
    private readonly publisher;
    private readonly xpdrMode;
    private armedMode;
    private isAlive;
    private isInit;
    private isOnGroundSub?;
    /**
     * Creates a new instance of TransponderAutoAirborneManager. The new manager is created in an un-initialized state.
     * @param bus The event bus.
     */
    constructor(bus: EventBus);
    /**
     * Initializes this manager. Once initialized, the manager will automatically switch transponder mode from STBY to
     * ALT in response to on-ground to in-air transitions.
     * @throws Error if this manager has been destroyed.
     */
    init(): void;
    /**
     * Responds to when whether the airplane is on the ground changes.
     * @param isOnGround Whether the airplane is on the ground.
     */
    private onIsOnGroundChanged;
    /**
     * Destroys this manager. Once destroyed, the manager will no longer automatically switch transponder modes.
     */
    destroy(): void;
}

/**
 * Configuration options for {@link TransponderAutoGroundAltManager}.
 */
type TransponderAutoGroundAltManagerOptions = {
    /**
     * Whether to strictly enforce the GROUND/ALT mode state of the transponder. If `true`, then the transponder will not
     * allowed to be in GROUND mode when in the air or in ALT mode when on the ground. If `false`, then the transponder
     * will switch from GROUND to ALT mode when a on-ground to in-air transition is detected and from ALT to GROUND when
     * the opposite transition is detected, but it is otherwise free to be in GROUND or ALT mode regardless of whether
     * the airplane is on the ground. Defaults to `false`.
     */
    enforceModes?: boolean;
};
/**
 * A manager that automatically switches a transponder between GROUND and ALT modes in response to on-ground/in-air
 * transitions.
 */
declare class TransponderAutoGroundAltManager {
    private readonly bus;
    private readonly publisher;
    private readonly enforceModes;
    private readonly isOnGround;
    private readonly xpdrMode;
    private armedMode;
    private isAlive;
    private isInit;
    /**
     * Creates a new instance of TransponderAutoGroundManager. The new manager is created in an un-initialized state.
     * @param bus The event bus.
     * @param options Options with which to configure the manager.
     */
    constructor(bus: EventBus, options?: Readonly<TransponderAutoGroundAltManagerOptions>);
    /**
     * Initializes this manager. Once initialized, the manager will automatically switch transponder modes between GROUND
     * and ALT.
     * @throws Error if this manager has been destroyed.
     */
    init(): void;
    /**
     * Responds to when whether the airplane is on the ground changes.
     * @param isOnGround Whether the airplane is on the ground.
     */
    private publishOnGround;
    /**
     * Attempts to switch the transponder mode to GROUND or ALT in response to a transition between on-ground/in-air.
     * @param isOnGround Whether the airplane is on the ground.
     */
    private tryAutoSwitch;
    /**
     * Enforces the correct transponder GROUND/ALT mode state. If the current transponder mode is GROUND and the airplane
     * is in the air, then the transponder mode will be changed to ALT. If the current transponder mode is ALT and the
     * airplane is on the ground, then the transponder mode will be changed to GROUND.
     */
    private doEnforceModes;
    /**
     * Destroys this manager. Once destroyed, the manager will no longer automatically switch transponder modes.
     */
    destroy(): void;
}

/**
 * A UI view which allows the user to control the user timer.
 */
declare class UserTimerView extends AbstractUiView {
    private thisNode?;
    private readonly pub;
    private readonly timerValue;
    private readonly isTimerRunning;
    /** @inheritDoc */
    onAfterRender(thisNode?: VNode): void;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /** Starts user timer if currently stopped, stops if currently running */
    private toggleTimer;
    /** Stops and resets user timer */
    private resetTimer;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A configuration object which defines a reference V-speed.
 */
declare class VSpeedConfig implements ResolvableConfig<VSpeedDefinition> {
    readonly isResolvableConfig = true;
    /** The name of this config's reference V-speed. */
    readonly name: string;
    /** The default value of this config's reference V-speed. */
    readonly defaultValue: number | VSpeedValueKey;
    /**
     * Creates a new VSpeedConfig from a configuration document element.
     * @param element A configuration document element.
     */
    constructor(element: Element);
    /** @inheritdoc */
    resolve(): VSpeedDefinition;
}

/**
 * Utility class defining virtual file system paths for the G3X Touch.
 */
declare class G3XTouchFilePaths {
    /** The virtual file system path to the assets directory. */
    static readonly ASSETS_PATH = "coui://html_ui/Pages/VCockpit/Instruments/NavSystems/G3XTouchv2/Assets";
}

/**
 * Sources of settings to be managed by {@link G3XLocalUserSettingSaveManager}.
 */
type G3XLocalUserSettingSaveManagerSources = {
    /** A manager for backlight user settings. */
    backlightSettingManager: UserSettingManager<BacklightUserSettingTypes>;
    /** A manager for CNS data bar user settings. */
    cnsDataBarSettingManager: UserSettingManager<CnsDataBarUserSettingTypes>;
    /** A manager for map user settings. */
    mapSettingManager: UserSettingManager<G3XMapTrueUserSettingTypes>;
    /** A manager for flight plan display user settings. */
    fplDisplaySettingManager: UserSettingManager<FplDisplayUserSettingTypes>;
    /** Additional settings to manage defined by plugins. */
    pluginSettings: Iterable<UserSetting<any>>;
};
/**
 * A manager for instrument-local G3X Touch user settings that are saved and persistent across flight sessions.
 */
declare class G3XLocalUserSettingSaveManager extends UserSettingSaveManager {
    private static readonly BACKLIGHT_SETTINGS;
    private static readonly MAP_EXCLUDED_SETTINGS;
    /**
     * Creates a new instance of G3XLocalUserSettingSaveManager.
     * @param bus The event bus.
     * @param sources Sources of settings to be managed.
     */
    constructor(bus: EventBus, sources: Readonly<G3XLocalUserSettingSaveManagerSources>);
}

/**
 * A common instrument for the G3X Touch.
 */
declare abstract class G3XTouchFsInstrument implements FsInstrument {
    readonly instrument: BaseInstrument;
    protected readonly isPrimary: boolean;
    protected readonly gduDisplay: _microsoft_msfs_sdk.NodeReference<GduDisplay<GduDisplayProps>>;
    protected readonly bus: EventBus;
    protected readonly xmlLogicHost: CompositeLogicXMLHost;
    protected readonly casSystem: CasSystem;
    protected readonly config: AvionicsConfig;
    protected readonly instrumentConfig: InstrumentConfig;
    protected readonly gduIndex: number;
    private isInstrumentPowered;
    private isPowerValid;
    protected isPowered: boolean | undefined;
    private readonly bootTimer;
    protected readonly facRepo: FacilityRepository;
    protected readonly facLoader: FacilityLoader;
    protected readonly hEventPublisher: HEventPublisher;
    protected readonly flightPathCalculator: FlightPathCalculator;
    protected readonly flightPlanner: FlightPlanner<"g3x">;
    protected readonly speedConstraintStore: GarminSpeedConstraintStore;
    protected readonly externalFlightPathCalculators: Map<string, FlightPathCalculator>;
    protected readonly externalFlightPlanners: Map<string, FlightPlanner<any>>;
    protected readonly fms: G3XFms;
    protected readonly fplSourceDataProvider: DefaultG3XFplSourceDataProvider;
    protected readonly avionicsStatusClient: AvionicsStatusClient;
    protected readonly avionicsStatusEventClient: AvionicsStatusEventClient;
    protected readonly avionicsStatusSimVar: string;
    protected readonly reversionaryModeManager: ReversionaryModeManager;
    protected readonly reversionaryModeSub: _microsoft_msfs_sdk.Subscription;
    protected readonly backplane: InstrumentBackplane;
    protected readonly clock: Clock;
    protected readonly baseInstrumentPublisher: BaseInstrumentPublisher;
    protected readonly ambientPublisher: AmbientPublisher;
    protected readonly accelerometerPublisher: AccelerometerPublisher;
    protected readonly adcPublisher: AdcPublisher;
    protected readonly ahrsPublisher: AhrsPublisher;
    protected readonly gnssPublisher: GNSSPublisher;
    protected readonly g3xNavPublisher: G3XNavSimVarPublisher;
    protected readonly lNavObsPublisher: LNavObsSimVarPublisher;
    protected readonly vNavPublisher: VNavSimVarPublisher;
    protected readonly navComSimVarPublisher: NavComSimVarPublisher;
    protected readonly garminAutopilotPublisher: GarminAPSimVarPublisher;
    protected readonly minimumsPublisher: MinimumsSimVarPublisher;
    protected readonly navEventsPublisher: NavEventsPublisher;
    protected readonly eisPublisher: EISPublisher;
    protected readonly controlSurfacesPublisher: ControlSurfacesPublisher;
    protected readonly timerPublisher: FlightTimerPublisher<any>;
    protected readonly fuelTotalizerPublisher: FuelTotalizerSimVarPublisher;
    protected readonly navComControlPublisher: G3XNavComControlPublisher;
    protected readonly backlightPublisher: G3XBacklightPublisher;
    protected readonly apInstrument: AutopilotInstrument;
    protected readonly trafficInstrument: TrafficInstrument;
    protected readonly trafficAvionicsSystem: _microsoft_msfs_garminsdk.TrafficAvionicsSystem<_microsoft_msfs_garminsdk.TrafficSystem> | null;
    protected readonly trafficSystem: _microsoft_msfs_garminsdk.TrafficSystem | null;
    protected readonly systems: AvionicsSystem[];
    protected readonly navSources: G3XTouchNavSources;
    protected readonly navIndicators: G3XTouchNavIndicators;
    protected readonly gduSettingManager: GduUserSettingManager;
    protected readonly displaySettingManager: DisplayUserSettingManager;
    protected readonly pfdSettingManager: PfdUserSettingManager;
    protected readonly vSpeedSettingManager: VSpeedUserSettingManager;
    protected readonly gduAliasedSettingManager: _microsoft_msfs_sdk.UserSettingManager<GduUserSettingTypes>;
    protected readonly displayAliasedSettingManager: _microsoft_msfs_sdk.UserSettingManager<DisplayUserSettingTypes>;
    protected readonly pfdAliasedSettingManager: _microsoft_msfs_sdk.UserSettingManager<PfdUserSettingTypes>;
    protected readonly savedFrequenciesSettingManager: SavedFrequenciesUserSettingsManager;
    protected readonly gpsIntegrityDataProvider: DefaultGpsIntegrityDataProvider;
    protected readonly minimumsDataProvider: DefaultMinimumsDataProvider;
    protected readonly gpsSatComputers: GPSSatComputer[];
    protected readonly gpsReceiverSelectors: GpsReceiverSelector[];
    protected readonly windDataProvider: DefaultWindDataProvider;
    protected readonly vnavDataProvider: DefaultVNavDataProvider;
    protected readonly posHeadingDataProvider: DefaultPositionHeadingDataProvider;
    protected readonly comRadioSpacingDataProvider: DefaultComRadioSpacingDataProvider;
    protected readonly navComSavedFrequenciesProvider: DefaultRadioSavedFrequenciesDataProvider;
    protected readonly activeFlightPlanStore: ActiveFlightPlanStore;
    protected readonly casPowerStateManager: CasPowerStateManager;
    protected readonly navDataFieldGpsValidity: _microsoft_msfs_sdk.MappedSubscribable<NavDataFieldGpsValidity>;
    protected readonly navDataBarFieldModelFactory: G3XNavDataBarFieldModelFactory;
    protected readonly navDataBarFieldRenderer: G3XNavDataBarFieldRenderer;
    protected readonly navDataBarEditController: G3XNavDataBarEditController;
    protected readonly mapTerrainWxSettingCompatManager: G3XMapTerrainWxSettingCompatManager;
    protected readonly autoBacklightManager: G3XAutoBacklightManager;
    protected readonly backlightManager: G3XBacklightManager;
    protected readonly isPane1Visible: Subject<boolean>;
    protected readonly isPane2Visible: Subject<boolean>;
    protected readonly uiService: UiService;
    protected readonly mfdMainPageRegistrar: MfdMainPageRegistrar;
    protected readonly pfdPageRegistrar: PfdPageRegistrar;
    protected readonly pfdInsetRegistrar: PfdInsetRegistrar;
    protected readonly pluginSystem: PluginSystem<G3XTouchPlugin, G3XTouchPluginBinder>;
    protected localSettingSaveManager?: G3XLocalUserSettingSaveManager;
    /** Whether this instrument has started updating. */
    protected haveUpdatesStarted: boolean;
    /**
     * Creates a new instance of G3XTouchFsInstrument.
     * @param instrument This instrument's parent BaseInstrument.
     * @param isPrimary Whether this instrument is the primary instrument.
     * @throws Error
     */
    constructor(instrument: BaseInstrument, isPrimary: boolean);
    /**
     * Creates a set of external flight plan source options from a configuration object.
     * @param config The configuration object that defines the external flight plan source for which to create options.
     * @returns A set of external flight plan source options defined by the specified configuration object.
     */
    protected createExternalFplSourceOptions(config: FmsExternalFplSourceConfig | undefined): G3XFmsExternalFplSourceOptions | undefined;
    /**
     * Creates this instrument's avionics systems.
     */
    protected createSystems(): void;
    /**
     * Initializes this instrument's plugins.
     */
    protected initPlugins(): Promise<void>;
    /**
     * Initializes persistent settings. Loads saved settings and starts auto-save. Should be called after plugins have
     * been initialized.
     */
    protected initPersistentSettings(): void;
    /**
     * Initializes persistent global settings. Loads saved settings and starts auto-save.
     * @param pluginSettings Global persistent settings defined by plugins.
     */
    protected initGlobalPersistentSettings(pluginSettings: Iterable<UserSetting<any>>): void;
    /**
     * Initializes persistent instrument-local settings. Loads saved settings and starts auto-save.
     * @param pluginSettings Instrument-local persistent settings defined by plugins.
     */
    protected initLocalPersistentSettings(pluginSettings: Iterable<UserSetting<any>>): void;
    /**
     * Initializes this instrument's flight plans.
     */
    protected initFlightPlans(): void;
    protected abstract initInternalFlightPlans(): Promise<void>;
    /**
     * Initializes this instrument's external flight plans.
     */
    protected initExternalFlightPlans(): Promise<void>;
    /**
     * Initializes this instrument's flight plans for a single external flight plan source.
     * @param flightPlanner The flight planner associated with the external flight plan source for which to initialize
     * flight plans.
     */
    protected initExternalFlightPlan(flightPlanner: FlightPlanner): Promise<void>;
    /**
     * Gets the duration, in milliseconds, required for this instrument to boot on power up.
     * @returns The duration, in milliseconds, required for this instrument to boot on power up.
     */
    protected getBoot1Duration(): number;
    /**
     * Gets the duration, in milliseconds, required for this instrument to boot on phase 2.
     * @returns The duration, in milliseconds, required for this instrument to boot on phase 2.
     */
    protected getBoot2Duration(): number;
    /**
     * Registers this instrument's UI views, MFD main pages, and PFD insets. Should be called after plugins have been
     * initialized.
     */
    protected registerUiComponents(): void;
    /**
     * Registers this instrument's UI views. Should be called after plugins have been initialized.
     * @param context References to items used to create the base G3X Touch's UI views.
     */
    protected registerViews(context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers this instrument's MFD main pages. Should be called after plugins have been initialized.
     * @param context References to items used to create the base G3X Touch's MFD main pages.
     */
    protected registerMfdMainPages(context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers this instrument's PFD pages. Should be called after plugins have been initialized.
     * @param context References to items used to create the base G3X Touch's PFD pages.
     */
    protected registerPfdPages(context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers this instrument's PFD instruments view page.
     * @param context References to items used to create the base G3X Touch's PFD pages.
     */
    protected registerPfdInstrumentsPage(context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Registers this instrument's PFD insets. Should be called after plugins have been initialized.
     * @param context References to items used to create the base G3X Touch's PFD insets.
     */
    protected registerPfdInsets(context: Readonly<G3XTouchUiComponentContext>): void;
    /**
     * Initializes this instrument's nearest context.
     */
    protected initNearestContext(): Promise<void>;
    /**
     * Initializes this instrument's avionics status listener. Once intialized, the listener will call this instrument's
     * `onAvionicsStatusChanged()` method as appropriate.
     */
    protected initAvionicsStatusListener(): void;
    /**
     * Renders this instrument's display components. Should be called after plugins have been initialized.
     * @returns This instrument's rendered display components, as a VNode.
     */
    protected renderComponents(): VNode;
    /** @inheritdoc */
    Update(): void;
    /**
     * Updates this instrument's systems.
     */
    protected updateSystems(): void;
    /** @inheritdoc */
    onInteractionEvent(args: string[]): void;
    /** @inheritdoc */
    onFlightStart(): void;
    /** @inheritdoc */
    onGameStateChanged(oldState: GameState, newState: GameState): void;
    /** @inheritdoc */
    onSoundEnd(soundEventId: Name_Z): void;
    /**
     * A callback which is executed when this instrument transitions from a power-off to power-on state.
     */
    onPowerOn(): void;
    /**
     * A callback which is executed when this instrument transitions from a power-on to power-off state.
     */
    onPowerOff(): void;
    /**
     * Responds to when this instrument's power state changes.
     * @param current The current power state.
     * @param previous The previous power state, or `undefined` if the previous state was invalid.
     */
    protected onPowerChanged(current: boolean, previous: boolean | undefined): void;
    /**
     * Responds to when this instrument is finished booting phase 1.
     */
    protected onBoot1Finished(): void;
    /**
     * Responds to when this instrument is finished booting phase 2.
     */
    protected onBoot2Finished(): void;
    /**
     * Responds to when whether reversionary mode should be active changes while this instrument is powered and booted.
     * @param isReversionaryMode Whether reversionary mode should be active.
     */
    protected onIsReversionaryModeChanged(isReversionaryMode: boolean): void;
    /**
     * Responds to when the avionics status of this instrument changes.
     * @param event The event describing the avionics status change.
     */
    protected onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
}

/**
 * A primary instrument for the G3X Touch.
 */
declare class G3XTouchPrimaryFsInstrument extends G3XTouchFsInstrument {
    /** The amount of time between periodic active flight plan calculations, in milliseconds. */
    private static readonly ACTIVE_FLIGHT_PLAN_CALC_PERIOD;
    private static readonly NULL_GPS_STEER_COMMAND;
    private static readonly NULL_VNAV_GUIDANCE;
    private static readonly NULL_VERTICAL_PATH_GUIDANCE;
    private static readonly NULL_GLIDEPATH_GUIDANCE;
    private readonly soundServer2;
    private readonly auralAlertSystem;
    private readonly avionicsStatusManager;
    private readonly obsManager;
    private readonly navComInstrument;
    private readonly apRadioNavInstrument;
    private readonly xpdrInstrument;
    private readonly timerInstrument;
    private readonly fuelTotalizerInstrument;
    private readonly casLegacyAdapter;
    private readonly auralAlertXmlAdapter;
    private readonly auralAlertWarningAdapter;
    private readonly flightPathCalcManager;
    private readonly activeNavSourceManager;
    private readonly cdiAutoSlewManagers;
    private readonly timerManager;
    private readonly lnavComputerDataProvider;
    private readonly lnavMaxBankAngle;
    private readonly lnavComputer;
    private readonly navdataComputer;
    protected readonly savedNavComFrequenciesManager: SavedNavComFrequencyManager;
    private readonly transponderAutoGroundAltManager;
    private readonly transponderAutoAirborneManager;
    private readonly gpsSynchronizer;
    private readonly gpsSteerCommand;
    private readonly vnavGuidance;
    private readonly verticalPathGuidance;
    private readonly glidepathGuidance;
    private readonly apExternalGuidanceProviders;
    private readonly navToNavGuidanceProvider;
    private readonly apConfig;
    private readonly autopilot;
    private readonly apApproachAvailableManager;
    private readonly altSelectManager;
    private readonly minimumsManager;
    private readonly minimumsUnitsManager;
    private globalSettingSaveManager?;
    private readonly flightPlanRouteSyncManager;
    private isPrimaryFlightPlanInit;
    private lastActiveFplCalcTime;
    private avionicsGlobalPowerState;
    /**
     * Creates a new instance of G3XTouchFsInstrument.
     * @param instrument This instrument's parent BaseInstrument.
     */
    constructor(instrument: BaseInstrument);
    /**
     * Creates a new standalone altitude select manager.
     * @returns A new standalone altitude select manager.
     */
    private createStandaloneAltitudeSelectManager;
    /**
     * Performs initialization tasks.
     */
    private doInit;
    /**
     * Performs initialization tasks after a 500-millisecond wait.
     */
    private doDelayedInit;
    /** @inheritDoc */
    protected initGlobalPersistentSettings(pluginSettings: Iterable<UserSetting<any>>): void;
    /**
     * Initializes a listener which records the most recent time the active flight plan was calculated.
     */
    private initActiveFplCalcListener;
    /** @inheritDoc */
    protected initInternalFlightPlans(): Promise<void>;
    /**
     * Initializes the primary flight plan.
     */
    private initPrimaryFlightPlan;
    /**
     * Initializes the state of the autopilot's selected altitude.
     */
    private initSelectedAltitude;
    /**
     * Updates FMS lateral/vertical guidance and the autopilot.
     */
    private updateNavigation;
    /** @inheritdoc */
    Update(): void;
    /** @inheritdoc */
    onSoundEnd(soundEventId: Name_Z): void;
    /**
     * Responds to changes in the avionics global power state.
     * @param event The event describing the change in the avionics global power state.
     */
    private onGlobalPowerChanged;
    /**
     * Resets all flight plans when the avionics are turned off.
     */
    private resetFlightPlansOnPowerOff;
}

/**
 * A secondary instrument for the G3X Touch.
 */
declare class G3XTouchSecondaryFsInstrument extends G3XTouchFsInstrument {
    private readonly xpdrSimVarPublisher;
    /**
     * Creates a new instance of G3XTouchFsInstrument.
     * @param instrument This instrument's parent BaseInstrument.
     */
    constructor(instrument: BaseInstrument);
    /**
     * Performs initialization tasks.
     */
    private doInit;
    /** @inheritDoc */
    protected initInternalFlightPlans(): Promise<void>;
}

/**
 * A request input for {@link UiGenericNumberUnitDialog}.
 */
interface UiGenericNumberUnitDialogInput<T extends string> extends UiNumberDialogInput {
    /**
     * The initial unit. If not defined, the initial unit will default to the dialog's unit type.
     */
    initialUnit?: Unit<T>;
    /** The unit type in which the dialog should operate. */
    unitType: Unit<T>;
    /**
     * The number of digits to the left of the decimal point supported by the dialog's input. If not defined, then the
     * number of digits will default to the minimum number of digits required to accommodate the maximum valid value.
     */
    digitCount?: 2 | 3 | 4 | 5;
    /**
     * The number of digits to the right of the decimal point supported by the dialog's input. Defaults to 1.
     */
    decimalCount?: 0 | 1 | 2;
    /** The minimum valid numeric value allowed by the dialog's input. */
    minimumValue: number;
    /** The maximum valid numeric value allowed by the dialog's input. */
    maximumValue: number;
    /** The title to display with the dialog. Defaults to `'Select Value'`. */
    title?: string;
    /** The label to display for the inner bezel rotary knobs. Defaults to `'Select Value'`. */
    innerKnobLabel?: string;
    /** The label to display for the outer bezel rotary knobs. Defaults to `'Select Value'`. */
    outerKnobLabel?: string;
}
/**
 * A request result returned by {@link UiGenericNumberUnitDialog}.
 */
interface UiGenericNumberUnitDialogOutput<T extends string> {
    /** The selected value. */
    value: number;
    /** The unit type. */
    unit: Unit<T>;
}
/**
 * A definition for a {@link NumberInput} used in a {@link UiGenericNumberUnitDialog}.
 */
interface UiGenericUnitDialogInputDefinition extends UiNumberDialogInputDefinition {
    /** The number of digits to the left of the decimal point supported by this definition's input. */
    readonly digitCount: number;
    /** The number of digits to the right of the decimal point supported by this definition's input. */
    readonly decimalCount: number;
    /**
     * The scaling factor used by this definition's input such that the input's value equals the payload value multiplied
     * by the factor.
     */
    readonly factor: number;
}
/**
 * A dialog which allows the user to enter a value with any unit type and
 * supports inputs with two, three, or four digits to the left of the decimal point and zero, one, or two digits to the
 * right.
 */
declare class UiGenericNumberUnitDialog extends AbstractUiNumberDialog<UiGenericNumberUnitDialogInput<string>, UiGenericNumberUnitDialogOutput<string>, UiGenericUnitDialogInputDefinition> {
    private static readonly UNIT_FORMATTER;
    private readonly validInnerKnobIds;
    private readonly validOuterKnobIds;
    private readonly defaultTitleLabel;
    private readonly defaultInnerKnobLabel;
    private readonly defaultOuterKnobLabel;
    private minValue;
    private maxValue;
    private readonly unitType;
    private readonly unitText;
    /** @inheritDoc */
    constructor(props: UiViewProps);
    /** @inheritDoc */
    request<U extends string>(input: UiGenericNumberUnitDialogInput<U>): Promise<UiDialogResult<UiGenericNumberUnitDialogOutput<U>>>;
    /**
     * Creates an input definition for this dialog.
     * @param digitCount The number of digits to the left of the decimal point supported by the input.
     * @param decimalCount The number of digits to the right of the decimal point supported by the input.
     * @returns An input definition for this dialog with the specified parameters.
     */
    private createInputDefinition;
    /** @inheritDoc */
    protected onRequest(input: UiGenericNumberUnitDialogInput<string>): void;
    /** @inheritDoc */
    protected isValueValid(value: number, activeInputDef: UiGenericUnitDialogInputDefinition): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(value: number, activeInputDef: UiGenericUnitDialogInputDefinition): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number, activeInputDef: UiGenericUnitDialogInputDefinition): UiGenericNumberUnitDialogOutput<string>;
    /** @inheritDoc */
    protected onDecimalPressed(): void;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /**
     * Renders one of this dialog's value inputs.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @param digitCount The number of digits in the input to the left of the decimal point.
     * @param decimalCount The number of digits in the input to the right of the decimal point.
     * @returns A value input with the specified number of digits, as a VNode.
     */
    private renderInput;
}

/**
 * A request input for {@link UiMessageDialog}.
 */
type UiMessageDialogInput = {
    /** The message to display. */
    message: string | VNode;
    /** Whether to show the reject button. */
    showRejectButton: boolean;
    /** The label to display for the accept button. Defaults to `'OK'`. */
    acceptButtonLabel?: string | VNode;
    /** The label to display for the reject button. Defaults to `'Cancel'`. */
    rejectButtonLabel?: string | VNode;
    /** CSS class(es) to apply to the dialog's root element. */
    class?: string;
};
/**
 * A pop-up dialog which allows the user to accept or optionally reject a displayed message.
 */
declare class UiMessageDialog extends AbstractUiView implements UiDialogView<UiMessageDialogInput, boolean> {
    private static readonly RESERVED_CLASSES;
    private readonly contentRef;
    private readonly acceptButtonRef;
    private readonly acceptButtonLabelRef;
    private readonly rejectButtonRef;
    private readonly rejectButtonLabelRef;
    private readonly rootCssClass;
    private readonly isCancelButtonVisible;
    private readonly cleanupDebounceTimer;
    private cssClassesToAdd?;
    private renderedContent?;
    private renderedOkLabel?;
    private renderedCancelLabel?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    request(input: UiMessageDialogInput): Promise<UiDialogResult<boolean>>;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Resolves the pending request Promise if one exists and clears this dialog's message after an optional delay.
     * @param cleanupDelay The amount of time to wait before clearing this dialog's message, in milliseconds. Defaults to
     * `0`.
     */
    private closeRequest;
    /**
     * Clears this dialog's message.
     */
    private cleanupMessage;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link FuelCalculatorTab}.
 */
interface FuelCalculatorTabProps extends TabbedContentProps {
    /** The UI service. */
    uiService: UiService;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /**
     * The first preset fuel amount, in gallons. If not defined, then the button for setting the fuel remaining to the
     * first preset fuel amount will not be visible.
     */
    presetFuel1?: number;
    /**
     * The second preset fuel amount, in gallons. If not defined, then the button for setting the fuel remaining to the
     * second preset fuel amount will not be visible.
     */
    presetFuel2?: number;
}
/**
 * An MFD engine page fuel calculator tab.
 */
declare class FuelCalculatorTab extends AbstractTabbedContent<FuelCalculatorTabProps> {
    private static readonly VALUE_UPDATE_INTERVAL;
    private readonly fuelRemaining;
    private readonly fuelFlow;
    private readonly fuelBurned;
    private readonly isAirspeedDataValid;
    private readonly isTemperatureDataValid;
    private readonly tas;
    private readonly fmsPosMode;
    private readonly groundSpeed;
    private readonly economyWeightPerDistanceVisible;
    private readonly economyDistancePerWeightVisible;
    private readonly endurance;
    private readonly economy;
    private readonly economyWeightPerDistanceUnit;
    private readonly economyDistancePerWeightUnit;
    private readonly noWindRangeUnit;
    private readonly fuelRemainingUnit;
    private readonly fuelUsedUnit;
    private readonly decreaseButtonEnabled;
    private readonly unitsSettingManager;
    private readonly fuelEconomyUnitsDistancePerWeight;
    private readonly fuelEconomyUnitsWeightPerDistance;
    private lastValueUpdateTime;
    private readonly subscriptions;
    private readonly pauseable;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /**
     * Updates this tab's computed values.
     */
    private updateValues;
    /**
     * Updates the display of this tab's calculated fuel economy value.
     * @param economyUnit The unit in which to display the fuel economy value.
     */
    private updateEconomyDisplay;
    /**
     * Publishes a fuel totalizer set fuel remaining command to the event bus.
     * @param fuelRemaining The fuel remaining value to set, in gallons.
     */
    private publishSetFuelRemaining;
    /**
     * Publishes a fuel totalizer set fuel burned command to the event bus.
     * @param fuelBurned The fuel burned value to set, in gallons.
     */
    private publishSetFuelBurned;
    /**
     * Responds to when this tab's Fuel Remaining button is pressed.
     */
    private onFuelRemainingPressed;
    /**
     * Responds to when this tab's Fuel Remaining Increase button is pressed.
     */
    private onFuelRemainingIncPressed;
    /**
     * Responds to when this tab's Fuel Remaining Decrease button is pressed.
     */
    private onFuelRemainingDecPressed;
    /**
     * Responds to when this tab's Fuel Used button is pressed.
     */
    private onFuelUsedPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Size modes for MFD pages.
 */
declare enum MfdPageSizeMode {
    Full = "Full",
    Half = "Half"
}
/**
 * An entry describing a rendered MFD page.
 */
type MfdPageEntry<T extends MfdPage = MfdPage> = {
    /** The key of the page. */
    readonly key: string;
    /** A reference to the page. */
    readonly page: T;
};

/**
 * Component props for {@link MfdPage}.
 */
interface MfdPageProps extends ComponentProps {
    /** The UI service instance. */
    uiService: UiService;
    /** A reference to the root element of the container of the page's parent UI view. */
    containerRef: NodeReference<HTMLElement>;
}
/**
 * An MFD page.
 */
interface MfdPage<P extends MfdPageProps = MfdPageProps> extends DisplayComponent<P>, UiInteractionHandler {
    /** This page's title. */
    readonly title: Subscribable<string>;
    /** The file path to this page's icon's image asset. */
    readonly iconSrc: Subscribable<string>;
    /** The bezel rotary knob label state requested by this page. */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    /**
     * Responds to when this page is staged. A page is staged if it has been selected.
     */
    onStage(): void;
    /**
     * Responds to when this page is unstaged. A page is unstaged if it is no longer selected.
     */
    onUnstage(): void;
    /**
     * Responds to when this page is opened. A page is opened if it has been selected, has become active, and is visible.
     * @param sizeMode This page's size mode.
     * @param dimensions This page's dimensions, as `[width, height]` in pixels.
     */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this page is closed. A page is closed if it is no longer visible.
     */
    onClose(): void;
    /**
     * Responds to when this page is resumed. A page is resumed when it has been opened as part of the top-most view in
     * its view stack.
     */
    onResume(): void;
    /**
     * Responds to when this page is paused. A page is paused if it is no longer open as the top-most view in its view
     * stack.
     */
    onPause(): void;
    /**
     * Responds when this page's parent UI view is resized while it is resumed.
     * @param sizeMode This page's new size mode.
     * @param dimensions This page's new dimensions, as `[width, height]` in pixels.
     */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when the occlusion type applied to this page's parent UI view changes while this page is open.
     * @param occlusionType The new occlusion type applied to this page's parent UI view.
     */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * An abstract implementation of `MfdPage`.
 */
declare abstract class AbstractMfdPage<P extends MfdPageProps = MfdPageProps> extends DisplayComponent<P> implements MfdPage<P> {
    protected readonly _title: Subject<string>;
    /** @inheritDoc */
    readonly title: Subscribable<string>;
    protected readonly _iconSrc: Subject<string>;
    /** @inheritDoc */
    readonly iconSrc: Subscribable<string>;
    protected readonly _knobLabelState: FilteredMapSubject<UiKnobId, string>;
    /** @inheritDoc */
    readonly knobLabelState: SubscribableMap<UiKnobId, string> & Subscribable<UiKnobRequestedLabelState>;
    /** @inheritDoc */
    onStage(): void;
    /** @inheritDoc */
    onUnstage(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
}

/**
 * Component props for {@link MfdEnginePage}.
 */
interface MfdEnginePageProps extends MfdPageProps {
    /** The logic host for the GDU's gauges.*/
    xmlLogicHost: CompositeLogicXMLHost;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /**
     * The definition for rendering the engine page parsed from `panel.xml`. If not defined, then the page's contents
     * will be rendered as blank.
     */
    enginePageDefinition?: G3XEnginePageDefinition;
}
/**
 * An MFD engine page.
 */
declare class MfdEnginePage extends AbstractMfdPage<MfdEnginePageProps> {
    private readonly tabbedContainerRef;
    private readonly sizeMode;
    private tabsPerListPage?;
    private readonly tabLength;
    private readonly tabSpacing;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates the styling of this page's tabbed container tabs.
     * @param dimensions The current dimensions of this page, as `[width, height]` in pixels.
     */
    private updateTabStyling;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a tab.
     * @param tabDef The definition of the tab to render.
     * @returns The specified tab, as a VNode.
     */
    private renderTab;
    /**
     * Renders gauge content.
     * @param def The definition describing the gauge content to render.
     * @returns The gauge content described by the specified definition, as a VNode, or `null` if the definition does not
     * describe any gauges.
     */
    private renderGaugeContent;
    /**
     * Renders a set of gauges.
     * @param gauges The specifications for the gauges to render.
     * @returns The set of gauges defined by the specifications, as a VNode.
     */
    private renderGauges;
    /**
     * Determines if the config is a tab config or a gauges' config.
     * @param content The config to check.
     * @returns True if the config is a tab config, false if it is a gauges' config.
     */
    private static isTabsContent;
}

/**
 * A renderer of flight plan data fields for the MFD FPL page.
 */
declare class MfdFplPageDataFieldRenderer {
    private readonly isCumulative;
    private readonly unitsSettingManager;
    private readonly dateTimeSettingManager;
    private readonly dateTimeFormat;
    private isAlive;
    /**
     * Creates a new instance of MfdFplPageDataFieldRenderer.
     * @param isCumulative Whether this renderer should render flight plan cumulative data fields instead of flight plan
     * leg data fields.
     * @param unitsSettingManager A manager for display unit user settings.
     * @param dateTimeSettingManager A manager for date/time user settings.
     */
    constructor(isCumulative: boolean, unitsSettingManager: G3XUnitsUserSettingManager, dateTimeSettingManager: UserSettingManager<DateTimeUserSettingTypes>);
    /**
     * Renders a flight plan data field.
     * @param dataField The data field to render.
     * @returns The rendered data field, as a VNode, or `null` if the data field could not be rendered.
     * @throws Error if this renderer has been destroyed.
     */
    render(dataField: FlightPlanDataField): VNode | null;
    /**
     * Renders a distance data field.
     * @param dataField The data field to render.
     * @returns A rendered distance data field, as a VNode.
     */
    private renderDistance;
    /**
     * Renders an ETE data field.
     * @param dataField The data field to render.
     * @returns A rendered ETE data field, as a VNode.
     */
    private renderEte;
    /**
     * Renders a fuel data field.
     * @param dataField The data field to render.
     * @returns A rendered fuel data field, as a VNode.
     */
    private renderFuel;
    /**
     * Renders an ETA data field.
     * @param dataField The data field to render.
     * @returns A rendered ETA data field, as a VNode.
     */
    private renderEta;
    /**
     * Renders a DTK data field.
     * @param dataField The data field to render.
     * @returns A rendered DTK data field, as a VNode.
     */
    private renderDtk;
    /**
     * Destroys this renderer. After the renderer is destroyed, it can no longer render data fields.
     */
    destroy(): void;
}

/**
 * Component props for {@link MfdFplPageDataFieldSelectDialog}.
 */
interface MfdFplPageDataFieldSelectDialogProps extends UiViewProps {
    /** The FMS. */
    fms: G3XFms;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A configuration object defining options for flight planning. */
    flightPlanningConfig: FmsFlightPlanningConfig;
}
/**
 * A request input for {@link MfdFplPageDataFieldSelectDialog}.
 */
type MfdFplPageDataFieldSelectDialogInput = {
    /** The initial data field type to focus when opening the request. */
    initialValue: FlightPlanDataFieldType;
    /**
     * The flight plan leg whose associated data field values should be previewed in the dialog, or `null` if no data
     * field values should be previewed.
     */
    previewLeg: LegDefinition | null;
};
/**
 * A dialog that allows the user to select an MFD FPL page flight plan data field type.
 */
declare class MfdFplPageDataFieldSelectDialog extends AbstractUiView<MfdFplPageDataFieldSelectDialogProps> implements UiDialogView<MfdFplPageDataFieldSelectDialogInput, FlightPlanDataFieldType> {
    private static readonly FIELD_LABELS;
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly animateScrollToFocus;
    private readonly dataFieldTypeButtonEntries;
    private readonly row2Array;
    private readonly row4Array;
    private activeRowArray?;
    private readonly rowArray;
    private focusedDataFieldType?;
    private readonly fplCalculationSettingManager;
    private readonly fplDataFieldCalculatorRepo;
    private readonly fplDataFieldRenderer;
    private readonly fplDataArray;
    private isRequestPending;
    private requestInitialValue;
    private requestPreviewLeg;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    private isOpen;
    private fplSourceSub?;
    /**
     * Creates a new instance of MfdFplPageDataFieldSelectDialog.
     * @param props The properties of the component.
     */
    constructor(props: MfdFplPageDataFieldSelectDialogProps);
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the flight plan source changes.
     * @param source The new flight plan source.
     */
    private onFplSourceChanged;
    /**
     * Updates this dialog's flight plan data array from an external flight plan source.
     * @param index The index of the external flight plan source from which to update the array.
     */
    private updateFplArrayFromExternalSource;
    /** @inheritDoc */
    request(input: MfdFplPageDataFieldSelectDialogInput): Promise<UiDialogResult<FlightPlanDataFieldType>>;
    /**
     * Sets the flight plan leg whose associated data field values are previewed in this dialog.
     * @param leg The flight plan leg whose associated data field values are to be previewed, or `null` if no data field
     * values are to be previewed.
     */
    private setPreviewLeg;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode): void;
    /**
     * Handles when this dialog is resized while open.
     * @param sizeMode This dialog's new size mode.
     */
    private handleResize;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Resolves this dialog's pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's selection buttons is pressed.
     * @param type The data field type associated with the button that was pressed.
     */
    private onButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    private readonly renderButtonFunc;
    /**
     * Renders a row of flight plan data field type selection buttons.
     * @param buttonEntries Entries describing the buttons to render in the row.
     * @returns A row of the specified flight plan data field type selection buttons, as a VNode.
     */
    private renderRow;
    /**
     * Renders a flight plan data field type selection button.
     * @param entry The entry describing the button to render.
     * @returns A selection button for the specified flight plan data field type, as a VNode.
     */
    private renderButton;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdFplPageDataFieldSlot}.
 */
interface MfdFplPageDataFieldSlotProps extends ComponentProps {
    /** The index of the slot's data field. */
    index: number;
    /** The data field to display in the slot. */
    dataField: Subscribable<FlightPlanDataField | null>;
    /** The renderer to use to render the slot's data fields. */
    renderer: MfdFplPageDataFieldRenderer;
}
/**
 * A slot for an MFD FPL page flight plan data field.
 */
declare class MfdFplPageDataFieldSlot extends DisplayComponent<MfdFplPageDataFieldSlotProps> {
    private readonly rootRef;
    private renderedDataFieldNode;
    private dataFieldSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this slot's data field changes.
     * @param dataField The new data field.
     */
    private onDataFieldChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdFplOptionsPopup}.
 */
interface MfdFplOptionsPopupProps extends UiViewProps {
    /** The FMS. */
    fms: G3XFms;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A store for the active flight plan. */
    flightPlanStore: FlightPlanStore;
    /** A manager for flight plan display user settings. */
    fplDisplaySettingManager: UserSettingManager<FplDisplayUserSettingTypes>;
}
/**
 * An MFD FPL options menu.
 */
declare class MfdFplOptionsPopup extends AbstractUiView<MfdFplOptionsPopupProps> {
    private thisNode?;
    private readonly focusableRefs;
    private readonly isInternalFplSource;
    private readonly showApproachRow;
    private readonly showLowerRow;
    private readonly isApproachActivated;
    private readonly isVtfActivated;
    private readonly isShowMapButtonVisible;
    private readonly subscriptions;
    private readonly pauseable;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Opens the approach dialog to allow a user to select and load/activate an approach.
     * @param initialAirport The airport to which to initialize the approach dialog.
     * @param initialApproachIndex The index of the approach to which to initialize the approach dialog.
     */
    private openApproachDialog;
    /**
     * Responds to when this popup's select approach button is pressed.
     */
    private onSelectApproachButtonPressed;
    /**
     * Responds to when this popup's remove approach button is pressed.
     */
    private onRemoveApproachButtonPressed;
    /**
     * Responds to when this popup's approach button is pressed.
     */
    private onApproachButtonPressed;
    /**
     * Responds to when this popup's vectors button is pressed.
     */
    private onVectorsButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Creates a reference for one of this popup's focusable components.
     * @param index The index to assign the focusable component with the focus controller.
     * @returns A reference for one of this popup's focusable components.
     */
    private createFocusableRef;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Props for {@link MfdFplPage}
 */
interface MfdFplPageProps extends MfdPageProps {
    /** The FMS. */
    fms: G3XFms;
    /** The traffic system used by the page's map to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A store for the active flight plan. */
    flightPlanStore: FlightPlanStore;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A configuration object defining options for flight planning. */
    flightPlanningConfig: FmsFlightPlanningConfig;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An MFD active flight plan page.
 */
declare class MfdFplPage extends AbstractMfdPage<MfdFplPageProps> {
    private static readonly DATA_FIELD_UPDATE_INTERVAL;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private static readonly MAP_DEFAULT_RANGE_INDEX;
    private static readonly DATA_FIELD_LABELS;
    private thisNode?;
    private readonly listRef;
    private sizeMode;
    private readonly dimensions;
    private readonly facWaypointCache;
    private readonly fplCalculationSettingManager;
    private readonly unitsSettingManager;
    private readonly fplDataFieldCalculatorRepo;
    private readonly fplDataFieldRenderer;
    private readonly cumulativeFplDataFieldRenderer;
    private readonly fplDataArray;
    private activeFlightPlanner;
    private readonly fplDisplaySettingManager;
    private readonly fplDataFieldSettings;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    private readonly listItemsPerPage;
    private mostRecentFocusedItem?;
    private mostRecentFocusedLegItemIndex;
    private readonly reconcileListFocusDebounce;
    private readonly reconcileListFocusFunc;
    private readonly showFplDataField3;
    private readonly headerLeftHidden;
    private readonly planSpeedValue;
    private readonly planFuelFlowValue;
    private readonly touchPadRef;
    private readonly mapSize;
    private readonly mapTrackUpTargetOffset;
    private readonly mapCompassArcAngularWidth;
    private readonly mapCompassArcTopMargin;
    private readonly compiledMap;
    private readonly mapCompassArcModule;
    private readonly mapFlightPlanFocusModule;
    private readonly mapDragPanModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly showMap;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private focusedLegItem?;
    private needUpdateMapFlightPlanFocus;
    private readonly mapFlightPlanFocusDebounce;
    private readonly updateMapFlightPlanFocusFunc;
    private lastDataFieldUpdateTime;
    private isOpen;
    private isResumed;
    private readonly subscriptions;
    private showMapResizeSub?;
    private fplSourceSub?;
    private fplDataField1Sub?;
    private fplDataField2Sub?;
    private fplDataField3Sub?;
    private eisLayoutSub?;
    private fplDataArraySub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when the flight plan source changes.
     * @param source The new flight plan source.
     */
    private onFplSourceChanged;
    /**
     * Updates this page's flight plan data array from a flight plan source.
     * @param source The flight plan source from which to update the array.
     */
    private updateFplArrayFromSource;
    /**
     * Updates this page's flight plan data array from an external flight plan source.
     * @param index The index of the external flight plan source from which to update the array.
     */
    private updateFplArrayFromExternalSource;
    /**
     * Responds to when a flight plan data field type is changed.
     * @param index The index of the changed data field.
     * @param type The new data field type.
     */
    private onFplDataFieldTypeChanged;
    /**
     * Updates the visibility of the third flight plan data field.
     */
    private updateDataField3Visibility;
    /**
     * Responds to when this page's flight plan data array changes.
     */
    private onFplDataArrayChanged;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's layout.
     */
    private updateLayout;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Opens the Direct-To menu view.
     */
    private openDirectToView;
    /**
     * Attempts to focus the list item associated with the active flight plan leg and scroll the list such that the
     * focused item is positioned in the middle of the list. If there is no active flight plan leg, then the last item in
     * the list will be focused instead.
     * @param skipScrollIfItemInView Whether to skip the scroll operation if the focused item is already in view.
     * Defaults to `false`.
     */
    private tryFocusActiveLeg;
    /**
     * Attempts to assign UI focus to an appropriate item in this page's flight plan list if no list item is currently
     * focused.
     */
    private reconcileListFocus;
    /**
     * Schedules an update of the flight plan focus of this page's map at the end of the current frame.
     */
    private scheduleUpdateMapFlightPlanFocus;
    /**
     * Updates the flight plan focus of this page's map.
     */
    private updateMapFlightPlanFocus;
    /**
     * Responds to when the Add Waypoint button is pressed.
     */
    private onAddWaypointButtonPressed;
    /**
     * Responds to when a flight plan leg button is pressed.
     * @param button The button that was pressed.
     * @param data The flight plan data item associated with the button that was pressed.
     * @returns A Promise which will be fulfilled when the operation is complete.
     */
    private onLegButtonPressed;
    /**
     * Removes a leg from the internal primary flight plan.
     * @param plan The internal primary flight plan.
     * @param leg The leg to remove.
     * @param indexes The indexes of the leg to remove.
     */
    private removeLeg;
    /**
     * Activates a leg in the internal primary flight plan.
     * @param plan The internal primary flight plan.
     * @param leg The leg to activate.
     * @param indexes The indexes of the leg to activate.
     */
    private activateLeg;
    /**
     * Responds to when a flight plan approach leg button is pressed.
     * @param button The button that was pressed.
     * @param data The flight plan data item associated with the button that was pressed.
     */
    private onApproachLegButtonPressed;
    /**
     * Responds to when a flight plan approach leg preview button is pressed.
     * @param button The button that was pressed.
     * @param data The flight plan data item associated with the button that was pressed.
     */
    private onApproachLegPreviewButtonPressed;
    private openWaypointInfoPopupOpId;
    /**
     * Opens the Waypoint Info popup to display information on a facility waypoint.
     * @param icao The ICAO of the facility waypoint to display in the popup.
     */
    private openWaypointInfoPopup;
    /**
     * Opens the waypoint dialog to allow the user to select a waypoint.
     * @returns A Promise which is fulfilled with the waypoint selected by the user, or with `null` if the user did not
     * select a waypoint.
     */
    private requestWaypoint;
    /**
     * Opens the approach dialog to allow a user to select and load/activate an approach.
     * @param initialAirportIcao The ICAO of the airport to which to initialize the approach dialog.
     * @param initialApproachIndex The index of the approach to which to initialize the approach dialog.
     */
    private openApproachDialog;
    /**
     * Responds to when a flight plan leg data item gains UI focus.
     * @param data The data item that gained focus.
     */
    private onLegItemFocusGained;
    /**
     * Responds to when a flight plan leg data item loses UI focus.
     * @param data The data item that lost focus.
     */
    private onLegItemFocusLost;
    /**
     * Responds to when a previewed approach flight plan leg data item gains UI focus.
     * @param data The data item that gained focus.
     */
    private onApproachLegPreviewItemFocusGained;
    /**
     * Responds to when a flight plan leg data item gains UI focus.
     * @param data The data item that gained focus.
     */
    private onAddWaypointFocusGained;
    /**
     * Responds to when a flight plan data field button is pressed.
     * @param setting The flight plan data field user setting associated with the button that was pressed.
     */
    private onFplDataFieldButtonPressed;
    /**
     * Responds to when a flight plan source is selected.
     * @param source The selected flight plan source.
     * @param setting The user setting that controls the flight plan source.
     */
    private onFplSourceSelected;
    /**
     * Responds to when the flight plan speed button is pressed.
     * @param button The button that was pressed.
     * @param setting The user setting that controls the flight plan speed.
     */
    private onPlanSpeedButtonPressed;
    /**
     * Responds to when the flight plan fuel button is pressed.
     * @param button The button that was pressed.
     * @param setting The user setting that controls the flight plan fuel flow.
     */
    private onPlanFuelButtonPressed;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Renders a list item for a data item in this page's flight plan array.
     * @param data The flight plan data item to render.
     * @returns A list item for the specified data item, as a VNode.
     * @throws Error if the data item has an unrecognized type.
     */
    private renderListItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdFplPageApproachLegPreviewListItem}.
 */
interface MfdFplPageApproachLegPreviewListItemProps extends Omit<UiListItemProps, 'onFocusGained' | 'onFocusLost'> {
    /** Data pertaining to the list item's flight plan leg. */
    data: FlightPlanApproachLegPreviewDataItem;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A cache used to retrieve waypoints. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** The format of the list item's parent GDU display. */
    gduFormat: GduFormat;
    /**
     * A function which is called when the list item gains UI focus.
     * @param data The flight plan data associated with the list item.
     */
    onFocusGained?: (data: FlightPlanApproachLegPreviewDataItem) => void;
    /**
     * A function which is called when the list item loses UI focus.
     * @param data The flight plan data associated with the list item.
     */
    onFocusLost?: (data: FlightPlanApproachLegPreviewDataItem) => void;
    /**
     * A function which is called when the list item's leg button is pressed.
     * @param data The flight plan data associated with the list item.
     */
    onButtonPressed?: (button: UiTouchButton, data: FlightPlanApproachLegPreviewDataItem) => void;
    /** The CSS class(es) to apply to the list item's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A list item that renders a previewed approach flight plan leg data item for the MFD FPL page.
 */
declare class MfdFplPageApproachLegPreviewListItem extends DisplayComponent<MfdFplPageApproachLegPreviewListItemProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private buttonChildrenNode?;
    private readonly itemRef;
    private readonly rootCssClass;
    private readonly waypoint;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Retrieves this list item's waypoint fix.
     */
    private retrieveWaypoint;
    /**
     * Responds to when this list item gains focus.
     */
    private onFocusGained;
    /**
     * Responds to when this list item loses focus.
     */
    private onFocusLost;
    /**
     * Responds to when this list item's leg button is pressed.
     * @param button The button that was pressed.
     */
    private onButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdFplPageLegListItem}.
 */
interface MfdFplPageLegListItemProps extends Omit<UiListItemProps, 'onFocusGained' | 'onFocusLost'> {
    /** Data pertaining to the list item's flight plan leg. */
    data: FlightPlanLegDataItem;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A cache used to retrieve waypoints. */
    facWaypointCache: GarminFacilityWaypointCache;
    /** The renderer to use to render the list item's flight plan data fields. */
    dataFieldRenderer: MfdFplPageDataFieldRenderer;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** The format of the list item's parent GDU display. */
    gduFormat: GduFormat;
    /**
     * A function which is called when the list item gains UI focus.
     * @param data The flight plan data associated with the list item.
     */
    onFocusGained?: (data: FlightPlanLegDataItem) => void;
    /**
     * A function which is called when the list item loses UI focus.
     * @param data The flight plan data associated with the list item.
     */
    onFocusLost?: (data: FlightPlanLegDataItem) => void;
    /**
     * A function which is called when the list item's leg button is pressed.
     * @param data The flight plan data associated with the list item.
     */
    onButtonPressed?: (button: UiTouchButton, data: FlightPlanLegDataItem) => void;
    /** The CSS class(es) to apply to the list item's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A list item that renders a flight plan leg data item for the MFD FPL page.
 */
declare class MfdFplPageLegListItem extends DisplayComponent<MfdFplPageLegListItemProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private buttonChildrenNode?;
    private readonly itemRef;
    private readonly rootCssClass;
    private readonly waypoint;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Retrieves this list item's waypoint fix.
     */
    private retrieveWaypoint;
    /**
     * Responds to when this list item gains focus.
     */
    private onFocusGained;
    /**
     * Responds to when this list item loses focus.
     */
    private onFocusLost;
    /**
     * Responds to when this list item's leg button is pressed.
     * @param button The button that was pressed.
     */
    private onButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A data item that describes the satellite tracked by a single GPS receiver channel.
 */
interface GpsInfoChannelData {
    /** The satellite tracked by this item's channel, or `null` if the channel is not tracking a satellite. */
    readonly satellite: GPSSatellite | null;
}
/**
 * A provider of status information for a GDU's selected GPS system.
 */
declare class MfdGpsInfoDataProvider {
    private readonly bus;
    private readonly gduIndex;
    /** UERE in meters */
    private readonly UERE;
    private readonly _gpsIndex;
    /** The index of the GDU's selected GPS system. */
    readonly gpsIndex: Subscribable<number>;
    private readonly _channelCount;
    /** The total number of channels supported by the GDU's selected GPS system. */
    readonly channelCount: Subscribable<number>;
    private readonly _systemState;
    /** The state of the GDU's selected GPS system. */
    readonly systemState: Subscribable<GPSSystemState>;
    private readonly _sbasState;
    /** The SBAS state of the GDU's selected GPS system. */
    readonly sbasState: Subscribable<GPSSystemSBASState>;
    private readonly _channelArray;
    /**
     * An array of data items describing the satellites tracked by each of the selected GPS system's receiver channels.
     * The items are presented in no particular order.
     */
    readonly channelArray: SubscribableArray<GpsInfoChannelData>;
    private readonly _pdop;
    /** The PDOP value of the GDU's selected GPS system's position solution, or `NaN` if a position solution is not available. */
    readonly pdop: Subscribable<number>;
    readonly accuracy: NumberUnitSubject<UnitFamily.Distance, _microsoft_msfs_sdk.SimpleUnit<UnitFamily.Distance>>;
    private readonly _hdop;
    /** The HDOP value of the GDU's selected GPS system's position solution, or `NaN` if a position solution is not available. */
    readonly hdop: Subscribable<number>;
    private readonly _vdop;
    /** The VDOP value of the GDU's selected GPS system's position solution, or `NaN` if a position solution is not available. */
    readonly vdop: Subscribable<number>;
    private readonly _position;
    /**
     * The latitude/longitude of the the GDU's selected GPS system's position solution. Latitude/longitude values will be
     * equal to `NaN` if a position solution is not available.
     */
    readonly position: Subscribable<GeoPointInterface>;
    private readonly _altitude;
    /**
     * The geometric altitude of the the GDU's selected GPS system's position solution, or `NaN` if a position solution
     * is not available.
     */
    readonly altitude: Subscribable<NumberUnitInterface<UnitFamily.Distance, _microsoft_msfs_sdk.Unit<UnitFamily.Distance>>>;
    private readonly _groundSpeed;
    /**
     * The ground speed of the the GDU's selected GPS system's position solution, or `NaN` if a position solution
     * is not available.
     */
    readonly groundSpeed: Subscribable<NumberUnitInterface<UnitFamily.Speed, _microsoft_msfs_sdk.Unit<UnitFamily.Speed>>>;
    private readonly _groundTrack;
    /**
     * The ground track of the the GDU's selected GPS system's position solution, or `NaN` if a position solution
     * is not available.
     */
    readonly groundTrack: Subscribable<NumberUnitInterface<"navangle", _microsoft_msfs_sdk.Unit<"navangle">>>;
    private readonly _time;
    /** The current time, as a Javascript timestamp. */
    readonly time: Subscribable<number>;
    private readonly gpsSatComputers;
    private gpsIndexSub;
    private readonly gpsSystemSubs;
    private isAlive;
    private isInit;
    private isPaused;
    private posSub?;
    private gsSub?;
    private trackSub?;
    private magVarSub?;
    private satPosCalculatedSub?;
    /**
     * Creates a new instance of MfdGpsInfoDataProvider.
     * @param bus The event bus to use with this instance.
     * @param gduIndex The index of the GDU associated with this data provider.
     * @param gpsSatComputers An array of the GPS computers used by the GPS receiver systems connected to the G3X Touch,
     * indexed by GPS receiver system index.
     */
    constructor(bus: EventBus, gduIndex: number, gpsSatComputers: readonly (GPSSatComputer | undefined)[]);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider has been destroyed.
     */
    pause(): void;
    /**
     * Responds to when the index of the selected GPS system changes.
     * @param index The index of the new selected GPS system.
     */
    private onGpsIndexChanged;
    /**
     * Initializes this provider's channel array from a GPS system.
     * @param gpsSatComputer The GPS computer used by the GPS system from which to initialize the channel array.
     */
    private initChannelsFromGpsSystem;
    /**
     * Responds to when the state of the selected GPS system changes.
     * @param state The new state of the selected GPS system.
     */
    private onGpsSystemStateChanged;
    /**
     * Responds to when the state of a GPS satellite changes.
     * @param sat The satellite that changed state.
     */
    private onSatStateChanged;
    /**
     * Adds or removes data items from this provider's channel array
     */
    private reconcileChannelArrayLength;
    /**
     * Destroys this data provider.
     */
    destroy(): void;
}

/**
 * Component props for {@link MfdInfoPage}.
 */
interface MfdInfoPageProps extends MfdPageProps {
    /** Definitions for GPS receiver systems connected to the G3X Touch, indexed by GPS receiver system index. */
    gpsReceiverDefs: readonly Readonly<GpsReceiverDefinition>[];
    /** A configuration object defining options for GDUs. */
    gduDefsConfig: GduDefsConfig;
    /**
     * An array of the GPS computers used by the GPS receiver systems connected to the G3X Touch, indexed by GPS receiver
     * system index.
     */
    gpsSatComputers: readonly GPSSatComputer[];
}
/**
 * An MFD information page.
 */
declare class MfdInfoPage extends AbstractMfdPage<MfdInfoPageProps> {
    private readonly constellationCanvasRef;
    private readonly signalStrengthContainerRef;
    private readonly dateTimeSettingManager;
    private readonly unitsSettingManager;
    private readonly dataProvider;
    private gpsHasPosition;
    private satList?;
    private readonly realGpsPos;
    private readonly facWaypointCache;
    private nearestContext?;
    private readonly nearestWaypoint;
    private readonly waypointStore;
    private needUpdateNearestWaypoint;
    private readonly time;
    private readonly timeFormat;
    private readonly utcDisplayHidden;
    private readonly localTime;
    private readonly constellationRadius;
    private readonly constellationOverdraw;
    private readonly constellationCanvasSize;
    private readonly constellationLabel;
    private readonly nullProjection;
    private readonly conditionText;
    private readonly sourceText;
    private isAlive;
    private isOpen;
    private nearestContextUpdateSub?;
    private gpsSystemStateSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Initializes the nearest airport search.
     */
    private initNearestAirportSearch;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUpdate(): void;
    /**
     * Updates the nearest waypoint displayed by this page.
     */
    private updateNearestWaypoint;
    /**
     * Updates this page's GPS satellite constellation diagram.
     */
    private updateConstellationDiagram;
    /**
     * Calculates the horizon zenith angle.
     * @returns The calculated horizon zenith angle based on the current altitude.
     */
    private calcHorizonAngle;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a satellite signal strength item for a GPS receiver channel data item.
     * @param data The data for which to render an item.
     * @returns A satellite signal strength item for the specified GPS receiver channel data, as a VNode.
     */
    private renderSignalStrengthItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for MfdMapOptionsPopup.
 */
interface MfdMapOptionsPopupProps extends UiViewProps {
    /** Whether the map controlled by the popup supports the display of traffic. */
    supportTraffic: boolean;
}
/**
 * An MFD map options menu.
 */
declare class MfdMapOptionsPopup extends AbstractUiView<MfdMapOptionsPopupProps> {
    private static readonly DETAIL_SLIDER_STOPS;
    private thisNode?;
    private readonly mapSettingManager;
    private readonly detailSliderState;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for MfdMapPage.
 */
interface MfdMapPageProps extends MfdPageProps {
    /** The traffic system used by the page's map to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An MFD map page.
 */
declare class MfdMapPage extends AbstractMfdPage<MfdMapPageProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private readonly touchPadRef;
    private readonly mapSize;
    private readonly mapTrackUpTargetOffset;
    private readonly mapCompassArcAngularWidth;
    private readonly compiledMap;
    private readonly mapOrientationOverrideModule;
    private readonly mapCompassArcModule;
    private readonly mapDragPanModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private avionicsStatusSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's child components when the size of this page's parent UI view changes.
     * @param sizeMode The new size mode of this page.
     * @param dimensions The new dimensions of this page, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /** @inheritdoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this page's map range index.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for MfdMapSetupPopup.
 */
interface MfdMapSetupPopupProps extends UiViewProps {
    /** The traffic system used by the popup's map to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
    /** A mutable subscribable with which to sync the popup's map orientation override value. */
    mapOrientationOverride: MutableSubscribable<MapOrientation | null>;
}
/**
 * An MFD map setup menu.
 */
declare class MfdMapSetupPopup extends AbstractUiView<MfdMapSetupPopupProps> {
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private readonly tabbedContainerRef;
    private readonly mapSize;
    private readonly mapTrackUpTargetOffset;
    private readonly mapCompassArcAngularWidth;
    private readonly mapCompassArcTopMargin;
    private readonly mapSettingManager;
    private readonly unitsSettingManager;
    private readonly compiledMap;
    private readonly mapOrientationOverrideModule;
    private readonly mapCompassArcModule;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private readonly tabLength;
    private readonly tabSpacing;
    private readonly listKnobIds;
    private readonly listItemsPerPage;
    private readonly listItemLength;
    private readonly listItemSpacing;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this popup's child components when the size of this popup's container changes.
     * @param sizeMode The size mode of this popup's container.
     * @param dimensions The dimensions of this popup's container, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Increments a state value.
     * @param state The state to change.
     * @param min The minimum value to set after applying the increment.
     * @param max The maximum value to set after applying the increment.
     * @param increment The increment by which to change the value.
     */
    private incrementState;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this popup's general settings tab.
     * @returns This popup's general settings tab, as a VNode.
     */
    private renderGeneralTab;
    /**
     * Renders this popup's map settings tab.
     * @returns This popup's map settings tab, as a VNode.
     */
    private renderMapTab;
    /**
     * Renders this popup's line settings tab.
     * @returns This popup's line settings tab, as a VNode.
     */
    private renderLineTab;
    /**
     * Renders this popup's traffic settings tab.
     * @returns This popup's traffic settings tab, as a VNode.
     */
    private renderTrafficTab;
    /**
     * Renders this popup's airport settings tab.
     * @returns This popup's airport settings tab, as a VNode.
     */
    private renderAirportTab;
    /**
     * Renders this popup's navaid settings tab.
     * @returns This popup's navaid settings tab, as a VNode.
     */
    private renderNavaidTab;
    /**
     * Renders this popup's airspace settings tab.
     * @returns This popup's airspace settings tab, as a VNode.
     */
    private renderAirspaceTab;
    /**
     * Renders this popup's weather settings tab.
     * @returns This popup's weather settings tab, as a VNode.
     */
    private renderWeatherTab;
    /**
     * Renders this popup's city settings tab.
     * @returns This popup's city settings tab, as a VNode.
     */
    private renderCityTab;
    /**
     * Renders this popup's road settings tab.
     * @returns This popup's road settings tab, as a VNode.
     */
    private renderRoadTab;
    /**
     * Renders this popup's point settings tab.
     * @returns This popup's point settings tab, as a VNode.
     */
    private renderPointTab;
    /**
     * Renders one of this popup's settings tabs.
     * @param label The tab's label.
     * @param listChildren The children to render into the tab's list.
     * @returns The specified settings tab, as a VNode.
     */
    private renderTab;
    /**
     * Renders a button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param renderValue A function which renders the value of the button's bound state, or a VNode which renders the
     * value. If not defined, then values are rendered into strings via default `toString()` behavior. If the rendered
     * value is a VNode, then all first-level DisplayComponents in the VNode tree will be destroyed when a new value is
     * rendered or when the button is destroyed.
     * @param listParams Parameters to pass to the selection list dialog, or a function which will return the parameters
     * when called each time the list is opened.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /**
     * Renders a button which displays a boolean state value as 'On'/'Off' for `true`/`false`, respectively, and when
     * pressed, allows the user to select a value for the state from a list dialog.
     * @param state The state to which to bind the button.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button which displays a boolean state value as 'On'/'Off' for `true`/`false`, respectively, and when
     * pressed, allows the user to select a value for the state from a list dialog.
     */
    private renderOnOffSelectButton;
    /**
     * Renders a combined button which contains two set-value touch buttons that toggle a boolean state and are labeled
     * 'Off' and 'On'.
     * @param state The state to which to bind the buttons.
     * @param cssClass CSS class(es) to apply to the combined button's root element.
     * @param isEnabled Whether the buttons are enabled. Defaults to `true`.
     * @returns A combined button which contains two set-value touch buttons that toggle a boolean state and are labeled
     * 'Off' and 'On'.
     */
    private renderOnOffCombinedButton;
    /**
     * Renders a button which displays a label text size state value and when pressed, allows the user to select a value
     * for the state from a list dialog.
     * @param state The state to which to bind the button.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button which displays a label text size state value and when pressed, allows the user to select a value
     * for the state from a list dialog.
     */
    private renderTextSizeSelectButton;
    /**
     * Renders a button which displays a map range setting and when pressed, allows the user to select a value for the
     * setting from a list dialog.
     * @param state The map range setting to which to bind the button.
     * @param startIndex The index of the smallest selectable map range, inclusive.
     * @param endIndex The index of the largest selectable map range, inclusive.
     * @param includeOff Whether to include the 'Off' (`-1`) setting in the selection list.
     * @param listParams Parameters to pass to the selection list dialog.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button which displays a map range setting and when pressed, allows the user to select a value for the
     * setting from a list dialog, as a VNode.
     */
    private renderMapRangeListSelectButton;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * An MFD traffic options menu.
 */
declare class MfdTrafficOptionsPopup extends AbstractUiView {
    private thisNode?;
    private readonly trafficSettingManager;
    private readonly selectionListItemHeight;
    private readonly selectionListItemSpacing;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for MfdTrafficPage.
 */
interface MfdTrafficPageProps extends MfdPageProps {
    /** The traffic system used by the map. */
    trafficSystem: TrafficSystem;
    /** The traffic data source used by the traffic system. */
    trafficSource: G3XTrafficSystemSource;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An MFD traffic page.
 */
declare class MfdTrafficPage extends AbstractMfdPage<MfdTrafficPageProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private readonly mapSize;
    private readonly targetOffset;
    private readonly rangeEndpoints;
    private readonly trafficSettingManager;
    private readonly compiledMap;
    private readonly mapRangeController;
    private avionicsStatusSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's child components when the size of this page's parent UI view changes.
     * @param sizeMode The new size mode of this page.
     * @param dimensions The new dimensions of this page, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this page's map range index.
     * @param delta The change in index to apply.
     */
    private changeRangeIndex;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdWaypointMapPopup}.
 */
interface MfdWaypointMapPopupProps extends UiViewProps {
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An MFD Waypoint map popup.
 */
declare class MfdWaypointMapPopup extends AbstractUiView<MfdWaypointMapPopupProps> {
    private static readonly DEFAULT_TARGET_RANGE_INDEX;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private readonly touchPadRef;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapDragPanModule;
    private readonly mapWptSelectionModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Sets this popup's selected waypoint.
     * @param waypoint The waypoint to select, or `null` to clear the selected waypoint.
     */
    setSelectedWaypoint(waypoint: FacilityWaypoint | null): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's child components when the size of this page's parent UI view changes.
     * @param sizeMode The new size mode of this page.
     * @param dimensions The new dimensions of this page, as `[width, height]` in pixels.
     */
    private updateFromSize;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Changes this component's map range index.
     * @param delta The change in index to apply.
     */
    private changeMapRangeIndex;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdWaypointPage}
 */
interface MfdWaypointPageProps extends MfdPageProps {
    /** The FMS. */
    fms: G3XFms;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
}
/**
 * An MFD Waypoint page.
 */
declare class MfdWaypointPage extends AbstractMfdPage<MfdWaypointPageProps> {
    private static readonly SIZE_MODE_MAP;
    private readonly facWaypointCache;
    private readonly waypointInfoRef;
    private readonly waypointInfoSize;
    private readonly selectedWaypoint;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this page's waypoint information display size.
     * @param dimensions This page's dimensions, as `[width, height]` in pixels.
     */
    private updateWaypointInfoSize;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    private selectAirportOpId;
    /**
     * Selects the current departure airport to be displayed. If there is no departure airport, then this method does
     * nothing.
     */
    private selectDepartureAirport;
    /**
     * Selects the current destination airport to be displayed. If there is no destination airport, then this method
     * does nothing.
     */
    private selectDestinationAirport;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a waypoint options popup view for this page.
     * @param uiService The UI service.
     * @param containerRef A reference to the root element of the view's container.
     * @returns A waypoint options popup view for this page, as a VNode.
     */
    private renderOptionsPopup;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Keys for standard G3X Touch MFD main pages.
 */
declare enum MfdMainPageKeys {
    Map = "Map",
    Chart = "Chart",
    Waypoint = "Waypoint",
    FlightPlan = "FlightPlan",
    Weather = "Weather",
    Terrain = "Terrain",
    Traffic = "Traffic",
    Info = "Info",
    Engine = "Engine"
}

/**
 * Component props for MfdMainView.
 */
interface MfdMainViewProps extends UiViewProps {
    /** A registrar for MFD main pages. */
    pageRegistrar: MfdMainPageRegistrar;
}
/**
 * An MFD main display.
 */
declare class MfdMainView extends AbstractUiView<MfdMainViewProps> {
    private thisNode?;
    private readonly pageContainerRef;
    private readonly navBarRef;
    private readonly containerDimensions;
    private readonly sizeMode;
    private readonly selectedPageTitle;
    private readonly selectedPageIconSrc;
    private readonly maxLabelsPerListPage;
    private readonly activePageRequestedKnobLabelState;
    private activePageRequestedKnobLabelStatePipe?;
    private isResumed;
    /** @inheritdoc */
    onAfterRender(node: VNode): void;
    /**
     * Responds to when the active page changes.
     * @param pageEntry The entry for the new active page, or `null` if there is no active page.
     */
    private onActivePageChanged;
    /** @inheritdoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Handles potential changes in the size mode or dimensions of this view's container.
     * @param sizeMode The new size mode of this view's container.
     * @param dimensions The new dimensions of this view's container, as `[width, height]` in pixels.
     */
    private handleResize;
    /** @inheritdoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * An MFD nearest airport options menu.
 */
declare class MfdNrstAirportOptionsPopup extends AbstractUiView {
    private static readonly DISTANCE_FORMATTER;
    private thisNode?;
    private readonly nearestSettingManager;
    private readonly unitsSettingManager;
    private readonly minRunwayLength;
    private readonly selectionListItemHeight;
    private readonly selectionListItemSpacing;
    private minRunwayLengthPipe?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * An MFD NRST page.
 */
interface MfdNrstPage<P extends MfdPageProps = MfdPageProps> extends MfdPage<P> {
    /** This page's selected waypoint. */
    readonly selectedWaypoint: Subscribable<Waypoint | null>;
}

/**
 * Component props for {@link AbstractMfdNrstPage}.
 */
interface AbstractMfdNrstPageProps extends MfdPageProps {
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
}
/**
 * An abstract implementation of `MfdNrstPage` that displays a list of nearest waypoints.
 */
declare abstract class AbstractMfdNrstPage<W extends Waypoint = Waypoint, EntryType extends NearestWaypointEntry<W> = NearestWaypointEntry<W>, P extends AbstractMfdNrstPageProps = AbstractMfdNrstPageProps> extends AbstractMfdPage<P> implements MfdNrstPage<P> {
    protected static readonly UPDATE_INTERVAL = 1000;
    protected static readonly GPS_FAIL_CLEAR_LIST_DELAY = 10000;
    protected readonly rootCssClass: SetSubject<string>;
    protected readonly listRef: _microsoft_msfs_sdk.NodeReference<UiNearestWaypointList<EntryType & DynamicListData>>;
    protected readonly listItemLengthPx: Subject<number>;
    protected readonly listItemSpacingPx: Subject<number>;
    protected readonly listItemsPerPage: Subject<number>;
    protected readonly _selectedWaypoint: Subject<W | null>;
    /** @inheritDoc */
    readonly selectedWaypoint: Subscribable<Waypoint | null>;
    /** The position of the airplane. */
    protected readonly ppos: GeoPointSubject;
    /** The true heading of the airplane, in degrees, or `NaN` if heading data is invalid. */
    protected readonly planeHeadingTrue: Subject<number>;
    protected readonly unitsSettingManager: G3XUnitsUserSettingManager;
    protected isOpen: boolean;
    protected isResumed: boolean;
    protected lastUpdateTime?: number;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Handles potential changes in the size mode or dimensions of this page's container.
     * @param sizeMode The new size mode of this page's container.
     * @param dimensions The new dimensions of this page's container, as `[width, height]` in pixels.
     */
    protected handleResize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /**
     * Updates this page.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    protected doUpdate(time: number): void;
    /**
     * Updates this page's airplane data.
     */
    protected updateAirplaneData(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Creates a waypoint entry for a nearest facility search result.
     * @param waypoint A nearest facility search result, as a Waypoint.
     * @returns A waypoint entry for the specified nearest facility search result.
     */
    protected createWaypointEntry(waypoint: W): EntryType;
    /**
     * Gets a subscribable array of nearest waypoints to display in this page's list.
     * @returns A subscribable array of nearest waypoints to display in this page's list.
     */
    protected abstract getWaypointArray(): SubscribableArray<EntryType>;
    /**
     * Gets the text to show when no nearest waypoints are available to display.
     * @returns The text to show when no nearest waypoints are available to display.
     */
    protected getNoResultsText(): string | Subscribable<string>;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders an item for this page's nearest waypoint list.
     * @param data The nearest waypoint entry for which to render.
     * @param index The index of the item.
     * @returns A nearest waypoint list item, as a VNode.
     */
    protected abstract renderListItem(data: EntryType, index: number): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * An abstract implementation of `MfdNrstPage` that displays a list of nearest facility waypoints sourced from a
 * `G3XNearestContext`.
 */
declare abstract class AbstractMfdNrstFacilityPage<T extends NearestWaypointFacilityType, EntryType extends NearestWaypointEntry<NearestFacilityWaypointTypeMap[T]> = NearestWaypointEntry<NearestFacilityWaypointTypeMap[T]>, P extends AbstractMfdNrstPageProps = AbstractMfdNrstPageProps> extends AbstractMfdNrstPage<NearestFacilityWaypointTypeMap[T], EntryType, P> {
    protected nearestContext?: G3XNearestContext;
    protected nearestSubscription?: NearestSubscription<FacilityTypeMap[T]>;
    protected readonly waypointArray: NearestFacilityWaypointArray<T, EntryType>;
    protected needTryFocusFirstListItem: boolean;
    protected nearestFacilitiesUpdateSub?: Subscription;
    protected isGpsDataFailedSub?: Subscription;
    /**
     * Creates a new instance of AbstractMfdNrstFacilityPage.
     * @param props This component's props.
     */
    constructor(props: P);
    /**
     * Initializes this page's nearest waypoints search.
     */
    protected initNearestSearch(): Promise<void>;
    /**
     * Gets this page's nearest facilities subscription from a nearest context.
     * @param context A nearest context.
     * @returns This page's nearest facilities subscription from the specified nearest context.
     */
    protected abstract getNearestSubscription(context: G3XNearestContext): NearestSubscription<FacilityTypeMap[T]>;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    protected doUpdate(time: number): void;
    /**
     * Reconciles the UI focus state of this page's list. If the list is not empty, then the first item in the list will
     * be focused if no other list item has UI focus. This operation is carried out immediately if this page is resumed
     * and either positioning data is in a failed state or this page has been updated with a valid position for the
     * player airplane. Otherwise, the operation is pended until the next update in which these conditions are met. If
     * the list is empty, then no action is taken and any pending reconcilation operation is cancelled.
     */
    protected reconcileListItemFocus(): void;
    /**
     * Attempts to focus the first item in this page's list if the list is not empty and no list item already has UI
     * focus.
     */
    protected tryFocusFirstListItem(): void;
    /**
     * Opens a waypoint information popup and sets it to display a waypoint.
     * @param waypoint The waypoint for the popup to display.
     */
    protected openWaypointInfoPopup(waypoint: FacilityWaypoint): void;
    /** @inheritDoc */
    protected getWaypointArray(): SubscribableArray<EntryType>;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdNrstAirportPage}.
 */
interface MfdNrstAirportPageProps extends AbstractMfdNrstPageProps {
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
}
/**
 * An MFD nearest airport page.
 */
declare class MfdNrstAirportPage extends AbstractMfdNrstFacilityPage<FacilityType.Airport, NearestWaypointEntry<AirportWaypoint>, MfdNrstAirportPageProps> {
    private readonly nearestAirportSettingManager;
    private readonly compactBrgDis;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    protected getNearestSubscription(context: G3XNearestContext): NearestSubscription<AirportFacility>;
    /** @inheritDoc */
    protected renderListItem(data: NearestWaypointEntry<AirportWaypoint>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * An MFD nearest intersections page.
 */
declare class MfdNrstIntersectionPage extends AbstractMfdNrstFacilityPage<FacilityType.Intersection> {
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected getNearestSubscription(context: G3XNearestContext): NearestSubscription<IntersectionFacility>;
    /** @inheritDoc */
    protected renderListItem(data: NearestWaypointEntry<FacilityWaypoint<IntersectionFacility>>): VNode;
}

/**
 * An MFD nearest NDBs page.
 */
declare class MfdNrstNdbPage extends AbstractMfdNrstFacilityPage<FacilityType.NDB> {
    private static readonly FREQ_FORMATTER;
    private readonly compactBrgDis;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    protected getNearestSubscription(context: G3XNearestContext): NearestSubscription<NdbFacility>;
    /** @inheritDoc */
    protected renderListItem(data: NearestWaypointEntry<FacilityWaypoint<NdbFacility>>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * An MFD nearest user waypoints page.
 */
declare class MfdNrstUserWaypointPage extends AbstractMfdNrstFacilityPage<FacilityType.USR> {
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected getNearestSubscription(context: G3XNearestContext): NearestSubscription<UserFacility>;
    /** @inheritDoc */
    protected renderListItem(data: NearestWaypointEntry<FacilityWaypoint<UserFacility>>): VNode;
}

/**
 * An MFD nearest VORs page.
 */
declare class MfdNrstVorPage extends AbstractMfdNrstFacilityPage<FacilityType.VOR> {
    private static readonly FREQ_FORMATTER;
    private readonly compactBrgDis;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    protected getNearestSubscription(context: G3XNearestContext): NearestSubscription<VorFacility>;
    /** @inheritDoc */
    protected renderListItem(data: NearestWaypointEntry<FacilityWaypoint<VorFacility>>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Keys for standard G3X Touch MFD NRST pages.
 */
declare enum MfdNrstPageKeys {
    Airport = "Airport",
    Vor = "Vor",
    Ndb = "Ndb",
    Intersection = "Intersection",
    UserWaypoint = "UserWaypoint",
    City = "City",
    Artcc = "Artcc",
    Fss = "Fss",
    Airspace = "Airspace"
}

/**
 * Component props for {@link MfdNrstView}.
 */
interface MfdNrstViewProps extends UiViewProps {
    /** The traffic system used by the page's map to display traffic, or `null` if there is no traffic system. */
    trafficSystem: TrafficSystem | null;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * An MFD NRST display.
 */
declare class MfdNrstView extends AbstractUiView<MfdNrstViewProps> {
    private static readonly DEFAULT_RANGE_INDEX;
    private static readonly MAP_RESIZE_HIDE_DURATION;
    private readonly touchPadRef;
    private readonly pageContainerRef;
    private readonly navBarRef;
    private readonly containerDimensions;
    private readonly sizeMode;
    private occlusionType;
    private readonly pageDefs;
    private readonly selectedPageTitle;
    private readonly selectedPageIconSrc;
    private readonly maxLabelsPerListPage;
    private readonly activePageRequestedKnobLabelState;
    private activePageRequestedKnobLabelStatePipe?;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapHighlightModule;
    private readonly mapDragPanModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private selectedWaypointPipe?;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private isResumed;
    private avionicsStatusSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the active page changes.
     * @param pageEntry The entry for the new active page, or `null` if there is no active page.
     */
    private onActivePageChanged;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Handles potential changes in the size mode or dimensions of this view's container.
     * @param sizeMode The new size mode of this view's container.
     * @param dimensions The new dimensions of this view's container, as `[width, height]` in pixels.
     */
    private handleResize;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when the avionics status of this page's parent GDU changes.
     * @param event The event describing the avionics status change.
     */
    private onAvionicsStatusChanged;
    /**
     * Resets this page in response to a power cycle.
     */
    private reset;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Creates an array of NRST page definitions.
     * @returns An array of NRST page definitions.
     */
    private createPageDefs;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MfdPageContainer}.
 */
interface MfdPageContainerProps extends ComponentProps {
    /** An iterable of registered MFD page definitions. */
    registeredPageDefs: Iterable<Readonly<MfdPageDefinition>>;
    /** The UI service instance. */
    uiService: UiService;
    /** A reference to the root element of the container of the container's parent UI view. */
    containerRef: NodeReference<HTMLElement>;
    /** The key of the selected page. */
    selectedPageKey: Subscribable<string>;
    /** A {@link MutableSubscribable} to which to write the selected page's title. */
    selectedPageTitle?: MutableSubscribable<string, any>;
    /** A {@link MutableSubscribable} to which to write the file path of the selected page's icon image asset. */
    selectedPageIconSrc?: MutableSubscribable<string, any>;
    /** CSS class(es) to apply to the root element of the container. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A container for MFD pages.
 */
declare class MfdPageContainer extends DisplayComponent<MfdPageContainerProps> implements UiInteractionHandler {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly SELECTED_PAGE_DELAY;
    private readonly rootRef;
    private readonly rootCssClass;
    private readonly registeredPageDefs;
    private readonly pageEntryMap;
    private readonly _stagedPageEntry;
    /** This container's current staged page, or `null` if there is no staged page. */
    readonly stagedPageEntry: Subscribable<MfdPageEntry | null>;
    private readonly _activePageEntry;
    /** This container's current active page, or `null` if there is no active page. */
    readonly activePageEntry: Subscribable<MfdPageEntry | null>;
    private readonly selectedPageTitle;
    private readonly selectedPageIconSrc;
    private sizeMode;
    private readonly dimensions;
    private isAlive;
    private _isAwake;
    private _isResumed;
    private selectedPageUpdateTime;
    private needOpen;
    private cssClassSub?;
    private selectedPageSub?;
    private selectedPageTitlePipe?;
    private selectedPageIconSrcPipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Checks whether this container is awake.
     * @returns Whether this container is awake.
     */
    isAwake(): boolean;
    /**
     * Checks whether this container is resumed.
     * @returns Whether this container is resumed.
     */
    isResumed(): boolean;
    /**
     * Wakes this container. This will open the active page (if one exists).
     * @throws Error if this container has been destroyed.
     */
    wake(): void;
    /**
     * Puts this container to sleep. This will pause and close the active page (if one exists).
     * @throws Error if this container has been destroyed.
     */
    sleep(): void;
    /**
     * Resumes this container. This will resume the active page (if one exists). Has no effect if this container is
     * asleep.
     * @throws Error if this container has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this container. This will pause the active page (if one exists). Has no effect if this container is asleep.
     * @throws Error if this container has been destroyed.
     */
    pause(): void;
    /**
     * Sets the size of this container.
     * @param sizeMode The new size mode.
     * @param dimensions The new dimensions, as `[width, height]` in pixels.
     * @throws Error if this container has been destroyed.
     */
    setSize(sizeMode: MfdPageSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Sets the type of occlusion applied to this container's parent UI view.
     * @param occlusionType The type of occlusion to set.
     * @throws Error if this container has been destroyed.
     */
    setOcclusion(occlusionType: UiViewOcclusionType): void;
    /**
     * Updates this container.
     * @param time The current real (operating system) time, as a Javascript timestamp in milliseconds.
     * @throws Error if this container has been destroyed.
     */
    update(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when the selected MFD page key changes.
     * @param key The new selected MFD page key.
     */
    private onSelectedPageKeyChanged;
    /**
     * Renders a page.
     * @param key The key of the page to render.
     * @returns An entry for the rendered view.
     */
    private renderPage;
    /**
     * Stages a page.
     * @param entry The entry for the page to stage.
     */
    private stagePage;
    /**
     * Unstages a page.
     * @param entry The entry for the page to unstage.
     */
    private unstagePage;
    /**
     * Opens a page.
     * @param entry The entry for the page to open.
     */
    private openPage;
    /**
     * Closes a page.
     * @param entry The entry for the page to close.
     */
    private closePage;
    /**
     * Resumes a page.
     * @param entry The entry for the page to resume.
     */
    private resumePage;
    /**
     * Pauses a page.
     * @param entry The entry for the page to pause.
     */
    private pausePage;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link AfcsControlsView}.
 */
interface AfcsControlsViewProps extends UiViewProps {
    /** Whether a yaw damper must be shown */
    hasYawDamper: boolean;
}
/**
 * An AFCS controls menu.
 */
declare class AfcsControlsView extends AbstractUiView<AfcsControlsViewProps> {
    private thisNode?;
    private readonly apState;
    private readonly isFdActive;
    private readonly fmaData;
    private readonly hdgState;
    private readonly trkState;
    private readonly navState;
    private readonly apprState;
    private readonly iasState;
    private readonly altState;
    private readonly vsState;
    private readonly vnavState;
    private readonly selectedVs;
    private readonly selectedVsDisplay;
    private readonly isSelectedSpeedInMach;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(node: VNode): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Responds to when the AP button is pressed.
     */
    private onApPressed;
    /**
     * Responds to when the FD button is pressed.
     */
    private onFdPressed;
    /**
     * Responds to when the HDG button is pressed.
     */
    private onHdgPressed;
    /**
     * Responds to when the NAV button is pressed.
     */
    private onNavPressed;
    /**
     * Responds to when the APPR button is pressed.
     */
    private onApprPressed;
    /**
     * Responds to when the IAS button is pressed.
     */
    private onIasPressed;
    /**
     * Responds to when the ALT button is pressed.
     */
    private onAltPressed;
    /**
     * Responds to when the VS button is pressed.
     */
    private handleVsPressed;
    /**
     * Responds to when the VNAV button is pressed.
     */
    private onVNavPressed;
    /**
     * Responds to when the Nose Up button is pressed.
     */
    private handleNoseUpPressed;
    /**
     * Responds to when the Nose Down button is pressed.
     */
    private handleNoseDownPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A request input for {@link ApproachDialog}.
 */
type ApproachDialogInput = {
    /** The airport to which to initialize the dialog. */
    initialAirport?: AirportFacility;
    /** The index of the approach to which to initialize the dialog. */
    initialApproachIndex?: number;
    /** Data describing the currently loaded approach. */
    loadedApproachData?: Readonly<G3XFmsFplLoadedApproachData>;
    /**
     * Whether the currently loaded approach is active. Ignored if `loadedApproachData` is `undefined`. Defaults to
     * `false`.
     */
    isLoadedApproachActive?: boolean;
    /** Whether to disable the Load Approach button. Defaults to `false`. */
    disableLoad?: boolean;
};
/**
 * A request result returned by {@link ApproachDialog}.
 */
type ApproachDialogOutput = {
    /** The parent airport of the selected VFR approach. */
    airport: AirportFacility;
    /** The index of the published approach on which the selected VFR approach is based. */
    approachIndex: number;
    /** The selected VFR approach procedure. */
    approachProcedure: GarminVfrApproachProcedure;
    /** The selected action. */
    action: 'load' | 'activate' | 'vtf';
};
/**
 * Component props for {@link ApproachDialog}.
 */
interface ApproachDialogProps extends UiViewProps {
    /** The flight path calculator to use to calculate approach previews. */
    flightPathCalculator: FlightPathCalculator;
    /** The FMS. */
    fms: G3XFms;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A configuration object defining options for the dialog's map. */
    mapConfig: MapConfig;
}
/**
 * A dialog that allows the user to select a VFR approach along with an action to take with the selected approach.
 */
declare class ApproachDialog extends AbstractUiView<ApproachDialogProps> implements UiDialogView<ApproachDialogInput, ApproachDialogOutput> {
    private static readonly MAP_WAKE_HIDE_DURATION;
    private thisNode?;
    private readonly airportButtonRef;
    private readonly facWaypointCache;
    private readonly isMainVisible;
    private readonly isMainHidden;
    private loadedApproachData;
    private isLoadedApproachActive;
    private readonly selectedAirport;
    private readonly selectedAirportApproaches;
    private readonly selectedApproach;
    private readonly isApproachSelected;
    private readonly isSelectedApproachButtonEnabled;
    private readonly waypointArray;
    private readonly waypointListHidden;
    private readonly waypointListItemLengthPx;
    private readonly waypointListItemsPerPage;
    private readonly navaidBoxHidden;
    private readonly navaidIdentText;
    private readonly navaidFreqText;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapProcPreviewModule;
    private readonly mapFlightPlanFocusModule;
    private isMapVisible;
    private readonly mapBoxHidden;
    private readonly mapContainerHiddenDebounce;
    private readonly mapContainerHidden;
    private readonly showMapContainerFunc;
    private readonly disableLoad;
    private readonly isLoadButtonEnabled;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    private isOpen;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when this dialog's selected airport changes.
     * @param airport The new selected airport.
     */
    private onSelectedAirportChanged;
    private approachPreviewOpId;
    /**
     * Responds to when this dialog's selected approach changes.
     * @param dialogItem The item describing the selected approach.
     */
    private onSelectedApproachChanged;
    /**
     * Responds to when whether the visibility of the main content area of this dialog changes.
     */
    private onMainVisibleChanged;
    /**
     * Updates the visibility of this dialog's map.
     */
    private updateMapVisibility;
    /**
     * Builds an array containing the waypoints fixes for a given VFR approach procedure.
     * @param approach The approach procedure for which to build a waypoint array.
     * @returns A Promise which will be fulfilled with an array containing the waypoint fixes for the specified VFR
     * approach procedure.
     */
    private buildWaypointArray;
    /**
     * Sets this dialog's displayed navaid facility.
     * @param facility The navaid facility to display.
     */
    private setNavaid;
    /**
     * Sets the procedure preview plan to display on this dialog's map.
     * @param plan The plan to display.
     */
    private setMapPreviewPlan;
    /** @inheritDoc */
    request(input: ApproachDialogInput): Promise<UiDialogResult<ApproachDialogOutput>>;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Resolves this dialog's pending request Promise if one exists.
     */
    private closeRequest;
    /**
     * Responds to when this dialog's empty airport button is pressed.
     */
    private onEmptyAirportButtonPressed;
    /**
     * Responds to when one of this dialog's action buttons is pressed.
     * @param action The action associated with the button that was pressed.
     */
    private onActionButtonPressed;
    /**
     * Gets approach list dialog parameters for this dialog's currently selected airport.
     * @returns Approach list dialog parameters for this dialog's currently selected airport.
     */
    private getApproachSelectListParams;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders the name of an approach.
     * @param item An item describing the approach for which to render a name.
     * @returns The name of the specified approach.
     */
    private renderApproachName;
    /**
     * Renders a preview list item for a waypoint.
     * @param waypoint The waypoint for which to render an item.
     * @returns A preview list item for the specified waypoint, as a VNode.
     */
    private renderWaypointListItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link AudioPopup}.
 */
interface AudioViewProps extends UiViewProps {
    /**
     * The radios config.
     */
    radiosConfig: RadiosConfig;
}
/**
 * A UI popup which allows the user to control the audio system.
 */
declare class AudioPopup extends AbstractUiView<AudioViewProps> {
    private readonly tabsRef;
    private readonly sub;
    private readonly comDefs;
    private readonly navDefs;
    private readonly isCom1Selected;
    private readonly isCom2Selected;
    private readonly isCom1MicSelected;
    private readonly isCom2MicSelected;
    private readonly isNav1Selected;
    private readonly isNav2Selected;
    private readonly isMarkerBeaconSelected;
    private readonly subscriptions;
    private thisNode?;
    /** On back button pressed handler */
    private onBackPressed;
    /** On COM 1 button pressed handler */
    private onCom1Pressed;
    /** On COM 2 button pressed handler */
    private onCom2Pressed;
    /** On COM 1 MIC button pressed handler */
    private onCom1MicPressed;
    /** On COM 2 MIC button pressed handler */
    private onCom2MicPressed;
    /** On NAV 1 button pressed handler */
    private onNav1Pressed;
    /** On NAV 2 button pressed handler */
    private onNav2Pressed;
    /** On marker beacon button pressed handler */
    private onMarkerBeaconPressed;
    /** On more options button pressed handler */
    private onMoreOptionsPressed;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link AudioRadiosPopup}.
 */
interface AudioRadiosPopupProps extends UiViewProps {
    /**
     * The radios config.
     */
    radiosConfig: RadiosConfig;
}
/**
 * A UI popup which allows the user to control radios of audio system.
 */
declare class AudioRadiosPopup extends AbstractUiView<AudioRadiosPopupProps> {
    private readonly isMarkerSensitivityHigh;
    private thisNode?;
    /** On marker sensitivity pressed handler */
    private onMarkerSensitivityPressed;
    /** On back button pressed handler */
    private onBackPressed;
    /** @inheritDoc */
    onAfterRender(node: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link BacklightIntensityPopup}.
 */
interface BacklightIntensityPopupProps extends UiViewProps {
    /** A configuration object defining options for backlighting. */
    backlightConfig: BacklightConfig;
}
/**
 * A popup that allows the user choose a display backlight control mode and adjust the manual backlight intensity
 * setting.
 */
declare class BacklightIntensityPopup extends AbstractUiView<BacklightIntensityPopupProps> {
    private static readonly SLIDER_STOPS;
    private static readonly INTENSITY_INCREMENT_LARGE;
    private static readonly INTENSITY_INCREMENT_SMALL;
    private thisNode?;
    private readonly backlightSettingManager;
    private readonly backlightLevel;
    private readonly backlightLevelText;
    private readonly isSliderEnabled;
    private sliderEnabledSub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when whether this popup's slider is enabled changes.
     * @param isEnabled Whether this popup's slider is enabled.
     */
    private onSliderEnabledChanged;
    /**
     * Changes the manual backlight level. This method does nothing if the manual backlight control mode is not selected.
     * @param delta The amount by which to change the backlight level.
     */
    private changeManualBacklightLevel;
    /**
     * Responds to when this popup's slider's value changes due to user input.
     * @param value The new slider value.
     */
    private onSliderValueChanged;
    /**
     * Responds to when this popup's slider gains UI focus.
     */
    private onSliderFocusGained;
    /**
     * Responds to when this popup's slider loses UI focus.
     */
    private onSliderFocusLost;
    /**
     * Responds to when this popup's slider receives a UI interaction event.
     * @param event The received event.
     * @returns Whether the event was handled.
     */
    private onSliderUiInteractionEvent;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link BaroMinimumDialog}.
 */
interface BaroMinimumDialogProps extends UiViewProps {
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
}
/**
 * A request result returned by {@link BaroMinimumDialog} indicating the baro minimum altitude should be cleared.
 */
type BaroMinimumDialogClearOutput = {
    /** Whether to clear the baro minimum altitude and exit baro minimum mode. */
    clear: true;
};
/**
 * A request result returned by {@link BaroMinimumDialog} indicating a selected baro minimum altitude.
 */
type BaroMinimumDialogSelectOutput = {
    /** Whether to clear the baro minimum altitude and exit baro minimum mode. */
    clear: false;
    /** The selected minimum altitude, in feet. */
    value: number;
};
/**
 * A request result returned by {@link BaroMinimumDialog}.
 */
type BaroMinimumDialogOutput = BaroMinimumDialogClearOutput | BaroMinimumDialogSelectOutput;
/**
 * A dialog which allows the user to enter a barometric minimum altitude.
 */
declare class BaroMinimumDialog extends AbstractSimpleUiNumberDialog<UiNumberDialogInput, BaroMinimumDialogOutput, BaroMinimumDialogProps> {
    private readonly clearRef;
    private readonly showClear;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected onRequest(input: UiNumberDialogInput): number;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number): BaroMinimumDialogOutput;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /**
     * Responds to when this dialog's clear button is pressed.
     */
    private onClearPressed;
    /** @inheritDoc */
    protected renderOtherContents(): VNode | null;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for DataBarFieldEditView.
 */
interface DataBarFieldEditViewProps extends UiViewProps {
    /** A controller for editing CNS data bar fields. */
    navDataBarEditController: G3XNavDataBarEditController;
}
/**
 * A CNS data bar field editing menu.
 */
declare class DataBarFieldEditView extends AbstractUiView<DataBarFieldEditViewProps> {
    private readonly buttonRef;
    private readonly dataBarSettingManager;
    private editingIndexSub?;
    private isOpen;
    private isAwaitingDialogOpen;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /**
     * Responds to when the index of the data field being edited changes while this view is resumed.
     * @param index The index of the new data field being edited, or `-1` if no data field is being edited.
     */
    private onEditingIndexChanged;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A request input for {@link DataBarFieldSelectDialog}.
 */
type DataBarFieldSelectDialogInput = {
    /** The initial navigation data field type to focus when opening the request. */
    initialValue: NavDataFieldType;
};
/**
 * Component props for DataBarFieldSelectDialog.
 */
interface DataBarFieldSelectDialogProps extends UiViewProps {
    /** The factory to use to create data models for the dialog's data fields. */
    navDataBarFieldModelFactory: NavDataBarFieldModelFactory;
    /** The renderer to use to render the dialog's data fields. */
    navDataBarFieldRenderer: NavDataFieldRenderer;
    /** The GPS validity state for nav data fields. */
    navDataFieldGpsValidity: Subscribable<NavDataFieldGpsValidity>;
}
/**
 * A dialog which allows the user to select a CNS data bar field type.
 */
declare class DataBarFieldSelectDialog extends AbstractUiView<DataBarFieldSelectDialogProps> implements UiDialogView<DataBarFieldSelectDialogInput, NavDataFieldType> {
    private static readonly FIELD_LABELS;
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly animateScrollToFocus;
    private readonly models;
    private readonly buttonRefs;
    private lastUpdateTime?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    request(input: DataBarFieldSelectDialogInput): Promise<UiDialogResult<NavDataFieldType>>;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onUpdate(time: number): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Resolves this dialog's pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's selection buttons is pressed.
     * @param type The navigation data field type associated with the button that was pressed.
     */
    private onButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders a navigation data field type selection button.
     * @param entry The entry describing the data field type for which to render the button, as `[type, label]`.
     * @returns A selection button for the specified navigation data field type, as a VNode.
     */
    private renderButton;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link DataBarSetupView}.
 */
interface DataBarSetupViewProps extends UiViewProps {
    /** The general avionics configuration object. */
    config: AvionicsConfig;
}
/**
 * A CNS data bar setup menu.
 */
declare class DataBarSetupView extends AbstractUiView<DataBarSetupViewProps> {
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    private readonly dataBarSettingManager;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a button that displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param renderValue A function which renders the value of the button's bound state, or a VNode which renders the
     * value. If not defined, then values are rendered into strings via default `toString()` behavior. If the rendered
     * value is a VNode, then all first-level DisplayComponents in the VNode tree will be destroyed when a new value is
     * rendered or when the button is destroyed.
     * @param listParams Parameters to pass to the selection list dialog, or a function which will return the parameters
     * when called each time the list is opened.
     * @returns A button that displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /**
     * Renders a button that displays a button size setting value and when pressed, allows the user to select a value
     * for the setting from a list dialog.
     * @param state The state to which to bind the button.
     * @returns A button that displays a button size setting value and when pressed, allows the user to select a value
     * for the setting from a list dialog, as a VNode.
     */
    private renderButtonSizeSelectButton;
    /**
     * Renders a combined button that contains two set-value touch buttons that toggle a state between the 'Left' and
     * 'Right' members of `CnsDataBarScreenSideSettingMode`.
     * @param state The state to which to bind the buttons.
     * @param isEnabled Whether the buttons are enabled. Defaults to `true`.
     * @returns A combined button that contains two set-value touch buttons that toggle a state between the 'Left' and
     * 'Right' members of `CnsDataBarScreenSideSettingMode`.
     */
    private renderLeftRightCombinedButton;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link DirectToNearestTab}.
 */
interface DirectToNearestTabProps extends TabbedContentProps {
    /** The UI service. */
    uiService: UiService;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A callback function to execute when a waypoint is selected. */
    onWaypointSelected: (waypoint: FacilityWaypoint) => void;
}
/**
 * A tab for the Direct-To Nearest page.
 */
declare class DirectToNearestTab extends AbstractTabbedContent<DirectToNearestTabProps> {
    private static readonly UPDATE_INTERVAL;
    private static readonly GPS_FAIL_CLEAR_LIST_DELAY;
    private readonly listRef;
    private readonly unitsSettingManager;
    private readonly planePosition;
    private readonly planeHeadingTrue;
    private readonly waypointArray;
    private needTryFocusFirstListItem;
    private nearestFacilitiesUpdateSub?;
    private isGpsDataFailedSub?;
    private isOpen;
    private isResumed;
    private lastUpdateTime?;
    /**
     * Creates a new instance of DirectToNearestTab.
     * @param props This component's props.
     */
    constructor(props: DirectToNearestTabProps);
    /**
     * Initializes this tab's nearest waypoints search.
     */
    private initNearestSearch;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /**
     * Updates this tab.
     */
    private doUpdate;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Updates this page's airplane data.
     */
    private updateAirplaneData;
    /**
     * Creates a waypoint entry for nearest facility search result.
     * @param waypoint A nearest facility search result, as a Waypoint.
     * @returns A waypoint entry for the specified nearest facility search result.
     */
    private createWaypointEntry;
    /**
     * Attempts to focus the first item in this page's list if the list is not empty and no list item already has UI
     * focus.
     */
    private tryFocusFirstListItem;
    /**
     * Updates the ordering of this tab's list items and reconciles the UI focus state of the list.
     */
    private updateOrderAndReconcileListItemFocus;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a list item for nearest waypoint.
     * @param entry A nearest waypoint.
     * @returns A list item for the specified nearest waypoint.
     */
    private renderListItem;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link DirectToNearestTabItem}.
 */
interface DirectToNearestTabItemProps extends ComponentProps {
    /** An information store for the waypoint to display. */
    waypointInfoStore: WaypointInfoStore;
    /** A manager for display unit settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** A callback function to execute when the item is selected. */
    onSelected: (waypoint: FacilityWaypoint) => void;
}
/**
 * A component which displays a waypoint in the Direct To Nearest tab.
 */
declare class DirectToNearestTabItem extends DisplayComponent<DirectToNearestTabItemProps> {
    private static readonly BEARING_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private readonly buttonRef;
    /**
     * Handles when the waypoint is pressed.
     */
    private handleWaypointPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Parameters describing the target of a Direct-To.
 */
type DirectToTargetParams = {
    /** The target waypoint. */
    waypoint: FacilityWaypoint | null;
    /**
     * The user-defined magnetic course, in degrees. If not defined, then the Direct-To course will originate at the
     * airplane's current position with an initial turn.
     */
    course: number | undefined;
};

/**
 * Component props for the {@link DirectToWaypointTab}.
 */
interface DirectToWaypointTabProps extends TabbedContentProps {
    /** The UI service. */
    uiService: UiService;
    /** A reference to the root element of the container of this tab's parent UI view. */
    containerRef: NodeReference<HTMLElement>;
    /** The FMS. */
    fms: G3XFms;
    /** The waypoint to display. */
    selectedTargetParams: MutableSubscribable<Readonly<DirectToTargetParams>>;
    /** A provider of data related to flight plan source. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for map user settings. */
    mapSettingManager: UserSettingManager<Partial<G3XMapUserSettingTypes>>;
    /** A manager for display unit user settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A tab that displays information about a waypoint.
 */
declare class DirectToWaypointTab extends AbstractTabbedContent<DirectToWaypointTabProps> {
    private static readonly NAV_ANGLE_TRUE;
    private static readonly BEARING_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private static readonly MAP_WAKE_HIDE_DURATION;
    private static readonly DEFAULT_TARGET_RANGE_INDEX;
    private readonly targetWaypoint;
    private readonly waypointInfoStore;
    private readonly waypointRelativeBearing;
    private readonly hasTargetWaypoint;
    private readonly regionText;
    private readonly defaultCourse;
    private readonly selectedCourse;
    private readonly displayedCourse;
    private readonly isFplSourceInternal;
    private readonly mapSize;
    private readonly compiledMap;
    private readonly mapDragPanModule;
    private readonly mapWptSelectionModule;
    private readonly mapRangeController;
    private readonly mapDragPanController;
    private dragPanPrimed;
    private readonly dragPanThreshold;
    private readonly dragStartPos;
    private readonly dragDelta;
    private readonly mapHiddenDebounce;
    private readonly mapHidden;
    private readonly showMapFunc;
    private readonly subscriptions;
    private readonly waypointSelectButtonRef;
    private thisNode?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when the Direct-To target parameters change.
     * @param params The new Direct-To target parameters.
     */
    private onTargetParamsChanged;
    /**
     * Responds to when this display's waypoint changes.
     * @param waypoint The new waypoint to display.
     */
    private onWaypointChanged;
    /**
     * Updates the default course and the magnetic variation of the default and selected course values for a given
     * waypoint.
     * @param waypoint The waypoint for which to update the default course and magnetic variation.
     */
    private updateDefaultCourseAndMagVar;
    /**
     * Updates the course value that is displayed with this tab's Course button.
     */
    private updateDisplayedCourse;
    /**
     * Responds to when the user selects a waypoint.
     * @param waypoint The selected waypoint.
     */
    private onWaypointSelected;
    /**
     * Opens a waypoint information popup and sets it to display a waypoint.
     */
    private openWaypointInfoPopup;
    /**
     * Responds to when the course button is pressed.
     */
    private onCourseButtonPressed;
    /**
     * Responds to when the direct-to button is pressed.
     */
    private onDirectToPressed;
    /**
     * Responds to when a drag motion starts on this page's map.
     * @param position The position of the mouse.
     */
    private onDragStarted;
    /**
     * Responds to when the mouse moves while dragging over this page's map.
     * @param position The new position of the mouse.
     * @param prevPosition The position of the mouse at the previous update.
     */
    private onDragMoved;
    /**
     * Responds to when a drag motion ends on this page's map.
     */
    private onDragEnded;
    /** @inheritDoc */
    render(): VNode | null;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for the {@link DirectToView}.
 */
interface DirectToDialogProps extends UiViewProps {
    /** A G3X Touch flight management system. */
    fms: G3XFms;
    /** A provider of position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of data related to flight plan source. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
}
/**
 * A view that allows the user to select a Direct-To target.
 */
declare class DirectToView extends AbstractUiView<DirectToDialogProps> {
    private readonly tabbedContainerRef;
    private readonly facWaypointCache;
    private readonly unitsSettingManager;
    private readonly selectedTargetParams;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Sets this view's selected Direct-To target parameters.
     * @param params The target parameters to set.
     */
    setSelectedTargetParams(params: Readonly<DirectToTargetParams>): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    private initSelectedTargetParamsOpId;
    /**
     * Reads the waypoint from the flight planner and sets it as the current waypoint.
     */
    private initSelectedTargetParams;
    /**
     * Responds to when a waypoint is selected from one of this view's tabs that is not the Waypoint tab.
     * @param waypoint The waypoint that was selected.
     */
    private onWaypointSelected;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for DisplaySetupView.
 */
interface DisplaySetupViewProps extends UiViewProps {
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** The general avionics configuration object. */
    config: AvionicsConfig;
    /** The configuration object of the view's parent instrument. */
    instrumentConfig: InstrumentConfig;
    /**
     * An iterable of definitions for PFD pages in the order in which the pages should appear in the view's MFD Split
     * Screen Page selection list.
     */
    pfdPageDefs: Iterable<Readonly<PfdPageDefinition>>;
}
/**
 * A display setup menu.
 */
declare class DisplaySetupView extends AbstractUiView<DisplaySetupViewProps> {
    private static readonly BACKLIGHT_INTENSITY_STOPS;
    private readonly backlightLevel;
    private readonly backlightLevelText;
    private readonly backlightSettingManager;
    private readonly isBacklightIntensityVisible;
    private readonly pfdPageDefs;
    private readonly listRef;
    private readonly listData;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Creates this view's list data array.
     * @returns This view's list data array.
     */
    private createListData;
    /**
     * Renders a button that displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param renderValue A function which renders the value of the button's bound state, or a VNode which renders the
     * value. If not defined, then values are rendered into strings via default `toString()` behavior. If the rendered
     * value is a VNode, then all first-level DisplayComponents in the VNode tree will be destroyed when a new value is
     * rendered or when the button is destroyed.
     * @param listParams Parameters to pass to the selection list dialog, or a function which will return the parameters
     * when called each time the list is opened.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @param hideDropdownArrow Whether to hide the button's dropdown arrow. Defaults to `false`.
     * @returns A button that displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /**
     * Renders a button that displays a display location setting value and when pressed, allows the user to select a
     * value for the setting from a list dialog.
     * @param state The state to which to bind the button.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button that displays a display location setting value and when pressed, allows the user to select a
     * value for the setting from a list dialog, as a VNode.
     */
    private renderDisplayLocationSelectButton;
    /**
     * Renders a combined button that contains two set-value touch buttons that toggle a state between the 'Left' and
     * 'Right' members of `DisplayScreenSideSettingMode`.
     * @param state The state to which to bind the buttons.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @param invert Whether to invert the nominal values of 'Left' and 'Right', such that the 'Left' button toggles the
     * state to `DisplayScreenSideSettingMode.Right` and the 'Right' button toggles the state to
     * `DisplayScreenSideSettingMode.Left`.
     * @param isEnabled Whether the buttons are enabled. Defaults to `true`.
     * @returns A combined button that contains two set-value touch buttons that toggle a state between the 'Left' and
     * 'Right' members of `DisplayScreenSideSettingMode`.
     */
    private renderLeftRightCombinedButton;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link MainMenuView}.
 */
interface MainMenuViewProps extends UiViewProps {
    /** The global avionics configuration object. */
    config: AvionicsConfig;
}
/**
 * A main menu.
 */
declare class MainMenuView extends AbstractUiView<MainMenuViewProps> {
    private readonly listRef;
    private readonly listItemLengthPx;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * This will open the right com dialog when pressing the Com Radio buttons in the Main Menu
     * This will also handle grabing the right indexs so the new frequency can be set.
     * @param comDefinitions The come definition to then get the proper sim index
     */
    private openComRadioDialogsInMainMenu;
    /**
     * This will open the right nav dialog when pressing the nav Radio buttons in the Main Menu
     * This will also handle grabing the right indexs so the new frequency can be set.
     * @param navDefinitions The nav definition to then get the proper sim index
     */
    private openNavRadioDialogsInMainMenu;
    /**
     * Renders this menu's buttons into an array.
     * @returns This menu's buttons, as an array of VNodes.
     */
    private renderButtons;
}

/**
 * Component props for the {@link MfdRadioVolumePopup}
 */
interface MfdVolumeRadioPopupProps extends UiViewProps {
    /**
     * radios config.
     */
    radiosConfig: RadiosConfig;
}
/**
 * Volume slider popup view.
 */
declare class MfdRadioVolumePopup extends AbstractUiView<MfdVolumeRadioPopupProps> {
    private radioIndex;
    private radioType;
    private simRadioIndex;
    /**
     * Volume slider popup view.
     * range: 0 - 100
     */
    private readonly volume;
    private readonly label;
    private thisNode?;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Request the volume slider popup.
     * @param radioType type of radio
     * @param radioIndex - 1 or 2
     * @throws Error if simRadioIndex is not 1 or 2
     */
    request(radioType: RadioType.Com | RadioType.Nav, radioIndex: 1 | 2): void;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * increase volume
     */
    private increaseVolume;
    /**
     * decrease volume
     */
    private decreaseVolume;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A popup that displays a "No Options" notification and allows navigation to the Main Menu by pressing the MENU
 * key.
 */
declare class NoOptionsPopup extends AbstractUiView {
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
}

/**
 * A request input for {@link MfdPageSelectDialog}.
 */
type MfdPageSelectDialogInput = {
    /**
     * The key of the initially selected page. The selection button associated with the initially selected page will be
     * focused at the start of the request.
     */
    initialSelectedKey: string;
};
/**
 * Component props for {@link MfdPageSelectDialog}.
 */
interface MfdPageSelectDialogProps extends UiViewProps {
    /**
     * An iterable of definitions for the dialog's selectable pages in the order in which their selection buttons should
     * appear in the dialog.
     */
    pageDefs: Iterable<Readonly<MfdPageDefinition>>;
}
/**
 * A pop-up dialog which allows the user to select an MFD main page.
 */
declare class MfdPageSelectDialog extends AbstractUiView<MfdPageSelectDialogProps> implements UiDialogView<MfdPageSelectDialogInput, Readonly<MfdPageDefinition>> {
    private readonly listRef;
    private readonly buttonRefs;
    private readonly pageDefs;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritdoc */
    request(input: MfdPageSelectDialogInput): Promise<UiDialogResult<Readonly<MfdPageDefinition>>>;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Resolves this dialog's pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's page select buttons is pressed.
     * @param pageDef The definition of the page associated with the button that was pressed.
     */
    private onPageButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for PfdOptionsView.
 */
interface PfdOptionsViewProps extends UiViewProps {
    /** A registrar for PFD insets. */
    insetRegistrar: PfdInsetRegistrar;
    /** The nav indicator for the active navigation source. */
    activeNavIndicator: G3XTouchNavIndicator;
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
    /** A manager for PFD user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
    /** A configuration object defining options for FMS. */
    fmsConfig: FmsConfig;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
}
/**
 * A PFD options menu.
 */
declare class PfdOptionsView extends AbstractUiView<PfdOptionsViewProps> {
    private static readonly BEARING_POINTER_SOURCES;
    private thisNode?;
    private readonly publisher;
    private readonly cdiSourceButtonCssClass;
    private readonly timerValue;
    private readonly isTimerRunning;
    private readonly selectListItemHeight;
    private readonly selectListItemSpacing;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when this menu's FPL source button is pressed.
     * @param button The button that was pressed.
     * @param sourceSetting The flight plan data source user setting.
     */
    private onFplSourceButtonPressed;
    /**
     * Responds to when this menu's CDI source button is pressed.
     */
    private onCdiSourceButtonPressed;
    /**
     * Responds to when this menu's timer start/stop button is pressed.
     */
    private onTimerButtonPressed;
    /**
     * Responds to when this menu's timer reset button is pressed.
     */
    private onTimerResetButtonPressed;
    /**
     * Responds to when this menu's minimums button is pressed.
     */
    private onMinimumsButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this view's first row.
     * @returns This view's first row, as a VNode, or `null` if the first row is omitted.
     */
    private renderRow1;
    /**
     * Renders a PFD inset selection button.
     * @param side The inset side that the button controls.
     * @returns A PFD inset selection button, as a VNode.
     */
    private renderInsetSelectButton;
    /**
     * Renders a PFD bearing pointer selection button.
     * @param index The bearing pointer index that the button controls.
     * @returns A PFD bearing pointer selection button, as a VNode.
     */
    private renderBearingPointerSelectButton;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Creates a function that renders label text for bearing pointer sources.
     * @param navRadioCount The number of supported NAV radios.
     * @returns A function that renders label text for bearing pointer sources.
     */
    private static createBearingPointerSourceRenderer;
}

/**
 * Component props for {@link PfdSetupView}.
 */
interface PfdSetupViewProps extends UiViewProps {
    /** Whether the PFD synthetic vision display is supported. */
    supportSvt: boolean;
    /** A manager for display user settings. */
    pfdSettingManager: UserSettingManager<PfdUserSettingTypes>;
}
/**
 * A PFD setup menu.
 */
declare class PfdSetupView extends AbstractUiView<PfdSetupViewProps> {
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    private readonly pfdSplitScreenSide;
    private readonly svtFpmButtonState;
    private readonly svtTrafficButtonState;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param renderValue A function which renders the value of the button's bound state, or a VNode which renders the
     * value. If not defined, then values are rendered into strings via default `toString()` behavior. If the rendered
     * value is a VNode, then all first-level DisplayComponents in the VNode tree will be destroyed when a new value is
     * rendered or when the button is destroyed.
     * @param listParams Parameters to pass to the selection list dialog, or a function which will return the parameters
     * when called each time the list is opened.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @param hideDropdownArrow Whether to hide the button's dropdown arrow. Defaults to `false`.
     * @returns A button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link SelectedAltitudeDialog}.
 */
interface SelectedAltitudeDialogProps extends UiViewProps {
    /** A provider of airplane position and heading data. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
}
/**
 * A request input for {@link SelectedAltitudeDialogInput}.
 */
interface SelectedAltitudeDialogInput extends UiNumberDialogInput {
    /** The minimum valid numeric value allowed by the dialog's input. */
    minimumValue: number;
    /** The maximum valid numeric value allowed by the dialog's input. */
    maximumValue: number;
}
/**
 * A dialog which allows the user to enter a selected altitude reference in feet.
 */
declare class SelectedAltitudeDialog extends AbstractSimpleUiNumberDialog<SelectedAltitudeDialogInput, number, SelectedAltitudeDialogProps> {
    private readonly signDigitRef;
    private readonly setToCurrentRef;
    private readonly isAltitudeDataValid;
    private readonly indicatedAlt;
    private minValue;
    private maxValue;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    protected onRequest(input: SelectedAltitudeDialogInput): number;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number): number;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected onBackspacePressed(): void;
    /** @inheritDoc */
    protected onSignPressed(): void;
    /**
     * Responds to when this dialog's enter button is pressed.
     */
    private onSetToCurrentPressed;
    /** @inheritDoc */
    protected renderOtherContents(): VNode | null;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A request input for {@link SelectedCourseDialog}.
 */
interface SelectedCourseDialogInput extends UiNumberDialogInput {
    /** The navigation reference source from which to retrieve course sync data. */
    navSource: NavReferenceSource<G3XTouchNavSourceName>;
}
/**
 * A dialog that allows the user to enter a selected course value.
 */
declare class SelectedCourseDialog extends AbstractSimpleUiNumberDialog<SelectedCourseDialogInput, number> {
    private readonly syncCourseRef;
    private readonly navSource;
    private readonly navSourceIsLocalizer;
    private readonly navSourceLocalizerCourse;
    private readonly navSourceBearing;
    private readonly syncCourseValue;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected onRequest(input: SelectedCourseDialogInput): number;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number): number;
    /** @inheritDoc */
    protected onCleanupRequest(): void;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /**
     * Responds to when this dialog's 'Sync Course' is pressed.
     */
    private onSyncCoursePressed;
    /** @inheritDoc */
    protected renderOtherContents(): VNode | null;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link SelectedHeadingDialogProps}.
 */
interface SelectedHeadingDialogProps extends UiViewProps {
    /** A provider of airplane position and heading data. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
}
/**
 * A dialog that allows the user to enter a selected heading value.
 */
declare class SelectedHeadingDialog extends AbstractSimpleUiNumberDialog<UiNumberDialogInput, number, SelectedHeadingDialogProps> {
    private readonly setToCurrentRef;
    private readonly isHeadingDataValid;
    private readonly headingData;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    protected onRequest(input: UiNumberDialogInput): number;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getPayload(value: number): number;
    /** @inheritDoc */
    protected getRootCssClassName(): string;
    /**
     * Responds to when this dialog's 'Set To Current' is pressed.
     */
    private onSetToCurrentPressed;
    /** @inheritDoc */
    protected renderOtherContents(): VNode | null;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A request input for {@link SelectRadioDialog}.
 */
interface SelectRadioDialogInput {
    /** The type of radio for the user to select. */
    radioType: 'COM' | 'NAV';
    /** The name of the frequency to display. */
    frequencyName: string;
    /** The frequency to display. */
    frequencyText: string;
}
/**
 * Select COM/NAV Radio dialog
 */
declare class SelectRadioDialog extends AbstractUiView implements UiDialogView<SelectRadioDialogInput, 1 | 2> {
    private readonly radioType;
    private readonly radioTypeDisplay;
    private readonly frequencyName;
    private readonly frequencyText;
    private resolveFn?;
    private resultObject?;
    /** @inheritDoc */
    request(input: SelectRadioDialogInput): Promise<UiDialogResult<1 | 2>>;
    /** @inheritDoc */
    onClose(): void;
    /** Handles when the cancel button is pressed. */
    private handleCancelPressed;
    /**
     * Handles when a radio button is pressed.
     * @param index The index of the radio that was selected.
     */
    private handleRadioButtonPressed;
    /**
     * Builds the radio buttons for this dialog.
     * @returns The radio button VNodes.
     */
    private buildRadioButtons;
    /** @inheritDoc */
    render(): VNode;
}

/**
 * A setup menu.
 */
declare class SetupView extends AbstractUiView {
    private readonly listRef;
    private readonly listItemLengthPx;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this menu's buttons into an array.
     * @returns This menu's buttons, as an array of VNodes.
     */
    private renderButtons;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A units setup menu.
 */
declare class SoundSetupView extends AbstractUiView {
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Renders a button which displays a state value and when pressed, allows the user to select a value for the state
     * @param state The state to which to bind the button.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @param isDisabled Whether the button should be disabled. Defaults to `false`.
     * @returns A button which displays a state value and when pressed, allows the user to select a
     * value for the state from a list dialog, as a VNode.
     */
    private renderEnableDisableButton;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A description of a startup view database row.
 */
type StartupViewRowDefinition = {
    /** The absolute path to the row icon's image asset. */
    iconFilePath: string;
    /** The row's title text. */
    title: string;
    /** The row's value text. */
    value?: string | Subscribable<string>;
    /** Whether the row should display as caution (amber). Defaults to `false`. */
    caution?: boolean | Subscribable<boolean>;
    /** A function to execute when the startup view is destroyed. */
    onDestroy?: () => void;
};
/**
 * A function which returns an object describing a startup view database row.
 */
type StartupViewRowFactory = (simTime: Subscribable<number>) => Readonly<StartupViewRowDefinition>;
/**
 * Keys defining pre-built startup view rows.
 */
declare enum StartupViewPrebuiltRow {
    /**
     * The navigation row. Displays the expiration date of the current navigation database. The row will be rendered in
     * amber if the simulation time is past the expiration date.
     */
    Navigation = "Navigation",
    /** The terrain row. */
    Terrain = "Terrain"
}

/**
 * Component props for {@link StartupView}.
 */
interface StartupViewProps extends UiViewProps {
    /**
     * An array of database rows to render in the view. Each row is defined by either a function which returns an object
     * describing the row to render, or a pre-built row key. The rows will be rendered from top to bottom in the order in
     * which they appear in the array. If not defined, a default set of rows will be rendered.
     */
    rows?: readonly (StartupViewRowFactory | StartupViewPrebuiltRow)[];
}
/**
 * A startup view.
 */
declare class StartupView extends AbstractUiView<StartupViewProps> {
    private static readonly NAV_DATA_REGEX;
    private static EXPIRATION_DATE_FORMATTER;
    private static readonly DEFAULT_ROWS;
    private thisNode?;
    private readonly simTime;
    private readonly rowDestructors;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this view's database rows.
     * @param rows An array of factories and pre-built row keys defining the rows to render. The rows will be rendered
     * in the order in which they appear in the array.
     * @returns This view's database rows, as a VNode.
     */
    private renderRows;
    /**
     * Gets a row factory for a pre-built row key.
     * @param key The key of the pre-built row.
     * @returns A row factory for the specified pre-built key, or `undefined` if the key is not valid.
     */
    private getPrebuiltRowFactory;
    /**
     * Renders a database row.
     * @param def An object describing the row to render.
     * @returns A database row, as a VNode.
     */
    private renderRow;
    /** @inheritDoc */
    destroy(): void;
    /**
     * Gets the expiration date of the current navigation data, as a Javascript timestamp.
     * @returns The expiration date of the current navigation data, as a Javascript timestamp, or `NaN` if the date could
     * not be determined.
     */
    private static getNavDataExpirationDate;
}

/**
 * A time setup menu.
 */
declare class TimeSetupView extends AbstractUiView {
    private static readonly DATE_FORMATTER;
    private static readonly LOCAL_OFFSET_FORMATTER;
    private static readonly DATE_TIME_FORMAT_SETTING_MAP;
    private readonly simTime;
    private readonly dateTimeSettingManager;
    private readonly dateTimeDisplayFormat;
    private readonly isTimeZoneItemVisible;
    private readonly isLocalOffsetDecButtonEnabled;
    private readonly isLocalOffsetIncButtonEnabled;
    private readonly dateTimeOffset;
    private readonly offsetTime;
    private readonly dateString;
    private readonly listRef;
    private readonly listData;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Increments the value of the local time offset setting by 15 minutes.
     * @param direction The direction in which to increment the setting value.
     */
    private incrementLocalOffsetSetting;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Creates this view's list data array.
     * @returns This view's list data array.
     */
    private createListData;
    /**
     * Renders a button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param renderValue A function which renders the value of the button's bound state, or a VNode which renders the
     * value. If not defined, then values are rendered into strings via default `toString()` behavior. If the rendered
     * value is a VNode, then all first-level DisplayComponents in the VNode tree will be destroyed when a new value is
     * rendered or when the button is destroyed.
     * @param listParams Parameters to pass to the selection list dialog, or a function which will return the parameters
     * when called each time the list is opened.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @returns A button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link TransponderView}.
 */
interface TransponderViewProps extends UiViewProps {
    /** A configuration object defining options for the transponder. */
    transponderConfig: TransponderConfig;
}
/**
 * A transponder view. Allows the user to input a transponder code, activate IDENT, and optionally change transponder
 * mode.
 */
declare class TransponderView extends AbstractUiView<TransponderViewProps> {
    private thisNode?;
    private readonly controlPublisher;
    private readonly supportAutoGroundAlt;
    private readonly xpdrOnGround;
    private readonly simXpdrMode;
    private readonly simXpdrCode;
    private readonly altButtonMode;
    private readonly altButtonLabel;
    private readonly inputRef;
    private readonly inputXpdrCodeValue;
    private readonly isPaused;
    private readonly inputXpdrCodeState;
    private readonly isInputCodeValid;
    private readonly isIdentButtonEnabled;
    private readonly identButtonLabel;
    private viewEnterPlusIdentSub?;
    private xpdrCodeSub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Executes logic in response to the 'Enter' command. If this view's input transponder code is valid, then sets the
     * sim transponder code to the input code and closes the view.
     */
    private enter;
    /**
     * Executes logic in response to the 'Ident' command. If this view's input transponder code is valid, then sets the
     * sim transponder code to the input code (if they differ) and triggers a transponder IDENT. If the sim transponder
     * code was changed, then also closes the view.
     */
    private ident;
    /**
     * Responds to when the sim's transponder code changes.
     * @param code The new transponder code.
     */
    private onXpdrCodeChanged;
    /**
     * Responds to when this view's input transponder code changes.
     * @param code The new input transponder code.
     */
    private onInputXpdrCodeChanged;
    /**
     * Responds to when the state of this view's input transponder code changes.
     * @param state The new input transponder code state.
     */
    private onInputXpdrCodeStateChanged;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Responds to when one of this view's numpad buttons is pressed.
     * @param numeral The numeral character associated with the button that was pressed.
     */
    private onNumpadButtonPressed;
    /**
     * Responds to when this view's back button is pressed.
     */
    private onBackButtonPressed;
    /**
     * Responds to when this view's VFR button is pressed.
     */
    private onVfrButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Transponder view control events.
 */
interface TransponderViewControlEvents {
    /**
     * Button ENT+ID (enter + ident) is pressed
     */
    xpdr_view_enter_plus_ident: void;
}

/** Events from transponder view */
interface TransponderViewEvents {
    /**
     * XDPR view code state
     */
    xpdr_view_code_state: 'invalid' | 'unchanged' | 'changed';
}

/**
 * A units setup menu.
 */
declare class UnitsSetupView extends AbstractUiView<UiViewProps> {
    private readonly listRef;
    private readonly listItemLengthPx;
    private readonly listItemSpacingPx;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders a button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog.
     * @param state The state to which to bind the button.
     * @param options An object whose keys are the options from which the user can select and whose values are the text
     * to display for each option.
     * @param cssClass CSS class(es) to apply to the button's root element.
     * @param hideDropdownArrow Whether to hide the button's dropdown arrow. Defaults to `false`.
     * @returns A button which displays a state value and when pressed, allows the user to select a value for the state
     * from a list dialog, as a VNode.
     */
    private renderListSelectButton;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A request input for {@link DuplicateWaypointDialog}.
 */
interface DuplicateWaypointDialogInput {
    /** The duplicate waypoints that the user can select. */
    waypoints: readonly FacilityWaypoint[];
}
/**
 * A dialog which allows the user to select a waypoint from among a list of waypoints with duplicate idents.
 */
declare class DuplicateWaypointDialog extends AbstractUiView implements UiDialogView<DuplicateWaypointDialogInput, FacilityWaypoint> {
    private readonly listRef;
    private readonly waypoints;
    private resolveFunction?;
    private resultObject;
    /** @inheritDoc */
    request(input: DuplicateWaypointDialogInput): Promise<UiDialogResult<FacilityWaypoint>>;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when a waypoint is selected.
     * @param waypoint The selected waypoint.
     */
    private onWaypointSelected;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Renders a list item for a waypoint.
     * @param waypoint The waypoint for which to render the list item.
     * @returns A rendered list item for the specified waypoint, as a VNode.
     */
    private renderItem;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * A request input for {@link WaypointDialog}.
 */
interface WaypointDialogInput<T extends G3XWaypointSearchType> {
    /** The type of waypoint to search for. */
    searchType: T;
    /** The waypoint value initially loaded into the dialog at the start of the request. */
    initialValue?: G3XWaypointSearchTypeMap[T] | null;
}
/** Props for {@link WaypointDialog} */
interface WaypointDialogProps extends UiViewProps {
    /** The Fms instance to use. */
    fms: G3XFms;
}
/**
 * A dialog which allows the user to select a waypoint.
 */
declare class WaypointDialog extends AbstractUiView<WaypointDialogProps> implements UiDialogView<WaypointDialogInput<G3XWaypointSearchType>, FacilityWaypoint> {
    private static readonly CHAR_ARRAY;
    private static readonly KEYS;
    private thisNode?;
    private readonly inputRef;
    private readonly inputSlotEntries;
    private readonly titleText;
    private readonly inputText;
    private readonly inputTextSub;
    private readonly autocompleteText;
    private readonly autocompleteTextSub;
    private readonly inputLabelText;
    private readonly waypointCache;
    private readonly selectedFacility;
    private readonly selectedWaypoint;
    private facilityMatches?;
    private readonly enterButtonEnabled;
    private readonly searchDebounce;
    private searchOpId;
    private facilitySearchType?;
    private resolveFunction?;
    private resultObject;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    request<T extends G3XWaypointSearchType>(input: WaypointDialogInput<T>): Promise<UiDialogResult<G3XWaypointSearchTypeMap[T]>>;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    private readonly updateSearchHandler;
    /**
     * A callback called when the search input box is updated.
     * @param debounce Whether to debounce the call to update autocomplete.
     */
    private onInputTextChanged;
    /**
     * Checks for matches with current input, and updates the label and suggested text.
     */
    private updateSearch;
    /**
     * Searches facilities with a given ident and returns matches.
     * @param searchString The ident to search.
     * @param opId The search operation ID.
     * @returns A Promise which will be fulfilled with the results of the facility search.
     */
    private searchFacilities;
    /**
     * Get the label text to display for a facility.
     * @param facility The facility for which to get label text.
     * @returns The label text to display for the specified facility.
     */
    private getFacilityLabel;
    /**
     * Updates the default character values of this dialog's character input to match the current autocomplete state.
     * @param root0 The current autocomplete state.
     * @param root0."0" The current input text.
     * @param root0."1" The current autocomplete text.
     */
    private updateAutocomplete;
    /**
     * Attempts to resolve the current request.
     *
     * If this dialog searches for facilities, then the currently selected facility will be returned if one exists. If
     * there is no selected facility, duplicate matches will attempted to be resolved if they exist. If neither a
     * selected facility or duplicate matches exist, the request will be cancelled.
     *
     * If this dialog does not search for facilities, the current input text is returned.
     */
    private resolve;
    /**
     * Attempts to resolve duplicate matched facilities. Opens the duplicate waypoint dialog to allow the user to
     * select one of the duplicates. If the user selects a duplicate, the current request will be resolved with the
     * selected facility and this dialog will be closed. If the user does not select a duplicate, the current request
     * will remain unresolved and this dialog will remain open.
     * @param matches The search results of the duplicate matched facilities.
     */
    private resolveDuplicates;
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's character keys is pressed.
     * @param char The character of the key that was pressed.
     */
    private onKeyPressed;
    /**
     * Responds to when this dialog's backspace button is pressed.
     */
    private onBackspacePressed;
    /**
     * Responds to when this dialog's cancel button is pressed.
     */
    private onCancelPressed;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Renders a character key.
     * @param char The character of the key to render, or `null` if a spacer should be rendered instead.
     * @returns A rendered key for the specified character or a spacer, as a VNode.
     */
    private renderKey;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link WaypointInfoPopup}
 */
interface WaypointInfoPopupProps extends UiViewProps {
    /** The FMS. */
    fms: G3XFms;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: PositionHeadingDataProvider;
    /** A provider of flight plan source data. */
    fplSourceDataProvider: G3XFplSourceDataProvider;
    /** A provider of COM radio spacing mode data. */
    comRadioSpacingDataProvider: ComRadioSpacingDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for display user settings. */
    displaySettingManager: UserSettingManager<DisplayUserSettingTypes>;
    /** A configuration object defining options for the map. */
    mapConfig: MapConfig;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
}
/**
 * A popup that displays information about a waypoint.
 */
declare class WaypointInfoPopup extends AbstractUiView<WaypointInfoPopupProps> {
    private static readonly TITLE_FORMATTER;
    private readonly waypointInfoRef;
    private readonly waypointInfoSize;
    private readonly selectedWaypoint;
    private readonly selectedFacility;
    private selectedFacilityPipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Sets this popup's displayed waypoint.
     * @param waypoint The waypoint to set.
     */
    setWaypoint(waypoint: FacilityWaypoint | null): void;
    /** @inheritDoc */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Updates this popup's waypoint information display size.
     * @param sizeMode The size mode of this view's container.
     * @param dimensions This popup's dimensions, as `[width, height]` in pixels.
     */
    private updateWaypointInfoSize;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /** @inheritDoc */
    onUpdate(time: number): void;
    /** @inheritDoc */
    onUiInteractionEvent(event: UiInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link AfcsStatusBox}.
 */
interface AfcsStatusBoxProps extends ComponentProps {
    /** The UI service. */
    uiService: UiService;
    /** Whether the yaw damper indication is supported. */
    supportYawDamper: boolean;
    /**
     * The maximum number of available vertical mode slots to the right of the active mode indication. The number of
     * available slots determines how many vertical mode target (altitude, vertical speed, airspeed) and armed mode
     * indications can be displayed simultaneously. Each armed mode indication uses one slot. The airspeed target
     * indication uses one slot. The altitude and vertical speed indications each use 1.5 slots.
     */
    maxVerticalRightSlots: number | Subscribable<number>;
}
/**
 * A G3X Touch AFCS status box.
 */
declare class AfcsStatusBox extends DisplayComponent<AfcsStatusBoxProps> {
    private static readonly VERTICAL_MODE_TARGET_TRANSIENT_DURATION;
    private static readonly MACH_FORMATTER;
    private readonly buttonRef;
    private readonly isInnerHidden;
    private readonly lastData;
    private lastVNavPathMode;
    private readonly fdActive;
    private readonly fmaData;
    private readonly vnavPathMode;
    private readonly isApMasterActive;
    private readonly isYdMasterActive;
    private readonly apSlotState;
    private readonly ydSlotState;
    private readonly tempSlotActiveData;
    private readonly lateralSlotActiveData;
    private readonly verticalSlotActiveData;
    private readonly lateralArmedHidden;
    private readonly lateralArmedText;
    private readonly maxVerticalRightSlots;
    private readonly maxVerticalRightSlotsStyle;
    private readonly verticalRightSlots;
    private readonly verticalArmedStringsCache;
    private readonly verticalArmedStrings;
    private verticalModeTargetType;
    private readonly altitudeCaptureValue;
    private readonly selectedVs;
    private readonly isSelectedSpeedInMach;
    private readonly selectedIas;
    private readonly selectedMach;
    private readonly verticalModeTargetHideDebounce;
    private readonly verticalModeTargetHidden;
    private readonly verticalModeTargetNumber;
    private readonly verticalModeTargetUnit;
    private verticalModeTargetSlots;
    private needHideVerticalModeTarget;
    private isAwake;
    private readonly subscriptions;
    private fdSub?;
    private fmaDataSub?;
    private vnavPathModeSub?;
    private maxVerticalArmedSlotsSub?;
    private altitudeCaptureValueSub?;
    private selectedVsSub?;
    private isSelectedSpeedInMachSub?;
    private selectedIasSub?;
    private selectedMachSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Wakes this status box. When awake, the status box will automatically update its display based on the current
     * flight director and autopilot state.
     */
    wake(): void;
    /**
     * Puts this status box to sleep. When asleep, the status box will not display any information.
     */
    sleep(): void;
    /**
     * Clears this status box's displayed information.
     */
    private clearDisplay;
    /**
     * Responds to when whether the flight director is active changes.
     * @param isActive Whether the flight director is active.
     */
    private onFdActiveChanged;
    /**
     * Updates this status box from a specific set of data.
     * @param data The FMA data from which to update.
     * @param vnavPathMode The VNAV path mode.
     * @param lastData The previous FMA data.
     * @param lastVNavPathMode The previous VNAV path mode.
     */
    private updateFromFmaData;
    /**
     * Gets the display text for an active autopilot lateral mode.
     * @param mode An active autopilot lateral mode.
     * @returns The display text for the specified active autopilot lateral mode.
     */
    private getLateralActiveString;
    /**
     * Gets the display text for an armed autopilot lateral mode.
     * @param mode An armed autopilot lateral mode.
     * @returns The display text for the specified armed autopilot lateral mode.
     */
    private getLateralArmedString;
    /**
     * Gets the display text for an active autopilot vertical mode.
     * @param mode An active autopilot vertical mode.
     * @param altCapMode The altitude capture mode associated with the active vertical mode.
     * @returns The display text for the specified active autopilot vertical mode and altitude capture mode.
     */
    private getVerticalActiveString;
    /**
     * Gets a list of armed autopilot vertical mode display texts for a given autopilot state.
     * @param activeMode The active autopilot vertical mode in the autopilot state for which to get the display texts.
     * @param armedMode The armed autopilot vertical mode in the autopilot state for which to get the display texts.
     * @param armedApproachMode The armed autopilot approach vertical mode in the autopilot state for which to get the
     * display texts.
     * @param altCapArmed Whether altitude capture is armed in the autopilot state for which to get the display texts.
     * @param altCapMode The altitude capture mode in the autopilot state for which to get the display texts.
     * @param vnavPathMode The VNAV path mode in the autopilot state for which to get the display texts.
     * @param out The array to which to write the results.
     * @returns An array containing a list of armed autopilot vertical mode display texts for the specified autopilot
     * state.
     */
    private getVerticalArmedStrings;
    /**
     * Resolves the state of this status box's vertical mode slots to the right of the active mode indication.
     * @param targetType The target type of the autopilot's current active vertical mode.
     * @param armedStrings An array of armed autopilot vertical mode display texts for the current autopilot state.
     * @param maxSlots The maximum number of available slots.
     */
    private resolveVerticalRightSlots;
    /**
     * Fills this status box's vertical mode slots to the right of the active mode indication.
     * @param targetSlots The number of slots taken up by the vertical mode target indication, or `0` if the target
     * indication should not be displayed.
     * @param armedStrings An array of armed autopilot vertical mode display texts to write to the slots.
     * @param maxSlots The maximum number of available slots.
     */
    private fillVerticalRightSlots;
    /**
     * Sets the target type of the current autopilot active vertical mode. Once a target type is set, this status box
     * will be automatically updated when the corresponding target value changes.
     * @param type The vertical mode target type to set.
     */
    private setVerticalModeTargetType;
    /**
     * Responds to when the autopilot's altitude capture target changes.
     * @param altitude The new altitude capture target, in feet.
     */
    private onAltitudeCaptureValueChanged;
    /**
     * Responds to when the autopilot's selected vertical speed target changes.
     * @param vs The new selected vertical speed target, in feet per minute.
     */
    private onSelectedVsChanged;
    /**
     * Responds to when the autopilot's selected indicated airspeed target changes.
     * @param ias The new selected indicated airspeed target, in knots.
     */
    private onSelectedIasChanged;
    /**
     * Responds to when the autopilot's selected mach target changes.
     * @param mach The new selected mach target.
     */
    private onSelectedMachChanged;
    /**
     * Refreshes the visibility of this status box's vertical mode target indication. This method will immediately make
     * the target indication visible if it is not already visible. After a five-second delay, the target indication will
     * be hidden if doing so is required to unmask a vertical armed mode indication.
     */
    private refreshVerticalModeTargetVisibility;
    /**
     * Responds to when this status box is pressed.
     */
    private onPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A configuration object which defines an airspeed tape color range.
 */
declare class ColorRangeConfig implements ResolvableConfig<AirspeedIndicatorColorRange> {
    readonly isResolvableConfig = true;
    /** The width of this config's color range. */
    readonly width: AirspeedIndicatorColorRangeWidth;
    /** The color of this config's color range. */
    readonly color: AirspeedIndicatorColorRangeColor;
    /** The config which defines the minimum airspeed value of this config's color range. */
    readonly minimum: NumericConfig;
    /** The config which defines the maximum airspeed value of this config's color range. */
    readonly maximum: NumericConfig;
    /**
     * Creates a new ColorRangeConfig from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     */
    constructor(element: Element, factory: ConfigFactory);
    /**
     * Parses an endpoint numeric config from a configuration document element.
     * @param element A configuration document element.
     * @param factory A configuration object factory to use to create child configuration objects.
     * @returns The numeric config defined by the specified element, or `undefined` if one could not be created.
     */
    private parseEndpoint;
    /** @inheritdoc */
    resolve(): AirspeedIndicatorColorRange;
}

/**
 * Component props for {@link G3XAltimeter}.
 */
interface G3XAltimeterProps extends ComponentProps {
    /** The UI service. */
    uiService: UiService;
    /** The index of the sim altimeter whose indicated altitude and barometric pressure setting is bound to the altimeter. */
    index: number;
    /** A provider of altimeter data. */
    dataProvider: AltimeterDataProvider;
    /** The unit type in which to display the altimeter barometric pressure setting. */
    baroDisplayUnit: Subscribable<Unit<UnitFamily.Pressure>>;
    /** The current altitude alert state. */
    altitudeAlertState: Subscribable<AltitudeAlertState>;
    /** The current minimums alert state. */
    minimumsAlertState: Subscribable<MinimumsAlertState>;
    /** Whether the altimeter should be decluttered. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3X Touch PFD altimeter.
 */
declare class G3XAltimeter extends DisplayComponent<G3XAltimeterProps> {
    private thisNode?;
    private readonly rootCssClass;
    private readonly showTopBottomDisplays;
    private keyEventManager?;
    private minimumsAlertSub?;
    private isDataFailedSub?;
    /** @inheritdoc */
    constructor(props: G3XAltimeterProps);
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when this altimeter's selected altitude button is pressed.
     */
    private onSelectedAltitudePressed;
    /**
     * Responds to when this altimeter's barometric pressure setting button is pressed.
     */
    private onBaroSettingPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link BaroMinimumDisplay}.
 */
interface BaroMinimumDisplayProps extends ComponentProps {
    /** The UI service. */
    uiService: UiService;
    /** A provider of minimums data. */
    dataProvider: MinimumsDataProvider;
    /** The current minimums alert state. */
    minimumsAlertState: Subscribable<MinimumsAlertState>;
    /** Whether the display should be decluttered. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3X barometric minimums display.
 */
declare class BaroMinimumDisplay extends DisplayComponent<BaroMinimumDisplayProps> {
    private static readonly FORMATTER;
    private readonly rootRef;
    private readonly rootCssClass;
    private readonly publisher;
    private readonly isVisible;
    private readonly minimumsValue;
    private baroMinimumsPipe?;
    private minimumsModeSub?;
    private minimumsAlertSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when this display's visibility changes.
     * @param isVisible Whether the display is visible.
     */
    private onVisibilityChanged;
    /**
     * Responds to when the minimums mode changes.
     * @param mode The new minimums mode.
     */
    private onMinimumsModeChanged;
    /**
     * Responds to when the minimums alert state changes.
     * @param state The new minimums alert state.
     */
    private onMinimumsAlertStateChanged;
    /**
     * Responds to when this display is pressed.
     */
    private onPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link BearingInformationDisplay}.
 */
interface BearingInformationDisplayProps extends ComponentProps {
    /** The index of the bearing pointer associaed with the display. */
    index: 1 | 2;
    /** The nav indicator associated with the bearing info display. */
    indicator: G3XTouchNavIndicator;
    /** A manager for display unit user settings. */
    unitsSettingManager: G3XUnitsUserSettingManager;
    /** Whether the display should be decluttered. */
    declutter: Subscribable<boolean>;
}
/** Engine data indication display component for the G3X Touch */
declare class BearingInformationDisplay extends DisplayComponent<BearingInformationDisplayProps> {
    private readonly distanceRef;
    private readonly bearingInfoState;
    private readonly rootStyle;
    private readonly distanceStyle;
    private readonly outerTextStyle;
    private readonly innerText;
    private readonly outerText;
    private readonly distance;
    private declutterSub?;
    private distancePipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Handles if the state needs to change (background showing, showing distance, showing ident)
     * @param state the state the bearing pointer is in.
     */
    private onStateChanged;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this display's bearing info background
     * @returns This display's bearing info background, as a VNode.
     */
    private renderInfoBackground;
    /**
     * Renders this display's bearing info
     * @returns This display's bearing info, as a VNode.
     */
    private renderInfo;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link G3XFlightDirectorDualCue}.
 */
interface G3XFlightDirectorDualCueProps extends HorizonLayerProps {
    /** Whether to show the flight director. */
    show: Subscribable<boolean>;
    /** The flight director commanded pitch, in degrees. Positive values indicated upward pitch. */
    fdPitch: Subscribable<number>;
    /** The flight director commanded bank, in degrees. Positive values indicate rightward bank. */
    fdBank: Subscribable<number>;
    /**
     * The scaling factor to apply to the pitch command bar's translation. A factor of 1 causes the bar to translate
     * approximately in line with the angular resolution of the horizon projection. Larger factors will result in larger
     * translations for the same pitch error. Defaults to `1`.
     */
    pitchErrorFactor?: number | Subscribable<number>;
    /**
     * The scaling factor to apply to the bank command bar's translation. A factor of 1 causes the bar to translate
     * approximately in line with the angular resolution of the horizon projection. Larger factors will result in larger
     * translations for the same bank error. Defaults to `1`.
     */
    bankErrorFactor?: number | Subscribable<number>;
    /**
     * The translation constant to use for the bank command bar, in pixels per degree of bank error. If this value is
     * defined, it will override `bankErrorFactor`.
     */
    bankErrorConstant?: number | Subscribable<number>;
    /**
     * The bounds within which the flight director remains conformal, as `[left, top, right, bottom]` in pixels relative
     * to the center of the projection.
     */
    conformalBounds: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
}
/**
 * A PFD dual-cue flight director.
 */
declare class G3XFlightDirectorDualCue extends HorizonLayer<G3XFlightDirectorDualCueProps> {
    private readonly pitchErrorFactor;
    private readonly bankErrorFactor;
    private readonly bankErrorConstant;
    private readonly conformalBounds;
    private readonly display;
    private readonly pitchTransform;
    private readonly bankTransform;
    private needUpdate;
    private readonly pauseable;
    private showSub?;
    /** @inheritdoc */
    protected onVisibilityChanged(isVisible: boolean): void;
    /** @inheritdoc */
    onAttached(): void;
    /** @inheritdoc */
    onProjectionChanged(): void;
    /** @inheritdoc */
    onUpdated(): void;
    /** @inheritdoc */
    onDetached(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link G3XFlightDirectorSingleCue}.
 */
interface G3XFlightDirectorSingleCueProps extends HorizonLayerProps {
    /** Whether to show the flight director. */
    show: Subscribable<boolean>;
    /** The flight director commanded pitch, in degrees. Positive values indicated upward pitch. */
    fdPitch: Subscribable<number>;
    /** The flight director commanded bank, in degrees. Positive values indicate rightward bank. */
    fdBank: Subscribable<number>;
    /** Whether the autopilot is engaged. */
    apEngaged: Subscribable<boolean>;
    /**
     * The vertical bounds within which the flight director remains conformal, as `[top, bottom]` in pixels relative
     * to the center of the projection.
     */
    conformalBounds: ReadonlyFloat64Array | Subscribable<ReadonlyFloat64Array>;
    /** The maximum bank error at which the flight director's bank remains conformal, in degrees. */
    conformalBankLimit: number | Subscribable<number>;
}
/**
 * A PFD single-cue flight director.
 */
declare class G3XFlightDirectorSingleCue extends HorizonLayer<G3XFlightDirectorSingleCueProps> {
    private readonly conformalBounds;
    private readonly conformalBankLimit;
    private readonly display;
    private readonly apPassiveDisplay;
    private readonly transform;
    private needUpdate;
    private readonly pauseable;
    private showSub?;
    private apEngagedSub?;
    /** @inheritDoc */
    protected onVisibilityChanged(isVisible: boolean): void;
    /** @inheritDoc */
    onAttached(): void;
    /** @inheritDoc */
    onProjectionChanged(): void;
    /** @inheritDoc */
    onUpdated(): void;
    /** @inheritDoc */
    onDetached(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * HSI orientation modes.
 */
declare enum HsiOrientationMode {
    Heading = "Heading",
    Track = "Track"
}

/**
 * A data provider for an HSI.
 */
interface HsiDataProvider {
    /** The current active orientation mode. */
    readonly orientationMode: Subscribable<HsiOrientationMode>;
    /** The current magnetic heading, in degrees. */
    readonly headingMag: Subscribable<number>;
    /** The current turn rate, in degrees per second. */
    readonly turnRate: Subscribable<number>;
    /** The current magnetic ground track, in degrees, or `null` if ground track is not available. */
    readonly trackMag: Subscribable<number | null>;
    /** The magnetic variation at the plane's current position, in degrees. */
    readonly magVar: Subscribable<number>;
    /** The nav indicator for the active nav source. */
    readonly activeNavIndicator: G3XTouchNavIndicator;
    /** The nav indicator for bearing pointer 1. */
    readonly bearing1Indicator: G3XTouchNavIndicator;
    /** The nav indicator for bearing pointer 2. */
    readonly bearing2Indicator: G3XTouchNavIndicator;
    /** The current selected magnetic heading, in degrees. */
    readonly selectedHeadingMag: Subscribable<number>;
    /** The current LNAV cross-track error, in nautical miles, or `null` if LNAV is not tracking a path. */
    readonly lnavXtk: Subscribable<number | null>;
    /** The current LNAV OBS/suspend mode. */
    readonly obsSuspMode: Subscribable<ObsSuspModes>;
    /** The current magnetic OBS course, in degrees. */
    readonly obsCourse: Subscribable<number>;
    /** The number of supported external flight plan sources. */
    readonly externalFplSourceCount: 0 | 1 | 2;
    /** The current flight plan source. */
    readonly fplSource: Subscribable<G3XFplSource>;
    /** Whether heading data is in a failure state. */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    /** Whether the AHRS that is this provider's source of heading data is aligning. */
    readonly isAhrsAligning: Subscribable<boolean>;
    /** Whether GPS data is in a failure state. */
    readonly isGpsDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link HsiDataProvider}.
 */
declare class DefaultHsiDataProvider implements HsiDataProvider {
    private readonly bus;
    readonly activeNavIndicator: G3XTouchNavIndicator;
    readonly bearing1Indicator: G3XTouchNavIndicator;
    readonly bearing2Indicator: G3XTouchNavIndicator;
    private readonly fplSourceDataProvider;
    private readonly settingManager;
    private readonly supportAutopilot;
    private readonly isTrackValid;
    private readonly isApHdgModeActive;
    private readonly _orientationMode;
    /** @inheritDoc */
    readonly orientationMode: Subscribable<HsiOrientationMode>;
    private readonly _headingMag;
    /** @inheritDoc */
    readonly headingMag: Subscribable<number>;
    private readonly _turnRate;
    /** @inheritDoc */
    readonly turnRate: Subscribable<number>;
    private readonly groundSpeed;
    private readonly trackMagSource;
    private readonly _trackMag;
    /** @inheritDoc */
    readonly trackMag: Subscribable<number | null>;
    private readonly _magVar;
    /** @inheritDoc */
    readonly magVar: Subscribable<number>;
    private readonly _selectedHeadingMag;
    /** @inheritDoc */
    readonly selectedHeadingMag: Subscribable<number>;
    private readonly isLNavIndexValid;
    private readonly isLNavTracking;
    private readonly lnavXtkSource;
    private readonly _lnavXtk;
    /** @inheritDoc */
    readonly lnavXtk: Subscribable<number | null>;
    private readonly obsSuspDataProvider;
    /** @inheritDoc */
    readonly obsSuspMode: Subscribable<ObsSuspModes>;
    /** @inheritDoc */
    readonly obsCourse: Subscribable<number>;
    /** @inheritDoc */
    readonly externalFplSourceCount: 0 | 2 | 1;
    /** @inheritDoc */
    readonly fplSource: Subscribable<G3XFplSource>;
    private readonly isHeadingDataValid;
    /** @inheritDoc */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    private readonly ahrsState;
    /** @inheritDoc */
    readonly isAhrsAligning: Subscribable<boolean>;
    private readonly fmsPosMode;
    /** @inheritDoc */
    readonly isGpsDataFailed: Subscribable<boolean>;
    private readonly ahrsIndex;
    private readonly fmsPosIndex;
    private isInit;
    private isAlive;
    private isPaused;
    private readonly subscriptions;
    /**
     * Creates a new instance of DefaultHsiDataProvider.
     * @param bus The event bus.
     * @param ahrsIndex The index of the AHRS from which to source data.
     * @param fmsPosIndex The index of the FMS geo-positioning system from which to source data.
     * @param activeNavIndicator The nav indicator for the active nav source.
     * @param bearing1Indicator The nav indicator for bearing pointer 1.
     * @param bearing2Indicator The nav indicator for bearing pointer 2.
     * @param fplSourceDataProvider A provider of flight plan source data.
     * @param settingManager A manager for HSI user settings.
     * @param supportAutopilot Whether autopilot mode sensing is supported.
     */
    constructor(bus: EventBus, ahrsIndex: number | Subscribable<number>, fmsPosIndex: number | Subscribable<number>, activeNavIndicator: G3XTouchNavIndicator, bearing1Indicator: G3XTouchNavIndicator, bearing2Indicator: G3XTouchNavIndicator, fplSourceDataProvider: G3XFplSourceDataProvider, settingManager: UserSettingManager<PfdHsiUserSettingTypes>, supportAutopilot: boolean);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * Component props for {@link Hsi}.
 */
interface HSIProps extends ComponentProps {
    /** The UI service. */
    uiService: UiService;
    /** A data provider for the HSI. */
    dataProvider: HsiDataProvider;
    /** A manager for GDU user settings. */
    gduSettingManager: UserSettingManager<GduUserSettingTypes>;
    /** A manager for HSI user settings. */
    hsiSettingManager: UserSettingManager<PfdHsiUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
    /** Whether the HSI should be decluttered. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3X Touch HSI (horizontal situation indicator).
 */
declare class Hsi extends DisplayComponent<HSIProps> {
    private static readonly ROSE_OPTIONS;
    private static readonly UPPER_CDI_OPTIONS;
    private readonly hdgButtonRef;
    private readonly crsButtonRef;
    private readonly hdgRef;
    private readonly crsRef;
    private readonly roseRef;
    private readonly upperDeviationIndicatorRef;
    private readonly rootCssClass;
    private readonly isHdgCrsVisible;
    private readonly selectedHeadingState;
    private readonly selectedHeadingValue;
    private readonly crsMag;
    private readonly crsState;
    private readonly crsValue;
    private readonly crsSourceState;
    private readonly isCrsButtonEnabled;
    private readonly showUpperDeviationIndicator;
    private cdiSourceSub?;
    private navCoursePipe?;
    private obsCoursePipe?;
    private headingDataFailedSub?;
    private gpsDataFailedSub?;
    private declutterSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Responds to when the rose is pressed.
     */
    private onRosePressed;
    /**
     * Responds to when the selected heading button is pressed.
     */
    private onHdgPressed;
    /**
     * Responds to when the course button is pressed.
     */
    private onCrsPressed;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link HsiCourseNeedle}.
 */
interface HsiCourseNeedleProps extends ComponentProps {
    /** The nav indicator to use. */
    navIndicator: G3XTouchNavIndicator;
    /** The magnetic variation correction to apply to the needle's magnetic course, in degrees. */
    magVarCorrection: Subscribable<number>;
    /** Whether heading data is in a failure state. */
    isHeadingDataFailed: Subscribable<boolean>;
    /** Whether the course needle should actively update. */
    isActive: Subscribable<boolean>;
}
/**
 * A course needle for an HSI.
 *
 * The course needle recognizes a total of four separate active NAV sources: two of type NAV (radio) and two of type
 * GPS. A CSS class is added to the needle's root element (e.g. `hsi-course-needle-nav1`) based on which source is
 * currently active.
 */
declare abstract class HsiCourseNeedle<P extends HsiCourseNeedleProps = HsiCourseNeedleProps> extends DisplayComponent<P> {
    private static readonly RESERVED_CSS_CLASSES;
    private static readonly ANIMATION_RATE;
    private readonly rootCssClass;
    private readonly nominalCourse;
    private readonly targetRotation;
    private readonly animator;
    private readonly rotation;
    private sourceSub?;
    private isHeadingDataFailedSub?;
    private isActiveSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Gets the CSS class(es) to apply to this needle's root element.
     * @returns The CSS class(es) to apply to this needle's root element.
     */
    protected getRootCssClass(): string;
    /**
     * Renders a needle.
     * @returns A needle, as a VNode.
     */
    protected abstract renderNeedle(course: Subscribable<number | null>, deviation: Subscribable<number | null>, toFrom: Subscribable<VorToFrom | null>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link HsiActiveNavNeedle}.
 */
interface HsiActiveNavNeedleProps extends HsiCourseNeedleProps {
    /** The total length, in pixels, of the lateral deviation scale (5 dots). */
    deviationScaleLength: number;
    /** The size (diameter) of each lateral deviation scale dot, in pixels. */
    deviationDotSize: number;
    /** The radius from the center of the HSI compass, in pixels, at which each outer end of the course arrow stem lies. */
    stemOuterRadius: number;
    /** The radius from the center of the HSI compass, in pixels, at which each inner end of the course arrow stem lies. */
    stemInnerRadius: number;
    /** The radius from the center of the HSI compass, in pixels, at which each end of the deviation indicator stem lies. */
    stemDeviationOuterRadius: number;
    /** The width of the course arrow and deviation indicator stems, in pixels. */
    stemWidth: number;
    /** The length of the course arrowhead, in pixels. */
    arrowLength: number;
    /** The width of the course arrowhead, in pixels. */
    arrowWidth: number;
    /** The radius from the center of the HSI compass, in pixels, at which the tip of the TO/FROM arrow lies. */
    toFromArrowOuterRadius: number;
    /** The length of the TO/FROM arrow, in pixels. */
    toFromArrowLength: number;
    /** The width of the TO/FROM arrow, in pixels. */
    toFromArrowWidth: number;
}
/**
 * An HSI course needle for the active nav source, consisting of an arrow, to/from flag, and a course deviation
 * indicator (CDI) with hollow dot markers representing full- and half-scale deviation.
 *
 * The course needle supports four different styles: regular HSI rose style, HSI map style, and a closed (solid color)
 * style and an open (color outline with transparent middle) style for each of the first two. The HSI rose style
 * includes a course deviation indicator, while the HSI map style does not.
 */
declare class HsiActiveNavNeedle extends HsiCourseNeedle<HsiActiveNavNeedleProps> {
    private readonly twoDotPx;
    private readonly rootHidden;
    private readonly rootTransform;
    private readonly deviationHidden;
    private readonly deviationTransform;
    private readonly toFromHidden;
    private readonly toFromTransform;
    private courseSub?;
    private deviationSub?;
    private toFromSub?;
    /**
     * Responds to when this needle's course changes.
     * @param course The new course, in degrees, or `null` if there is no valid course.
     */
    private onCourseChanged;
    /**
     * Responds to when this needle's deviation changes.
     * @param deviation The new deviation, scaled such that 2 dots deviation is equal to +/-1, or `null` if there is no
     * valid deviation.
     */
    private onDeviationChanged;
    /**
     * Responds to when this needle's TO/FROM flag changes.
     * @param toFrom The new TO/FROM flag, or `null` if there is no valid flag.
     */
    private onToFromChanged;
    /** @inheritDoc */
    protected getRootCssClass(): string;
    /** @inheritDoc */
    protected renderNeedle(course: Subscribable<number | null>, deviation: Subscribable<number | null>, toFrom: Subscribable<VorToFrom | null>): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link HsiBearingPointer}.
 */
interface HsiBearingPointerProps extends ComponentProps {
    /** The index of the bearing pointer. */
    index: 1 | 2;
    /** The nav indicator to use. */
    navIndicator: G3XTouchNavIndicator;
    /** The magnetic variation correction to apply to the needle's magnetic course, in degrees. */
    magVarCorrection: Subscribable<number>;
    /** Whether heading data is in a failure state. */
    isHeadingDataFailed: Subscribable<boolean>;
    /** Whether the bearing pointer should actively update. */
    isActive: Subscribable<boolean>;
    /** The radius from the center of the HSI compass, in pixels, at which each outer end of the pointer stem lies. */
    stemOuterRadius: number;
    /** The radius from the center of the HSI compass, in pixels, at which each inner end of the pointer stem lies. */
    stemInnerRadius: number;
    /** The width of the block stem, in pixels. Ignored if `index` is `1`. */
    stemWidth: number;
    /** The radius from the center of the HSI compass, in pixels, at which the tip of the pointer arrow lies. */
    arrowOuterRadius: number;
    /** The length of the pointer arrowhead, in pixels. */
    arrowLength: number;
    /** The width of the pointer arrowhead, in pixels. */
    arrowWidth: number;
}
/**
 * A bearing pointer for an HSI.
 */
declare class HsiBearingPointer extends DisplayComponent<HsiBearingPointerProps> {
    private static readonly ANIMATION_RATE;
    private readonly hidden;
    private readonly transform;
    private readonly nominalBearing;
    private readonly targetRotation;
    private readonly isVisible;
    private readonly animator;
    private isActiveSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for HsiCompass.
 */
interface HsiCompassProps extends ComponentProps {
    /** The size of the compass, in pixels. */
    size: number;
    /** The offset, in pixels, of the compass labels from the edge of the compass. */
    labelOffset: number;
    /** The length of the small compass ticks, in pixels. */
    tickLengthSmall: number;
    /** The length of the medium compass ticks, in pixels. */
    tickLengthMedium: number;
    /** The length of the large compass ticks, in pixels. */
    tickLengthLarge: number;
    /** The rotation of the compass, in degrees. */
    rotation: Subscribable<number>;
}
/**
 * A compass display for a G3X Touch HSI.
 *
 * The compass display depicts a circular compass rose with minor tick marks every 5 degrees and major tick marks every
 * 10 degrees. The cardinal directions are labeled N/E/S/W, with numeric labels (3, 6, 12, ...) at every hour position
 * that does not represent a cardinal direction.
 *
 * The compass also optionally displays a single continuous circular line of arbitrary radius within the rose.
 */
declare class HsiCompass extends DisplayComponent<HsiCompassProps> {
    private readonly labelTransform;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this compass's tick marks.
     * @returns This compass's tick marks, as an array of VNodes.
     */
    private renderTicks;
    /**
     * Gets the length of a tick mark based on the loop index.
     * @param index The loop index of the requested tick mark
     * @returns The length of the requested tick mark
     */
    private getTickLength;
    /**
     * Renders this compass's labels.
     * @returns This compass's labels, as an array of VNodes.
     */
    private renderLabels;
}

/**
 * Turn rate indicator configuration options for {@link HsiRose}.
 */
type HsiRoseTurnRateIndicatorOptions = Required<Pick<TurnRateProps, 'height' | 'tickOffset' | 'tickLength' | 'vectorOffset' | 'vectorWidth' | 'vectorArrowWidth' | 'vectorArrowLength'>>;
/**
 * Active nav course needle configuration options for {@link HsiRose}.
 */
type HsiActiveNavNeedleOptions = Pick<HsiActiveNavNeedleProps, 'deviationScaleLength' | 'deviationDotSize' | 'stemOuterRadius' | 'stemInnerRadius' | 'stemDeviationOuterRadius' | 'stemWidth' | 'arrowLength' | 'arrowWidth' | 'toFromArrowOuterRadius' | 'toFromArrowLength' | 'toFromArrowWidth'>;
/**
 * Bearing pointer configuration options for {@link HsiRose}.
 */
type HsiBearingPointerOptions = Pick<HsiBearingPointerProps, 'stemOuterRadius' | 'stemInnerRadius' | 'stemWidth' | 'arrowOuterRadius' | 'arrowLength' | 'arrowWidth'>;
/**
 * Configuration options for {@link HsiRose}.
 */
type HsiRoseOptions = {
    /** The radius of the rose compass, in pixels. */
    compassRadius: number;
    /** The radius of the bearing pointer circle, in pixels. */
    bearingPointerCircleRadius: number;
    /** Options with which to configure the turn rate indicator. */
    turnRateIndicatorOptions: Readonly<HsiRoseTurnRateIndicatorOptions>;
    /** Options with which to configure the active course needle. */
    activeNavNeedleOptions: Readonly<HsiActiveNavNeedleOptions>;
    /** Options with which to configure the bearing pointers. */
    bearingPointerOptions: Readonly<HsiBearingPointerOptions>;
};
/**
 * Component props for {@link HsiRose}.
 */
interface HsiRoseProps extends ComponentProps {
    /** Whether the rose should be visible. */
    show: Subscribable<boolean>;
    /** A provider of HSI data. */
    dataProvider: HsiDataProvider;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** A configuration object defining options for radios. */
    radiosConfig: RadiosConfig;
    /** A callback function which will be called every time the rose is pressed. */
    onPressed?: () => void;
    /** Options with which to configure the rose. */
    options: Readonly<HsiRoseOptions>;
}
/**
 * An HSI rose.
 */
declare class HsiRose extends DisplayComponent<HsiRoseProps> {
    private thisNode?;
    private readonly turnRateIndicatorRef;
    private readonly rootHidden;
    private readonly headingReadoutHidden;
    private readonly trackReadoutHidden;
    private readonly compassRotationTransform;
    private readonly headingPointerTransform;
    private readonly trackHidden;
    private readonly trackTransform;
    private readonly headingBugTransform;
    private readonly airplaneIconTransform;
    private readonly xtkStyle;
    private readonly headingState;
    private readonly headingValue;
    private readonly trackState;
    private readonly trackValue;
    private readonly magVarCorrection;
    private readonly nominalHeading;
    private readonly compassRotation;
    private readonly nominalTrack;
    private readonly nominalSelectedHeading;
    private readonly isBearingPointerCircleHidden;
    private readonly navSourceCssClassSubscribable;
    private readonly navSourceCssClass;
    private readonly navSourceText;
    private readonly navSensitivityHidden;
    private readonly navSensitivityValueHidden;
    private readonly navSensitivityText;
    private readonly navSensitivityUnitText;
    private readonly navSensitivityFlagCssClassSubscribable;
    private readonly navSensitivityFlagCssClass;
    private readonly isXtkVisible;
    private readonly lnavXtkPrecision;
    private readonly lnavXtk;
    private readonly obsSuspText;
    private readonly showHdgFailureBox;
    private showSub?;
    private magVarCorrectionPipe?;
    private navAngleUnitsSub?;
    private orientationModeSub?;
    private turnRateSub?;
    private isHeadingDataFailedSub?;
    private navSensitivitySub?;
    private lnavXtkPipe?;
    private lnavXtkPrecisionSub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link HsiUpperDeviationIndicator}.
 */
interface HsiUpperDeviationIndicatorProps extends ComponentProps {
    /** Whether to show the indicator. */
    show: Subscribable<boolean>;
    /** A provider of HSI data. */
    dataProvider: HsiDataProvider;
    /** The size of the indicator, as `[width, height]` in pixels. */
    size: ReadonlyFloat64Array;
    /** The size (diameter) of each scale dot, in pixels. */
    dotSize: number;
}
/**
 * An upper lateral deviation indicator for a G3X Touch HSI. The indicator displays lateral course deviation with a
 * five-dot scale (2.5 dots on each side). The indicator automatically hides itself if there is no deviation data.
 */
declare class HsiUpperDeviationIndicator extends DisplayComponent<HsiUpperDeviationIndicatorProps> {
    private readonly twoDotPx;
    private readonly hidden;
    private readonly pointerTransform;
    private readonly triangleTransform;
    private readonly isPointerDiamond;
    private readonly subscriptions;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link PfdAileronRudderTrimGauge}.
 */
interface PfdAileronRudderTrimGaugeProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /**
     * A configuration object that defines options for the aileron trim gauge. If not defined, then the aileron trim
     * gauge will not be rendered.
     */
    aileronTrimGaugeConfig?: PfdAileronTrimGaugeConfig;
    /**
     * A configuration object that defines options for the rudder trim gauge. If not defined, then the rudder trim gauge
     * will not be rendered.
     */
    rudderTrimGaugeConfig?: PfdRudderTrimGaugeConfig;
}
/**
 * A PFD aileron and rudder trim gauge.
 */
declare class PfdAileronRudderTrimGauge extends DisplayComponent<PfdAileronRudderTrimGaugeProps> {
    private readonly markerWidth;
    private readonly rulerWidth;
    private readonly rulerHeightRudderAndAileron;
    private readonly rulerVerticalFrameHeightRudderOrAileron;
    private readonly controlSurfacesPub;
    /** The value of the aileron trim in percent.-100...100 */
    private readonly aileronTrimValuePCT;
    private readonly aileronMarkerTransform;
    /** The value of the rudder trim in percent.-100...100 */
    private readonly rudderTrimValuePCT;
    private readonly rudderMarkerTransform;
    /** @inheritDoc */
    render(): VNode | null;
    /**
     * Renders the rudder and trim gauge.
     * @returns The rudder and trim gauge.
     * */
    private renderRudderAndAileron;
    /**
     * Renders the rudder or aileron trim gauge.
     * @param rudderOrTrim - The type of gauge to render.
     * @returns The rudder or aileron trim gauge.
     */
    private renderRudderOrAileron;
}

/**
 * Component props for {@link PfdFlapsElevatorTrimGauge}.
 */
interface PfdFlapsElevatorTrimGaugeProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /**
     * A configuration object that defines options for the flaps gauge. If not defined, then the flaps gauge will not be
     * rendered.
     */
    flapsGaugeConfig?: PfdFlapsGaugeConfig;
    /**
     * A configuration object that defines options for the elevator trim gauge. If not defined, then the elevator trim
     * gauge will not be rendered.
     */
    elevatorTrimGaugeConfig?: PfdElevatorTrimGaugeConfig;
}
/**
 * A PFD flaps and elevator trim gauge.
 */
declare class PfdFlapsElevatorTrimGauge extends DisplayComponent<PfdFlapsElevatorTrimGaugeProps> {
    /** @inheritdoc */
    render(): VNode;
}

/**
 * Component props for {@link PfdFlapsGauge}.
 */
interface PfdFlapsGaugeProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
    /** A configuration object defining options for the gauge. */
    config: PfdFlapsGaugeConfig;
}
/**
 * A PFD flaps gauge.
 */
declare class PfdFlapsGauge extends DisplayComponent<PfdFlapsGaugeProps> {
    private readonly markerHeight;
    private readonly rulerHeight;
    private readonly rulerWidth;
    private readonly controlSurfacesPub;
    private readonly flapsValue;
    private readonly markerTransform;
    /**
     * Gets the position along this gauge's scale at which a given angle is located, from 0 (top) to 100 (bottom).
     * @param angle The angle for which to get a scale position, in degrees.
     * @returns The position along this gauge's scale at which the specified angle is located, from 0 (top) to 100
     * (bottom).
     */
    private getScalePositionForAngle;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this gauge's scale ranges.
     * @returns This gauge's scale ranges, as an array of VNodes.
     */
    private renderScaleRanges;
    /**
     * Renders a scale range.
     * @param def The definition for the scale range to render.
     * @returns The scale range described by the specified definition, as a VNode.
     */
    private renderScaleRange;
    /**
     * Renders this gauge's scale tick marks.
     * @returns This gauge's scale tick marks., as an array of VNodes.
     */
    private renderScaleTicks;
    /**
     * Renders a scale tick mark.
     * @param def The definition for the scale tick mark to render.
     * @returns The scale tick mark described by the specified definition, as a VNode.
     */
    private renderScaleTick;
}

/**
 * Component props for {@link PfdElevatorTrimGauge}.
 */
interface PfdElevatorTrimGaugeProps extends ComponentProps {
    /** An instance of the event bus. */
    bus: EventBus;
}
/**
 * A PFD elevator trim gauge.
 */
declare class PfdElevatorTrimGauge extends DisplayComponent<PfdElevatorTrimGaugeProps> {
    private readonly markerHeight;
    private readonly rulerHeight;
    private readonly rulerWidth;
    private readonly controlSurfacesPub;
    /** The value of the elevator trim in percent.-100...100 */
    private readonly elevatorTrimValue;
    private readonly markerTransform;
    /** @inheritdoc */
    render(): VNode;
}

/**
 * Configuration options for {@link DefaultVdiDataProvider}.
 */
type DefaultVdiDataProviderOptions = {
    /** The ID of the FMS from which to source data. */
    fmsId?: string | Subscribable<string>;
    /** The index of the VNAV from which to source data. Defaults to `0`. */
    vnavIndex?: number | Subscribable<number>;
    /** The index of the AHRS from which to source data. Defaults to `1`. */
    ahrsIndex?: number | Subscribable<number>;
};
/**
 * A default G3X Touch implementation of `VdiDataProvider`.
 */
declare class DefaultVdiDataProvider implements VdiDataProvider {
    private readonly bus;
    private readonly vnavDataProvider;
    private readonly activeNavIndicator;
    private readonly _hasGs;
    /** @inheritDoc */
    readonly hasGs: Subscribable<boolean>;
    private readonly _gsDeviation;
    /** @inheritDoc */
    readonly gsDeviation: Subscribable<number | null>;
    private readonly _gsDeviationIsPreview;
    /** @inheritDoc */
    readonly gsDeviationIsPreview: Subscribable<boolean>;
    private readonly _hasGp;
    /** @inheritDoc */
    readonly hasGp: Subscribable<boolean>;
    private readonly _gpServiceLevel;
    /** @inheritDoc */
    readonly gpServiceLevel: Subscribable<GlidepathServiceLevel>;
    private readonly _gpDeviation;
    /** @inheritDoc */
    readonly gpDeviation: Subscribable<number | null>;
    private readonly _gpDeviationIsPreview;
    /** @inheritDoc */
    readonly gpDeviationIsPreview: Subscribable<boolean>;
    private readonly _gpDeviationScale;
    /** @inheritDoc */
    readonly gpDeviationScale: Subscribable<number | null>;
    private readonly _hasVNav;
    /** @inheritDoc */
    readonly hasVNav: Subscribable<boolean>;
    private readonly _vnavDeviation;
    /** @inheritDoc */
    readonly vnavDeviation: Subscribable<number | null>;
    private readonly fmsId;
    private readonly flightPhase;
    private readonly _isPastFaf;
    /** @inheritDoc */
    readonly isPastFaf: Subscribable<boolean>;
    private readonly vnavIndex;
    private readonly isVNavIndexValid;
    private readonly gpServiceLevelSource;
    private readonly gpApproachGuidanceMode;
    private readonly ahrsIndex;
    private readonly isHeadingDataValid;
    private readonly headingMagSource;
    private readonly headingMag;
    private readonly isCourseInRange;
    private readonly activeNavHasGp;
    private readonly gpIsPreview;
    private readonly activeNavHasGs;
    private isInit;
    private isAlive;
    private isResumed;
    private fmsIdSub?;
    private vnavIndexSub?;
    private ahrsIndexSub?;
    private gpDeviationPipe?;
    private gpIsPreviewSub?;
    private gpServiceLevelPipe?;
    private gpDeviationScalePipe?;
    private gsDeviationPipe?;
    private gsPreviewDeviationPipe?;
    private activeNavHasGpSub?;
    private activeNavIsGpsSub?;
    private activeNavHasGsSub?;
    private isGpCourseInRangeSub?;
    private isGsCourseInRangeSub?;
    /**
     * Creates a new instance of DefaultVdiDataProvider.
     * @param bus The event bus.
     * @param vnavDataProvider A provider of VNAV data.
     * @param activeNavIndicator The nav indicator for the active nav source.
     * @param options Options with which to configure the data provider.
     */
    constructor(bus: EventBus, vnavDataProvider: VNavDataProvider, activeNavIndicator: G3XTouchNavIndicator, options?: Readonly<DefaultVdiDataProviderOptions>);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. Defaults to `false`.
     * @throws Error if this data provider has been destroyed.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider has been destroyed.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider has been destroyed.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}

/**
 * Component props for {@link VerticalDeviationIndicator}.
 */
interface VerticalDeviationIndicatorProps extends ComponentProps {
    /** A data provider for the indicator. */
    dataProvider: VdiDataProvider;
    /** Whether the indicator should be decluttered. */
    declutter: Subscribable<boolean>;
    /**
     * Whether the indicator should support vertical deviation limit indicators for LNAV/VNAV glidepaths. Defaults to
     * `false`.
     */
    supportLimitIndicators?: boolean;
}
/**
 * A G3X Touch vertical deviation indicator.
 */
declare class VerticalDeviationIndicator extends DisplayComponent<VerticalDeviationIndicatorProps> {
    /** The scale's maximum absolute deviation, as a factor of full-scale deflection. */
    private static readonly SCALE_MAX;
    /** The scale denoted by the vertical deviation limit indicators, in feet. */
    private static readonly LIMIT_INDICATOR_SCALE;
    private readonly vnavBugRef;
    private readonly gpBugRef;
    private readonly gsBugRef;
    private readonly rootStyle;
    private readonly upperDot1Style;
    private readonly lowerDot1Style;
    private readonly centerLineStyle;
    private readonly noSignalStyle;
    private readonly limitIndicatorContainerStyle;
    private readonly limitIndicatorTopStyle;
    private readonly limitIndicatorBottomStyle;
    private readonly rootCssClass;
    private readonly supportLimitIndicators;
    private readonly labelText;
    private readonly noSignalText;
    private readonly primaryType;
    private readonly showVNavBug;
    private readonly showGpBug;
    private readonly showGsBug;
    private readonly vnavBugDeviation;
    private readonly gpBugDeviation;
    private readonly gsBugDeviation;
    private readonly showNoSignal;
    private readonly showLimitIndicator;
    private readonly limitIndicatorOffset;
    private readonly isGpOutsideLimits;
    private readonly isVisible;
    private declutterSub?;
    private vnavSub?;
    private gpSub?;
    private gsSub?;
    private gpNoSignalSub?;
    private gpPreviewSub?;
    private gsPreviewSub?;
    private gsNoSignalSub?;
    private gsPreviewNoSignalSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Calculates the vertical position on this indicator's scale at which a particular vertical deviation is located,
     * with `0` at the top of the scale and `1` at the bottom.
     * @param deviation A vertical deviation in the range `[-1, 1]`, where `+/-1` represents two dots deviation.
     * @returns The vertical position on this indicator's scale at which the specified vertical deviation is located,
     * with `0` at the top of the scale and `1` at the bottom.
     */
    private calculateScalePosition;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}

/**
 * Component props for {@link G3XVerticalSpeedIndicator}.
 */
interface G3XVerticalSpeedIndicatorProps extends ComponentProps {
    /** A data provider for the indicator. */
    dataProvider: VsiDataProvider;
    /** Whether the compact version of the indicator should be shown. */
    isCompact: boolean | Subscribable<boolean>;
    /** Whether the indicator should be decluttered. */
    declutter: Subscribable<boolean>;
    /** The maximum scale limit of the indicator, in feet per minute. */
    scaleMaximum: G3XVsiScaleMaximum;
    /** Whether advanced vnav is enabled or not. */
    isAdvancedVnav: boolean;
}
/**
 * A G3X PFD vertical speed indicator.
 */
declare class G3XVerticalSpeedIndicator extends DisplayComponent<G3XVerticalSpeedIndicatorProps> {
    private thisNode?;
    private readonly maximum;
    private readonly oneThousandScaleFraction;
    private readonly isCompact;
    private readonly isDataFailed;
    private readonly showBugs;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Calculates the vertical position on this indicator's scale at which a particular vertical speed is located, with
     * `0` at the top of the scale and `1` at the bottom.
     * @param verticalSpeed A vertical speed, in feet per minute.
     * @returns The vertical position on this indicator's scale at which the specified vertical speed is located, with
     * `0` at the top of the scale and `1` at the bottom.
     */
    private calculateScalePosition;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this indicator's minor scale ticks.
     * @returns This indicator's minor scale ticks, as an array of VNodes.
     */
    private renderScaleMinorTicks;
    /**
     * Renders this indicator's major scale ticks.
     * @returns This indicator's major scale ticks, as an array of VNodes.
     */
    private renderScaleMajorTicks;
    /**
     * Renders this indicator's scale labels.
     * @returns This indicator's scale labels, as an array of VNodes.
     */
    private renderScaleLabels;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * Component props for {@link PfdWindDisplay}.
 */
interface PfdWindDisplayProps extends ComponentProps {
    /** A provider of wind data. */
    dataProvider: WindDataProvider;
    /** A manager for wind display user settings. */
    windDisplaySettingManager: UserSettingManager<WindDisplayUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether the display should be decluttered. */
    declutter: Subscribable<boolean>;
}
/**
 * A G3X Touch PFD wind display.
 */
declare class PfdWindDisplay extends DisplayComponent<PfdWindDisplayProps> {
    private readonly headXWindOptionRef;
    private readonly speedDirOptionRef;
    private readonly isVisible;
    private readonly noDataHidden;
    private readonly headXWindOptionDeclutter;
    private readonly speedDirOptionDeclutter;
    private isAwake;
    private isVisibleSub?;
    private isDataFailedSub?;
    private displayModeSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Wakes this display. While this display is awake, it will automatically update itself.
     */
    wake(): void;
    /**
     * Puts this display to sleep. While this display is asleep, it is hidden and does not automatically update itself.
     */
    sleep(): void;
    /**
     * Responds to when this display's visibility changes.
     * @param isVisible Whether this display is visible.
     */
    private onVisibilityChanged;
    /**
     * Responds to when this display's wind data failure state changes.
     * @param isFailed Whether wind data in a failed state.
     */
    private onDataFailedChanged;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}

/**
 * A display component that is rendered by a plugin into a PFD instruments view.
 */
interface PfdInstrumentsPluginComponent extends DisplayComponent<any> {
    /** Flags this component as a PFD instruments plugin component. */
    readonly isPfdInstrumentsPluginComponent: true;
    /**
     * Responds to when this component's parent view is opened.
     * @param sizeMode The new size mode of the view's container.
     * @param dimensions The new dimensions of the view's container, as `[width, height]` in pixels.
     */
    onOpen(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when this component's parent view is closed.
     */
    onClose(): void;
    /**
     * Responds to when this component's parent view is resumed.
     */
    onResume(): void;
    /**
     * Responds to when this component's parent view is paused.
     */
    onPause(): void;
    /**
     * Responds when this component's parent view's container is resized while it is open.
     * @param sizeMode The new size mode of the view's container.
     * @param dimensions The new dimensions of the view's container, as `[width, height]` in pixels.
     */
    onResize(sizeMode: UiViewSizeMode, dimensions: ReadonlyFloat64Array): void;
    /**
     * Responds to when the occlusion type applied to this component's parent view changes while the view is open.
     * @param occlusionType The new occlusion type applied to the view.
     */
    onOcclusionChange(occlusionType: UiViewOcclusionType): void;
    /**
     * Called every update cycle.
     * @param time The current real (operating system) time, as a Javascript timestamp.
     */
    onUpdate(time: number): void;
}

/**
 * PFD knob actions.
 */
declare enum PfdKnobAction {
    /** Inner knob adjusts the heading bug; outer knob adjusts selected altitude. */
    HeadingAltitude = "Heading/Altitude",
    /** Inner knob adjusts the flight director bug; outer knob adjusts altimeter barometric pressure setting. */
    FdBugBaro = "FdBug/Baro",
    /** Inner knob adjusts selected course; outer knob adjusts altimeter barometric pressure setting. */
    CourseBaro = "Course/Baro"
}

/**
 * The base G3X Touch VCockpit instrument.
 */
declare class G3XTouch extends FsBaseInstrument<G3XTouchFsInstrument> {
    /** @inheritDoc */
    get templateID(): string;
    /** @inheritDoc */
    get isInteractive(): boolean;
    /** @inheritDoc */
    constructInstrument(): G3XTouchFsInstrument;
    /**
     * Sets this instrument's sim assisted checklist highlight layer element.
     * @param element The sim assisted checklist highlight layer element.
     */
    setHighlightElement(element: HTMLElement): void;
    /** @inheritDoc */
    onPowerOn(): void;
    /** @inheritDoc */
    onShutDown(): void;
}

/**
 * Version information for the G3X Touch.
 */
declare class G3XTouchVersion {
    static readonly VERSION = "WT2.0.4";
    static readonly VERSION_DATE: number;
}

export { AbstractG3XTouchPlugin, AbstractMfdNrstFacilityPage, AbstractMfdNrstPage, AbstractMfdNrstPageProps, AbstractMfdPage, AbstractPfdInset, AbstractSimpleUiNumberDialog, AbstractTabbedContent, AbstractUiNumberDialog, AbstractUiView, ActiveFlightPlanDataArray, ActiveFlightPlanStore, ActiveNavSourceManager, ActiveNavSourceManagerExternalNavigatorDefinition, ActiveNavSourceManagerOptions, AdcDefinition, AfcsControlsView, AfcsControlsViewProps, AfcsStatusBox, AfcsStatusBoxProps, AhrsDefinition, AirportFreqTab, AirportFreqTabProps, AirportRunwayTab, AirportRunwayTabProps, AirportWeatherTab, AirportWeatherTabProps, AirspeedIndicatorConfig, AirspeedIndicatorGsDataProvider, AoaDefinition, AoaIndicatorDisplaySettingMode, AoaIndicatorUserSettingTypes, ApproachDialog, ApproachDialogInput, ApproachDialogOutput, ApproachDialogProps, AttitudeIndicatorUserSettingTypes, AudioConfig, AudioPanelConfig, AudioPopup, AudioRadiosPopup, AudioRadiosPopupProps, AudioViewProps, AuralAlertsConfig, AutopilotConfig, AutopilotHdgOptions, AutopilotLNavOptions, AutopilotLocOptions, AutopilotLowBankOptions, AutopilotRollOptions, AutopilotVorOptions, AvionicsConfig, AvionicsStatus, AvionicsStatusChangeEvent, AvionicsStatusClient, AvionicsStatusEventClient, AvionicsStatusEvents, AvionicsStatusGlobalPowerEvent, AvionicsStatusManager, BacklightConfig, BacklightControlSettingMode, BacklightIntensityPopup, BacklightIntensityPopupProps, BacklightLightBusConfig, BacklightPhotoCellConfig, BacklightTrueUserSettingTypes, BacklightUserSettingTypes, BacklightUserSettings, BaroMinimumDialog, BaroMinimumDialogClearOutput, BaroMinimumDialogOutput, BaroMinimumDialogProps, BaroMinimumDialogSelectOutput, BaroMinimumDisplay, BaroMinimumDisplayProps, BaroPressureDialog, BaroPressureDialogInput, BaroPressureDialogOutput, BaroPressureDialogProps, BaseG3XAPNavToNavEvents, BasicNearestWaypointEntry, BearingInformationDisplay, BearingInformationDisplayProps, BingMapOptimizationConfig, CasPowerStateManager, CdiAutoSlewManager, ChannelInputSlot, ChannelInputSlotProps, ChannelSpacing, CharInput, CharInputProps, CharInputSlot, CharInputSlotProps, CnsAudioButtonGroup, CnsAudioButtonGroupProps, CnsComButtonGroup, CnsComButtonProps, CnsDataBarAudioItemDef, CnsDataBarButtonSizeSettingMode, CnsDataBarComRadioItemDef, CnsDataBarItemData, CnsDataBarItemDef, CnsDataBarItemType, CnsDataBarModeButtonSideSettingMode, CnsDataBarNavRadioItemDef, CnsDataBarScreenSideSettingMode, CnsDataBarShowSettingMode, CnsDataBarSimpleItemDef, CnsDataBarTrueUserSettingTypes, CnsDataBarUserSettingTypes, CnsDataBarUserSettings, CnsDataBarUtils, CnsNavButtonGroup, CnsNavButtonProps, CnsXpdrButtonGroup, CnsXpdrButtonGroupProps, ColorRangeConfig, ComFrequencyUserSettingTypes, ComRadio, ComRadioDefinition, ComRadioSpacingDataProvider, CombinedTouchButton, CombinedTouchButtonProps, Config, ConfigFactory, ConfigUtils, CourseDialog, CourseDialogInput, CursorInput, CursorInputCharSelectionMode, CursorInputProps, CursorInputSlot, DataBarFieldEditView, DataBarFieldEditViewProps, DataBarFieldSelectDialog, DataBarFieldSelectDialogInput, DataBarFieldSelectDialogProps, DataBarSetupView, DataBarSetupViewProps, DefaultAirspeedIndicatorGsDataProvider, DefaultComRadioSpacingDataProvider, DefaultConfigFactory, DefaultFlightPlanDataFieldCalculatorRepo, DefaultFlightPlanDataFieldCalculatorRepoOptions, DefaultFlightPlanDataFieldFactory, DefaultG3XFplSourceDataProvider, DefaultG3XUnitsUserSettingManager, DefaultHsiDataProvider, DefaultPositionHeadingDataProvider, DefaultVdiDataProvider, DefaultVdiDataProviderOptions, DigitInputSlot, DigitInputSlotProps, DirectToDialogProps, DirectToNearestTab, DirectToNearestTabItem, DirectToNearestTabItemProps, DirectToNearestTabProps, DirectToTargetParams, DirectToView, DirectToWaypointTab, DirectToWaypointTabProps, DisplayAllUserSettingTypes, DisplayLocationSettingMode, DisplayScreenSideSettingMode, DisplaySetupView, DisplaySetupViewProps, DisplayUserSettingManager, DisplayUserSettingTypes, DuplicateWaypointDialog, DuplicateWaypointDialogInput, EisLayouts, EisSizes, EngineConfig, ExternalGpsReceiverDefinition, ExternalNavigatorGpsReceiverDefinition, FlightDirectorFormatSettingMode, FlightDirectorUserSettingTypes, FlightPlanAddWaypointDataItem, FlightPlanApproachLegPreviewDataItem, FlightPlanDataArray, FlightPlanDataField, FlightPlanDataFieldCalculator, FlightPlanDataFieldCalculatorRepo, FlightPlanDataFieldFactory, FlightPlanDataFieldType, FlightPlanDataFieldTypeValueMap, FlightPlanDataItem, FlightPlanDataItemType, FlightPlanLegDataItem, FlightPlanLegDataItemActiveStatus, FlightPlanStore, FlightPlannerFlightPlanDataArray, FlightPlannerFlightPlanDataArrayOptions, FmsConfig, FmsExternalFplSourceConfig, FmsFlightPathOptions, FmsFlightPlanningConfig, FmsPositionDefinition, FocusableTouchButton, FplCalculationTrueUserSettingTypes, FplCalculationUserSettingTypes, FplCalculationUserSettings, FplDisplayTrueUserSettingTypes, FplDisplayUserSettingTypes, FplDisplayUserSettings, FplSourceTrueUserSettingTypes, FplSourceUserSettingTypes, FplSourceUserSettings, FrequencyInput, FrequencyInputProps, FuelCalculatorTab, FuelCalculatorTabProps, FuelTotalizer, FuelTotalizerControlEvents, FuelTotalizerEvents, FuelTotalizerSimVarPublisher, FuelTotalizerSimVars, G3XAPEvents, G3XActiveNavSource, G3XAirspeedAlertOptions, G3XAirspeedIndicator, G3XAirspeedIndicatorProps, G3XAirspeedTapeScaleOptions, G3XAirspeedTrendVectorOptions, G3XAltimeter, G3XAltimeterProps, G3XAttitudeAircraftSymbol, G3XAttitudeAircraftSymbolProps, G3XAutoBacklightManager, G3XAutoBacklightManagerOptions, G3XBacklightEvents, G3XBacklightManager, G3XBacklightPublisher, G3XBacklightUtils, G3XBearingDisplay, G3XBearingDisplayProps, G3XCdiId, G3XCircleGaugeProps, G3XCircularGaugeStyle, G3XCylinderGaugeProps, G3XCylinderGaugeStyle, G3XDateTimeTrueUserSettingTypes, G3XDateTimeUserSettings, G3XDoubleLinearVerticalGaugeStyle, G3XDoubleZonesLinearGaugeProps, G3XEisDefinition, G3XEisEvents, G3XEnginePageDefinition, G3XEnginePageFuelCalcTabDefinition, G3XEnginePageGaugesDefinition, G3XEnginePageSimpleTabDefinition, G3XEnginePageTabDefinition, G3XEnginePageTabType, G3XExternalFplSourceIndex, G3XExternalNavigatorIndex, G3XFailureBox, G3XFailureBoxProps, G3XFlightDirectorDualCue, G3XFlightDirectorDualCueProps, G3XFlightDirectorSingleCue, G3XFlightDirectorSingleCueProps, G3XFlightPlanRouteUtils, G3XFlightPlannerId, G3XFms, G3XFmsExternalFplSourceOptions, G3XFmsFplLoadedApproachData, G3XFmsFplUserDataKey, G3XFmsFplUserDataTypeMap, G3XFmsOptions, G3XFmsUtils, G3XFplSource, G3XFplSourceDataProvider, G3XFplSourceDataProviderSourceDef, G3XFplSourceEvents, G3XFplSourceSettingMode, G3XFunction, G3XGaugeColorZone, G3XGaugeColorZoneColor, G3XGaugeColumnProps, G3XGaugeColumnStyle, G3XGaugeProps, G3XGaugeRowProps, G3XGaugeSpec, G3XGaugeSpecConfig, G3XGaugeStyle, G3XGaugeType, G3XHorizonAircraftSymbolOptions, G3XHorizonDisplay, G3XHorizonDisplayProps, G3XHorizonPitchLadderOptions, G3XInternalPrimaryFlightPlanRouteLoader, G3XInternalPrimaryFlightPlanRouteProvider, G3XLinearGaugeProps, G3XMapAirspaceRendering, G3XMapBuilder, G3XMapCompassArcLayer, G3XMapCompassArcLayerModules, G3XMapCompassArcLayerProps, G3XMapCompassArcModule, G3XMapCompassArcOptions, G3XMapDelegatedUserSettingNames, G3XMapDetailIndicator, G3XMapDetailIndicatorProps, G3XMapKeys, G3XMapLabelTextSizeSettingMode, G3XMapMiniCompassLayer, G3XMapMiniCompassLayerModules, G3XMapMiniCompassLayerProps, G3XMapNexradController, G3XMapNexradControllerModules, G3XMapNexradUserSettings, G3XMapOmittedUserSettingNames, G3XMapOrientationModeController, G3XMapOrientationModeControllerContext, G3XMapOrientationModeControllerModules, G3XMapRangeSettingDisplay, G3XMapRangeSettingDisplayProps, G3XMapRangeValueDisplay, G3XMapRangeValueDisplayProps, G3XMapTerrainScaleIndicator, G3XMapTerrainScaleIndicatorProps, G3XMapTerrainWxSettingCompatManager, G3XMapTerrainWxUserSettings, G3XMapTrackVectorController, G3XMapTrackVectorControllerModules, G3XMapTrackVectorLayer, G3XMapTrackVectorLayerModules, G3XMapTrackVectorLayerProps, G3XMapTrackVectorMode, G3XMapTrackVectorModule, G3XMapTrackVectorOptions, G3XMapTrackVectorSettingMode, G3XMapTrackVectorUserSettings, G3XMapTrafficModule, G3XMapTrafficStatusIndicator, G3XMapTrafficStatusIndicatorProps, G3XMapTrueUserSettingTypes, G3XMapUserSettingTypes, G3XMapUserSettingUtils, G3XMapUtils, G3XMapWaypointLabelStyleFuncDef, G3XMapWaypointStyles, G3XMapWaypointVisUserSettings, G3XMapWaypointsLayerOptions, G3XNavDataBar, G3XNavDataBarEditController, G3XNavDataBarFieldModelFactory, G3XNavDataBarFieldRenderer, G3XNavDataBarProps, G3XNavDataFieldAglRenderer, G3XNavDataFieldBrgRenderer, G3XNavDataFieldCabinAltitudeRenderer, G3XNavDataFieldClgRenderer, G3XNavDataFieldClmRenderer, G3XNavDataFieldDensityAltitudeRenderer, G3XNavDataFieldDistRenderer, G3XNavDataFieldDistdRenderer, G3XNavDataFieldDtkRenderer, G3XNavDataFieldEcoRenderer, G3XNavDataFieldEdrRenderer, G3XNavDataFieldEtaRenderer, G3XNavDataFieldEtadRenderer, G3XNavDataFieldEteRenderer, G3XNavDataFieldEtedRenderer, G3XNavDataFieldFlightLevelRenderer, G3XNavDataFieldFodRenderer, G3XNavDataFieldFormatting, G3XNavDataFieldFuelFlowRenderer, G3XNavDataFieldGMeterRenderer, G3XNavDataFieldGpsAltitudeRenderer, G3XNavDataFieldGsRenderer, G3XNavDataFieldIsaRenderer, G3XNavDataFieldLclRenderer, G3XNavDataFieldMachRenderer, G3XNavDataFieldOatRenderer, G3XNavDataFieldRatRenderer, G3XNavDataFieldRemRenderer, G3XNavDataFieldTasRenderer, G3XNavDataFieldTrkRenderer, G3XNavDataFieldUtcRenderer, G3XNavDataFieldVsrRenderer, G3XNavDataFieldWptRenderer, G3XNavDataFieldXtkRenderer, G3XNavEvents, G3XNavMapBuilder, G3XNavMapOptions, G3XNavMapTrafficIconOptions, G3XNavSimVarPublisher, G3XNavToNavGuidanceProvider, G3XNavVars, G3XNearestAirportTrueUserSettingTypes, G3XNearestAirportUserSettingTypes, G3XNearestAirportUserSettings, G3XNearestContext, G3XNearestMapBuilder, G3XNearestMapOptions, G3XNearestMapRTRController, G3XNearestMapRTRControllerControllers, G3XNearestMapRTRControllerModules, G3XNearestMapTrafficIconOptions, G3XNumberUnitDisplay, G3XNumberUnitDisplayProps, G3XPeakingGaugeProps, G3XPitchLadder, G3XPitchLadderOptions, G3XPitchLadderProps, G3XPitchLadderStyles, G3XProcPreviewMapBuilder, G3XProcPreviewMapOptions, G3XRadioUtils, G3XSpecialChar, G3XSpecificMapUserSettingTypes, G3XSynVisUserSettingTypes, G3XTimeDisplay, G3XTimeDisplayProps, G3XToggleButtonGaugeProps, G3XTouch, G3XTouchActiveSourceNavIndicator, G3XTouchBearingPointerNavIndicator, G3XTouchFilePaths, G3XTouchFsInstrument, G3XTouchNavIndicator, G3XTouchNavIndicatorName, G3XTouchNavIndicators, G3XTouchNavSource, G3XTouchNavSourceName, G3XTouchNavSources, G3XTouchPlugin, G3XTouchPluginBinder, G3XTouchPrimaryFsInstrument, G3XTouchSecondaryFsInstrument, G3XTouchUiComponentContext, G3XTouchVersion, G3XTrafficInsetMapOptions, G3XTrafficMapBuilder, G3XTrafficMapIconOptions, G3XTrafficMapOperatingModeIndicator, G3XTrafficMapOperatingModeIndicatorProps, G3XTrafficMapOptions, G3XTrafficSystemSource, G3XTrafficSystemType, G3XTrafficTrueUserSettingTypes, G3XTrafficUserSettings, G3XTransponderEvents, G3XUnitFormatter, G3XUnitType, G3XUnitsBaroPressureSettingMode, G3XUnitsFuelEconomySettingMode, G3XUnitsTrueUserSettingTypes, G3XUnitsUserSettingManager, G3XUnitsUserSettingTypes, G3XUnitsUserSettings, G3XVSpeedBugDefinition, G3XVSpeedBugOptions, G3XVSpeedTrueUserSettingTypes, G3XVerticalSpeedIndicator, G3XVerticalSpeedIndicatorProps, G3XVsiConfig, G3XVsiScaleMaximum, G3XWaypointMapBuilder, G3XWaypointMapOptions, G3XWaypointMapTrafficIconOptions, G3XWaypointSearchType, G3XWaypointSearchTypeMap, Gdu460CnsDataBar, Gdu460CnsDataBarItemManager, Gdu460CnsDataBarItemManagerOptions, Gdu460CnsDataBarProps, Gdu460Display, Gdu460Eis, Gdu460EisProps, Gdu460HorizonDisplay, Gdu460HorizonDisplayProps, Gdu460PfdInstrumentsView, Gdu460PfdInstrumentsViewProps, GduAllUserSettingTypes, GduConfig, GduDefsConfig, GduDisplay, GduDisplayProps, GduFormat, GduUserSettingManager, GduUserSettingTypes, GenericCursorInputSlot, GenericCursorInputSlotProps, GenericTabbedContent, GenericTabbedContentMembers, GenericTabbedContentProps, GenericUiFocusableComponent, GenericUiFocusableComponentProps, GenericUiView, GenericUiViewMembers, GenericUiViewProps, GpsInfoChannelData, GpsReceiverDefinition, HSIProps, HorizonConfig, Hsi, HsiActiveNavNeedle, HsiActiveNavNeedleOptions, HsiActiveNavNeedleProps, HsiBearingPointer, HsiBearingPointerOptions, HsiBearingPointerProps, HsiCompass, HsiCompassProps, HsiCourseNeedle, HsiCourseNeedleProps, HsiDataProvider, HsiOrientationMode, HsiRose, HsiRoseOptions, HsiRoseProps, HsiRoseTurnRateIndicatorOptions, HsiUpperDeviationIndicator, HsiUpperDeviationIndicatorProps, IndexedG3XAPNavToNavEvents, InstrumentBackplaneNames, InstrumentConfig, InstrumentType, InternalGpsReceiverDefinition, ListDialogItemDefinition, LookupTableConfig, MainMenuView, MainMenuViewProps, MapConfig, MapDataIntegrityController, MapDataIntegrityControllerModules, MapDragPanController, MapDragPanControllerModules, MapDragPanModule, MapDragPanRTRController, MapDragPanRTRControllerModules, MapLabelTextModule, MapLabelTextSizeMode, MapOrientationOverrideModule, MapRangeEndpointsController, MapRangeSettingSelectButton, MapRangeSettingSelectButtonListParams, MapRangeSettingSelectButtonProps, MapRangeTargetControlIndicator, MapRangeTargetControlIndicatorControllers, MapRangeTargetControlIndicatorModules, MapRangeTargetControlIndicatorProps, MapScaleBarIndicator, MapScaleBarIndicatorProps, MapUserSettings, MapWaypointIconImageCache, MapWaypointLabelTextController, MapWaypointLabelTextControllerModules, MapWaypointLabelTextUserSettings, MarkerBeaconDefinition, MfdEnginePage, MfdEnginePageProps, MfdFplOptionsPopup, MfdFplOptionsPopupProps, MfdFplPage, MfdFplPageApproachLegPreviewListItem, MfdFplPageApproachLegPreviewListItemProps, MfdFplPageDataFieldRenderer, MfdFplPageDataFieldSelectDialog, MfdFplPageDataFieldSelectDialogInput, MfdFplPageDataFieldSelectDialogProps, MfdFplPageDataFieldSlot, MfdFplPageDataFieldSlotProps, MfdFplPageLegListItem, MfdFplPageLegListItemProps, MfdFplPageProps, MfdGpsInfoDataProvider, MfdInfoPage, MfdInfoPageProps, MfdMainPageKeys, MfdMainPageRegistrar, MfdMainView, MfdMainViewProps, MfdMapOptionsPopup, MfdMapOptionsPopupProps, MfdMapPage, MfdMapPageProps, MfdMapSetupPopup, MfdMapSetupPopupProps, MfdNrstAirportOptionsPopup, MfdNrstAirportPage, MfdNrstAirportPageProps, MfdNrstIntersectionPage, MfdNrstNdbPage, MfdNrstPage, MfdNrstPageKeys, MfdNrstUserWaypointPage, MfdNrstView, MfdNrstViewProps, MfdNrstVorPage, MfdPage, MfdPageContainer, MfdPageContainerProps, MfdPageDefinition, MfdPageEntry, MfdPageFactory, MfdPageNavBar, MfdPageNavBarProps, MfdPageProps, MfdPageSelectDialog, MfdPageSelectDialogInput, MfdPageSelectDialogProps, MfdPageSizeMode, MfdRadioVolumePopup, MfdTrafficOptionsPopup, MfdTrafficPage, MfdTrafficPageProps, MfdVolumeRadioPopupProps, MfdWaypointMapPopup, MfdWaypointMapPopupProps, MfdWaypointPage, MfdWaypointPageProps, NavFrequencyUserSettingTypes, NavRadio, NavRadioDefinition, NavSourceFormatter, NearestAirportNavSource, NearestFacilityWaypointArray, NearestFacilityWaypointTypeMap, NearestMapRTRControllerContext, NearestWaypointEntry, NearestWaypointFacilityType, NoOptionsPopup, NumberInput, NumberInputProps, NumberPad, NumberPadProps, NumericConfig, NumericConfigResult, NumericConstantConfig, NumericMaxConfig, NumericMinConfig, PfdAileronRudderTrimGauge, PfdAileronRudderTrimGaugeProps, PfdAileronTrimGaugeConfig, PfdAllUserSettingTypes, PfdBearingPointerSource, PfdBearingPointerUserSettingTypes, PfdElevatorTrimGauge, PfdElevatorTrimGaugeConfig, PfdElevatorTrimGaugeProps, PfdFlapsElevatorTrimGauge, PfdFlapsElevatorTrimGaugeProps, PfdFlapsGauge, PfdFlapsGaugeConfig, PfdFlapsGaugeProps, PfdFlapsGaugeScaleRangeDef, PfdFlapsGaugeScaleTickDef, PfdFlightPlanInset, PfdFlightPlanInsetApproachLegPreviewListItem, PfdFlightPlanInsetApproachLegPreviewListItemProps, PfdFlightPlanInsetLegListItem, PfdFlightPlanInsetLegListItemProps, PfdFlightPlanInsetProps, PfdHsiOrientationSettingMode, PfdHsiUserSettingTypes, PfdInset, PfdInsetContainer, PfdInsetContainerProps, PfdInsetDefinition, PfdInsetEntry, PfdInsetFactory, PfdInsetKeys, PfdInsetProps, PfdInsetRegistrar, PfdInsetSizeMode, PfdInsetUserSettingTypes, PfdInstrumentsPluginComponent, PfdKnobAction, PfdKnobActionSettingMode, PfdKnobUserSettingTypes, PfdMapInset, PfdMapInsetProps, PfdMapView, PfdMapViewProps, PfdNearestAirportsInset, PfdNearestAirportsInsetProps, PfdOptionsView, PfdOptionsViewProps, PfdPageDefinition, PfdPageFactory, PfdPageRegistrar, PfdPaneSide, PfdRudderTrimGaugeConfig, PfdSetupView, PfdSetupViewProps, PfdTrafficInset, PfdTrafficInsetProps, PfdTrimFlapGaugesConfig, PfdUserSettingManager, PfdUserSettingTypes, PfdWindDisplay, PfdWindDisplayProps, PositionHeadingDataProvider, RadarAltimeterDefinition, RadioVolumeShortcutPopup, RadioVolumeShortcutPopupProps, RadiosConfig, RenderedUiViewEntry, ResolvableConfig, ReversionaryModeManager, RollIndicator, RollIndicatorOptions, RollIndicatorProps, SavedFrequenciesUserSettingsManager, SavedFrequencyAllUserSettingTypes, SavedFrequencyIndex, SavedFrequencyUserSettingTypes, SavedNavComFrequencyManager, SelectRadioDialog, SelectRadioDialogInput, SelectedAltitudeDialog, SelectedAltitudeDialogInput, SelectedAltitudeDialogProps, SelectedCourseDialog, SelectedCourseDialogInput, SelectedHeadingDialog, SelectedHeadingDialogProps, SensorsConfig, SetupView, SignInputSlot, SignInputSlotProps, SoundSetupView, SpeedConfig, SpeedConfigType, StartupView, StartupViewProps, StatusBar, StatusBarProps, TabbedContainer, TabbedContainerProps, TabbedContent, TabbedContentProps, TimeSetupView, TrafficConfig, TrafficMapCombinedIndicator, TrafficMapCombinedIndicatorProps, TrafficMapRangeControlIndicator, TrafficMapRangeControlIndicatorControllers, TrafficMapRangeControlIndicatorProps, TransponderAutoAirborneManager, TransponderAutoGroundAltManager, TransponderAutoGroundAltManagerOptions, TransponderConfig, TransponderView, TransponderViewControlEvents, TransponderViewEvents, TransponderViewProps, UiBearingArrow, UiBearingArrowProps, UiDialogInputType, UiDialogOutputType, UiDialogResult, UiDialogResultCancelled, UiDialogResultSubmitted, UiDialogView, UiFlightPlanLegDisplay, UiFlightPlanLegDisplayProps, UiFlightPlanList, UiFlightPlanListProps, UiFocusController, UiFocusDirection, UiFocusableComponent, UiGenericNumberUnitDialog, UiGenericNumberUnitDialogOutput, UiGenericPopupOpenOptions, UiImgTouchButton, UiImgTouchButtonProps, UiInnerKnobId, UiInteractionEvent, UiInteractionHandler, UiInteractionMapper, UiInteractionUtils, UiKnobControlSide, UiKnobGroup, UiKnobId, UiKnobIdGroupMap, UiKnobInteractionEvent, UiKnobLabelState, UiKnobPushInteractionEvent, UiKnobRequestedLabelState, UiKnobTurnInteractionEvent, UiKnobUtils, UiList, UiListButton, UiListButtonProps, UiListDialog, UiListDialogParams, UiListFocusable, UiListFocusableProps, UiListFormattingProps, UiListItem, UiListItemProps, UiListProps, UiListSelectTouchButton, UiListSelectTouchButtonProps, UiMessageDialog, UiMessageDialogInput, UiNearestWaypointDisplay, UiNearestWaypointDisplayProps, UiNearestWaypointList, UiNearestWaypointListItem, UiNearestWaypointListItemProps, UiNearestWaypointListProps, UiNumberDialogInput, UiNumberDialogInputDefinition, UiOuterKnobId, UiPane, UiPaneContainer, UiPaneContainerProps, UiPaneContent, UiPaneProps, UiPaneSizeMode, UiPaneViewStackContainer, UiPaneViewStackContainerProps, UiPopupOpenOptions, UiPopupType, UiPositionedPopupOpenOptions, UiPushKnobId, UiService, UiSetValueTouchButton, UiSetValueTouchButtonProps, UiToggleTouchButton, UiToggleTouchButtonProps, UiTouchButton, UiTouchButtonFocusModule, UiTouchButtonFocusModuleOptions, UiTouchButtonProps, UiTouchSlider, UiTouchSliderFocusModule, UiTouchSliderFocusModuleOptions, UiTouchSliderProps, UiTurnKnobId, UiValueTouchButton, UiValueTouchButtonProps, UiView, UiViewEntry, UiViewKeys, UiViewLifecyclePolicy, UiViewOcclusionType, UiViewProps, UiViewSizeMode, UiViewStack, UiViewStackContainer, UiViewStackItem, UiViewStackLayer, UiViewType, UiViewUtils, UiWaypointDisplay, UiWaypointDisplayProps, UiWaypointIcon, UiWaypointIconImageCache, UiWaypointIconProps, UiWaypointSelectButton, UiWaypointSelectButtonProps, UiWaypointTouchButton, UiWaypointTouchButtonProps, UnitsSetupView, UserTimerValueDisplay, UserTimerValueDisplayProps, UserTimerView, VSpeedBugConfig, VSpeedConfig, VSpeedDefinition, VSpeedUserSettingManager, VSpeedValueKey, VerticalDeviationIndicator, VerticalDeviationIndicatorProps, WaypointDialog, WaypointDialogInput, WaypointDialogProps, WaypointInfo, WaypointInfoContentMode, WaypointInfoInfo, WaypointInfoInfoProps, WaypointInfoPopup, WaypointInfoPopupProps, WaypointInfoProps, WeatherRadarDefinition, WindDisplaySettingMode, WindDisplayUserSettingTypes };
