import { FacilityRepository, FacilityWaypoint, IcaoValue, SubscribableArray, UserFacility } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
/**
 * Flight plan inclusion status of a user waypoint.
 */
export declare enum UserWaypointFlightPlanStatus {
    /** The user waypoint is not in any flight plan. */
    None = "None",
    /** The user waypoint is in at least one flight plan. */
    InFlightPlan = "InFlightPlan",
    /** The user waypoint is part of the active leg or the nominal from leg of the active leg. */
    ActiveLeg = "ActiveLeg"
}
/**
 * A controller for editing user waypoints.
 */
export declare class GtcUserWaypointEditController {
    private readonly facRepo;
    private readonly fms;
    private readonly existingWaypointsArray;
    /** The maximum number of user waypoints allowed to exist at once. */
    static readonly MAX_WAYPOINT_COUNT = 1000;
    /**
     * Creates a new instance of GtcUserWaypointEditController.
     * @param facRepo The facility repository.
     * @param fms The FMS.
     * @param existingWaypointsArray An array that contains all existing user waypoints.
     */
    constructor(facRepo: FacilityRepository, fms: Fms, existingWaypointsArray: SubscribableArray<FacilityWaypoint<UserFacility>>);
    /**
     * Gets the number of existing user waypoints.
     * @returns The number of existing user waypoints.
     */
    getUserWaypointCount(): number;
    /**
     * Checks whether the number of existing user waypoints is at or above the allowed limit.
     * @returns Whether the number of existing user waypoints is at or above the allowed limit.
     */
    isUserWaypointCountAtLimit(): boolean;
    /**
     * Checks whether a user waypoint with a given ICAO exists.
     * @param icao The ICAO to check.
     * @returns Whether a user waypoint with the specified ICAO exists.
     */
    doesUserWaypointExist(icao: IcaoValue): boolean;
    /**
     * Gets the flight plan inclusion status of a waypoint: whether it is not in any flight plan, in at least one flight
     * plan, or is part of the active leg.
     * @param icao The ICAO to check.
     * @returns The flight plan inclusion status of the waypoint with the specified ICAO.
     */
    getWaypointFlightPlanStatus(icao: IcaoValue): UserWaypointFlightPlanStatus;
    /**
     * Adds a new user waypoint facility. If a facility with the same ICAO as the new one already exists, it will be
     * replaced by the new facility.
     * @param facility The facility to add.
     */
    addUserFacility(facility: UserFacility): void;
    /**
     * Edits an existing user waypoint facility. If facility to edit does not exist, then this method does nothing. If
     * the edit involves changing the ICAO of the facility, the old facility will be removed and a new facility will be
     * added with the new ICAO. Otherwise, the new facility will replace the old facility.
     * @param icao The ICAO of the existing facility to edit.
     * @param facility A facility to edit the existing one to.
     * @returns Whether the existing facility was successfully edited.
     */
    editUserFacility(icao: IcaoValue, facility: UserFacility): boolean;
    /**
     * Removes an existing user waypoint facility.
     * @param icao The ICAO of the facility to remove.
     */
    removeUserFacility(icao: IcaoValue): void;
    /**
     * Removes all existing user waypoint facilities.
     * @param includeInFlightPlan Whether to remove user waypoint facilities that are in flight plans. Defaults to
     * `false`.
     * @returns Whether at least one user waypoint facility was not removed because it was in a flight plan.
     */
    removeAllUserFacilities(includeInFlightPlan?: boolean): boolean;
}
//# sourceMappingURL=GtcUserWaypointEditController.d.ts.map