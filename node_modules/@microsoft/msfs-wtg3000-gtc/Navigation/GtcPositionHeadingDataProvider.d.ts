import { EventBus, GeoPointInterface, Subscribable } from '@microsoft/msfs-sdk';
/**
 * A provider of airplane position and heading data.
 */
export interface GtcPositionHeadingDataProvider {
    /** The current position of the airplane. */
    readonly ppos: Subscribable<GeoPointInterface>;
    /** The current position of the airplane, or `(NaN, NaN)` when GPS data is in a failed state. */
    readonly pposWithFailure: Subscribable<GeoPointInterface>;
    /** The current true heading of the airplane, in degrees. */
    readonly headingTrue: Subscribable<number>;
    /** The current true heading of the airplane, in degrees, or `NaN` when heading data is in a failed state. */
    readonly headingTrueWithFailure: Subscribable<number>;
    /** Whether this provider's heading data is in a failed state. */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    /** Whether GPS position is in dead reckoning mode. */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** Whether GPS data is in a failed state. */
    readonly isGpsDataFailed: Subscribable<boolean>;
}
/**
 * A default implementation of {@link GtcPositionHeadingDataProvider}.
 */
export declare class GtcDefaultPositionHeadingDataProvider implements GtcPositionHeadingDataProvider {
    private readonly bus;
    private readonly updateFreq;
    private readonly _ppos;
    /** @inheritdoc */
    readonly ppos: Subscribable<GeoPointInterface>;
    private readonly _pposWithFailure;
    /** @inheritdoc */
    readonly pposWithFailure: Subscribable<GeoPointInterface>;
    private readonly _headingTrue;
    /** @inheritdoc */
    readonly headingTrue: Subscribable<number>;
    private readonly _headingTrueWithFailure;
    /** @inheritdoc */
    readonly headingTrueWithFailure: Subscribable<number>;
    private readonly _isHeadingDataValid;
    /** @inheritdoc */
    readonly isHeadingDataFailed: Subscribable<boolean>;
    private readonly fmsPosMode;
    /** @inheritdoc */
    readonly isGpsDeadReckoning: Subscribable<boolean>;
    /** @inheritdoc */
    readonly isGpsDataFailed: Subscribable<boolean>;
    private readonly fmsPosIndex;
    private readonly ahrsIndex;
    private isInit;
    private isAlive;
    private isPaused;
    private pposSub?;
    private pposPipe?;
    private headingPipe?;
    private isGpsDataFailedSub?;
    private isHeadingDataFailedSub?;
    /**
     * Constructor.
     * @param bus The event bus.
     * @param fmsPosIndex The index of the FMS geo-positioning system that is the source of this provider's data.
     * @param ahrsIndex The index of the AHRS that is the source of this provider's data.
     * @param updateFreq The frequency at which this provider updates its position and heading data.
     */
    constructor(bus: EventBus, fmsPosIndex: number | Subscribable<number>, ahrsIndex: number | Subscribable<number>, updateFreq: number);
    /**
     * Initializes this data provider. Once initialized, this data provider will continuously update its data until
     * paused or destroyed.
     * @param paused Whether to initialize this data provider as paused. If `true`, this data provider will provide an
     * initial set of data but will not update the provided data until it is resumed. Defaults to `false`.
     * @throws Error if this data provider is dead.
     */
    init(paused?: boolean): void;
    /**
     * Resumes this data provider. Once resumed, this data provider will continuously update its data until paused or
     * destroyed.
     * @throws Error if this data provider is dead.
     */
    resume(): void;
    /**
     * Pauses this data provider. Once paused, this data provider will not update its data until it is resumed.
     * @throws Error if this data provider is dead.
     */
    pause(): void;
    /**
     * Destroys this data provider. Once destroyed, this data provider will no longer update its provided data, and can
     * no longer be paused or resumed.
     */
    destroy(): void;
}
//# sourceMappingURL=GtcPositionHeadingDataProvider.d.ts.map