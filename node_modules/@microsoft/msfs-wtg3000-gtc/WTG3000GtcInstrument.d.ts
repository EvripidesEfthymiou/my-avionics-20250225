/// <reference types="@microsoft/msfs-types/pages/vcockpit/instruments/shared/baseinstrument" />
import { AvionicsConfig, AvionicsStatusChangeEvent, WTG3000FsInstrument } from '@microsoft/msfs-wtg3000-common';
import { GtcConfig } from './Config';
import './WTG3000_GTC.css';
/**
 * A G3000/5000 GTC instrument.
 */
export declare class WTG3000GtcInstrument extends WTG3000FsInstrument {
    private readonly instrumentConfig;
    private readonly displayOverlayLayerRef;
    private readonly highlightRef;
    private readonly mainContentHidden;
    private readonly displayOverlayShow;
    private readonly bootSplashHidden;
    private readonly hEventMap;
    private readonly xpdrSimVarPublisher;
    protected readonly navSources: import("@microsoft/msfs-wtg3000-common").G3000NavSources;
    protected readonly navIndicators: import("@microsoft/msfs-wtg3000-common").G3000NavIndicators;
    private readonly casSystem;
    private readonly obsSuspDataProvider;
    private readonly gtcService;
    private readonly posHeadingDataProvider;
    private readonly posHeadingDataProvider1Hz;
    private readonly existingUserWaypointsArray;
    private readonly vnavDataProvider;
    private readonly fmsSpeedTargetDataProvider;
    private readonly userWaypointEditController;
    private readonly flightPlanStore;
    private readonly flightPlanListManager;
    private readonly pluginSystem;
    /**
     * Constructs a new WTG3000GtcInstrument.
     * @param instrument This instrument's parent BaseInstrument.
     * @param config This instrument's general configuration object.
     * @param instrumentConfig This instrument's instrument-specific configuration object.
     */
    constructor(instrument: BaseInstrument, config: AvionicsConfig, instrumentConfig: GtcConfig);
    /**
     * Performs initialization tasks.
     */
    private doInit;
    /**
     * Initializes this instrument's plugins.
     */
    private initPlugins;
    /**
     * Renders this instrument's components.
     * @returns This instrument's rendered components, as a VNode.
     */
    private renderComponents;
    /**
     * Registers all default GTC views with the GTC service.
     * @param context A context containing references to items used to create the default GTC views.
     */
    private registerViews;
    /**
     * Initializes this instrument's nearest context.
     */
    private initNearestContext;
    /** Makes sure that we have the flight plan, requesting sync if needed. */
    private initFlightPlan;
    /** @inheritdoc */
    protected getBootDuration(): number;
    /** @inheritdoc */
    protected onAvionicsStatusChanged(event: Readonly<AvionicsStatusChangeEvent>): void;
    /**
     * Responds to changes in whether the display overlay controller is attempting to hide this instrument's main
     * content.
     * @param hide Whether the display overlay controller is attempting to hide this isntrument's main content.
     */
    private onHideMainContentChanged;
    /**
     * Responds to when an H event is received.
     * @param hEvent The event that was received.
     */
    private onHEvent;
    /**
     * Handles a GTC interaction event.
     * @param event The event to handle.
     */
    private onGtcInteractionEvent;
}
//# sourceMappingURL=WTG3000GtcInstrument.d.ts.map