import { DisplayComponent, FacilityTypeMap, FacilityWaypoint, GeoPointSubject, MutableSubscribable, NearestSubscription, SetSubject, Subject, Subscription, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, DisplayPaneControlEvents, DisplayPaneSettings, DynamicListData, G3000NearestContext, NearestPaneSelectionData, NearestPaneSelectionType, NearestPaneViewEventTypes, NearestWaypointArray, NearestWaypointEntry, NearestWaypointFacilityType, NearestWaypointTypeMap } from '@microsoft/msfs-wtg3000-common';
import { GtcList } from '../../Components/List';
import { GtcNearestWaypointListItemProps } from '../../Components/Nearest/GtcNearestWaypointListItem';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import { GtcPositionHeadingDataProvider } from '../../Navigation/GtcPositionHeadingDataProvider';
import './GtcNearestPage.css';
import './GtcNearestWaypointPage.css';
/**
 * Component props for GtcNearestWaypointPage.
 */
export interface GtcNearestWaypointPageProps extends GtcViewProps {
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
}
/**
 * A GTC nearest waypoint page.
 */
export declare abstract class GtcNearestWaypointPage<T extends NearestWaypointFacilityType, EntryType extends NearestWaypointEntry<NearestWaypointTypeMap[T]> = NearestWaypointEntry<NearestWaypointTypeMap[T]>, P extends GtcNearestWaypointPageProps = GtcNearestWaypointPageProps> extends GtcView<P> {
    protected static readonly GPS_FAIL_CLEAR_LIST_DELAY = 10000;
    protected readonly listRef: import("@microsoft/msfs-sdk").NodeReference<GtcList<EntryType & DynamicListData>>;
    protected readonly rootCssClass: SetSubject<string>;
    /** The view key for this page's options popup. */
    protected abstract readonly optionsPopupKey: string;
    protected readonly publisher: import("@microsoft/msfs-sdk").Publisher<DisplayPaneControlEvents<NearestPaneViewEventTypes>>;
    protected readonly displayPaneIndex: ControllableDisplayPaneIndex;
    protected readonly displayPaneSettings: UserSettingManager<DisplayPaneSettings>;
    protected readonly facWaypointCache: GarminFacilityWaypointCache;
    protected nearestContext?: G3000NearestContext;
    protected nearestSubscription?: NearestSubscription<FacilityTypeMap[T]>;
    protected readonly waypointArray: NearestWaypointArray<T, EntryType>;
    /** The selected waypoint, or `null` if there is no selected waypoint. */
    protected readonly selectedWaypoint: Subject<NearestWaypointTypeMap[T] | null>;
    /** Whether a waypoint is selected. */
    protected readonly hasSelectedWaypoint: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    /** The facility associated with the selected waypoint. */
    protected readonly selectedFacility: Subject<FacilityTypeMap[T] | null>;
    /** The position of the airplane. */
    protected readonly ppos: GeoPointSubject;
    /** The true heading of the airplane, in degrees, or `NaN` if heading data is invalid. */
    protected readonly planeHeadingTrue: Subject<number>;
    protected readonly listItemHeight: number;
    protected readonly listItemSpacing: number;
    /** The view key for this page's options popup. */
    protected abstract readonly showOnMapType: NearestPaneSelectionType;
    protected readonly showOnMap: Subject<boolean>;
    protected readonly showOnMapIcao: import("@microsoft/msfs-sdk").MappedSubscribable<import("@microsoft/msfs-sdk").IcaoValue>;
    protected resetMapRange: boolean;
    protected readonly unitsSettingManager: import("@microsoft/msfs-garminsdk").UnitsUserSettingManager<import("@microsoft/msfs-garminsdk").UnitsUserSettingTypes>;
    protected isPaused: boolean;
    protected nearestFacilitiesUpdateSub?: Subscription;
    protected selectedFacilityPipe?: Subscription;
    protected pposPipe?: Subscription;
    protected headingPipe?: Subscription;
    protected isGpsDataFailedSub?: Subscription;
    protected isGpsDrSub?: Subscription;
    protected showOnMapSub?: Subscription;
    /**
     * Constructor.
     * @param props This component's props.
     * @throws Error if a display pane index is not defined for this view.
     */
    constructor(props: P);
    /**
     * Initializes this page's nearest waypoints search.
     */
    protected initNearestSearch(): Promise<void>;
    /**
     * Gets this page's nearest facilities subscription from a nearest context.
     * @param context A nearest context.
     * @returns This page's nearest facilities subscription from the specified nearest context.
     */
    protected abstract getNearestSubscription(context: G3000NearestContext): NearestSubscription<FacilityTypeMap[T]>;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /**
     * Creates a waypoint entry for a nearest facility search result.
     * @param waypoint A nearest facility search result, as a Waypoint.
     * @returns A waypoint entry for the specified nearest facility search result.
     */
    protected createWaypointEntry(waypoint: NearestWaypointTypeMap[T]): EntryType;
    /**
     * Sends waypoint selection data to the display pane controlled by this page.
     * @param data The data to send.
     */
    protected sendSelectionData(data: NearestPaneSelectionData): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Gets the CSS class for this page's root element.
     * @returns The CSS class for this page's root element.
     */
    protected abstract getCssClass(): string;
    /**
     * Gets the label for the type column of this page's header .
     * @returns The label for the type column of this page's header.
     */
    protected abstract getHeaderTypeLabel(): string;
    /**
     * Renders additional header columns.
     * @returns Additional header columns, as a VNode, or `null` if there are no additional columns.
     */
    protected abstract renderAdditionalHeaderColumns(): VNode | null;
    /**
     * Renders an item for this page's nearest waypoint list.
     * @param data The nearest waypoint entry for which to render.
     * @param index The index of the item.
     * @returns A nearest waypoint list item, as a VNode.
     */
    protected abstract renderListItem(data: EntryType, index: number): VNode;
    /** @inheritdoc */
    destroy(): void;
}
/**
 * Component props for GtcNearestWaypointPageListItem.
 */
export interface GtcNearestWaypointPageListItemProps<W extends FacilityWaypoint, EntryType extends NearestWaypointEntry<W> = NearestWaypointEntry<W>> extends Omit<GtcNearestWaypointListItemProps<EntryType>, 'onButtonPressed' | 'isSelected'> {
    /** The view key of the options popup opened by the list item's waypoint button. */
    optionsPopupKey: string;
    /** The selected waypoint for the list item's parent nearest waypoint page. */
    selectedWaypoint: MutableSubscribable<W | null>;
}
/**
 * A nearest waypoint list item for a GTC nearest waypoint page.
 */
export declare class GtcNearestWaypointPageListItem<W extends FacilityWaypoint, EntryType extends NearestWaypointEntry<W> = NearestWaypointEntry<W>> extends DisplayComponent<GtcNearestWaypointPageListItemProps<W, EntryType>> {
    private readonly itemRef;
    private readonly isSelected;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcNearestWaypointPage.d.ts.map