import { AirportFacility, FacilityFrequency, FacilityType, GeoPointInterface, NearestSubscription, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { AirportWaypoint } from '@microsoft/msfs-garminsdk';
import { BasicNearestWaypointEntry, ControllableDisplayPaneIndex, G3000NearestContext, NearestPaneSelectionType } from '@microsoft/msfs-wtg3000-common';
import { GtcControlMode, GtcService } from '../../GtcService/GtcService';
import { GtcNearestWaypointPage } from './GtcNearestWaypointPage';
import './GtcNearestWeatherPage.css';
/**
 * GTC view keys for popups owned by nearest weather pages.
 */
declare enum GtcNearestWeatherPagePopupKeys {
    Options = "NearestWeatherOptions"
}
/**
 * A GTC nearest weather page.
 */
export declare class GtcNearestWeatherPage extends GtcNearestWaypointPage<FacilityType.Airport, GtcNearestWeatherData> {
    private static readonly FREQ_FORMATTER_25;
    private static readonly FREQ_FORMATTER_833;
    private static readonly FREQ_NAME_MAP;
    /** @inheritdoc */
    protected readonly optionsPopupKey = GtcNearestWeatherPagePopupKeys.Options;
    /** @inheritdoc */
    protected readonly showOnMapType = NearestPaneSelectionType.Weather;
    private readonly comSpacingSetting;
    private readonly comFreqFormatter;
    /** @inheritdoc */
    protected getNearestSubscription(context: G3000NearestContext): NearestSubscription<AirportFacility>;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    protected createWaypointEntry(waypoint: AirportWaypoint): GtcNearestWeatherData;
    /** @inheritdoc */
    protected getCssClass(): string;
    /** @inheritdoc */
    protected getHeaderTypeLabel(): string;
    /** @inheritdoc */
    protected renderAdditionalHeaderColumns(): VNode | null;
    /** @inheritdoc */
    protected renderListItem(data: GtcNearestWeatherData): VNode;
    /**
     * Renders this page's options popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @param displayPaneIndex The index of the display pane associated with the popup.
     * @returns This page's options popup, as a VNode.
     */
    protected renderOptionsPopup(gtcService: GtcService, controlMode: GtcControlMode, displayPaneIndex?: ControllableDisplayPaneIndex): VNode;
    /** @inheritdoc */
    destroy(): void;
    /**
     * Checks if an airport COM frequency is compatible with 25 kHz spacing.
     * @param freq An airport COM frequency.
     * @returns Whether the specified airport COM frequency is compatible with 25 kHz spacing.
     */
    private static is25Frequency;
}
/**
 * A data item describing a nearest weather airport waypoint for a GTC nearest weather page.
 */
declare class GtcNearestWeatherData extends BasicNearestWaypointEntry<AirportWaypoint> {
    readonly waypoint: AirportWaypoint;
    private static readonly FREQ_SORT;
    /**
     * An array of frequencies that provide weather information available at this data item's airport waypoint. The
     * frequencies are sorted in order of decreasing priority (ATIS -> ASOS -> AWOS).
     */
    readonly weatherFrequencies: readonly FacilityFrequency[];
    /**
     * Constructor.
     * @param waypoint This data item's waypoint.
     * @param ppos The current airplane position.
     * @param planeHeading The current true heading of the airplane, in degrees.
     */
    constructor(waypoint: AirportWaypoint, ppos: Subscribable<GeoPointInterface>, planeHeading: Subscribable<number>);
    /**
     * Gets the priority of an airport frequency to be displayed as a weather frequency. Given two frequencies, the one
     * with the higher priority should be displayed over the other. Frequencies with a priority of zero should not be
     * displayed as a weather frequency.
     * @param frequency An airport frequency.
     * @returns The priority of the specified airport frequency to be displayed as a weather frequency.
     */
    private static getFrequencyPriority;
}
export {};
//# sourceMappingURL=GtcNearestWeatherPage.d.ts.map