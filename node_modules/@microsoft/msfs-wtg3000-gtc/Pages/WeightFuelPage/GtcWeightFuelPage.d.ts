import { AirportFacility, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { PerformanceWeightLimits } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import './GtcWeightFuelPage.css';
/**
 * Component props for {@link GtcWeightFuelPage}.
 */
export interface GtcWeightFuelPageProps extends GtcViewProps {
    /** Whether a destination facility has been entered. */
    destinationFacility: Subscribable<AirportFacility | undefined>;
    /** The aircraft weight limits. */
    weightLimits: PerformanceWeightLimits;
    /** Whether GPS data is in a failed state. */
    gpsHasFailed: Subscribable<boolean>;
}
/**
 * A GTC weight and fuel page.
 */
export declare class GtcWeightFuelPage extends GtcView<GtcWeightFuelPageProps> {
    private readonly tabsRef;
    private readonly evtSub;
    private readonly publisher;
    private readonly weightFuelSettingsManager;
    private readonly unitsSettingManager;
    private readonly fuelUnitIsVolumetric;
    /** Returns the weight user setting. */
    private get weightUnit();
    /** Returns the fuel user setting. */
    private get fuelUnit();
    private readonly fuelUsable;
    private readonly basicEmptyWeightSetting;
    private readonly crewAndStoresWeightSetting;
    private readonly numberOfPassengersSetting;
    private readonly avgPassengerWeightSetting;
    private readonly cargoWeightSetting;
    private readonly fuelOnBoardWeightSetting;
    private readonly fuelReservesWeightSetting;
    private readonly estHoldingTimeMinsSetting;
    private readonly basicOperatingWeightSource;
    private readonly totalPassengerWeightSource;
    private readonly zeroFuelWeightSource;
    private readonly fobHasBeenInitialized;
    private readonly fuelOnBoardWeightSource;
    private readonly aircraftWeightSource;
    private readonly landingFuelSource;
    private readonly landingWeightSource;
    private readonly holdingFuelSource;
    private readonly excessFuelSource;
    private readonly eventWeights;
    private readonly basicEmptyWeightNUS;
    private readonly crewAndStoresWeightNUS;
    private readonly avgPassengerWeightNUS;
    private readonly cargoWeightNUS;
    private readonly fuelReservesWeightNUS;
    private readonly estHoldingTimeMinsNUS;
    private readonly basicOperatingWeightNUS;
    private readonly totalPassengerWeightNUS;
    private readonly zeroFuelWeightNUS;
    private readonly fuelOnBoardWeightNUS;
    private readonly aircraftWeightNUS;
    private readonly estHoldingFuelWeightNUS;
    private readonly estLandingFuelWeightNUS;
    private readonly estLandingWeightNUS;
    private readonly excessFuelWeightNUS;
    private readonly zeroFuelWeightClasses;
    private readonly fuelOnBoardRowClasses;
    private readonly aircraftWeightClasses;
    private readonly overweightCautionClasses;
    private readonly estLandingWeightClasses;
    private readonly estLandingFuelWeightClasses;
    private readonly fuelReservesRowClasses;
    private readonly fuelHoldingRowClasses;
    private readonly excessFuelWeightClasses;
    private readonly settingPipes;
    private updateSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Updates this page.
     */
    private update;
    /**
     * Opens a dialog that allows the user to select a weight.
     * @param input Input parameters defining the dialog request.
     * @returns A Promise which is fulfilled with the result of the request.
     */
    private openWeightDialog;
    /**
     * Opens a dialog that allows the user to select a weight to be saved to a user setting.
     * @param setting The user setting to change.
     * @param input Input parameters defining the dialog request.
     */
    private openWeightDialogForSetting;
    /**
     * Responds to when this page's crew stores button is pressed.
     */
    private onCrewStoresPressed;
    /**
     * Responds to when this page's set empty weight button is pressed.
     */
    private onSetEmptyWeightPressed;
    /**
     * Responds to when this page's passengers button is pressed.
     */
    private onPassengersPressed;
    /**
     * Responds to when this page's passenger weight button is pressed.
     */
    private onPassengerWeightPressed;
    /**
     * Responds to when this page's cargo button is pressed.
     */
    private onCargoPressed;
    /**
     * Responds to when this page's fuel on board button is pressed.
     */
    private onFuelOnBoardPressed;
    /**
     * Responds to when this page's FOB SYNC button is pressed.
     */
    private onFobSyncPressed;
    /**
     * Responds to when this page's fuel reserves button is pressed.
     */
    private onFuelReservesPressed;
    /**
     * Responds to when this page's holding time button is pressed.
     */
    private onHoldingTimePressed;
    /**
     * Renders a label/value row.
     * @param label The label to render.
     * @param value The value to render.
     * @param classes Any optional classes to add to the parent div.
     * @returns The rendered label/value row.
     */
    private renderLabelValueRow;
    /**
     * Renders the final term of an arithmetic operation.
     * @param sign Whether to add or subtract.
     * @param value A VNode that renders the value.
     * @param classes Any optional classes to add to the parent div.
     * @returns The rendered final term.
     */
    private static renderFinalTerm;
    /**
     * Renders a row in which the fuel weight can be derived from a volume or duration.
     * @param buttonElem A VNode that renders the button element.  Must include the class `wf-derived-weight-button`.
     * @param sign Whether to add or subtract.
     * @param valueElem A VNode that renders the value element.  Must include the class `wf-weight-value`.
     * @param cssClasses The classes to add to the parent div.
     * @returns The rendered row.
     */
    private static renderDerivedWeightRow;
    private static renderUnderline;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcWeightFuelPage.d.ts.map