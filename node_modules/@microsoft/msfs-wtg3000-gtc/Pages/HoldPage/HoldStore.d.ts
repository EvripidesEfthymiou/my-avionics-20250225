import { BasicNavAngleSubject, Facility, LegDefinition, LegTurnDirection, NavAngleUnit, NumberUnitInterface, NumberUnitSubject, SimpleUnit, Subject, UnitFamily } from '@microsoft/msfs-sdk';
/** The course direction for the hold. */
export declare enum HoldCourseDirection {
    Inbound = "Inbound",
    Outbound = "Outbound"
}
/** The leg mode for the hold. */
export declare enum HoldLegMode {
    Distance = "Distance",
    Time = "Time"
}
/**
 * Input data describing initialization options for defining a hold.
 */
export type HoldInput = {
    /** The selected plan index for the hold. */
    planIndex: number;
    /** The leg name. */
    legName: string;
    /** The magnetic hold inbound course, in degrees. */
    courseMagnetic: number;
    /** The fix facility to hold at. */
    facility: Facility;
    /** The existing hold leg if editing a hold. */
    existingHoldLeg?: LegDefinition;
    /** A HoldInfo object to use if info is available. */
    holdInfo?: HoldInfo;
    /**
     * Whether to allow editing for hold types that normally are not editable (HF and HA). Ignored if not editing an
     * existing hold. Defaults to `false`.
     */
    forceAllowEdit?: boolean;
};
/** {@link LegTurnDirection}, but only Left or Right. */
export type LeftOrRight = LegTurnDirection.Left | LegTurnDirection.Right;
/** A store for the GtcHoldPage. */
export declare class HoldStore {
    /** The input for the hold page. */
    readonly input: Subject<HoldInput | undefined>;
    /** The course for the hold. */
    readonly course: BasicNavAngleSubject;
    /** Whether or not the course is inbound or outbound. */
    readonly holdCourseDirection: Subject<HoldCourseDirection>;
    /** Whether or not the hold is based on time or distance. */
    readonly legMode: Subject<HoldLegMode>;
    /** The time that the hold legs should be. */
    readonly legTime: NumberUnitSubject<UnitFamily.Duration, SimpleUnit<UnitFamily.Duration>>;
    /** The distance of the hold legs. */
    readonly legDistance: NumberUnitSubject<UnitFamily.Distance, SimpleUnit<UnitFamily.Distance>>;
    /** The direction of the hold. */
    readonly turnDirection: Subject<LeftOrRight>;
    /** Whether this leg hold is editable. */
    readonly isEditableHold: Subject<boolean>;
    /** Whether this hold is existing and we are editing it. */
    readonly isExistingHold: Subject<boolean>;
    /** Whether the cancel button should be enabled. */
    readonly isCancelButtonEnabled: Subject<boolean>;
    /** The hold leg, or null if we are not editing a hold. */
    readonly holdLeg: Subject<LegDefinition | null>;
}
/** The data needed to create a hold. */
export interface HoldInfo {
    /** The course direction. */
    readonly holdCourseDirection: HoldCourseDirection;
    /** The leg mode. */
    readonly legMode: HoldLegMode;
    /** The leg hold time. */
    readonly legTime: NumberUnitInterface<UnitFamily.Duration, SimpleUnit<UnitFamily.Duration>>;
    /** The leg hold distance. */
    readonly legDistance: NumberUnitInterface<UnitFamily.Distance, SimpleUnit<UnitFamily.Distance>>;
    /** The turn direction. */
    readonly turnDirection: LeftOrRight;
    /** The hold course. */
    readonly course: NumberUnitInterface<'navangle', NavAngleUnit>;
    /** The existing hold leg, if exists. */
    readonly existingHoldLeg?: LegDefinition;
}
//# sourceMappingURL=HoldStore.d.ts.map