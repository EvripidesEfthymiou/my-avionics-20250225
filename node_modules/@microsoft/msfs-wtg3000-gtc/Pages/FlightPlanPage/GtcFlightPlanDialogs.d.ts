import { AirportFacility, Facility, FlightPlanSegment, LegDefinition, OneWayRunway } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FlightPlanListManager, FlightPlanStore } from '@microsoft/msfs-wtg3000-common';
import { GtcDialogResult } from '../../Dialog/GtcDialogView';
import { GtcService } from '../../GtcService/GtcService';
/** Collection of utility functions to open different flight plan related dialogs. */
export declare class GtcFlightPlanDialogs {
    /**
     * Opens an Airport Identifier Lookup waypoint dialog.
     * @param gtcService The GtcService.
     * @param initialValue The airport value initially loaded into the dialog at the start of the request.
     * @returns The selected airport, if one was selected.
     */
    static openAirportDialog(gtcService: GtcService, initialValue?: AirportFacility): Promise<GtcDialogResult<AirportFacility>>;
    /**
     * Opens an Airport Identifier Lookup keyboard dialog.
     * @param gtcService The GtcService.
     * @param airportFacility The airport facility to get the runways from.
     * @param selectedRunway The currently selected runway.
     * @returns The selected airport, if one was selected.
     */
    static openRunwayDialog(gtcService: GtcService, airportFacility: AirportFacility, selectedRunway?: OneWayRunway): Promise<GtcDialogResult<OneWayRunway>>;
    /**
     * Shows remove waypoint dialog, removing the waypoint if user confirms.
     * @param gtcService The GtcService.
     * @param fms The Fms.
     * @param store The flight plan store.
     * @param segment The segment containing the leg.
     * @param leg The leg to remove.
     * @param legName The leg name.
     * @returns A Promise which is fulfilled with whether the leg was successfully removed.
     */
    static removeWaypoint(gtcService: GtcService, fms: Fms, store: FlightPlanStore, segment: FlightPlanSegment, leg: LegDefinition, legName?: string): Promise<boolean>;
    /**
     * Shows remove departure dialog, removing the departure if user confirms.
     * @param gtcService The GtcService.
     * @param store The Flight Plan Store.
     * @param fms The Fms.
     * @returns A Promise which is fulfilled with whether the departure was successfully removed.
     */
    static removeDeparture(gtcService: GtcService, store: FlightPlanStore, fms: Fms): Promise<boolean>;
    /**
     * Shows remove arrival dialog, removing the arrival if user confirms.
     * @param gtcService The GtcService.
     * @param store The Flight Plan Store.
     * @param fms The Fms.
     * @returns A Promise which is fulfilled with whether the arrival was successfully removed.
     */
    static removeArrival(gtcService: GtcService, store: FlightPlanStore, fms: Fms): Promise<boolean>;
    /**
     * Shows remove approach dialog, removing the approach if user confirms.
     * @param gtcService The GtcService.
     * @param store The Flight Plan Store.
     * @param fms The Fms.
     * @returns A Promise which is fulfilled with whether the approach was successfully removed.
     */
    static removeApproach(gtcService: GtcService, store: FlightPlanStore, fms: Fms): Promise<boolean>;
    /**
     * Shows keyboard dialog for selecting a waypoint to insert at the beginning of the first enroute segment.
     * @param gtcService The GtcService.
     * @param fms The Fms.
     * @param planIndex The plan index.
     * @returns The inserted leg, if one was inserted.
     */
    static insertEnrouteWaypoint(gtcService: GtcService, fms: Fms, planIndex: number): Promise<LegDefinition | undefined>;
    /**
     * Shows keyboard dialog for selecting a waypoint to add to the end of the last enroute segment.
     * @param gtcService The GtcService.
     * @param fms The Fms.
     * @param planIndex The plan index.
     */
    static addEnrouteWaypoint(gtcService: GtcService, fms: Fms, planIndex: number): Promise<void>;
    /**
     * Shows keyboard dialog for selecting a waypoint to insert at the beginning of the first enroute segment.
     * @param gtcService The GtcService.
     * @param fms The Fms.
     * @param planIndex Tha flight plan index.
     * @param leg The existing leg to place the new leg relative to.
     * @param position Whether to place the new leg before or after the existing leg.
     * @returns The inserted leg, if one was inserted.
     */
    static insertWaypointBeforeAfter(gtcService: GtcService, fms: Fms, planIndex: number, leg: LegDefinition, position: 'before' | 'after'): Promise<LegDefinition | undefined>;
    /**
     * Opens the keyboard dialog and starts a request for selecting a waypoint of any type.
     * @param gtcService The GtcService.
     * @returns The result of the keyboard dialog request.
     */
    static openWaypointIdentifierLookup(gtcService: GtcService): Promise<GtcDialogResult<Facility>>;
    /**
     * Opens a dialog prompting the user to accept whether to activate a flight plan leg. If the user accepts, then
     * the leg is activated. Otherwise, no action is taken.
     * @param gtcService The GTC service.
     * @param fms The FMS.
     * @param leg The leg to activate.
     * @param useTrueBearing Whether to use true bearing when displaying course or heading.
     * @returns A Promise which is fulfilled with whether the leg was successfully activated.
     */
    static activateLegToWaypoint(gtcService: GtcService, fms: Fms, leg: LegDefinition, useTrueBearing: boolean): Promise<boolean>;
    /**
     * Opens a dialog prompting the user to accept whether to activate a flight plan leg. If the user accepts, then
     * the leg is activated. Otherwise, no action is taken.
     * @param gtcService The GTC service.
     * @param fms The FMS.
     * @param segmentIndex The index of the segment containing the leg to activate.
     * @param segmentLegIndex The index of the leg to activate in its segment.
     * @param useTrueBearing Whether to use true bearing when displaying course or heading.
     * @returns A Promise which is fulfilled with whether the leg was successfully activated.
     */
    static activateLegToWaypoint(gtcService: GtcService, fms: Fms, segmentIndex: number, segmentLegIndex: number, useTrueBearing: boolean): Promise<boolean>;
    /**
     * Gets the display text for a flight plan leg as it should appear in the activate leg dialog.
     * @param leg A flight plan leg.
     * @returns The display text for the flight plan leg as it should appear in the activate leg dialog.
     */
    private static getActivateLegDialogLegText;
    /**
     * Opens the airway selection dialog to load an airway into a flight plan.
     * @param gtcService The GTC service.
     * @param fms The FMS.
     * @param planIndex The index of the flight plan into which to load the airway.
     * @param entryLeg The entry leg of the airway to load.
     * @param listManager The flight plan list manager for the flight plan into which to load the airway.
     * @returns A Promise which is fulfilled with the index of the new airway segment if an airway was loaded, or `-1`
     * if an airway was not loaded.
     */
    static loadAirway(gtcService: GtcService, fms: Fms, planIndex: number, entryLeg: LegDefinition, listManager: FlightPlanListManager): Promise<number>;
    /**
     * Opens the airway selection dialog to edit an existing airway in a flight plan.
     * @param gtcService The GTC service.
     * @param fms The FMS.
     * @param planIndex The index of the flight plan to edit.
     * @param editAirwaySegmentIndex The index of the airway segment to edit.
     * @param listManager The flight plan list manager for the flight plan to edit.
     * @returns A Promise which is fulfilled with the index of the edited airway segment if the airway was edited, or
     * `-1` if it was not edited.
     */
    static editAirway(gtcService: GtcService, fms: Fms, planIndex: number, editAirwaySegmentIndex: number, listManager: FlightPlanListManager): Promise<number>;
}
//# sourceMappingURL=GtcFlightPlanDialogs.d.ts.map