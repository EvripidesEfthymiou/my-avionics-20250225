import { VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FlightPlanStore, FlightPlanLegData } from '@microsoft/msfs-wtg3000-common';
import { GtcViewProps, GtcView } from '../../GtcService/GtcView';
import { GtcInteractionEvent } from '../../GtcService/GtcInteractionEvent';
import './FlightPlanVnavConstraintSlideoutMenu.css';
/** The properties for the {@link FlightPlanVnavConstraintSlideoutMenu} component. */
export interface FlightPlanVnavConstraintSlideoutMenuProps extends GtcViewProps {
    /** An instance of the Fms. */
    fms: Fms;
    /** Which flight plan index to work with. */
    planIndex: number;
    /** The flight plan store. */
    store: FlightPlanStore;
}
/** Slideount menu showing options for creating/changing an advanced vnav altitude constraint. */
export declare class FlightPlanVnavConstraintSlideoutMenu extends GtcView<FlightPlanVnavConstraintSlideoutMenuProps> {
    private thisNode?;
    private readonly classList;
    private readonly legListData;
    private readonly isPhaseEditable;
    private readonly phase;
    private readonly alongTrack;
    private readonly altDesc;
    private readonly altitude1Meters;
    private readonly isAltitude1FlightLevel;
    private readonly altitude2Meters;
    private readonly isAltitude2FlightLevel;
    private readonly altitude1Desc;
    private readonly altitude2Desc;
    private readonly allowVnavDto;
    private readonly isDifferentFromPublished;
    private readonly isDesignatedConstraint;
    private readonly showRevertButton;
    private publishedAltDesc;
    private publishedAltitude1Feet;
    private publishedAltitude2Feet;
    private publishedAltitude1Meters;
    private publishedAltitude2Meters;
    private fixElevationMeters?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /** Sets the constraint on the leg and closes the menu. */
    private setConstraintAndClose;
    /**
     * Pass initial leg list data to use.
     * @param legListData The leg list data.
     */
    request(legListData: FlightPlanLegData): void;
    /** Starts the selection chain, opening the first dialog if needed. */
    private startSelectionChain;
    /**
     * Called when alt desc has been selected from the list dialog.
     * @param valueChanged Whether the value changed.
     * @param oldAltDesc The previous alt desc.
     */
    private onAltDescSelected;
    /** Called when alt 1 has been selected from the altitude dialog. */
    private onAlt1Selected;
    /**
     * Removes or reverts the altitude constraint and closes the menu if successful.
     * @param operation Whether to remove or revert.
     */
    private removeOrRevertConstraintAndClose;
    /** Opens the altitude dialog for altitude 1. */
    private readonly openAltitude1Dialog;
    /**
     * Opens the altitude dialog for altitude 2.
     * @param initialValueMeters The initial value to use, if undefined, will use altitude 2.
     */
    private readonly openAltitude2Dialog;
    /**
     * Opens the altitude dialog.
     * @param initialValueFeet The initial altitude to show, in feet.
     * @param isFlightLevel Whether to display as flight level.
     * @param maxAltitudeFeet Max altitude in feet. If undefined, no max will be used.
     * @param isMaxAltitudeFlightLevel Whether max altitude is a flight level.
     * @param title The title bar title to use.
     * @returns A promise that resolves to the result of the dialog.
     */
    private openAltitudeDialog;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=FlightPlanVnavConstraintSlideoutMenu.d.ts.map