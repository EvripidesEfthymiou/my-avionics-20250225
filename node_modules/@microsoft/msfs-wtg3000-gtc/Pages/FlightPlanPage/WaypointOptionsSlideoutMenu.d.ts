import { LegDefinition, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FlightPlanStore, FlightPlanListManager, FlightPlanLegListData } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent } from '../../GtcService/GtcInteractionEvent';
import { GtcFlightPlanPageSlideoutMenu, GtcFlightPlanPageSlideoutMenuProps } from './GtcFlightPlanPageSlideoutMenu';
import './WaypointOptionsSlideoutMenu.css';
/**
 * The properties for the WaypointOptionsSlideoutMenu component.
 */
export interface WaypointOptionsSlideoutMenuProps extends GtcFlightPlanPageSlideoutMenuProps {
    /** An instance of the Fms. */
    fms: Fms;
    /** Which flight plan index to work with. */
    planIndex: number;
    /** The flight plan store. */
    store: FlightPlanStore;
    /** The flight plan list manager. */
    listManager: FlightPlanListManager;
    /** Callback to call when a waypoint was inserted from this menu. */
    onWaypointInserted: (newLeg: LegDefinition) => void;
    /** Selects the next waypoint in the given direction. */
    selectNextWaypoint: (direction: 1 | -1) => void;
    /** Whether there are still waypoints still scroll up to. */
    canScrollUp: Subscribable<boolean>;
    /** Whether there are still waypoints still scroll down to. */
    canScrollDown: Subscribable<boolean>;
}
/**
 * Displays the loaded procedures and links to the procedure pages.
 */
export declare class WaypointOptionsSlideoutMenu extends GtcFlightPlanPageSlideoutMenu<FlightPlanLegListData, WaypointOptionsSlideoutMenuProps> {
    private readonly segmentIndex;
    private readonly segmentLegIndex;
    private readonly globalLegIndex;
    private readonly canActivate;
    private readonly canLoadAirway;
    private readonly isFlyOver;
    private readonly isHoldLeg;
    private readonly isSelectedLegEditableHold;
    private readonly isHoldButtonEnabled;
    private readonly holdButtonLabel;
    private readonly facility;
    private readonly unitsSettingManager;
    private readonly scrollState;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Loads the leg's facility, if it has one.
     * @param leg The leg.
     */
    private loadFacility;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Checks whether an airway can be inserted from this selected index and there are routes from this leg.
     * @param plan The flight plan.
     * @param leg The leg.
     * @param segment The segment.
     * @returns True if can load airway at this leg.
     */
    private canAirwayInsert;
    /**
     * Checks if a hold-at-waypoint can be inserted after a flight plan leg.
     * @param leg A flight plan leg.
     * @returns Whether a hold-at-waypoint can be inserted after the flight plan leg.
     */
    private canHoldAtWaypoint;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=WaypointOptionsSlideoutMenu.d.ts.map