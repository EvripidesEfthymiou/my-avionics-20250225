import { FlightPlanSegmentType, Subject, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, DisplayPaneControlEvents, FlightPlanListManager, FlightPlanStore, NavigationMapPaneFlightPlanFocusData, NavigationMapPaneViewEventTypes } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import './GtcFlightPlanPage.css';
/** Properties of FlightPlanPage */
export interface FlightPlanPageProps extends GtcViewProps {
    /** The GtcService instance */
    fms: Fms;
    /** Which flight plan index to handle events for. */
    planIndex: number;
    /** The flight plan store to use. */
    store: FlightPlanStore;
    /** The flight plan list to use. */
    listManager: FlightPlanListManager;
    /** @inheritdoc */
    displayPaneIndex: ControllableDisplayPaneIndex;
}
/** The flight plan page. */
export declare class GtcFlightPlanPage extends GtcView<FlightPlanPageProps> {
    title: Subject<string>;
    protected readonly publisher: import("@microsoft/msfs-sdk").Publisher<DisplayPaneControlEvents<NavigationMapPaneViewEventTypes>>;
    private readonly flightPlanBoxClassList;
    private readonly displayPaneIndex;
    private readonly displayPaneSettings;
    private readonly store;
    private readonly listManager;
    private readonly waypointCache;
    private readonly selectedListData;
    private readonly canScrollUpWaypoint;
    private readonly canScrollDownWaypoint;
    private readonly showOnMap;
    private readonly showOnMapData;
    private readonly showOnMapDataUpdateTimer;
    /** Updates this page's show on map flight plan focus data based on the current show on map state and flight plan list selection. */
    private readonly showOnMapUpdateHandler;
    private readonly flightPlanList;
    private readonly directToRandomLegsRef;
    private readonly directToRandomLegListItemRef;
    private readonly directToRandomHoldLegListItemRef;
    private readonly columnHeader1;
    private readonly columnHeader2;
    private readonly columnHeader3;
    private readonly listItemHeightPx;
    private readonly listItemSpacingPx;
    private readonly lastActiveLegAutoScrolledTo;
    private readonly toLegScrollSub;
    private readonly activeLegChangedDebounced;
    private readonly topRowSegmentIndex;
    private readonly topRowSegmentLegIndex;
    private readonly selectedSegmentIndex;
    private readonly selectedSegmentLegIndex;
    private readonly flightPlanTextUpdatedTimer;
    private readonly isActivePaneController;
    private readonly isPageOpen;
    private readonly isControllingFlightPlanTextInset;
    private readonly subscriptions;
    private lastVisibleTopIndex;
    private selectedListDataSub?;
    private showOnMapSub?;
    private legsChangedSub?;
    private waypointArrowUpdateClockSub?;
    private isPaused;
    /**
     * Constructor.
     * @param props This component's props.
     * @throws Error if a display pane index is not defined for this view.
     */
    constructor(props: FlightPlanPageProps);
    /** @inheritdoc */
    onAfterRender(): void;
    /** Scrolls to the active leg because the active leg changed. */
    private autoScrollToActiveLeg;
    /** @inheritdoc */
    onOpen(wasPreviouslyOpened: boolean): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onClose(): void;
    /**
     * Scrolls the flight plan page to the given segment type.
     * @param segmentType The segment type.
     */
    scrollTo(segmentType: FlightPlanSegmentType): void;
    /**
     * Gets the list data for the given segment type.
     * @param segmentType The segment type.
     * @returns the list data for the given segment type.
     */
    private getSegmentTypeListData;
    /**
     * Handles a new waypoint being inserted.
     * @param newLeg The new leg defintion.
     */
    private handleWaypointInserted;
    /**
     * Selects the next waypoin in the given direction and scrolls to it if needed.
     * @param direction The direction to select in.
     */
    private selectNextWaypoint;
    /** Updates which waypoint arrow buttons are enabled. */
    private updateWaypointArrowButtons;
    /**
     * Gets the next waypoint in the given direction, or undefined if no more waypoints in that direction.
     * @param direction The direction to look in.
     * @returns the next waypoint or undefined if no more waypoints in that direction.
     */
    private getNextWaypoint;
    /** Renders the offroute direct to legs to the page. */
    private renderOffrouteDirectTo;
    /**
     * Sends flight plan focus data to the display pane controlled by this page.
     * @param data The data to send.
     */
    protected sendFlightPlanFocusData(data: NavigationMapPaneFlightPlanFocusData): void;
    /**
     * Sends flight plan text data to the display pane controlled by this page.
     * @param debounce Whether to debounce the update.
     * @param releaseControl Whether to release control of the flight plan text inset.
     */
    protected sendFlightPlanTextDataDebounced(debounce: boolean, releaseControl?: boolean): void;
    /**
     * Sends flight plan text data to the display pane controlled by this page.
     * @param releaseControl Whether to release control of the flight plan text inset.
     */
    protected sendFlightPlanTextData(releaseControl?: boolean): void;
    /**
     * Callback for GtcList to track when the list is scrolled.
     * @param topVisibleIndex The top visible index in the list.
     */
    private readonly calcTopRow;
    /**
     * Renders a flight plan list item.
     * @param listItem The list item to render.
     * @returns The rendered list item.
     */
    private readonly renderItem;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcFlightPlanPage.d.ts.map