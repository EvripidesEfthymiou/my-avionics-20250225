import { FacilityWaypoint, MutableSubscribable, Subscribable, UserFacility, VNode } from '@microsoft/msfs-sdk';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import { GtcUserWaypointEditController } from '../../Navigation/GtcUserWaypointEditController';
import './GtcUserWaypointInfoOptionsPopup.css';
/**
 * Component props for GtcUserWaypointInfoOptionsPopup.
 */
export interface GtcUserWaypointInfoOptionsPopupProps extends GtcViewProps {
    /** A controller for editing user waypoints. */
    controller: GtcUserWaypointEditController;
    /** The selected waypoint. */
    selectedWaypoint: Subscribable<FacilityWaypoint<UserFacility> | null>;
    /** A function which initializes the selected waypoint of the popup's parent page. */
    initSelection: (facility: UserFacility) => void;
    /** Whether to show the waypoint information pane. */
    showOnMap: MutableSubscribable<boolean>;
}
/**
 * A GTC user waypoint information page options popup.
 */
export declare class GtcUserWaypointInfoOptionsPopup extends GtcView<GtcUserWaypointInfoOptionsPopupProps> {
    private readonly buttonRefs;
    private readonly isWaypointSelected;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when the Direct-To button is pressed.
     */
    private onDirectToButtonPressed;
    /**
     * Responds to when the Edit button is pressed.
     */
    private onEditButtonPressed;
    /**
     * Responds to when the Delete button is pressed.
     */
    private onDeleteButtonPressed;
    /**
     * Responds to when the Delete All button is pressed.
     */
    private onDeleteAllButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcUserWaypointInfoOptionsPopup.d.ts.map