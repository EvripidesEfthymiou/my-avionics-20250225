import { FacilitySearchType, FacilityWaypoint, IcaoValue, MutableSubscribable, SubscribableArray, UserFacility, VNode } from '@microsoft/msfs-sdk';
import { ControllableDisplayPaneIndex } from '@microsoft/msfs-wtg3000-common';
import { GtcControlMode, GtcService } from '../../GtcService/GtcService';
import { GtcWaypointInfoPage, GtcWaypointInfoPageProps } from './GtcWaypointInfoPage';
import { GtcUserWaypointEditController } from '../../Navigation/GtcUserWaypointEditController';
import './GtcUserWaypointInfoPage.css';
/**
 * Component props for GtcUserWaypointInfoPage.
 */
export interface GtcUserWaypointInfoPageProps extends GtcWaypointInfoPageProps {
    /** A controller for editing user waypoints. */
    controller: GtcUserWaypointEditController;
    /** An array of all existing user waypoints. */
    userWaypoints: SubscribableArray<FacilityWaypoint<UserFacility>>;
    /** A mutable subscribable from and to which to sync the page's selected user waypoint. */
    selectedUserWaypoint: MutableSubscribable<FacilityWaypoint<UserFacility> | null>;
}
/**
 * GTC view keys for popups owned by airport information pages.
 */
declare enum GtcUserWaypointInfoPagePopupKeys {
    Options = "UserWaypointInfoOptions"
}
/**
 * A GTC user waypoint information page.
 */
export declare class GtcUserWaypointInfoPage extends GtcWaypointInfoPage<FacilitySearchType.User, GtcUserWaypointInfoPageProps> {
    protected readonly waypointSelectType = FacilitySearchType.User;
    protected readonly optionsPopupKey = GtcUserWaypointInfoPagePopupKeys.Options;
    private readonly tabContainerRef;
    private readonly selectedRunwayIndex;
    private readonly selectionState;
    private initSelectionOpId;
    private userWaypointArraySub?;
    private selectedWaypointPipeOut?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when a user waypoint is removed from the existing user waypoints array.
     * @param index The index of the removed waypoint.
     */
    private onWaypointRemoved;
    /**
     * Initializes this page's user waypoint selection. If the initial selected waypoint does not exist anymore, then
     * the selection will be set to the oldest existing user waypoint. If there are no existing user waypoints, the
     * selection will be set to `null`.
     * @param facility The user waypoint facility to select, or its ICAO. If not defined, the selection will be
     * initialized to the most recently selected user waypoint.
     */
    initSelection(facility?: UserFacility | IcaoValue): Promise<void>;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    protected getCssClass(): string;
    /** @inheritdoc */
    protected renderContent(): VNode;
    /**
     * Renders a tab for this page's tab container.
     * @param position The position of the tab.
     * @param label The tab label.
     * @param renderContent A function which renders the tab contents.
     * @returns A tab for this page's tab container, as a VNode.
     */
    private renderTab;
    /**
     * Renders the info tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param sidebarState The sidebar state to use.
     * @returns The info tab, as a VNode.
     */
    private renderInfoTab;
    /**
     * Renders the freq tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param sidebarState The sidebar state to use.
     * @returns The freq tab, as a VNode.
     */
    private renderWaypointListTab;
    /** @inheritdoc */
    protected renderOptionsPopup(gtcService: GtcService, controlMode: GtcControlMode, displayPaneIndex?: ControllableDisplayPaneIndex): VNode;
    /** @inheritdoc */
    destroy(): void;
}
export {};
//# sourceMappingURL=GtcUserWaypointInfoPage.d.ts.map