import { ComponentProps, DisplayComponent, FacilityLoader, FacilityWaypoint, GeoPointSubject, IcaoValue, MappedSubject, SearchTypeMap, SetSubject, Subject, Subscribable, Subscription, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { GarminFacilityWaypointCache, WaypointInfoStore } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, DisplayPaneControlEvents, DisplayPaneSettings, WaypointInfoPaneSelectionData, WaypointInfoPaneViewEventTypes } from '@microsoft/msfs-wtg3000-common';
import { WaypointSelectType, WaypointSelectTypeMap } from '../../Components/TouchButton/GtcWaypointSelectButton';
import { GtcControlMode, GtcService } from '../../GtcService/GtcService';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import { GtcPositionHeadingDataProvider } from '../../Navigation/GtcPositionHeadingDataProvider';
import './GtcWaypointInfoPage.css';
/**
 * Component props for GtcWaypointInfoPage.
 */
export interface GtcWaypointInfoPageProps extends GtcViewProps {
    /** A facility loader. */
    facLoader: FacilityLoader;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
}
/**
 * A GTC waypoint information page.
 */
export declare abstract class GtcWaypointInfoPage<T extends WaypointSelectType, P extends GtcWaypointInfoPageProps = GtcWaypointInfoPageProps> extends GtcView<P> {
    protected static readonly NULL_IDENT: {
        8: string;
        1: string;
        3: string;
        4: string;
        2: string;
        6: string;
    };
    /** The type of waypoint displayed by this page. */
    protected abstract readonly waypointSelectType: T;
    /** The view key for this page's options popup. */
    protected abstract readonly optionsPopupKey: string;
    protected readonly rootCssClass: SetSubject<string>;
    protected readonly publisher: import("@microsoft/msfs-sdk").Publisher<DisplayPaneControlEvents<WaypointInfoPaneViewEventTypes>>;
    protected readonly displayPaneIndex: ControllableDisplayPaneIndex;
    protected readonly displayPaneSettings: UserSettingManager<DisplayPaneSettings>;
    protected readonly facWaypointCache: GarminFacilityWaypointCache;
    /** The selected waypoint, or `null` if there is no selected waypoint. */
    protected readonly selectedWaypoint: Subject<WaypointSelectTypeMap[T] | null>;
    /** Whether a waypoint is selected. */
    protected readonly hasSelectedWaypoint: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>;
    /** The facility associated with the selected waypoint. */
    protected readonly selectedFacility: Subject<SearchTypeMap[T] | null>;
    protected selectedFacilityPipe?: Subscription;
    /** The position of the airplane. */
    protected readonly ppos: GeoPointSubject;
    /** The true heading of the airplane, in degrees, or `NaN` if heading data is invalid. */
    protected readonly planeHeadingTrue: Subject<number>;
    /** An information store for the selected waypoint. */
    protected readonly selectedWaypointInfo: WaypointInfoStore;
    /**
     * The bearing to the selected waypoint, relative to the airplane's current heading, in degrees, or `NaN` if there is
     * no selected waypoint or position/heading data is invalid.
     */
    protected readonly selectedWaypointRelativeBearing: MappedSubject<[import("@microsoft/msfs-sdk").NumberUnitInterface<"navangle", import("@microsoft/msfs-sdk").NavAngleUnit>, number], number>;
    protected readonly showOnMap: Subject<boolean>;
    protected readonly showOnMapData: Subject<Omit<WaypointInfoPaneSelectionData, "resetRange">>;
    protected resetMapRange: boolean;
    protected readonly unitsSettingManager: import("@microsoft/msfs-garminsdk").UnitsUserSettingManager<import("@microsoft/msfs-garminsdk").UnitsUserSettingTypes>;
    protected pposPipe?: Subscription;
    protected headingPipe?: Subscription;
    protected isGpsDrSub?: Subscription;
    protected showOnMapSub?: Subscription;
    /**
     * Constructor.
     * @param props This component's props.
     * @throws Error if a display pane index is not defined for this view.
     */
    constructor(props: P);
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Initializes this page's waypoint selection.
     * @param facility The facility to select, or its ICAO.
     */
    abstract initSelection(facility?: SearchTypeMap[T] | IcaoValue): Promise<void>;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /**
     * Sends waypoint selection data to the display pane controlled by this page.
     * @param data The data to send.
     */
    protected sendSelectionData(data: WaypointInfoPaneSelectionData): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Gets the CSS class for this page's root element.
     * @returns The CSS class for this page's root element.
     */
    protected abstract getCssClass(): string;
    /**
     * Renders this page's main content.
     * @returns This page's main content, as a VNode.
     */
    protected abstract renderContent(): VNode;
    /**
     * Renders this page's options popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @param displayPaneIndex The index of the display pane associated with the popup.
     * @returns This page's options popup, as a VNode.
     */
    protected renderOptionsPopup(gtcService: GtcService, controlMode: GtcControlMode, displayPaneIndex?: ControllableDisplayPaneIndex): VNode;
    /** @inheritdoc */
    destroy(): void;
}
/**
 * Component props for GtcAirportInfoPageTabNoAirportMessage.
 */
export interface GtcWaypointInfoPageNoWaypointMessageProps extends ComponentProps {
    /** The selected waypoint. */
    selectedWaypoint: Subscribable<FacilityWaypoint | null>;
}
/**
 * A message displayed when a GTC waypoint information page has no selected waypoint.
 */
export declare class GtcWaypointInfoPageNoWaypointMessage extends DisplayComponent<GtcWaypointInfoPageNoWaypointMessageProps> {
    private readonly rootCssClass;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcWaypointInfoPage.d.ts.map