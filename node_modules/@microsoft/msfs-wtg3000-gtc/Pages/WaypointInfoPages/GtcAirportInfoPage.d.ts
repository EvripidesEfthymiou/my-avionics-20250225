import { AirportFacility, FacilitySearchType, IcaoValue, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FlightPlanStore } from '@microsoft/msfs-wtg3000-common';
import { GtcWaypointInfoPage, GtcWaypointInfoPageProps } from './GtcWaypointInfoPage';
import './GtcAirportInfoPage.css';
/**
 * Component props for GtcAirportInfoPage.
 */
export interface GtcAirportInfoPageProps extends GtcWaypointInfoPageProps {
    /** The FMS. */
    fms: Fms;
    /** The flight plan store to use. */
    flightPlanStore: FlightPlanStore;
    /** Whether RNP (AR) approaches should be displayed. */
    allowRnpAr: boolean;
}
/**
 * GTC view keys for popups owned by airport information pages.
 */
declare enum GtcAirportInfoPagePopupKeys {
    Options = "AirportInfoOptions"
}
/**
 * A GTC airport information page.
 */
export declare class GtcAirportInfoPage extends GtcWaypointInfoPage<FacilitySearchType.Airport, GtcAirportInfoPageProps> {
    protected static readonly REQUIRED_FACILITY_DATA_FLAGS: number;
    protected readonly waypointSelectType = FacilitySearchType.Airport;
    protected readonly optionsPopupKey = GtcAirportInfoPagePopupKeys.Options;
    private readonly tabContainerRef;
    private readonly selectedRunwayIndex;
    private readonly selectionState;
    private nearestContext?;
    private initSelectionOpId;
    /** @inheritdoc */
    constructor(props: GtcAirportInfoPageProps);
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Initializes this page's airport selection.
     * @param facility The airport facility to select, or its ICAO. If not defined, an initial airport will automatically
     * be selected.
     */
    initSelection(facility?: AirportFacility | IcaoValue): Promise<void>;
    /**
     * Automatically selects an airport facility. The selected airport will be one of the following, in order of
     * decreasing priority:
     * * The current active flight plan waypoint (if it is an airport).
     * * The current destination airport in the primary flight plan.
     * * The last airport waypoint that appears in the primary flight plan.
     * * The current origin airport in the primary flight plan.
     * * The nearest airport to the airplane's current position.
     * * The most recently selected airport.
     * @returns A Promise which is fulfilled with the automatically selected airport facility or `null` if a selection
     * could not be made.
     */
    private autoSelectFacility;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    protected getCssClass(): string;
    /** @inheritdoc */
    protected renderContent(): VNode;
    /**
     * Renders a tab for this page's tab container.
     * @param position The position of the tab.
     * @param label The tab label.
     * @param renderContent A function which renders the tab contents.
     * @returns A tab for this page's tab container, as a VNode.
     */
    private renderTab;
    /**
     * Renders the info tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param title A mutable subscribable to set to the tab's requested GTC view title.
     * @param sidebarState The sidebar state to use.
     * @returns The info tab, as a VNode.
     */
    private renderInfoTab;
    /**
     * Renders the freq tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param title A mutable subscribable to set to the tab's requested GTC view title.
     * @param sidebarState The sidebar state to use.
     * @returns The freq tab, as a VNode.
     */
    private renderFreqTab;
    /**
     * Renders the weather tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param title A mutable subscribable to set to the tab's requested GTC view title.
     * @param sidebarState The sidebar state to use.
     * @returns The weather tab, as a VNode.
     */
    private renderWeatherTab;
    /**
     * Renders the runways tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param title A mutable subscribable to set to the tab's requested GTC view title.
     * @param sidebarState The sidebar state to use.
     * @returns The runways tab, as a VNode.
     */
    private renderRunwaysTab;
    /**
     * Renders the proc tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param title A mutable subscribable to set to the tab's requested GTC view title.
     * @param sidebarState The sidebar state to use.
     * @returns The proc tab, as a VNode.
     */
    private renderProcTab;
    /** @inheritdoc */
    destroy(): void;
}
export {};
//# sourceMappingURL=GtcAirportInfoPage.d.ts.map