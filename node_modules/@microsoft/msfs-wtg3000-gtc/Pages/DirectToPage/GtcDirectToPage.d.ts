import { FacilityWaypoint, Subject, VNode } from '@microsoft/msfs-sdk';
import { Fms, GarminFacilityWaypointCache, WaypointInfoStore } from '@microsoft/msfs-garminsdk';
import { FlightPlanStore } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import { GtcPositionHeadingDataProvider } from '../../Navigation/GtcPositionHeadingDataProvider';
import { DirectToController, DirectToInputData } from './DirectToController';
import { DirectToStore } from './DirectToStore';
import './GtcDirectToPage.css';
/** Props for the direct to page. */
export interface GtcDirectToPageProps extends GtcViewProps {
    /** An FMS controller */
    fms: Fms;
    /** A provider of position and heading data for the page's main tab. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
    /** The flight plan store. */
    flightPlanStore: FlightPlanStore;
}
/**
 * A GTC Direct-To page.
 */
export declare class GtcDirectToPage extends GtcView<GtcDirectToPageProps> {
    private readonly tabsRef;
    private readonly nearestTabRef;
    private readonly waypointCache;
    private readonly ppos;
    private readonly planeHeadingTrue;
    private readonly selectedWaypointInfo;
    private readonly store;
    private readonly controller;
    private pposPipe?;
    private headingPipe?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /**
     * Sets the target waypoint to be displayed on this page.
     * @param input Data describing the target waypoint. If the data does not define a target, then one will
     * automatically be selected.
     * @returns A Promise which is fulfilled when the target waypoint has been set.
     */
    setWaypoint(input: DirectToInputData): Promise<void>;
    /**
     * Responds to when a waypoint is selected.
     * @param waypoint The selected waypoint.
     */
    private onWaypointSelected;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
/** Component props for the waypoint tab. */
export interface GtcDirectToPageWaypointTabProps extends GtcViewProps {
    /** An FMS state manager. */
    fms: Fms;
    /** A provider for position and heading data. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
    /** The selected waypoint for the direct to page. */
    selectedWaypoint: Subject<FacilityWaypoint | null>;
    /** The waypoint cache. */
    waypointCache: GarminFacilityWaypointCache;
    /** The waypoint info store. */
    selectedWaypointInfo: WaypointInfoStore;
    /** The direct to controller. */
    controller: DirectToController;
    /** The flight plan store. */
    flightPlanStore: FlightPlanStore;
    /** The direct to store. */
    directToStore: DirectToStore;
}
/** Direct to waypoint tab. */
export declare class GtcDirectToPageWaypointTab extends GtcView<GtcDirectToPageWaypointTabProps> {
    private readonly vnavAltButton;
    private readonly vnavOffsetButton;
    private readonly courseButton;
    private readonly holdButton;
    private readonly cancelButton;
    private readonly activateInsertButton;
    private readonly activateButton;
    private readonly unitsSettingManager;
    private readonly selectedWaypointIdent;
    private readonly selectedWaypointCity;
    private readonly selectedWaypointRegion;
    private readonly buttonClassList;
    private readonly courseButtonValue;
    private courseButtonAutoValuePipe?;
    private readonly holdButtonValue;
    private readonly relativeBearing;
    private readonly activeDirectToIdent;
    private readonly canCancel;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Updates the value for the course button.
     */
    private updateCourse;
    /** Updates the data source for the hold button value. */
    private updateHoldCourse;
    /** @inheritdoc */
    render(): VNode;
}
//# sourceMappingURL=GtcDirectToPage.d.ts.map