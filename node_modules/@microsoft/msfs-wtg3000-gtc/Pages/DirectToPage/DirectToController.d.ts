import { Facility, FlightPlan, Subject } from '@microsoft/msfs-sdk';
import { Fms, GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { DirectToExistingData, DirectToStore } from './DirectToStore';
/**
 * Data describing a direct-to target. The target can be a specific flight plan leg (defining an on-route direct-to),
 * an arbitrary waypoint, or undefined.
 */
export interface DirectToInputData {
    /**
     * The index of the flight plan segment containing the leg to which to target an on-route direct-to. Required to
     * define an on-route direct-to target.
     */
    segmentIndex?: number;
    /**
     * The index of the flight plan leg to which to target an on-route direct-to in its containing segment. Required to
     * define an on-route direct-to target.
     */
    segmentLegIndex?: number;
    /**
     * The waypoint facility to which to target a direct-to. Ignored if `segmentIndex` and `segmentLegIndex` are defined.
     */
    facility?: Facility;
}
/** The controller for the Direct To page. */
export declare class DirectToController {
    private readonly store;
    private readonly fms;
    private readonly waypointCache;
    readonly canActivate: Subject<boolean>;
    private initializeIcao;
    private initializeTargetOpId;
    /**
     * Creates an instance of direct to controller.
     * @param store This controller's associated direct to menu store.
     * @param fms The flight management system.
     * @param waypointCache The cache from which to retrieve facility waypoints.
     */
    constructor(store: DirectToStore, fms: Fms, waypointCache: GarminFacilityWaypointCache);
    /**
     * Initializes the direct-to target based on input data. If the input data does not define a target, an attempt will
     * be made to set the target to the following, in order:
     * * The current active direct-to target.
     * * The current active flight plan leg.
     * * The next leg in the primary flight plan, following the active leg, that is a valid direct-to target.
     * * The previous leg in the primary flight plan, before the active leg, that is a valid direct-to target.
     * @param dtoData The input data.
     */
    initializeTarget(dtoData: DirectToInputData): Promise<void>;
    /**
     * Searches for a valid Direct To Existing target in the primary flight plan that matches an optional ICAO, starting
     * from a specified flight plan leg. The search begins with the specified leg, then proceeds forwards in the plan. If
     * no valid leg is found, the search then returns to the leg immediately prior to the specified leg and proceeds
     * backwards in the plan.
     * @param segmentIndex The index of the segment that contains the starting leg.
     * @param segmentLegIndex The index of the starting leg in its segment.
     * @param targetIcao The ICAO of the desired Direct To target fix. If not defined, the chosen target fix does not
     * have to match any particular ICAO.
     * @returns A Direct To Existing data object describing the chosen target, or `null` if a valid target could not be
     * found.
     */
    private searchForValidDtoExistingLeg;
    /**
     * Responds to changes in the waypoint input's selected waypoint.
     * @param waypoint The selected waypoint.
     */
    private onWaypointChanged;
    /**
     * Syncs this controller's store's automatically calculated course value with the bearing to the selected target
     * waypoint.
     */
    private syncAutoCourseValue;
    /**
     * Creates and activates a direct-to to this controller's store's selected target waypoint.
     */
    activateSelected(): void;
    /**
     * Creates a direct to existing data object for a flight plan leg.
     * @param plan A flight plan.
     * @param segmentIndex The index of the segment in which the leg resides.
     * @param segmentLegIndex The index of the leg in its segment.
     * @returns A direct to existing data object.
     */
    protected static createDtoExistingData(plan: FlightPlan, segmentIndex: number, segmentLegIndex: number): DirectToExistingData;
}
//# sourceMappingURL=DirectToController.d.ts.map