import { ComponentProps, DisplayComponent, FacilityLoader, OneWayRunway, Subscribable, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { AirportWaypoint, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { ControllableDisplayPaneIndex, ToldUserSettingTypes } from '@microsoft/msfs-wtg3000-common';
import { GtcControlMode, GtcService } from '../../GtcService/GtcService';
import { GtcToldDataPageTabContent } from './GtcToldDataPageTabContent';
import './GtcToldDataPageWeatherTab.css';
/**
 * Component props for GtcToldDataPageWeatherTab.
 */
export interface GtcToldDataPageWeatherTabProps extends ComponentProps {
    /** The GTC service. */
    gtcService: GtcService;
    /** The GTC control mode to which the tab's parent view belongs. */
    controlMode: GtcControlMode;
    /** The index of the display pane that the tab's parent view is tied to. */
    displayPaneIndex?: ControllableDisplayPaneIndex;
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** The selected airport. */
    selectedAirport: Subscribable<AirportWaypoint | null>;
    /** The selected runway. */
    selectedRunway: Subscribable<OneWayRunway | null>;
    /** The magnetic variation, in degrees, at the selected runway or airport. */
    magVar: Subscribable<number>;
    /** A manager for TOLD performance calculation user settings. */
    toldSettingManager: UserSettingManager<ToldUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** Whether the tab is for the takeoff data page. */
    isTakeoff: boolean;
}
/**
 * A GTC TOLD (takeoff/landing) data page weather tab.
 */
export declare class GtcToldDataPageWeatherTab extends DisplayComponent<GtcToldDataPageWeatherTabProps> implements GtcToldDataPageTabContent {
    private static readonly RUNWAY_SURFACE_CONDITION_MAP;
    private static readonly BEARING_FORMATTER;
    private static readonly SPEED_FORMATTER;
    private static readonly TEMPERATURE_FORMATTER;
    private static readonly INHG_FORMATTER;
    private static readonly HPA_FORMATTER;
    private thisNode?;
    private readonly ratCssClass;
    private readonly settingString;
    private readonly windDirectionSetting;
    private readonly windSpeedSetting;
    private readonly temperatureSetting;
    private readonly pressureSetting;
    private readonly windDialogChainSteps;
    private readonly windDirection;
    private readonly windSpeed;
    private readonly temperature;
    private readonly pressure;
    private readonly pressureDisplayUnit;
    private readonly hasMetar;
    private lastMetarIcao?;
    private checkMetarOpId;
    private loadMetarOpId;
    private showMetarOpId;
    private airportSub?;
    private magVarSub?;
    private windDirectionPipe?;
    private windSpeedPipe?;
    private temperaturePipe?;
    private pressurePipe?;
    private useRatSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onGtcInteractionEvent(): boolean;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResume(): void;
    /**
     * Loads METAR data into this tab's wind parameters.
     */
    private loadMetarData;
    /**
     * Opens a popup to show the current raw METAR data for the selected airport.
     */
    private showMetarData;
    /**
     * Opens a dialog chain to select this tab's wind parameters.
     */
    private selectWind;
    /**
     * Opens a dialog chain to select this tab's temperature parameter.
     */
    private selectTemperature;
    /**
     * Opens a dialog chain to select this tab's barometric pressure parameter.
     */
    private selectPressure;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcToldDataPageWeatherTab.d.ts.map