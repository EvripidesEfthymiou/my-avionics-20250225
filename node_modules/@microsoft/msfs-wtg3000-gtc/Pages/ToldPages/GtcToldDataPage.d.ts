import { FacilityLoader, MappedSubject, NodeReference, OneWayRunway, Subject, Subscribable, Subscription, UserSetting, VNode } from '@microsoft/msfs-sdk';
import { AirportWaypoint, GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { FlightPlanStore, PerformanceConfig, ToldLandingPerformanceResult, ToldTakeoffPerformanceResult, VSpeedGroup, VSpeedGroupType } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import { SidebarState } from '../../GtcService/Sidebar';
import { GtcToldDataPageTabContent } from './GtcToldDataPageTabContent';
import './GtcToldDataPage.css';
/**
 * Component props for GtcToldDataPage.
 */
export interface GtcToldDataPageProps extends GtcViewProps {
    /** The facility loader. */
    facLoader: FacilityLoader;
    /** A performance calculations configuration object. */
    perfConfig: PerformanceConfig;
    /** The avionics system's defined reference V-speed groups. */
    vSpeedGroups: ReadonlyMap<VSpeedGroupType, VSpeedGroup>;
    /** The flight plan store. */
    flightPlanStore: FlightPlanStore;
}
/**
 * A GTC TOLD (takeoff/landing) data page.
 */
export declare abstract class GtcToldDataPage<ResultType extends ToldTakeoffPerformanceResult | ToldLandingPerformanceResult, P extends GtcToldDataPageProps = GtcToldDataPageProps> extends GtcView<P> {
    private readonly tabContainerRef;
    protected abstract readonly isTakeoff: boolean;
    protected readonly facWaypointCache: GarminFacilityWaypointCache;
    protected readonly toldSettingManager: import("@microsoft/msfs-sdk").DefaultUserSettingManager<import("@microsoft/msfs-wtg3000-common").ToldUserSettingTypes>;
    protected readonly weightFuelSettingManager: import("@microsoft/msfs-sdk").DefaultUserSettingManager<import("@microsoft/msfs-wtg3000-common").WeightFuelUserSettingTypes>;
    protected abstract readonly originDestIcaoSetting: UserSetting<string>;
    protected abstract readonly resultSetting: UserSetting<string>;
    protected readonly unitsSettingManager: import("@microsoft/msfs-garminsdk").UnitsUserSettingManager<import("@microsoft/msfs-garminsdk").UnitsUserSettingTypes>;
    protected readonly selectedAirport: Subject<AirportWaypoint | null>;
    protected readonly selectedRunway: Subject<OneWayRunway | null>;
    protected readonly magVar: MappedSubject<[AirportWaypoint | null, OneWayRunway | null], number>;
    protected readonly result: Subject<ResultType | null>;
    protected readonly listItemHeight: number;
    protected readonly listItemSpacing: number;
    private originDestOpId;
    protected isPaused: boolean;
    protected originDestIcaoSub?: Subscription;
    protected selectedAirportSub?: Subscription;
    protected selectedRunwaySub?: Subscription;
    private resultSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when the origin/destination ICAO changes.
     * @param icao The origin/destination ICAO string (V2).
     */
    private onOriginDestIcaoChanged;
    /**
     * Responds to when the selected airport changes.
     * @param waypoint The selected airport.
     */
    private onSelectedAirportChanged;
    /**
     * Updates the origin/destination ICAO setting based on the selected airport and runway.
     */
    private updateOriginDestIcao;
    /**
     * Responds to when the performance calculation result changes.
     * @param resultString The stringified performance calculation result.
     */
    private onResultChanged;
    /**
     * Parses a performance result object from a string.
     * @param resultString The stringified result object.
     * @returns The performance result object parsed from the specified string, or `null` if the string does not define
     * such an object.
     */
    protected abstract parseResult(resultString: string): ResultType | null;
    /** @inheritdoc */
    onOpen(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Gets this page's root CSS class.
     * @returns This page's root CSS class.
     */
    protected abstract getRootCssClass(): string;
    /**
     * Renders this page's tabs without performance calculation support.
     * @returns This page's tabs without performance calculation support, as an array of VNodes.
     */
    protected renderTabsWithoutPerformance(): VNode[];
    /**
     * Renders this page's tabs with performance calculation support.
     * @returns This page's tabs without performance calculation support, as an array of VNodes.
     */
    protected renderTabsWithPerformance(): VNode[];
    /**
     * Renders a tab for this page's tab container.
     * @param position The position of the tab.
     * @param label The tab label.
     * @param renderContent A function which renders the tab contents.
     * @returns A tab for this page's tab container, as a VNode.
     */
    protected renderTab(position: number, label: string, renderContent?: (contentRef: NodeReference<GtcToldDataPageTabContent>, sidebarState: Subscribable<SidebarState | null>) => VNode): VNode;
    /**
     * Renders this page's origin/destination tab.
     * @param contentRef A reference to assign to the tab's content.
     * @returns This page's origin/destination tab, as a VNode.
     */
    protected renderOriginDestTab(contentRef: NodeReference<GtcToldDataPageTabContent>): VNode;
    /**
     * Renders this page's weather tab.
     * @param contentRef A reference to assign to the tab's content.
     * @returns This page's weather tab, as a VNode.
     */
    protected renderWeatherTab(contentRef: NodeReference<GtcToldDataPageTabContent>): VNode;
    /**
     * Renders this page's runway tab.
     * @param contentRef A reference to assign to the tab's content.
     * @returns This page's runway tab, as a VNode.
     */
    protected renderRunwayTab(contentRef: NodeReference<GtcToldDataPageTabContent>): VNode;
    /**
     * Renders this page's config tab.
     * @param contentRef A reference to assign to the tab's content.
     * @param sidebarState The sidebar state to use.
     * @returns This page's config tab, as a VNode.
     */
    protected abstract renderConfigTab(contentRef: NodeReference<GtcToldDataPageTabContent>, sidebarState: Subscribable<SidebarState | null>): VNode;
    /**
     * Renders this page's data tab.
     * @param contentRef A reference to assign to the tab's content.
     * @returns This page's data tab, as a VNode.
     */
    protected abstract renderDataTab(contentRef: NodeReference<GtcToldDataPageTabContent>): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcToldDataPage.d.ts.map