import { ComponentProps, DisplayComponent, OneWayRunway, Subscribable, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { AirportWaypoint, UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { ToldLandingPerformanceResult, ToldUserSettingTypes, VSpeedGroup } from '@microsoft/msfs-wtg3000-common';
import { GtcService } from '../../GtcService/GtcService';
import { GtcToldDataPageTabContent } from './GtcToldDataPageTabContent';
import './GtcToldDataPageDataTab.css';
import './GtcLandingDataPageDataTab.css';
/**
 * Component props for GtcLandingDataPageDataTab.
 */
export interface GtcLandingDataPageDataTabProps extends ComponentProps {
    /** The GTC service. */
    gtcService: GtcService;
    /** The avionics system's defined takeoff reference V-speed group. */
    landingVSpeedGroup: VSpeedGroup | undefined;
    /** The selected origin airport. */
    selectedAirport: Subscribable<AirportWaypoint | null>;
    /** The selected origin runway. */
    selectedRunway: Subscribable<OneWayRunway | null>;
    /** The calculated takeoff performance result. */
    result: Subscribable<ToldLandingPerformanceResult | null>;
    /** A manager for TOLD performance calculation user settings. */
    toldSettingManager: UserSettingManager<ToldUserSettingTypes>;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
}
/**
 * A GTC landing data page data tab.
 */
export declare class GtcLandingDataPageDataTab extends DisplayComponent<GtcLandingDataPageDataTabProps> implements GtcToldDataPageTabContent {
    private static readonly V_SPEED_FORMATTER;
    private static readonly LENGTH_FORMATTER;
    private static readonly WEIGHT_FORMATTER;
    private static readonly ALTITUDE_FORMATTER;
    private static readonly WIND_FORMATTER;
    private static readonly TEMP_FORMATTER;
    private static readonly TEMP_LIMIT_FORMATTER;
    private thisNode?;
    private readonly rightCssClass;
    private readonly lengthRef10CssClass;
    private readonly vSpeedValues;
    private readonly landingLengthAvailValue;
    private readonly landingLengthRequiredRefValue;
    private readonly landingLengthRequiredRef10Value;
    private readonly landingWeightValue;
    private readonly headwindTitleText;
    private readonly crosswindTitleText;
    private readonly headwindValue;
    private readonly crosswindValue;
    private readonly weightLimitValue;
    private readonly runwayWeightLimitValue;
    private readonly pressureAltitudeTitleText;
    private readonly pressureAltitudeValue;
    private readonly pressureAltitudeLimitValue;
    private readonly temperatureTitleText;
    private readonly temperatureValue;
    private readonly temperatureLimitValue;
    private readonly windLimitTitleText;
    private readonly windExceededValue;
    private readonly windLimitValue;
    private readonly canAcceptSpeeds;
    private lastDisplayedResult;
    private resultSub?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Responds to when the calculated takeoff performance result changes.
     * @param result The new calculated takeoff performance result.
     */
    private onResultChanged;
    /**
     * Displays a valid calculated takeoff performance result.
     * @param result The result to display.
     */
    private showValidResult;
    /**
     * Displays a takeoff performance result that has exceeded the runway length limit.
     * @param result The result to display.
     */
    private showLengthExceededResult;
    /**
     * Displays a takeoff performance result that has exceeded a pressure altitude limit.
     * @param result The result to display.
     */
    private showPressureAltExceededResult;
    /**
     * Displays a takeoff performance result that has exceeded a temperature limit.
     * @param result The result to display.
     */
    private showTemperatureExceededResult;
    /**
     * Displays a takeoff performance result that has exceeded a wind limit.
     * @param result The result to display.
     */
    private showWindExceededResult;
    /**
     * Displays a takeoff performance result that has exceeded the maximum takeoff weight limit.
     * @param result The result to display.
     */
    private showWeightExceededResult;
    /**
     * Displays a null takeoff performance result.
     */
    private displayNullResult;
    /** @inheritdoc */
    onGtcInteractionEvent(): boolean;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResume(): void;
    /**
     * Responds to when the accept landing speeds button is pressed.
     * @param setting The landing speeds accepted user setting.
     */
    private onAcceptSpeedsButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders the valid result panel.
     * @returns The valid result panel, as a VNode.
     */
    private renderValidResult;
    /**
     * Renders the field length exceeded result panel.
     * @returns The field length exceeded result panel, as a VNode.
     */
    private renderFieldLengthExceededResult;
    /**
     * Renders the weight limit exceeded result panel.
     * @returns The weight limit exceeded result panel, as a VNode.
     */
    private renderWeightLimitExceededResult;
    /**
     * Renders the pressure altitude limit exceeded result panel.
     * @returns The pressure altitude limit exceeded result panel, as a VNode.
     */
    private renderPressureAltLimitExceededResult;
    /**
     * Renders the temperature limit exceeded result panel.
     * @returns The temperature limit exceeded result panel, as a VNode.
     */
    private renderTemperatureLimitExceededResult;
    /**
     * Renders the wind limit exceeded result panel.
     * @returns The wind limit exceeded result panel, as a VNode.
     */
    private renderWindLimitExceededResult;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcLandingDataPageDataTab.d.ts.map