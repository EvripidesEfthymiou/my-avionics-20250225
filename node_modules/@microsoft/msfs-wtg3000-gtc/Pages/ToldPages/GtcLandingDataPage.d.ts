import { NodeReference, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { ToldLandingPerformanceResult } from '@microsoft/msfs-wtg3000-common';
import { SidebarState } from '../../GtcService/Sidebar';
import { GtcPositionHeadingDataProvider } from '../../Navigation/GtcPositionHeadingDataProvider';
import { GtcToldDataPage, GtcToldDataPageProps } from './GtcToldDataPage';
import { GtcToldDataPageTabContent } from './GtcToldDataPageTabContent';
/**
 * Component props for GtcLandingDataPage.
 */
export interface GtcLandingDataPageProps extends GtcToldDataPageProps {
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
}
/**
 * A GTC landing data page.
 */
export declare class GtcLandingDataPage extends GtcToldDataPage<ToldLandingPerformanceResult, GtcLandingDataPageProps> {
    private static readonly DEFAULT_ORIGIN_AIRPORT_MAX_DISTANCE;
    protected readonly isTakeoff = false;
    protected readonly originDestIcaoSetting: import("@microsoft/msfs-sdk").UserSetting<string>;
    protected readonly resultSetting: import("@microsoft/msfs-sdk").UserSetting<string>;
    private readonly destDefaultAppliedSetting;
    private readonly originIcaoSetting;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onOpen(): void;
    /**
     * Automatically selects a destination airport and runway. The selected destination will be one of the following, in
     * order of decreasing priority:
     * * The current takeoff origin if the airplane is within 30 nautical miles of the origin airport.
     * * The current destination runway in the primary flight plan.
     * * The current destination airport in the primary flight plan.
     * * A null selection.
     */
    private autoSelectDestination;
    /** @inheritdoc */
    protected parseResult(resultString: string): ToldLandingPerformanceResult | null;
    /** @inheritdoc */
    protected getRootCssClass(): string;
    /** @inheritdoc */
    protected renderConfigTab(contentRef: NodeReference<GtcToldDataPageTabContent>, sidebarState: Subscribable<SidebarState | null>): VNode;
    /** @inheritdoc */
    protected renderDataTab(contentRef: NodeReference<GtcToldDataPageTabContent>): VNode;
}
//# sourceMappingURL=GtcLandingDataPage.d.ts.map