import { AirportFacility, DepartureProcedure, Subject, VNode } from '@microsoft/msfs-sdk';
import { GtcProcedureSelectionPage } from './GtcProcedureSelectionPage';
import './GtcProcedureSelectionPage.css';
/**
 * Allows user to configure and load a departure into the flight plan.
 */
export declare class GtcDeparturePage extends GtcProcedureSelectionPage {
    title: Subject<string>;
    private readonly departureButtonRef;
    private readonly transitionButtonRef;
    private readonly runwayButtonRef;
    private readonly sequenceListRef;
    private readonly selectedDeparture;
    private readonly selectedDepartureIndex;
    private readonly selectedTransition;
    private readonly selectedTransitionIndex;
    private readonly selectedRunway;
    private readonly selectedRunwayTransitionIndex;
    private readonly filterBy;
    private readonly departures;
    private readonly allOneWayRunways;
    private readonly runways;
    private readonly enrouteTransitions;
    private readonly doSelectionsMatchFlightPlan;
    private readonly isLoadButtonEnabled;
    private readonly previewPlan;
    private readonly sequence;
    private buildSequenceOpId;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Initializes this page's departure selection.
     * @param facility The airport facility to select. If not defined, an initial airport will automatically be selected.
     * @param departure The departure to select. Ignored if `facility` is not defined. If not defined, an initial
     * departure will automatically be selected.
     */
    initSelection(facility?: AirportFacility, departure?: DepartureProcedure): Promise<void>;
    /** Loads the appropriate airport for the airport field. */
    private loadAirport;
    /**
     * Choose the appropriate airport to use.
     * @returns The airport to use.
     */
    private getAirport;
    /** Loads the departure. */
    private loadDeparture;
    /**
     * Choose the appropriate departure to use.
     * @returns The departure to use.
     */
    private getDeparture;
    /** Loads the transition. */
    private loadTransition;
    /**
     * Choose the appropriate transition to use.
     * @returns The transition to use.
     */
    private getTransition;
    /** Loads the runway. */
    private loadRunway;
    /**
     * Choose the appropriate runway to use.
     * @returns The runway to use.
     */
    private getRunway;
    /**
     * Creates a procedure preview plan with the current selections.
     */
    private buildSequence;
    /** Handles the airport being selected, showing the next list dialog if necessary. */
    private readonly onAirportSelected;
    /**
     * Starts this page's procedure selection chain.
     */
    private startSelectionChain;
    /**
     * Handles the departure being selected, showing the next list dialog if necessary.
     * @param selectionChanged Whether the new value matched the old value.
     */
    private onDepartureSelected;
    /**
     * Handles the transition being selected, showing the next list dialog if necessary.
     * @param selectionChanged Whether the new value matched the old value.
     */
    private onTransitionSelected;
    /**
     * Handles the runway being selected, showing the next list dialog if necessary.
     * @param selectionChanged Whether the new value matched the old value.
     */
    private onRunwaySelected;
    /**
     * Handles the filter being selected, showing the next list dialog if necessary.
     * @param selectionChanged Whether the new value matched the old value.
     */
    private onFilterBySelected;
    /**
     * Updates the sequence list and preview data from the currently selected procedure.
     */
    private updateFromSelectedProcedure;
    /**
     * Responds to when this page's Load button is pressed.
     */
    private onLoadButtonPressed;
    /** @inheritDoc */
    render(): VNode;
}
//# sourceMappingURL=GtcDeparturePage.d.ts.map