import { AirportFacility, VNode } from '@microsoft/msfs-sdk';
import { ApproachListItem, MinimumsDataProvider } from '@microsoft/msfs-garminsdk';
import { GtcProcedureSelectionPage, GtcProcedureSelectionPageProps } from './GtcProcedureSelectionPage';
import './GtcProcedureSelectionPage.css';
/**
 * The properties for the GtcDeparturePage component.
 */
export interface GtcApproachPageProps extends GtcProcedureSelectionPageProps {
    /** Whether RNP (AR) approaches should be selectable. */
    allowRnpAr: boolean;
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
}
/**
 * Allows user to configure and load an approach into the flight plan.
 */
export declare class GtcApproachPage extends GtcProcedureSelectionPage<GtcApproachPageProps> {
    private readonly approachButtonRef;
    private readonly transitionButtonRef;
    private readonly minimumsButtonRef;
    private readonly primaryFrequencyButtonRef;
    private readonly sequenceListRef;
    private readonly approachButtonCssClass;
    private readonly selectedApproachItem;
    private readonly selectedTransition;
    private readonly selectedTransitionIndex;
    private readonly approaches;
    private readonly transitions;
    private readonly selectedApproach;
    private readonly needSmallApproachText;
    private readonly skipCourseReversal;
    private readonly doSelectionsMatchFlightPlan;
    private readonly canActivate;
    private readonly canLoadOnly;
    private readonly previewPlan;
    private readonly sequence;
    private legs;
    private readonly approachReferenceFacility;
    private readonly primaryFrequencyIdent;
    private readonly primaryFrequencyMHz;
    private readonly primaryFrequencyString;
    private readonly showPrimaryFrequencyButton;
    private updateFromSelectedOpId;
    private buildSequenceOpId;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Initializes this page's approach selection.
     * @param facility The airport facility to select. If not defined, an initial airport will automatically be selected.
     * @param approach The approach item to select. Ignored if `facility` is not defined. If not defined, an initial
     * approach will automatically be selected.
     */
    initSelection(facility?: AirportFacility, approach?: ApproachListItem): Promise<void>;
    /** Loads the appropriate airport for the airport field. */
    private loadAirport;
    /**
     * Choose the appropriate airport to use.
     * @returns The airport to use.
     */
    private getAirport;
    /** Loads the approach. */
    private loadApproach;
    /**
     * Choose the appropriate approach to use.
     * @returns The approach to use.
     */
    private getApproach;
    /** Loads the transition. */
    private loadTransition;
    /**
     * Choose the appropriate transition to use.
     * @returns The transition to use.
     */
    private getTransition;
    /**
     * Creates a procedure preview plan with the current selections.
     * @returns Whether the sequence was built or not.
     */
    private buildSequence;
    /** Handles the airport being selected, showing the next list dialog if necessary. */
    private readonly onAirportSelected;
    /**
     * Handles the approach being selected, showing the next list dialog if necessary.
     * @param selectionChanged Whether the new value matched the old value.
     */
    private onApproachSelected;
    /**
     * Handles the transition being selected, showing the next list dialog if necessary.
     */
    private onTransitionSelected;
    /** Removes a course reversal from the preview plan. */
    private removeCourseReversalFromPreviewPlan;
    /**
     * Updates the sequence list and preview data from the currently selected procedure.
     * @returns A Promise which is fulfilled with whether the sequence list was successfully updated.
     */
    private updateFromSelectedProcedure;
    /**
     * Responds to when this page's Load or Load and Activate button is pressed.
     * @param activate Whether the button that was pressed was the Load and Activate button.
     */
    private onLoadButtonPressed;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this page's minimums popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @param displayPaneIndex The index of the display pane associated with the popup.
     * @returns This page's minimums popup, as a VNode.
     */
    private renderMinimumsPopup;
}
//# sourceMappingURL=GtcApproachPage.d.ts.map