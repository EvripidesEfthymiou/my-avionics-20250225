import { ComponentProps, DisplayComponent, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { EspConfig, HorizonDirectorCueOption } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent } from '../../GtcService/GtcInteractionEvent';
import { GtcService } from '../../GtcService/GtcService';
import { SidebarState } from '../../GtcService/Sidebar';
import { GtcAvionicsSettingsPageTabContent } from './GtcAvionicsSettingsPageTabContent';
import './GtcAvionicsSettingsPageSystemList.css';
/**
 * Component props for GtcAvionicsSettingsPageSystemList.
 */
export interface GtcAvionicsSettingsPageSystemListProps extends ComponentProps {
    /** The GTC service. */
    gtcService: GtcService;
    /** PFD horizon display flight director cue style support. */
    horizonDirectorCueOption: HorizonDirectorCueOption;
    /** The height of each list item, in pixels. */
    listItemHeight: number;
    /** The spacing between each list item, in pixels. */
    listItemSpacing: number;
    /** The SidebarState to use. */
    sidebarState?: SidebarState | Subscribable<SidebarState | null>;
    /** An ESP configuration object. If not defined, then the list will not support user configuration of ESP settings. */
    espConfig?: EspConfig;
}
/**
 * A GTC avionics setting page system settings list.
 */
export declare class GtcAvionicsSettingsPageSystemList extends DisplayComponent<GtcAvionicsSettingsPageSystemListProps> implements GtcAvionicsSettingsPageTabContent {
    private static readonly RUNWAY_SURFACE_TYPE_FILTERS;
    private readonly listRef;
    private readonly dateTimeSettingManager;
    private readonly comRadioSettingManager;
    private readonly nearestAirportSettingManager;
    private readonly unitsSettingManager;
    private readonly pfdSettingManager;
    private readonly isLocalOffsetEditable;
    private readonly localOffset;
    private readonly minRunwayLength;
    private localOffsetPipe?;
    private minRunwayLengthPipe?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcAvionicsSettingsPageSystemList.d.ts.map