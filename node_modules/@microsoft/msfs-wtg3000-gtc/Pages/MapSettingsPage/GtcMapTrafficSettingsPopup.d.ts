import { UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystemType } from '@microsoft/msfs-garminsdk';
import { G3000MapUserSettingTypes } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import './GtcMapTrafficSettingsPopup.css';
/**
 * Component props for GtcMapTrafficSettingsPopup.
 */
export interface GtcMapTrafficSettingsPopupProps extends GtcViewProps {
    /** The type of traffic system installed in the airplane. */
    trafficSystemType: TrafficSystemType;
    /** Whether the installed traffic system supports ADS-B in. */
    adsb: boolean;
    /** A manager for map user settings used to retrieve the popup's displayed setting values. */
    mapReadSettingManager: UserSettingManager<G3000MapUserSettingTypes>;
    /**
     * A function which writes selected setting values. If not defined, selected values will be written to settings
     * retrieved from `mapReadSettingManager`.
     */
    writeToSetting?: <K extends keyof G3000MapUserSettingTypes & string>(settingName: K, value: NonNullable<G3000MapUserSettingTypes[K]>) => void;
}
/**
 * A GTC map detail settings popup.
 */
export declare class GtcMapTrafficSettingsPopup extends GtcView<GtcMapTrafficSettingsPopupProps> {
    private thisNode?;
    private readonly trafficSettingManager;
    private readonly unitsSettingManager;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this popup's map settings popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @returns This popup's map settings popup, as a VNode.
     */
    private renderMapSettingsPopup;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcMapTrafficSettingsPopup.d.ts.map