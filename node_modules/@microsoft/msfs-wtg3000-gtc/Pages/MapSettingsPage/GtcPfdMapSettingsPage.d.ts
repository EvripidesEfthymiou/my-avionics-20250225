import { Subject, VNode } from '@microsoft/msfs-sdk';
import { TrafficSystemType } from '@microsoft/msfs-garminsdk';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import './GtcMapSettingsPage.css';
import './GtcPfdMapSettingsPage.css';
import './GtcMapSettingsPopups.css';
/**
 * Component props for GtcPfdMapSettingsPage.
 */
export interface GtcPfdMapSettingsPageProps extends GtcViewProps {
    /** The type of traffic system installed in the airplane. */
    trafficSystemType: TrafficSystemType;
    /** Whether the installed traffic system supports ADS-B in. */
    adsb: boolean;
}
/**
 * A GTC PFD map settings page.
 */
export declare class GtcPfdMapSettingsPage extends GtcView<GtcPfdMapSettingsPageProps> {
    private thisNode?;
    private readonly tabContainerRef;
    readonly title: Subject<string>;
    private readonly pfdSettingManager;
    private readonly mapSettingManager;
    private readonly unitsSettingManager;
    private readonly mapRangeArray;
    private readonly listItemHeight;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    onResume(): void;
    /** @inheritdoc */
    onPause(): void;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders the left column (layout and detail buttons).
     * @returns The left column, as a VNode.
     */
    private renderLeftColumn;
    /**
     * Renders a settings tab for this page's right-side settings tab container.
     * @param position The position of the tab.
     * @param label The tab label.
     * @param renderContent A function which renders the tab contents.
     * @returns A settings tab for this page's right-side settings tab container, as a VNode.
     */
    private renderTab;
    /**
     * Renders the sensor tab.
     * @param listRef A reference to assign to the tab's list.
     * @param sidebarState The sidebar state to use.
     * @returns The sensor tab, as a VNode.
     */
    private renderOverlaysTab;
    /**
     * Renders the detail settings popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @returns The detail settings popup, as a VNode.
     */
    private renderDetailSettingsPopup;
    /**
     * Renders the traffic settings popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @returns The traffic settings popup, as a VNode.
     */
    private renderTrafficSettingsPopup;
    /**
     * Renders the TAWS settings popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @returns The TAWS settings popup, as a VNode.
     */
    private renderTawsSettingsPopup;
    /**
     * Renders the terrain settings popup.
     * @param gtcService The GTC service.
     * @param controlMode The control mode to which the popup belongs.
     * @returns The terrain settings popup, as a VNode.
     */
    private renderTerrainSettingsPopup;
    /**
     * Renders the NEXRAD settings popup.
     * @returns The NEXRAD settings popup, as a VNode.
     */
    private renderNexradSettingsPopup;
    /**
     * Renders a map range select button.
     * @param settingName The name of the setting to which to bind the button.
     * @param startIndex The index of the lowest selectable range, inclusive.
     * @param endIndex The index of the highest selectable range, inclusive.
     * @param isInList Whether the button is in a scrollable list.
     * @param label The button's label.
     * @param title The title of the selection list dialog.
     * @param buttonCssClass CSS class(es) to apply to the button's root element.
     * @param dialogCssClass CSS class(es) to apply to the selection list dialog.
     * @param ref A reference to which to assign the rendered button.
     * @returns A map range selection button, as a VNode.
     */
    private renderRangeSelectButton;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcPfdMapSettingsPage.d.ts.map