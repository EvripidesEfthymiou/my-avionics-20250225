import { Subject, VNode } from '@microsoft/msfs-sdk';
import { G3000NavIndicator, RadiosConfig } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent } from '../../GtcService';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import './GtcAudioRadiosPopup.css';
/** Component props for GtcAudioRadiosPopup */
export interface GtcAudioRadiosPopupProps extends GtcViewProps {
    /** A configuration object which defines options for radios. */
    radiosConfig: RadiosConfig;
    /** The indicator for the active nav source. */
    activeNavIndicator: G3000NavIndicator;
}
/** Audio & Radios */
export declare class GtcAudioRadiosPopup extends GtcView<GtcAudioRadiosPopupProps> {
    private static readonly COM_25_FORMATTER;
    private static readonly COM_833_FORMATTER;
    private static readonly COM_FREQ_FORMATTER;
    private static readonly NAV_FREQ_FORMATTER;
    private static readonly ADF_FREQ_FORMATTER;
    private static readonly DME_TUNE_MODE_TEXT;
    readonly title: Subject<string>;
    private readonly listRef;
    private readonly tabsRef;
    private readonly radioNameFormatter;
    private readonly evtSub;
    private readonly navRadioMonitorSettingManager;
    private readonly navRadioMonitorSettings;
    private readonly dmeSettingManager;
    private readonly registeredRows;
    private pilotRows?;
    private readonly selectedRowId;
    private readonly radioFreqs;
    private readonly radioMonitoring;
    private readonly radioVolumes;
    private readonly comSpacing;
    private readonly comFreqText;
    private readonly navIdentText;
    private readonly navIdentEnabledText;
    private readonly dmeTuneModeText;
    private readonly comRadioSettingManager;
    private readonly comTransmitSetting;
    private readonly com1ReceiveSetting;
    private readonly com2ReceiveSetting;
    /**
     * Returns the transmitting radio's receiving state.
     * @returns The transmitting radio's receiving state.
     */
    private get currentComReceiveSetting();
    private readonly markerBeaconMonitoring;
    private readonly markerBeaconHiSenseOn;
    private readonly nav1ActFreqClasses;
    private readonly nav2ActFreqClasses;
    private readonly com1ActFreqClasses;
    private readonly com2ActFreqClasses;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Initializes this popup's radio data subscriptions.
     */
    private initRadioSubs;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Handles an interaction event for a selected radio.
     * @param radio The selected radio.
     * @param event The interaction event to handle.
     * @returns Whether the event was handled.
     */
    private handleRadioInteractionEvent;
    /**
     * Toggle the NAV radio monitoring of Morse code audio.
     * @param radio Which NAV radio to toggle.
     */
    private toggleNavRadioIdent;
    /**
     * Selects a radio.
     * @param radio The selected radio.
     */
    private selectRadio;
    /**
     * Responds to when a NAV radio toggle button is pressed.
     * @param radio The radio associated with the pressed button.
     */
    private onNavButtonPressed;
    /**
     * Responds to when a COM radio toggle button is pressed.
     * @param radio The radio associated with the pressed button.
     */
    private onComButtonPressed;
    /**
     * Responds to when a COM radio MIC button is pressed.
     * @param radio The radio associated with the pressed button.
     */
    private onMicButtonPressed;
    /**
     * Responds to when an ADF radio toggle button is pressed.
     * @param radio The radio associated with the pressed button.
     */
    private onAdfButtonPressed;
    /**
     * Responds to when an DME radio toggle button is pressed.
     * @param radio The radio associated with the pressed button.
     */
    private onDmeButtonPressed;
    /** @inheritDoc */
    onOpen(): void;
    /**
     * Responds to when a frequency button is pressed for a tunable radio row.
     * @param radio The radio to tune.
     */
    private onFrequencyPressed;
    /**
     * Render the volume sliders
     * @param value The consumer subject to read from
     * @param event The event string to write to, empty for dummy sliders
     * @param rowId The row to highlight, empty for dummy sliders
     * @returns The rendered volume slider
     */
    private renderVolumeSlider;
    /** @inheritDoc */
    render(): VNode;
    /**
     * Renders this popup's pilot tab rows.
     * @returns This popup's pilot tab rows, as a VNode.
     */
    private renderPilotRows;
    /**
     * Renders a NAV radio row.
     * @param radio The row's radio.
     * @returns A NAV radio row, as a VNode.
     */
    private renderNavRadioRow;
    /**
     * Renders a COM radio row.
     * @param radio The row's radio.
     * @returns A COM radio row, as a VNode.
     */
    private renderComRadioRow;
    /**
     * Renders an ADF radio row.
     * @param radio The row's radio.
     * @returns An ADF radio row, as a VNode.
     */
    private renderAdfRadioRow;
    /**
     * Renders a DME radio row.
     * @param radio The row's radio.
     * @returns A DME radio row, as a VNode.
     */
    private renderDmeRadioRow;
    /** @inheritdoc */
    destroy(): void;
    /**
     * Creates an uninitialized radio frequencies object.
     * @param radio The radio for which to create the object.
     * @returns A new uninitialized radio frequencies object for the specified radio.
     */
    private static createRadioFrequencies;
}
//# sourceMappingURL=GtcAudioRadiosPopup.d.ts.map