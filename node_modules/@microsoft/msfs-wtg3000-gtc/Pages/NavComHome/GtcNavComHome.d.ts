import { Subject, VNode } from '@microsoft/msfs-sdk';
import { GtcInteractionEvent } from '../../GtcService/GtcInteractionEvent';
import { GtcView, GtcViewProps } from '../../GtcService/GtcView';
import '../../Components/TouchButton/NumPadTouchButton.css';
import './GtcNavComHome.css';
/** Component props for GtcNavComHome. */
export interface GtcNavComHomeProps extends GtcViewProps {
    /** Whether TCAS is supported. */
    tcasIsSupported: boolean;
}
/** NAV/COM Home Page */
export declare class GtcNavComHome extends GtcView<GtcNavComHomeProps> {
    private static readonly FREQ_SWAP_SOUND_PACKET;
    readonly title: Subject<string>;
    private readonly isHrz;
    private readonly controlPublisher;
    private readonly evtSub;
    private readonly radioBeingTuned;
    private readonly buttonEditingModeIsActive;
    private readonly inputKnobEditingModeIsActive;
    private highlightStbyButton;
    private readonly knobTurnTimer;
    private xpdrModeCode;
    private readonly xpdrModeLabel;
    private readonly xpdrCode;
    private readonly com1ActiveFreq;
    private readonly com2ActiveFreq;
    private readonly com1StbyFreq;
    private readonly com2StbyFreq;
    private readonly com1Spacing;
    private readonly com2Spacing;
    private readonly com1ActiveFreqDisp;
    private readonly com1StbyFreqDisp;
    private readonly com2ActiveFreqDisp;
    private readonly com2StbyFreqDisp;
    private readonly com1StbyInputFreq;
    private readonly com2StbyInputFreq;
    private readonly comRadioSettingManager;
    private readonly comTransmitSetting;
    private readonly com1ReceiveSetting;
    private readonly com2ReceiveSetting;
    /**
     * Returns the transmitting radio's receiving state.
     * @returns The transmitting radio's receiving state.
     */
    private get currentComReceiveSetting();
    /**
     * Returns the currently tunable FrequencyInput instance, based on the selected COM radio and its channel spacing.
     * @returns The currently tunable FrequencyInput instance.
     */
    private get freqInputInstance();
    /**
     * Returns the currently tunable FrequencyInput value, based on the selected COM radio.
     * @returns The currently tunable FrequencyInput value.
     */
    private get freqInputValue();
    /**
     * Returns the currently tunable standby frequency value, based on the selected COM radio.
     * @returns The currently tunable COM standby frequency value.
     */
    private get stbyFreqValue();
    /**
     * Returns the currently tunable standby button "up" background image class set, based on the selected COM radio.
     * @returns The currently tunable standby button "up" background image class set.
     */
    private get stbyUpImgSrc();
    /**
     * Returns whether input cursor editing mode is active.
     * @returns Whether input cursor editing mode is active.
     */
    private get inputCursorEditingModeIsActive();
    private readonly freqInput1_25Ref;
    private readonly freqInput1_833Ref;
    private readonly freqInput2_25Ref;
    private readonly freqInput2_833Ref;
    private readonly xpdrModeClasses;
    private readonly xpdrCodeClasses;
    private readonly com1ActFreqClasses;
    private readonly com2ActFreqClasses;
    private readonly com1StbyTextLabelClasses;
    private readonly com2StbyTextLabelClasses;
    private readonly com1StbyFreqLabelClasses;
    private readonly com2StbyFreqLabelClasses;
    private readonly com1StbyFreqInput25Classes;
    private readonly com2StbyFreqInput25Classes;
    private readonly com1StbyFreqInput833Classes;
    private readonly com2StbyFreqInput833Classes;
    private readonly com1StbyBorderClasses;
    private readonly com2StbyBorderClasses;
    private readonly com1StbyHighlightClasses;
    private readonly com2StbyHighlightClasses;
    private readonly mic1Classes;
    private readonly mic2Classes;
    private readonly mon1Classes;
    private readonly mon2Classes;
    private readonly com1StbyFreqUpImgSrc;
    private readonly com2StbyFreqUpImgSrc;
    private readonly com1IsReceiving;
    private readonly com2IsReceiving;
    private static ModeLabelMapper;
    private static SpacingMapper;
    private static ComDigitsMapper;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    onClose(): void;
    /**
     * Change which radio is tunable.
     * @param radio The radio to make tunable.  If not supplied, it will swap between COM1 and COM2.
     */
    private changeRadioBeingTuned;
    /**
     * Handle FrequencyInput component editing activity changes.
     * @param inputCursorEditingModeIsActive Whether or not cursor editing mode is active.
     */
    private freqInputCursorEditingModeHandler;
    /**
     * Toggle the visibility of standby button elements and the sidebar buttons.
     * @param editingIsActive Whether or not an editing mode is active.
     */
    private toggleStbyInputsLabelsAndSidebar;
    private onTopTransponderButtonPressed;
    private onBottomTransponderButtonPressed;
    private onAudioRadiosPressed;
    /**
     * Handles a COM radio Standby button press.
     * @param radio The radio whose standby button is being pressed.
     */
    private onStbyButtonPressed;
    /** Open the transponder dialog and set the new code if not cancelled. */
    private openTransponderDialog;
    /**
     * Opens the frequency dialog to allow the user to set the standby frequency for a COM radio.
     * @param radio The COM radio for which to open the frequency dialog.
     */
    private openFrequencyDialog;
    /**
     * Handles a numpad press.
     * @param numeral The numeral pressed.
     */
    private onNumpadPressed;
    private onMicButtonPressed;
    private onMonButtonPress;
    /** Confirms and sets the current standby frequency being editing. */
    private confirmFrequency;
    /**
     * Sets the COM radio standby frequencies.
     * @param deactivateEditingAfter Whether or not to deactivate editing on the input after setting the frequency.
     */
    private setComStbyFreq;
    /**
     * Swaps the COM radio frequencies, first setting the standby value if it's being edited.
     * @param radio The radio to swap the frequencies of, defaults to the current radio being tuned if not explicitly set.
     */
    private swapComFreq;
    /** @inheritDoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Handle knob turns when button editing mode is not active.
     * @param event The knob event that triggered the handler.
     */
    private onKnobTurnOutsideOfButtonEditingMode;
    /**
     * Schedule a removal or swapping of highlight styling on the standby frequency buttons.
     * @param behavior Whether to remove the styling immediately or after a delay, or to immediately swap the styling.
     */
    private scheduleStbyHighlightRemovalOrSwap;
    /** Momentarily highlight the standby button. */
    private momentarilyHighlightStbyButton;
    /**
     * Toggle the highlighted styling of the standby frequency button.
     * @param direction Whether to apply or remove the highlighted styling.
     * @param radio The radio to toggle the styling of.
     */
    private toggleStandbyButtonHighlighting;
    /** @inheritDoc */
    render(): VNode;
}
//# sourceMappingURL=GtcNavComHome.d.ts.map