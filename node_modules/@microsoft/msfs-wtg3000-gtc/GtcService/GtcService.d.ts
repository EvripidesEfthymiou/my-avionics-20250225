import { ComponentProps, ConsumerSubject, DisplayComponent, EventBus, NodeReference, Subject, Subscribable, UserSetting, VNode } from '@microsoft/msfs-sdk';
import { ObsSuspDataProvider } from '@microsoft/msfs-garminsdk';
import { AvionicsConfig, ComRadio, ControllableDisplayPaneIndex, DisplayPaneControlGtcIndex, DisplayPaneIndex, DisplayPanesAliasedUserSettingManager, InitializationDataProvider, InitializationTaskDef } from '@microsoft/msfs-wtg3000-common';
import { GtcConfig } from '../Config/GtcConfig';
import { GtcInteractionEvent, GtcInteractionHandler } from './GtcInteractionEvent';
import { GtcKnobStatePluginOverrides, GtcKnobStates } from './GtcKnobStates';
import { GtcView } from './GtcView';
/**
 * Policies governing the lifecycle of GTC views.
 */
export declare enum GtcViewLifecyclePolicy {
    /** The view is created immediately on initialization and is never destroyed. */
    Static = "Static",
    /** The view is created when it is opened for the first time and is never destroyed. */
    Persistent = "Persistent",
    /**
     * The view is created when it is opened and destroyed when it is closed and no longer appears in the history of its
     * view stack.
     */
    Transient = "Transient"
}
/** A type of opened GTC view. */
export type GtcViewType = 'page' | 'popup' | 'base';
/** A type of GTC popup. */
export type GtcPopupType = 'normal' | 'slideout-right' | 'slideout-right-full' | 'slideout-bottom' | 'slideout-top';
/** A type of occlusion applied to GTC views. */
export type GtcViewOcclusionType = 'darken' | 'hide' | 'none';
/** G3000 Control Modes */
export type GtcControlMode = 'PFD' | 'MFD' | 'NAV_COM';
/**
 * A container for a GTC view stack.
 */
export interface GtcViewStackContainer {
    /**
     * Sets the visibility of this container.
     * @param visible Whether this container is visible.
     */
    setVisible(visible: boolean): void;
    /**
     * Renders a view into this container.
     * @param view A GTC view, as a VNode.
     */
    renderView(view: VNode): void;
}
/**
 * Keys used to reference GTC view stacks.
 */
export declare enum GtcViewStackKey {
    Pfd = "PFD",
    Mfd1 = "MFD1",
    Mfd2 = "MFD2",
    Mfd3 = "MFD3",
    Mfd4 = "MFD4",
    NavCom = "NAV_COM",
    PfdOverlay = "PFD_OVERLAY",
    MfdOverlay = "MFD_OVERLAY",
    NavComOverlay = "NAV_COM_OVERLAY"
}
/**
 * A record of references to GTC view stack containers keyed by view stack key.
 */
export type GtcViewStackRefs = Partial<Record<GtcViewStackKey, GtcViewStackContainer>>;
/**
 * A record of references to GTC view stack containers keyed by view stack key.
 */
export type ViewStackRefs = GtcViewStackRefs;
/**
 * An entry describing a registered GTC view.
 */
interface ViewEntry<T extends GtcView = GtcView> {
    /** The lifecycle policy of the view. */
    readonly lifecyclePolicy: GtcViewLifecyclePolicy;
    /** The key of the view. */
    readonly key: string;
    /** A function which renders the view. */
    readonly factory: () => VNode;
    /** A reference to the view, or `undefined` if the view is not rendered. */
    ref: T | undefined;
    /** A reference to the view wrapper, or `undefined` if the view is not rendered. */
    wrapperRef: NodeReference<GtcViewWrapper<any>> | undefined;
    /** Whether this entry's view is in-use. */
    isInUse: boolean;
    /** State of the view's visibility */
    readonly isVisible: Subject<boolean>;
    /** The view-stack layer the view is in, if any */
    readonly layer: Subject<number>;
    /** The view type this entry's view is currently opened as: page, popup, or base. */
    readonly type: Subject<GtcViewType | undefined>;
    /** The popup type this entry's view is currently opened as, or `undefined` if the view is not a popup. */
    readonly popupType: Subject<GtcPopupType | undefined>;
    /**
     * The occlusion type applied to views beneath this entry's view when it is opened as a popup, or `undefined` if the
     * view is not a popup.
     */
    readonly popupBackgroundOcclusion: Subject<GtcViewOcclusionType | undefined>;
    /** The occlusion applied to this entry's view. */
    readonly occlusion: Subject<GtcViewOcclusionType>;
}
/**
 * An entry describing a registered GTC view that is currently rendered to a view stack.
 */
type RenderedViewEntry<T extends GtcView = GtcView> = Omit<ViewEntry<T>, 'ref' | 'wrapperRef'> & {
    /** A reference to the view. */
    ref: T;
    /** A reference to the view wrapper. */
    wrapperRef: NodeReference<GtcViewWrapper<any>>;
};
/**
 * An entry describing a rendered GTC view registered to a view stack.
 */
export type GtcViewEntry<T extends GtcView = GtcView> = Pick<RenderedViewEntry<T>, 'key' | 'ref'>;
/**
 * An item describing a GTC view within a view stack.
 */
export type GtcViewStackItem<T extends GtcView = GtcView> = {
    /** Whether the GTC view is in an overlay view stack. */
    readonly isInOverlayStack: boolean;
    /** The entry for the GTC view. */
    readonly viewEntry: GtcViewEntry<T>;
    /** The view type as which the GTC view was opened. */
    readonly type: GtcViewType;
};
/** A service to manage GTC views */
export declare class GtcService {
    readonly bus: EventBus;
    readonly instrumentIndex: number;
    private readonly config;
    private readonly instrumentConfig;
    private static readonly BASE_VIEW_KEY;
    /** The orientation (horizontal or vertical) of this service's parent GTC. */
    readonly orientation: import("@microsoft/msfs-wtg3000-common").GtcOrientation;
    /** Whether this service's parent GTC is horizontal. */
    readonly isHorizontal: boolean;
    /** The control mode setup supported by this service's parent GTC. */
    readonly controlSetup: import("@microsoft/msfs-wtg3000-common").GtcControlSetup;
    /** The index of the PFD controlled by this service's parent GTC. */
    readonly pfdControlIndex: import("@microsoft/msfs-wtg3000-common").PfdIndex;
    /** The display pane controlling index of this service's parent GTC. */
    readonly displayPaneControlIndex: DisplayPaneControlGtcIndex;
    /** Whether this GTC has an MFD mode and can control display panes. */
    readonly hasMfdMode: boolean;
    /** Whether this GTC has a PFD mode. */
    readonly hasPfdMode: boolean;
    /** Whether this GTC has a NAV_COM. */
    readonly hasNavComMode: boolean;
    /** Whether advanced VNAV is enabled. */
    readonly isAdvancedVnav: boolean;
    private readonly hEventMap;
    private readonly _activeControlMode;
    /** The currently active control mode. */
    readonly activeControlMode: Subscribable<GtcControlMode>;
    private readonly registeredViews;
    private readonly _viewStacks;
    private readonly controlModeHomePages;
    private readonly controlModeHomePageKeys;
    private hasInitialized;
    private readonly _isAwake;
    /** Whether this service is awake. */
    readonly isAwake: Subscribable<boolean>;
    private readonly dummyViewEntry;
    private readonly _activeView;
    /** The view that is currently at the top of the active view stack. */
    readonly activeView: Subscribable<GtcViewEntry>;
    private readonly _currentPage;
    /** The page that is currently open in the active view stack. */
    readonly currentPage: Subscribable<GtcViewEntry | null>;
    /** Whether the currently active view is a control mode home page. */
    readonly activeViewIsNotAHomePage: Subscribable<boolean>;
    /** The string name for which side this GTC is on. */
    readonly gtcThisSide: string;
    /** The string name for which side the other GTC is on. */
    readonly gtcOtherSide: string;
    /** The GTC specific user settings for this GTC. */
    readonly gtcSettings: import("@microsoft/msfs-sdk").UserSettingManager<import("../Settings/GtcUserSettings").GtcAliasedUserSettingTypes>;
    /** An array containing the indexes of all enabled controllable display panes in ascending order. */
    readonly enabledControllablePanes: readonly ControllableDisplayPaneIndex[];
    /** The selected pane for this GTC. */
    readonly thisGtcSelectedPane: ConsumerSubject<-1 | ControllableDisplayPaneIndex>;
    /** The selected pane for the other GTC. */
    readonly otherGtcSelectedPane: ConsumerSubject<-1 | ControllableDisplayPaneIndex>;
    /** The display panes settings master manager. */
    readonly displayPaneSettingManager: import("@microsoft/msfs-sdk").UserSettingManager<import("@microsoft/msfs-wtg3000-common").DisplayPaneAllUserSettingTypes>;
    /** The visibility setting for each display pane. */
    readonly displayPaneVisibleSettings: Record<ControllableDisplayPaneIndex, UserSetting<boolean>>;
    /** The display pane that we want to have selected.
     * For instance, if we go to PFD mode, then come back, this stores what pane we had selected last time. */
    private readonly desiredDisplayPane;
    private readonly _selectedDisplayPane;
    /** The index of the currently selected display pane. */
    readonly selectedDisplayPane: Subscribable<-1 | ControllableDisplayPaneIndex>;
    /** The settings manager for the currently selected display pane. */
    readonly selectedPaneSettings: DisplayPanesAliasedUserSettingManager;
    /** The index of the PFD instrument display pane on the side of this GTC. */
    readonly pfdInstrumentPaneIndex: DisplayPaneIndex;
    /** The index of the PFD display pane on the side of this GTC. */
    readonly pfdPaneIndex: DisplayPaneIndex;
    /** The display pane settings for this side's PFD display pane. */
    readonly pfdPaneSettings: DisplayPanesAliasedUserSettingManager;
    private readonly displayPaneControlEventPublisher;
    readonly radioBeingTuned: Subject<ComRadio>;
    readonly navComEventHandler: Subject<GtcInteractionHandler | null>;
    private readonly _initializationDataProvider;
    /** A provider of initialization data. */
    readonly initializationDataProvider: InitializationDataProvider;
    private isInitializationPageArmed;
    private readonly loadedInitializationTasks;
    private readonly _currentInitializationTask;
    /** The current initialization task loaded for the active view stack. */
    readonly currentInitializationTask: Subscribable<InitializationTaskDef | null>;
    private readonly _nextInitializationTask;
    /** The initialization task that follows the current initialization task loaded for the active view stack. */
    readonly nextInitializationTask: Subscribable<InitializationTaskDef | null>;
    /** The control states of the hardware knobs attached to this service's parent GTC. */
    readonly gtcKnobStates: GtcKnobStates;
    private readonly gtcKnobHandler;
    private pluginInteractionHandler?;
    /** Should be populated before anyone uses it. */
    private viewStackRefs;
    /**
     * Creates an instance of GtcService.
     * @param bus The event bus.
     * @param instrumentIndex The index of the GTC instrument to which this service belongs.
     * @param config The general avionics configuration object.
     * @param instrumentConfig The GTC instrument configuration object.
     * @param obsSuspDataProvider A provider of LNAV OBS/suspend data.
     * @throws Error if {@linkcode defaultControlMode} is incompatible with {@linkcode controlSetup}.
     */
    constructor(bus: EventBus, instrumentIndex: number, config: AvionicsConfig, instrumentConfig: GtcConfig, obsSuspDataProvider: ObsSuspDataProvider);
    /**
     * Gets this service's current default control mode.
     * @returns This service's current default control mode.
     */
    private getCurrentDefaultControlMode;
    /**
     * Gets this service's default controlled display pane.
     * @returns This service's default controlled display pane.
     */
    private getDefaultControlledDisplayPane;
    /** Handles selecting an MFD pane when it becomes split, if necessary. */
    private readonly handleMfdPaneVisibilityChanged;
    /**
     * Hides inactive view stacks, and reveals the active one.
     */
    private updateViewStackVisibility;
    /**
     * Sets the visibility of a view stack.
     * @param key The key of the view stack.
     * @param isVisible Whether the view stack is visible.
     */
    private setViewStackVisibility;
    /**
     * Updates this service's desired controlled display pane from the currently selected display pane. If there is no
     * currently selected display pane, then the value of the desired controlled display pane remains unchanged.
     * Otherwise, the desired controlled display pane is changed to the selected display pane.
     */
    private updateDesiredDisplayPaneFromSelected;
    /**
     * Whether the current vertical GTC NAV/COM view stack (i.e. the overlay view stack for the currently selected
     * control mode) has no open popups.
     */
    get isVertNavComViewStackEmpty(): boolean;
    /**
     * Gets the history stack for this service's current main view stack. The current main view stack is the main view
     * stack for the currently selected control mode and display pane (if applicable).
     * @returns The history stack for this service's current main view stack.
     */
    private getCurrentMainViewStackHistory;
    /**
     * Gets the history stack for this service's current overlay view stack. The current overlay view stack is the
     * overlay view stack for the currently selected control mode.
     * @returns The history stack for this service's current main overlay stack.
     */
    private getCurrentOverlayViewStackHistory;
    /**
     * Checks if this service's current overlay view stack is empty. The current overlay view stack is the overlay view
     * stack for the currently selected control mode.
     * @returns Whether this service's current overlay view stack is empty.
     */
    private isCurrentOverlayViewStackEmpty;
    /**
     * Gets the history stack for this service's current view stack. The current view stack is the current overlay view
     * stack if it is not empty and the current main view stack otherwise.
     * @returns The history stack for this service's current view stack.
     */
    private getCurrentViewStackHistory;
    /**
     * Gets the open stack for this service's current main view stack. The current main view stack is the main view
     * stack for the currently selected control mode and display pane (if applicable). The open stack contains all open
     * views in the view stack (i.e. it is the most recent history state of the view stack).
     * @returns The open stack for this service's current main view stack.
     */
    private getCurrentOpenMainStack;
    /**
     * Gets the open stack for this service's current overlay view stack. The current overlay view stack is the overlay
     * view stack for the currently selected control mode. The open stack contains all open views in the view stack (i.e.
     * it is the most recent history state of the view stack).
     * @returns The open stack for this service's current overlay view stack.
     */
    private getCurrentOpenOverlayStack;
    /**
     * Gets the open stack for this service's current view stack. The current view stack is the current overlay view
     * stack if it is not empty and the current main view stack otherwise. The open stack contains all open views in the
     * view stack (i.e. it is the most recent history state of the view stack).
     * @returns The open stack for this service's current view stack.
     */
    private getCurrentOpenStack;
    /**
     * Gets the view stack item for the current active view.
     * @returns The view stack item for the current active view.
     */
    private getActiveViewItem;
    /**
     * Gets the view stack item for the open page in the currently selected view stack.
     * @returns The view stack item for the open page in the currently selected view stack, or `null` if the currently
     * selected view stack has no open page.
     */
    private getCurrentOpenPageViewStackItem;
    /**
     * Called by GtcContainer to pass in the refs to all the view stacks.
     * Should only be called once.
     * @param viewStackRefs The view stack refs.
     */
    onGtcContainerRendered(viewStackRefs: ViewStackRefs): void;
    /**
     * Attaches plugin-defined knob control state overrides.
     * @param overrides An array of plugin-defined knob control state overrides. The array should be ordered such that
     * the overrides appear in the order in which their parent plugins were loaded.
     */
    attachPluginKnobStateOverrides(overrides: readonly Readonly<GtcKnobStatePluginOverrides>[]): void;
    /**
     * Attaches an interaction event handler which executes event handling logic defined by plugins.
     * @param handler The interaction event handler to attach.
     */
    attachPluginInteractionhandler(handler: GtcInteractionHandler): void;
    /**
     * Registers and renders a view (page or popup) with this service for a main view stack. Once a view is registered,
     * it may be opened by referencing its key.
     *
     * Each view is registered with a specific view stack. There is one main view stack for each of the PFD and NAV/COM
     * control modes, and four main view stacks for the MFD control mode (one for each controllable display pane). Views
     * registered with different stacks may share the same key. Registering a view under the same key as an existing
     * view in the same stack will replace the existing view.
     *
     * If this service's parent GTC has the horizontal orientation, then registering views for the NAV/COM view stack
     * using this method will cause the views to be registered for the PFD and MFD overlay view stacks instead.
     * @param lifecyclePolicy The lifecycle policy to apply to the view. If the view is registered under a home page key,
     * then this value is ignored and the {@link GtcViewLifecyclePolicy.Static} policy will automatically be applied.
     * @param key The key to register the view under.
     * @param controlMode The control mode for which to register the view.
     * @param factory A function that renders the view.
     * @param displayPaneIndex The index of the display pane for which to register the view. Ignored if `controlMode` is
     * not `'MFD'`. If not defined, then the view will be registered once for each display pane.
     */
    registerView(lifecyclePolicy: GtcViewLifecyclePolicy, key: string, controlMode: GtcControlMode, factory: (gtcService: GtcService, controlMode: GtcControlMode, displayPaneIndex: ControllableDisplayPaneIndex | undefined, isInOverlayStack: boolean) => VNode, displayPaneIndex?: ControllableDisplayPaneIndex): void;
    /**
     * Registers and renders a view (page or popup) with this service for an overlay view stack. Once a view is
     * registered, it may be opened by referencing its key.
     *
     * Each view is registered with a specific view stack. There is one overlay view stack for each of the three control
     * modes (PFD, MFD, and NAV/COM). Registering a view under the same key as an existing view in the same stack will
     * replace the existing view.
     * @param lifecyclePolicy The lifecycle policy to apply to the view. If the view is registered under a home page key,
     * then this value is ignored and the {@link GtcViewLifecyclePolicy.Static} policy will automatically be applied.
     * @param key The key to register the view under.
     * @param factory A function that renders the view.
     * @param controlMode The control mode for which to register the view. If not defined, then the view will be
     * registered once for each control mode supported by this service.
     */
    registerOverlayView(lifecyclePolicy: GtcViewLifecyclePolicy, key: string, factory: (gtcService: GtcService, controlMode: GtcControlMode, displayPaneIndex: ControllableDisplayPaneIndex | undefined, isInOverlayStack: boolean) => VNode, controlMode?: GtcControlMode): void;
    /**
     * Registers a view (page or popup) with this service.
     * @param lifecyclePolicy The lifecycle policy to apply to the view.
     * @param key The view's key.
     * @param viewStackKey The key of the view stack to insert the view into.
     * @param factory A function which renders the view.
     */
    private _registerView;
    /**
     * Renders a registered view.
     * @param viewStackKey The key of the view stack to which to render the view.
     * @param viewEntry The view entry describing the view to render.
     */
    private renderView;
    /**
     * Cleans up and destroys a view, removing the view from the DOM and freeing up associated resources. The view entry
     * for the view is preserved and can be used to re-render the view in the future.
     * @param viewEntry The entry for the view to clean up.
     */
    private cleanupView;
    /**
     * Initializes this service.
     */
    initialize(): void;
    /**
     * Initializes a view stack.
     * @param viewStackKey The key of the view stack to initialize.
     * @param homePageKey The key of the view stack's home page, or `undefined` if the stack does not have a home page.
     */
    private initializeViewStack;
    /**
     * Resets this service, which does the following:
     * * Closes all open popups.
     * * Changes the open page to the home page of this service's default control mode.
     * * Clears all history.
     * * Sets the controlled display pane to this service's default, if applicable.
     *
     * Has no effect if this service is not initialized.
     */
    reset(): void;
    /**
     * Resets the main and overlay view stacks for a control mode. If the control mode is not the currently selected
     * control mode, then all open views in the overlay view stack will be closed and the history state of the main
     * view stack will be rewound to the state when only the home page is open. For the `MFD` control mode, the main
     * view stack for each display pane is reset if and only if the currently selected control mode is not `MFD` or if
     * the current desired controlled display pane is not equal to the view stack's display pane.
     * @param controlMode The control mode of the view stacks to reset.
     */
    private resetViewStack;
    /**
     * Resets a main view stack for a control mode. If the control mode is not the currently selected control mode,
     * then the history state of the view stack will be rewound to the state when only the home page is open. For the
     * `MFD` control mode, the view stack is reset if and only if the currently selected control mode is not `MFD` or if
     * the current desired controlled display pane is not equal to the view stack's display pane.
     * @param controlMode The control mode of the view stack to reset.
     * @param viewStackKey The key of the view stack to reset.
     */
    private resetMainViewStack;
    /**
     * Wakes this service. Once awake, this service will attempt to select an appropriate display pane to control and
     * will respond to interaction events.
     */
    wake(): void;
    /**
     * Puts this service to sleep. Once asleep, this service will deselect any controlled display pane and will not
     * respond to interaction events.
     */
    sleep(): void;
    /**
     * Visits each history state of the current view stack.
     * @param visitor A function which will visit each history state. The function is called once for each history state
     * in order of increasing age (beginning with the present state) and takes two arguments: the number of steps from
     * the present state to the selected state and a function which allows one to peek into the selected state's view
     * stack. The function should return `true` if visitation should continue and `false` if visitation should stop.
     */
    visitHistory(visitor: (steps: number, stackPeeker: (depth: number) => GtcViewStackItem | undefined) => boolean): void;
    /**
     * Changes the active control mode.
     * @param controlMode The control mode to change to.
     */
    changeControlModeTo(controlMode: GtcControlMode): void;
    /**
     * Selects a display pane for the control mode.
     * @param controlMode The control mode.
     */
    private selectDisplayPaneForControlMode;
    /**
     * Closes all open popups and the open page, then opens the home page for the currently selected control mode.
     * This also resets the history for the open view stack.
     */
    goToHomePage(): void;
    /**
     * Opens a view as a page in the main view stack of the currently selected control mode and display pane (if
     * applicable) and changes the current page to the opened view. This will close the current open page and any open
     * popups in the main view stack.
     * @param key The key of the view to open.
     * @returns The entry of the opened view.
     * @throws Error if there is no view registered under the specified key.
     */
    changePageTo<T extends GtcView = GtcView>(key: string): GtcViewEntry<T>;
    /**
     * Opens a view as a popup in the main view stack of the currently selected control mode and display pane (if
     * applicable). The opened view will be brought to the top of the main view stack.
     * @param key The key of the view to open.
     * @param popupType The type of popup to open the view as. Defaults to `'normal'`.
     * @param backgroundOcclusion The occlusion type applied to views beneath the popup. If `'none'` is chosen, then the
     * popup will not prevent mouse events from reaching views beneath it (unless the mouse event was triggered on an
     * element in the popup). Defaults to `'darken'`.
     * @returns The entry of the opened view.
     * @throws Error if there is no view registered under the specified key.
     */
    openPopup<T extends GtcView = GtcView>(key: string, popupType?: GtcPopupType, backgroundOcclusion?: GtcViewOcclusionType): GtcViewEntry<T>;
    /**
     * Advances the history state of the view stack for the currently selected control mode and display pane by changing
     * the page or opening a popup.
     * @param key The key of the view to open.
     * @param type The type of view to open.
     * @param popupType The type of popup to open the view as. Ignored if `type` is not `popup`. Defaults to `'normal'`.
     * @param backgroundOcclusion The occlusion type applied to views beneath the popup. Ignored if `type` is not
     * `popup`. Defaults to `'darken'`.
     * @throws Error if attempting to open a popup that is already open in the view stack.
     * @returns The active view entry after the operation is complete.
     */
    private advanceMainViewStack;
    /**
     * Returns the active view stack key based on control mode and selected pane.
     * @returns The active view stack key.
     */
    private getCurrentMainViewStackKey;
    /**
     * Opens a view as a popup in the overlay view stack of the currently selected control mode. The opened view will be
     * brought to the top of the overlay view stack as the active view.
     * @param key The key of the view to open.
     * @param popupType The type of popup to open the view as. Defaults to `'normal'`.
     * @param backgroundOcclusion The occlusion type applied to views beneath the popup. If `'none'` is chosen, then the
     * popup will not prevent mouse events from reaching views beneath it (unless the mouse event was triggered on an
     * element in the popup). Defaults to `'darken'`.
     * @returns The entry of the opened view.
     * @throws Error if there is no view registered under the specified key.
     */
    openOverlayPopup<T extends GtcView = GtcView>(key: string, popupType?: GtcPopupType, backgroundOcclusion?: GtcViewOcclusionType): GtcViewEntry<T>;
    /**
     * Advances the history state of the vertical GTC NAV/COM view stack by opening a popup.
     * @param key The key of the popup to open.
     * @param popupType The type of popup to open the view as. Defaults to `'normal'`.
     * @param backgroundOcclusion The occlusion type applied to views beneath the popup. Defaults to `'darken'`.
     * @throws Error if attempting to open a popup that is already open in the view stack.
     * @returns The active view entry after the operation is complete.
     */
    private advanceOverlayViewStack;
    /**
     * Returns the active view stack key based on control mode and selected pane.
     * @returns The active view stack key.
     */
    private getCurrentOverlayViewStackKey;
    /**
     * Initializes a view stack item describing an open page.
     * @param item The view stack item to initialize.
     */
    private initPageViewStackItem;
    /**
     * Initializes a view stack item describing an open popup.
     * @param item The view stack item to initialize.
     * @param popupType The type of the popup.
     * @param backgroundOcclusion The occlusion type applied to views beneath the popup.
     */
    private initPopupViewStackItem;
    /**
     * Returns to the most recent previous history state of the active view stack.
     * @returns The active view entry after the operation is complete.
     * @throws Error if the most recent previous history state of the active view stack is undefined.
     */
    goBack(): GtcViewEntry;
    /**
     * Attempts to return to a previous history state of the active view stack.
     * @param selector A function which selects the history state to which to return. The function is called once for
     * each history state in order of increasing age and takes two arguments: the number of steps from the present state
     * to the selected state and a function which allows one to peek into the selected state's view stack by view entry.
     * The function should return `true` if the operation should return to the selected state and `false` otherwise. If
     * the function returns `false` for every selected state, then the operation is aborted.
     * @returns The active view entry after the operation is complete.
     */
    goBackTo(selector: (steps: number, stackPeeker: (depth: number) => GtcViewEntry | undefined) => boolean): GtcViewEntry;
    /**
     * Attempts to return to a previous history state of the active view stack.
     * @param selector A function which selects the history state to which to return. The function is called once for
     * each history state in order of increasing age and takes two arguments: the number of steps from the present state
     * to the selected state and a function which allows one to peek into the selected state's view stack by view stack
     * item. The function should return `true` if the operation should return to the selected state and `false`
     * otherwise. If the function returns `false` for every selected state, then the operation is aborted.
     * @returns The active view entry after the operation is complete.
     */
    goBackToItem(selector: (steps: number, stackPeeker: (depth: number) => GtcViewStackItem | undefined) => boolean): GtcViewEntry;
    /**
     * Goes back to the home page of the currently selected control mode.
     * @returns The active view entry after the operation is complete.
     */
    goBackToHomePage(): GtcViewEntry;
    /**
     * Attempts to close a popup in the current overlay view stack by rewinding the history state of the view stack
     * until the target popup is no longer open.
     * @param filter A filter function which will be called once for each open popup found in the overlay view stack and
     * returns whether the popup is the target popup to close.
     * @param closeOtherPopups Whether all other open popups in the overlay view stack should be closed if the target
     * popup is not open within the view stack.
     * @returns Whether the specified popup was closed.
     */
    closeOverlayPopup<F extends GtcView = GtcView>(filter: (entry: GtcViewEntry<F>) => boolean, closeOtherPopups: boolean): boolean;
    /**
     * Clears the overlay view stack of the currently selected control mode, closing all open popups in the stack and
     * resetting its history.
     * @returns The active view entry after the operation is complete.
     */
    clearOverlayViewStack(): GtcViewEntry;
    /**
     * Loads an initialization task for the currently selected control mode and display pane. This method does nothing
     * if the MFD control mode is not currently selected. When the task is loaded, the history of the view stack for the
     * currently selected display pane will be rewound until the initialization page is the active view. If there is no
     * previous history state in which the initialization page is the active view, then the initialization page will be
     * opened instead. After the initialization page is made the active view, the task's associated page will be opened.
     * @param uid The unique ID of the initialization task to load.
     * @returns Whether the task was successfully loaded.
     */
    loadInitializationTask(uid: string): boolean;
    /**
     * Goes back to the initialization page. This will close all open popups in the overlay layer and rewind history
     * until the initialization page is the active view. If there is no history state (including the current history
     * state) in which the initialization page is the active view, or if the currently active control mode is not equal
     * to `'MFD'`, then this method does nothing and returns `null`.
     * the currently active control mode is not `'MFD'`, then this method does
     * @returns The active view entry after the operation is complete, or `null` if the operation could not be completed.
     */
    goBackToInitializationPage(): GtcViewEntry | null;
    /**
     * Rewinds the history state of an MFD control mode main view stack until the initialization page is the top-most
     * view in the open view stack, and optionally closes the initialization page by rewinding the history state one
     * additional step. If there is no history state (including the current history state) in which the initialization
     * page is the top-most view, then this method does nothing and returns `false`.
     * @param displayPaneIndex The index of the display pane associated with the view stack whose history state is to be
     * rewound.
     * @param closeOverlayStack Whether to close all popups in the MFD control mode overlay view stack as part of the
     * operation.
     * @param closeInitializationPage Whether to close the initialization page after it is made the top-most view in the
     * open view stack by rewinding the history state one additional step.
     * @returns Whether the history state of the specified MFD control mode main view stack was successfully rewound to
     * place the initialization page at the top of the open view stack.
     */
    private goBackToInitializationPageInViewStack;
    /**
     * Called when an interaction event needs to be sent to the active view.
     * @param event The event.
     */
    onInteractionEvent(event: GtcInteractionEvent): void;
    /**
     * Retrieves a view entry for opening
     * @param key A GtcView key
     * @param viewStackKey The key to the view stack that the view is in.
     * @throws Errors if the passed key was never registered
     * @returns The view entry to open
     */
    private getViewEntry;
    /**
     * Handles logic associated with changing the active view.
     */
    private handleActiveViewChange;
    /**
     * Handles logic associated with changing the open page.
     */
    private handleOpenPageChange;
    /**
     * Refreshes the occlusion state of all open views in the overlay and main view stacks for the currently selected
     * control mode.
     */
    private refreshOcclusion;
    /**
     * Refreshes the occlusion state of all views in a view stack.
     * @param viewStack The view stack containing the views to refresh.
     * @param initialOcclusion The occlusion state to apply to the top-most view in the view stack.
     * @returns The occlusion state that should be applied to a view directly beneath the bottom-most view in the
     * specified view stack given the specified initial occlusion state.
     */
    private refreshViewStackOcclusion;
    /**
     * Handle logic associated with opening a view
     * @param viewStackItem The view to open.
     * @param viewStack The view stack containing the view to open.
     * @param wasPreviouslyOpened True if this view was already open in a previous stack. Defaults to false.
     * @throws Errors if view cannot be found in the view stack
     */
    private openView;
    /**
     * Closes a view.
     * @param view The view to close.
     * @param closeType The type of close operation.
     * @param skipPopupCloseAnimation Whether to skip the close animation for popups.
     */
    private closeView;
    /**
     * Close all views in the current view stack, optionally leaving the current page open.
     * @param viewStack The view stack to close.
     * @param closePage Whether to close the open page in the view stack.
     * @param closeType The type of close operation.
     */
    private closeViewStack;
    /**
     * Iterates through a view stack and finds all views that do not appear in a previous view stack history state and
     * marks them as out-of-use. All out-of-use views with the transient lifecycle policy are also cleaned up.
     * @param viewStackHistory A view stack history containing the view stack through which to iterate.
     * @param index The index of the view stack through which to iterate in the view stack history.
     */
    private reconcileViewUseState;
    /**
     * Checks if the initialization page is in use in an MFD control mode view stack.
     * @param displayPaneIndex The index of the display pane associated with the view stack to check.
     * @returns Whether the initialization page is in use in the MFD control mode view stack associated with the
     * specified display pane.
     */
    private isInitializationPageInUse;
    /**
     * Refreshes this service's initialization task state.
     */
    private refreshInitializationState;
    /**
     * Reconciles the loaded initialization task state for a MFD control mode view stack. If the currently loaded task
     * for the view stack should not be loaded, then the task is unloaded.
     * @param displayPaneIndex The index of the display pane associated with the view stack for which to reconcile
     * loaded initialization task state.
     */
    private reconcileLoadedInitializationTask;
    /**
     * Updates the loaded current and next initialization tasks for the active view stack.
     */
    private updateInitializationTasksForActiveViewStack;
    /**
     * Responds to when whether the initialization process is enabled changes.
     * @param isEnabled Whether the initialization process is enabled.
     */
    private onIsInitializationEnabledChanged;
    /**
     * Responds to when whether the user has accepted initialization changes.
     * @param isAccepted Whether the user has accepted initialization.
     */
    private onIsInitializationAcceptedChanged;
    /**
     * Closes the initialization page in an MFD control mode main view stack. The history state of the view stack is
     * rewound until the initialization page is the top-most view in the open view stack, then the initialization page
     * is closed by rewinding the history state one additional step.
     * @param displayPaneIndex The index of the display pane associated with the view stack for which to close the
     * initialization page.
     */
    private closeInitializationPage;
    /**
     * Attempts to automatically open the initialization page in the view stack of the currently selected control mode
     * and display pane. This method does nothing if automatic opening of the initialization page is not armed, if the
     * initialization process is not enabled, if the user has accepted initialization, or if the MFD control mode is not
     * currently selected. Opening the initialization page will disarm automatic opening. If the initialization page is
     * already in use, then it will not be opened, but automatic opening will still be disarmed.
     */
    private tryAutoOpenInitializationPage;
    /**
     * Opens the initialization page in the view stack of the currently selected control mode and display pane if it is
     * not already in use. If the MFD control mode is not currently selected, then this method does nothing.
     */
    private openInitializationPage;
    /**
     * Creates a new empty view entry.
     * @param key The key of the view entry.
     * @param controlMode The control mode of the new entry.
     * @param displayPaneIndex The display pane index of the new entry.
     * @returns A new empty view entry.
     */
    private createEmptyViewEntry;
    /**
     * Gets the key for a view stack.
     * @param controlMode The control mode of the view stack for which to get a key.
     * @param isOverlay Whether the view stack for which to get a key is an overlay stack.
     * @param displayPaneIndex The index of the display pane associated with the view stack for which to get a key. Only
     * applicable for MFD control mode main view stacks.
     * @returns The key for the specified view stack.
     * @throws Error if a key could not be retrieved.
     */
    private static getViewStackKey;
    /**
     * Checks whether a view stack key is for an overlay view stack.
     * @param key The key to check.
     * @returns Whether the specified key is for an overlay view stack.
     */
    private static isViewStackKeyOverlay;
    /**
     * Gets the index of a view entry in a view stack.
     * @param stack The view stack to search.
     * @param viewEntry The view entry for which to search.
     * @returns The index of the specified view entry in the view stack, or `-1` if the entry is not in the stack.
     */
    private static indexOfViewEntryInStack;
    /**
     * Gets the index of an initialization task in the initialization process.
     * @param tasks An array of data describing tasks, in the same order as the corresponding tasks in the initialization
     * process.
     * @param uid The unique ID of the task for which to get the index.
     * @returns The index of the initialization task with the specified unique ID in the initialization process, or `-1`
     * if no task with the unique ID could be found.
     */
    private static indexOfInitializationTask;
}
/**
 * A wrapper for a GTC view.
 */
interface GtcViewWrapper<P extends ComponentProps = ComponentProps> extends DisplayComponent<P> {
    /**
     * Sets the wrapper's animation CSS class. The new class will replace the existing animation class.
     * @param animationClass The animation CSS class to set, or `null` to remove any existing animation class.
     */
    setAnimationClass(animationClass: string | null): void;
}
export {};
//# sourceMappingURL=GtcService.d.ts.map