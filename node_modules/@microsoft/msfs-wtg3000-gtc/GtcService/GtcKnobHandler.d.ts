import { GtcInteractionEvent } from './GtcInteractionEvent';
import { GtcService } from './GtcService';
/** Handles default behavior for the physical GTC knobs and buttons. */
export declare class GtcKnobHandler {
    private readonly gtcService;
    private static readonly vec2Cache;
    private readonly bus;
    private readonly publisher;
    private readonly checklistPublisher;
    private readonly cdiSource;
    private readonly pfdMapLayoutSetting;
    private readonly controlledDisplayPaneIndex;
    private readonly controlledMapDisplayPaneIndex;
    private readonly mapPointerJoystickHandler;
    /**
     * The GtcKnobHandler constructor.
     * @param gtcService The GTC service instance for the GTC with which this handler is associated.
     */
    constructor(gtcService: GtcService);
    /**
     * Handles GtcInteractionEvents in the case that a GtcView has not overridden the knob behavior.
     * @param event The event.
     */
    handleDefaultInteractionBehavior(event: GtcInteractionEvent): void;
    /**
     * Handles inner knob rotate events.
     * @param event The GtcInteractionEvent.
     * @param incOrDec Increase or decrease event.
     */
    private handleInnerKnobRotate;
    /**
     * Handles inner knob push events.
     * @param event The GtcInteractionEvent.
     * @param isLong Whether the event is a long push.
     */
    private handleInnerKnobPush;
    /**
     * Handles outer knob rotate events.
     * @param event The GtcInteractionEvent.
     * @param incOrDec Increase or decrease event.
     */
    private handleOuterKnobRotate;
    /**
     * Handles center knob rotate events.
     * @param incOrDec Increase or decrease event.
     */
    private handleCenterKnobRotate;
    /**
     * Sends event to scroll display pane selection left or right.
     * @param incOrDec Increase goes right, decrease left.
     */
    private changeSelectedDisplayPane;
    /**
     * Changes the selected course for the active NAV radio.
     * @param incOrDec The direction in which to change the course.
     */
    private changeSelectedNavCourse;
    /**
     * Change the selected course for OBS.
     * @param incOrDec The direction in which to change the course.
     */
    private changeSelectedObsCourse;
    /**
     * Handles map knob rotate events.
     * @param incOrDec Increase or decrease event.
     */
    private handleMapKnobRotate;
    /**
     * Handles map knob push events.
     */
    private handleMapKnobPush;
    /**
     * Handles joystick pan events.
     * @param direction The direction of the pan.
     */
    private handleJoystickPan;
    /**
     * Sends a map range event to the currently controlled display pane.
     * @param incOrDec Increase or decrease event.
     */
    private sendMapRangeEvent;
    /**
     * Sends a map pointer set active state event to the currently controlled display pane.
     * @param activate Whether to activate the pointer.
     */
    private sendMapPointerActiveSetEvent;
    /**
     * Sends a map pointer move event to the currently controlled display pane.
     * @param direction The direction in which to move the pointer.
     */
    private sendMapPointerMoveEvent;
    /**
     * Sends a checklist select event to the currently controlled display pane.
     * @param incOrDec Increase or decrease event.
     */
    private sendChecklistSelectEvent;
    /**
     * Sends a checklist push event to the currently controlled display pane.
     */
    private sendChecklistPushEvent;
}
//# sourceMappingURL=GtcKnobHandler.d.ts.map