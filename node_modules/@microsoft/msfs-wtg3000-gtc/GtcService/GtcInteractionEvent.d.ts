import { GtcOrientation } from '@microsoft/msfs-wtg3000-common';
/**
 * Interaction events triggered by GTC button bar buttons.
 */
declare enum GtcButtonBarEvent {
    ButtonBarUpPressed = "ButtonBarUpPressed",
    ButtonBarDownPressed = "ButtonBarDownPressed",
    ButtonBarEnterPressed = "ButtonBarEnterPressed",
    ButtonBarCancelPressed = "ButtonBarCancelPressed"
}
/**
 * Interaction events triggered by GTC hardware knobs or bezel keys.
 */
export declare enum GtcHardwareControlEvent {
    InnerKnobInc = "InnerKnobInc",
    InnerKnobDec = "InnerKnobDec",
    OuterKnobInc = "OuterKnobInc",
    OuterKnobDec = "OuterKnobDec",
    InnerKnobPush = "InnerKnobPush",
    InnerKnobPushLong = "InnerKnobPushLong",
    SoftKey1 = "SoftKey1",
    SoftKey2 = "SoftKey2",
    SoftKey3 = "SoftKey3",
    CenterKnobDec = "CenterKnobDec",
    CenterKnobInc = "CenterKnobInc",
    CenterKnobPush = "CenterKnobPush",
    MapKnobDec = "MapKnobDec",
    MapKnobInc = "MapKnobInc",
    MapKnobPush = "MapKnobPush",
    JoystickUp = "JoystickUp",
    JoystickDown = "JoystickDown",
    JoystickLeft = "JoystickLeft",
    JoystickRight = "JoystickRight"
}
export declare const GtcInteractionEvent: {
    InnerKnobInc: GtcHardwareControlEvent.InnerKnobInc;
    InnerKnobDec: GtcHardwareControlEvent.InnerKnobDec;
    OuterKnobInc: GtcHardwareControlEvent.OuterKnobInc;
    OuterKnobDec: GtcHardwareControlEvent.OuterKnobDec;
    InnerKnobPush: GtcHardwareControlEvent.InnerKnobPush;
    InnerKnobPushLong: GtcHardwareControlEvent.InnerKnobPushLong;
    SoftKey1: GtcHardwareControlEvent.SoftKey1;
    SoftKey2: GtcHardwareControlEvent.SoftKey2;
    SoftKey3: GtcHardwareControlEvent.SoftKey3;
    CenterKnobDec: GtcHardwareControlEvent.CenterKnobDec;
    CenterKnobInc: GtcHardwareControlEvent.CenterKnobInc;
    CenterKnobPush: GtcHardwareControlEvent.CenterKnobPush;
    MapKnobDec: GtcHardwareControlEvent.MapKnobDec;
    MapKnobInc: GtcHardwareControlEvent.MapKnobInc;
    MapKnobPush: GtcHardwareControlEvent.MapKnobPush;
    JoystickUp: GtcHardwareControlEvent.JoystickUp;
    JoystickDown: GtcHardwareControlEvent.JoystickDown;
    JoystickLeft: GtcHardwareControlEvent.JoystickLeft;
    JoystickRight: GtcHardwareControlEvent.JoystickRight;
    ButtonBarUpPressed: GtcButtonBarEvent.ButtonBarUpPressed;
    ButtonBarDownPressed: GtcButtonBarEvent.ButtonBarDownPressed;
    ButtonBarEnterPressed: GtcButtonBarEvent.ButtonBarEnterPressed;
    ButtonBarCancelPressed: GtcButtonBarEvent.ButtonBarCancelPressed;
};
/** An interaction event targeting the GTC, like a GTC button or knob press/turn, or a button bar button press. */
export type GtcInteractionEvent = typeof GtcInteractionEvent[keyof typeof GtcInteractionEvent];
/**
 * A handler which can respond to and optionally handle instances of {@link GtcInteractionEvent}.
 */
export interface GtcInteractionHandler {
    /**
     * Handles a {@link GtcInteractionEvent}.
     * @param event The event to handle.
     * @returns Whether the event was handled.
     */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
}
/**
 * A utility class for working with GTC interaction events.
 */
export declare class GtcInteractionEventUtils {
    private static readonly HORIZONTAL_H_EVENT_MAP;
    private static readonly VERTICAL_H_EVENT_MAP;
    /**
     * Maps an H event to a GtcHardwareControlEvent for a GTC.
     * @param orientation The orientation of the GTC.
     * @param instrumentIndex Which instrument index of the GTC.
     * @returns The mapped event, or undefined if no matching event or index.
     */
    static hEventMap(orientation: GtcOrientation, instrumentIndex: number): (hEvent: string) => GtcHardwareControlEvent | undefined;
}
export {};
//# sourceMappingURL=GtcInteractionEvent.d.ts.map