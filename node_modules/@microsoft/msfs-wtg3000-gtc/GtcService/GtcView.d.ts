import { ComponentProps, DisplayComponent, Subject, Subscribable } from '@microsoft/msfs-sdk';
import { ControllableDisplayPaneIndex } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent, GtcInteractionHandler } from './GtcInteractionEvent';
import { GtcControlMode, GtcService } from './GtcService';
import { SidebarStateReadonly } from './Sidebar';
/**
 * Component props for {@link GtcView}.
 */
export interface GtcViewProps extends ComponentProps {
    /** The GtcService instance. */
    gtcService: GtcService;
    /** The GTC control mode to which the view belongs. */
    controlMode: GtcControlMode;
    /** Whether the view belongs to its GTC control mode's overlay view stack. */
    isInOverlayStack?: boolean;
    /**
     * The index of the display pane associated with the view, or `undefined` if the view is not associated with any
     * display pane.
     */
    displayPaneIndex?: ControllableDisplayPaneIndex;
}
/** A GtcView component */
export declare abstract class GtcView<P extends GtcViewProps = GtcViewProps> extends DisplayComponent<P> implements GtcInteractionHandler {
    protected readonly bus: import("@microsoft/msfs-sdk").EventBus;
    protected readonly gtcService: GtcService;
    protected readonly _activeComponent: Subject<GtcInteractionHandler | null>;
    protected readonly _sidebarState: import("./Sidebar").GtcSidebarState;
    /** The GTC sidebar state (labels and buttons) requested by this view. */
    readonly sidebarState: SidebarStateReadonly;
    protected readonly _title: Subject<string | undefined>;
    /** This view's title. */
    readonly title: Subscribable<string | undefined>;
    /**
     * A method that is called when this view comes into use. A view is in-use when it appears in at least one history
     * state of its parent view stack.
     */
    onInUse(): void;
    /**
     * A method that is called when this view goes out of use. A view is out-of-use when it does not appear in any
     * history states of its parent view stack.
     */
    onOutOfUse(): void;
    /**
     * A method that is called when this view is opened. A view is open when it appears in the most recent history state
     * of its parent view stack.
     * @param wasPreviouslyOpened True when this view was open in a previous view stack
     * (like if the go back button was used to reach this page).
     */
    onOpen(wasPreviouslyOpened: boolean): void;
    /**
     * A method that is called when this view is closed. A view is closed when it does not appear in the most recent
     * history state of its parent view stack.
     */
    onClose(): void;
    /**
     * A method that is called when this view is resumed. A view is resumed when it is the active view.
     */
    onResume(): void;
    /**
     * A method that is called when this view is paused. A view is paused when it is not the active view.
     */
    onPause(): void;
    /** Called when there is an interaction event when this is the active view.
     * @param event The event.
     * @returns Whether the event was handled or not.
     */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
}
//# sourceMappingURL=GtcView.d.ts.map