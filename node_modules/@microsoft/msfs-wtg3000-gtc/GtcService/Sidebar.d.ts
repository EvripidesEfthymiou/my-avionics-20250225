import { ExtractSubjectType, MutableSubscribable, Subject, Subscribable, Subscription } from '@microsoft/msfs-sdk';
import { GtcOrientation } from '@microsoft/msfs-wtg3000-common';
/** The state used by the SidebarState to determine which buttons to show, and how to show them. */
export type SidebarState = ReturnType<typeof GtcSidebar.createSidebarState>;
/** Readonly version of SidebarStateState. */
export type SidebarStateReadonly = {
    [Item in keyof SidebarState]: Subscribable<ExtractSubjectType<SidebarState[Item]>>;
};
/** An Object of subscribables. */
type ObjectOfSubs = {
    readonly [key: string]: Subscribable<any>;
};
/** An Object of mutable subscribables. */
type MutableObjectOfSubs = {
    readonly [key: string]: MutableSubscribable<any>;
};
/** Possible states that a GTC View may request for slot 1. */
export type Slot1Buttons = 'cancel';
/** Possible states that a GTC View may request for slot 5. */
export type Slot5Buttons = 'arrowsDisabled' | 'arrowsUp' | 'arrowsDown' | 'arrowsBoth' | 'enterEnabled' | 'enterDisabled';
/** Possible states that a GTC View may request for dualConcentricKnobLabel. */
declare const dualConcentricKnobLabelKeys: readonly ["dataEntryPushEnter", "dataEntryPushEnterHold", "panPointPushPanOff"];
/** Possible states that a GTC View may request for dualConcentricKnobLabel. */
export type DualConcentricKnobLabelKey = typeof dualConcentricKnobLabelKeys[number];
/** A GTC sidebar state. */
export type GtcSidebarState = {
    /** The button state of slot 1. */
    slot1: Subject<Slot1Buttons | null>;
    /** The button state of slot 5. */
    slot5: Subject<Slot5Buttons | null>;
    /** The label to display for the enter button. */
    enterButtonLabel: Subject<string>;
    /** The label to display for the arrow buttons. */
    useWaypointArrowButtons: Subject<boolean>;
    /** The label to display for the dual concentric knob. */
    dualConcentricKnobLabel: Subject<DualConcentricKnobLabelKey | string | null>;
    /** The label to display for the center knob. */
    centerKnobLabel: Subject<string | null>;
    /** The label to display for the map knob. */
    mapKnobLabel: Subject<string | null>;
};
/** Colletion of functions for working with the GtcSidebar. */
export declare class GtcSidebar {
    static readonly hidePanesString = "$hide-panes$";
    /**
     * Creates an instance of the sidebar state to be used by GtcViews.
     * @returns new sidebar state.
     */
    static createSidebarState(): GtcSidebarState;
    /**
     * Pipes all the subscribables from one ObjectOfSubjects to another.
     * @param from Object to pipe from.
     * @param to Object to pipe to.
     * @returns All the subscriptions made from the pipes.
     */
    static pipeObjectOfSubs(from: ObjectOfSubs, to: MutableObjectOfSubs): Subscription[];
    /**
     * Renders the DualConcentricKnobLabel.
     * @param labelOrKey The label to render, or a {@link DualConcentricKnobLabelKey}.
     * @param orientation The gtc orientation.
     * @returns the final string.
     */
    static renderDualConcentricKnobLabel(labelOrKey: DualConcentricKnobLabelKey | string, orientation: GtcOrientation): string;
    /**
     * Renders the DualConcentricKnobLabel for the horizontal orientation.
     * @param labelKey The label key.
     * @returns The rendered string.
     */
    static renderDualConcentricKnobLabelHorizontal(labelKey: DualConcentricKnobLabelKey): string;
    /**
     * Renders the DualConcentricKnobLabel for the vertical orientation.
     * @param labelKey The label key.
     * @returns The rendered string.
     */
    static renderDualConcentricKnobLabelVertical(labelKey: DualConcentricKnobLabelKey): string;
    /**
     * Checks if string is a {@link DualConcentricKnobLabelKey}.
     * @param key The string.
     * @returns whether the key is a {@link DualConcentricKnobLabelKey} or not.
     */
    static isDualConcentricKnobLabelKey(key: string): key is DualConcentricKnobLabelKey;
}
export {};
//# sourceMappingURL=Sidebar.d.ts.map