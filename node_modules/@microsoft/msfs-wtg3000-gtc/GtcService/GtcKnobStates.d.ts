import { Subscribable } from '@microsoft/msfs-sdk';
import { ObsSuspDataProvider } from '@microsoft/msfs-garminsdk';
import { GtcService } from './GtcService';
/**
 * The control states of a GTC's hardware knobs.
 */
export interface GtcKnobStates {
    /**
     * The current state of the dual concentric knob (located at the top of horizontally oriented GTCs or at the right
     * side of vertically oriented GTCs).
     */
    readonly dualKnobState: Subscribable<string>;
    /** The current state of the center knob (only found on vertically oriented GTCs). */
    readonly centerKnobState: Subscribable<string>;
    /**
     * The current state of the map knob (located at the bottom of horizontally oriented GTCs or at the left side of
     * vertically oriented GTCs).
     */
    readonly mapKnobState: Subscribable<string>;
}
/**
 * GTC dual concentric knob control states.
 */
export declare enum GtcDualKnobState {
    Blank = "Blank",
    CRS = "CRS",
    OBS = "OBS",
    DisplayPanes = "DisplayPanes",
    DisplayPanesAndRadarControl = "DisplayPanesAndRadarControl",
    NAVCOM1 = "NAVCOM1",
    NAVCOM2 = "NAVCOM2",
    MapPointerControl = "MapPointerControl",
    Checklist = "Checklist"
}
/**
 * GTC map knob control states.
 */
export declare enum GtcMapKnobState {
    Blank = "Blank",
    MapNoPointer = "MapNoPointer",
    MapWithPointer = "MapWithPointer",
    WeatherRadar = "WeatherRadar",
    NAVCOM1 = "NAVCOM1",
    NAVCOM2 = "NAVCOM2",
    MapPointerControl = "MapPointerControl",
    Checklist = "Checklist"
}
/**
 * GTC center knob control states.
 */
export declare enum GtcCenterKnobState {
    Blank = "Blank",
    NAVCOM1 = "NAVCOM1",
    NAVCOM2 = "NAVCOM2"
}
/**
 * A set of plugin-defined knob control state overrides.
 */
export type GtcKnobStatePluginOverrides = {
    /** The dual concentric knob control state override, or `null` if the state should not be overridden. */
    dualKnobState?: Subscribable<string | null>;
    /** The center knob control state override, or `null` if the state should not be overridden. */
    centerKnobState?: Subscribable<string | null>;
    /** The map knob control state override, or `null` if the state should not be overridden. */
    mapKnobState?: Subscribable<string | null>;
};
/**
 * A default implementation of {@link GtcKnobStates} which automatically manages knob control states.
 */
export declare class GtcKnobStatesManager implements GtcKnobStates {
    private readonly gtcService;
    private readonly obsSuspDataProvider;
    private readonly pfdMapLayoutSetting;
    private readonly pfdDisplayPaneSettingManager;
    private readonly controlledPfdMapDisplayPaneIndex;
    private readonly isPfdMapPointerActive;
    private readonly pluginDualKnobStateOverride;
    private readonly pluginCenterStateOverride;
    private readonly pluginMapStateOverride;
    /** @inheritdoc */
    readonly dualKnobState: Subscribable<string>;
    /** @inheritdoc */
    readonly centerKnobState: Subscribable<string>;
    /** @inheritdoc */
    readonly mapKnobState: Subscribable<string>;
    /**
     * Creates a new instance of GtcKnobStatesManager.
     * @param gtcService The GTC service instance associated with this manager's GTC.
     * @param obsSuspDataProvider A provider of LNAV OBS/suspend data.
     */
    constructor(gtcService: GtcService, obsSuspDataProvider: ObsSuspDataProvider);
    /**
     * Attaches plugin-defined knob control state overrides.
     * @param overrides An array of plugin-defined knob control state overrides. The array should be ordered such that
     * the overrides appear in the order in which their parent plugins were loaded.
     */
    attachPluginOverrides(overrides: readonly Readonly<GtcKnobStatePluginOverrides>[]): void;
    /**
     * Gets the desired PFD control mode map knob control state based on a given context.
     * @param pfdPaneVisible Whether the PFD display pane is visible.
     * @param pfdPaneView The key of the currently displayed PFD display pane view.
     * @param pfdMapLayout The current PFD map layout mode.
     * @param isPfdMapPointerActive Whether the PFD map pointer is active.
     * @returns The desired PFD control mode map knob control state based on the specified context.
     */
    private getPfdMapKnobState;
    /**
     * Gets the desired MFD control mode map knob control state based on a given context.
     * @param selectedPaneViewKey The key of the currently displayed MFD display pane view.
     * @returns The desired MFD control mode map knob control state based on the specified context.
     */
    private getMfdMapKnobState;
    /**
     * Gets the desired map knob control state based on a display pane view.
     * @param displayPaneViewKey The key of the display pane view for which to get the knob control state.
     * @returns The desired map knob control state based on the specified display pane view.
     */
    private getMapKnobStateFromDisplayPaneView;
    /**
     * Selects a single plugin-defined knob control state override to apply from an array of overrides. The last
     * non-`null` override in the array will be selected. If all overrides in the array are `null`, `null` will be
     * selected.
     * @param overrides An array of plugin-defined knob control state overrides.
     * @returns The plugin-defined knob control state override to apply from the specified array of overrides.
     */
    private static selectPluginOverrideState;
}
//# sourceMappingURL=GtcKnobStates.d.ts.map