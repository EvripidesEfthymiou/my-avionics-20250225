import { Subscribable, VNode } from '@microsoft/msfs-sdk';
import { GtcInteractionEvent } from './GtcInteractionEvent';
import { GtcView, GtcViewProps } from './GtcView';
import { SidebarState } from './Sidebar';
/**
 * Component props for GtcGenericView.
 */
export interface GtcGenericViewProps extends GtcViewProps {
    /** The title of the view. */
    title: string | Subscribable<string>;
    /** The sidebar state (labels and buttons) requested by the view. */
    sidebarState?: SidebarState;
    /**
     * A callback function to execute when the view comes in use.
     * @param view The in-use view.
     */
    onInUse?: (view: GtcGenericView) => void;
    /**
     * A callback function to execute when the view goes out of use.
     * @param view The out-of-use view.
     */
    onOutOfUse?: (view: GtcGenericView) => void;
    /**
     * A callback function to execute when the view is opened.
     * @param view The opened view.
     */
    onOpen?: (view: GtcGenericView) => void;
    /**
     * A callback function to execute when the view is closed.
     * @param view The closed view.
     */
    onClose?: (view: GtcGenericView) => void;
    /**
     * A callback function to execute when the view is paused.
     * @param view The paused view.
     */
    onPause?: (view: GtcGenericView) => void;
    /**
     * A callback function to execute when the view is resumed.
     * @param view The resumed view.
     */
    onResume?: (view: GtcGenericView) => void;
    /**
     * A callback function which handles interaction events.
     * @param view The view to which the event was sent.
     * @param event An interaction event.
     * @returns Whether the event was handled.
     */
    onInteractionEvent?: (view: GtcGenericView, event: GtcInteractionEvent) => boolean;
    /**
     * A callback function to execute when the view is destroyed.
     * @param view The destroyed view.
     */
    onDestroy?: (view: GtcGenericView) => void;
}
/**
 * A generic GTC view which renders all of its children and derives its functionality from its props.
 */
export declare class GtcGenericView<P extends GtcGenericViewProps = GtcGenericViewProps> extends GtcView<P> {
    private titlePipe?;
    private sidebarPipes?;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    onInUse(): void;
    /** @inheritDoc */
    onOutOfUse(): void;
    /** @inheritDoc */
    onOpen(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritDoc */
    onPause(): void;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritDoc */
    destroy(): void;
}
//# sourceMappingURL=GtcGenericView.d.ts.map