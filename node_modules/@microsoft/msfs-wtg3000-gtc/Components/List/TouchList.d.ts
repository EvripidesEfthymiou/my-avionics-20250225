import { ComponentProps, DisplayComponent, EventBus, Subscribable, VNode } from '@microsoft/msfs-sdk';
/**
 * Component props for TouchList.
 */
export interface TouchListProps extends ComponentProps {
    /** The event bus. */
    bus: EventBus;
    /**
     * The height of each list item in pixels.
     */
    listItemHeightPx: number | Subscribable<number>;
    /** The amount of space between each list item in pixels. Defaults to zero pixels. */
    listItemSpacingPx?: number | Subscribable<number>;
    /**
     * The height of the list in pixels. If not defined, the default value depends on whether the number of items per
     * page is defined. If the number of items per page is defined, the height defaults to the sum of the list item
     * height and spacing multiplied by the number of items per page. If the number of items per page is not defined,
     * the height defaults to 100 pixels.
     */
    heightPx?: number | Subscribable<number>;
    /** The number of visible items per page. If not defined, the list will not snap to list items when scrolling. */
    itemsPerPage?: number | Subscribable<number>;
    /**
     * The maximum number of items that can be rendered simultaneously. Ignored if `itemsPerPage` is not defined. The
     * value will be clamped to be greater than or equal to `itemsPerPage * 3`. Defaults to infinity.
     */
    maxRenderedItemCount?: number | Subscribable<number>;
    /** The total number of items in the list. */
    itemCount: Subscribable<number>;
}
/**
 * A touchscreen list which can be vertically scrolled by clicking and dragging the mouse.
 */
export declare class TouchList extends DisplayComponent<TouchListProps> {
    private readonly listRef;
    /**
     * The number of visible list items per page displayed by this list, or `undefined` if the number of items per page
     * is not prescribed.
     */
    readonly itemsPerPage: Subscribable<number> | undefined;
    private readonly _listItemHeightWithMarginPx;
    /** The height, in pixels, of one item in this list plus its bottom margin. */
    readonly listItemHeightWithMarginPx: Subscribable<number>;
    private readonly _totalHeightPx;
    /** The total height, in pixels, of all items in this list plus their margins. */
    readonly totalHeightPx: Subscribable<number>;
    private readonly _heightPx;
    /** The visible height of this list, in pixels. */
    readonly heightPx: Subscribable<number>;
    private readonly _scrollY;
    /**
     * This list's current scroll position, in pixels. The scroll position is zero when the list is scrolled to the top
     * (without overscroll) and increases as the list is scrolled down.
     */
    readonly scrollY: Subscribable<number>;
    private readonly _scrollPercentage;
    /**
     * This list's current scroll position, normalized such that 0 represents when the list is scrolled to the top
     * (without overscroll) and 1 represents when the list is scrolled to the bottom (without overscroll).
     */
    readonly scrollPercentage: Subscribable<number>;
    private readonly _scrollBarHeightPercentage;
    /** The fraction of this list's visible height compared to the total height of all items in the list plus their margins. */
    readonly scrollBarHeightPercentage: Subscribable<number>;
    private readonly _topVisibleIndex;
    readonly topVisibleIndex: Subscribable<number>;
    private readonly _renderWindow;
    /**
     * The window of rendered list items, as `[startIndex, endIndex]`, where `startIndex` is the index of the first
     * rendered item, inclusive, and `endIndex` is the index of the last rendered item, exclusive.
     */
    readonly renderWindow: Subscribable<Readonly<Omit<Float64Array, "set" | "sort" | "copyWithin">>>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Returns a reference to the element where the list items should be added.
     * @returns A reference to the element where the list items should be added.
     */
    getContainerRef(): HTMLDivElement;
    /**
     * Scrolls up by one full page height.
     */
    pageUp(): void;
    /**
     * Scrolls down by one full page height.
     */
    pageDown(): void;
    /**
     * Scrolls until the item at a specified index is in view.
     * @param index The index of the item to which to scroll.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. If this value is negative, the target item will be placed at the visible position
     * that results in the shortest scroll distance. Ignored if this list does not support snapping to list items.
     * @param animate Whether to animate the scroll.
     */
    scrollToIndex(index: number, position: number, animate: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=TouchList.d.ts.map