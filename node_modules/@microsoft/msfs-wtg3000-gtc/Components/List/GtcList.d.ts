import { ComponentProps, DisplayComponent, EventBus, Subscribable, SubscribableArray, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { DynamicListData } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent, GtcInteractionHandler } from '../../GtcService/GtcInteractionEvent';
import { SidebarState } from '../../GtcService/Sidebar';
import { TouchListProps } from './TouchList';
import './GtcList.css';
/**
 * Formatting props for GtcList.
 */
export type GtcListFormattingProps = Omit<TouchListProps, 'itemCount' | 'maxRenderedItemCount'>;
/**
 * Component props for GtcList.
 */
export interface GtcListProps<DataType> extends ComponentProps, GtcListFormattingProps {
    /** The event bus. */
    bus: EventBus;
    /**
     * The data to display in the list. If both this property and `renderItem` are defined, the list will display
     * rendered data items instead of its children.
     */
    data?: SubscribableArray<DataType>;
    /**
     * A function that renders a single data item into the list. If both this property and `data` are defined, the
     * list will display rendered data items instead of its children.
     */
    renderItem?: (data: DataType, index: number) => VNode;
    /**
     * The maximum number of items that can be rendered simultaneously. Ignored if `data`, `renderItem`, or
     * `itemsPerPage` is not defined. The value will be clamped to be greater than or equal to `itemsPerPage * 3`.
     * Defaults to infinity.
     */
    maxRenderedItemCount?: number | Subscribable<number>;
    /**
     * A VNode which will be rendered into the list's translating container and positioned after the container that
     * holds the list's rendered items.
     */
    staticTouchListChildren?: VNode;
    /**
     * A function to sort data items before rendering them. The function should return a negative number if the first
     * item should be rendered before the second, a positive number if the first item should be rendered after the
     * second, or zero if the two items' relative order does not matter. If not defined, items will be rendered in the
     * order in which they appear in the data array.
     */
    sortItems?: (a: DataType, b: DataType) => number;
    /** The SidebarState to use. */
    sidebarState?: SidebarState | Subscribable<SidebarState | null>;
    /** A callback that will be called with the topVisibleIndex when it changes. */
    onTopVisibleIndexChanged?: (topVisibleIndex: number) => void;
    /** A callback function to execute when the list is destroyed. */
    onDestroy?: () => void;
    /** CSS class(es) to add to the list's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A touchscreen vertically scrollable list which includes an animated scroll bar and supports rendering either a static
 * or dynamic sequence of list items. The list also supports scrolling in response to GTC interaction events and
 * editing of GTC sidebar state to show/hide the arrow buttons as appropriate.
 */
export declare class GtcList<DataType extends DynamicListData> extends DisplayComponent<GtcListProps<DataType>> implements GtcInteractionHandler {
    private readonly gtcListRef;
    private readonly scrollBarRef;
    private readonly touchListRef;
    private readonly visibleItemCount;
    private staticChildrenRootNode?;
    private dynamicList?;
    private readonly updateRenderedWrappersTimer;
    private readonly sidebarState;
    private cssClassSub?;
    private sidebarStateSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Scrolls until the item at a specified index is in view.
     * @param index The index of the item to which to scroll, after sorting has been applied and hidden items have been
     * excluded.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. If this value is negative, the target item will be placed at the visible position
     * that results in the shortest scroll distance. Ignored if this list does not support snapping to list items.
     * @param animate Whether to animate the scroll.
     * @param ignoreIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. Defaults to `false`.
     */
    scrollToIndex(index: number, position: number, animate: boolean, ignoreIfItemInView?: boolean): void;
    /**
     * Scrolls until the specified item is in view. If this is a static list, this method does nothing.
     * @param item The item to which to scroll.
     * @param position The position to place the target item at the end of the scroll. Position `0` is the top-most
     * visible slot, position `1` is the next slot, and so on. Values greater than or equal to the number of visible
     * items per page will be clamped. If this value is negative, the target item will be placed at the visible position
     * that results in the shortest scroll distance. Ignored if this list does not support snapping to list items.
     * @param animate Whether to animate the scroll.
     * @param ignoreIfItemInView Whether to skip the scroll operation if the target item is already in view or will
     * be in view when the current scrolling animation finishes. Defaults to `false`.
     */
    scrollToItem(item: DataType, position: number, animate: boolean, ignoreIfItemInView?: boolean): void;
    /**
     * Updates the order of rendered items in this list.
     */
    updateOrder(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Updates the translation of this list's scroll bar.
     */
    private updateScrollBarTranslation;
    /**
     * Update the arrow buttons in the sidebar state.
     * @param state The arrow button state.
     * @param state."0" Whether this list can scroll.
     * @param state."1" This list's current scroll percentage.
     */
    private updateArrowButtons;
    /**
     * Updates the visibility of rendered list item wrappers. Has no effect if a dynamic list has not been created
     * for this list or if a maximum rendered item count is not defined.
     */
    private updateRenderedWrappers;
    /**
     * Renders a list item and wrapper for a data item.
     * @param data The data item for which to render the list item.
     * @param index The index of the data item in its containing array.
     * @returns A wrapper containing the rendered list item for the specified data item.
     */
    private renderItemWrapper;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcList.d.ts.map