import { ComponentProps, DisplayComponent, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import './TabbedContainer.css';
/**
 * Tab arrangement configurations for {@link TabbedContainer}.
 */
export declare enum TabConfiguration {
    /** Four vertically stacked tabs on the left edge. */
    Left4 = "L4",
    /** Five vertically stacked tabs on the left edge. */
    Left5 = "L5",
    /** Four verticall stacked tabs on each of the left and right edges. */
    LeftRight4 = "LR4",
    /** Five horizontally stacked tabs on the top edge. */
    Top = "Top"
}
/** Properties for TabbedContainer */
export interface TabbedContainerProps extends ComponentProps {
    /** The configuration of the tabs. */
    configuration: TabConfiguration;
    /** Optionally specify the tab position to initially open to. Defaults to 1. */
    initiallySelectedTabPosition?: number;
    /** CSS class(es) to apply to the container's root element. */
    class?: string | SubscribableSet<string>;
}
/** A TabbedContainer which holds TabbedContent(s) */
export declare class TabbedContainer extends DisplayComponent<TabbedContainerProps> {
    private readonly tabEntries;
    private readonly selectedTabPosition;
    private cssClassSub?;
    private isPaused;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Gets the tab entry at a specified position.
     * @param position The position of the tab whose entry is to be retrieved. Defaults to the currently selected tab
     * position.
     * @returns The tab entry instance at the specified position.
     * @throws Error if there is no tab at the specified position.
     */
    private getTabEntry;
    /**
     * Responds to when the user clicks on a tab.
     * @param entry The tab entry associated with the clicked tab.
     */
    private onTabClicked;
    /**
     * Selects and opens a tab. If the chosen tab is disabled, this method does nothing.
     * @param position The position at which the tab to select is located.
     * @throws Error if no tab exists at the specified position.
     */
    selectTab(position: number): void;
    /**
     * Sets whether a tab is enabled. If a tab is enabled, it can be freely selected. If a tab is disabled, it cannot be
     * selected. Disabling the currently selected tab will not close the tab or change the selected tab, but will prevent
     * it from being re-selected while it remains disabled once the selected tab changes.
     * @param position The position of the tab to enable or disable.
     * @param enabled Whether the tab should be enabled.
     */
    setTabEnabled(position: number, enabled: boolean): void;
    /** Resume the currently-selected tab's content view */
    resume(): void;
    /** Pause the currently-selected tab's content view */
    pause(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
    /**
     * Validates this container's children and generates a tab entry for each child.
     * @throws Error if a child is passed that is not an instance of {@link TabbedContent}.
     * @throws Error if a position passed to a TabbedContent component is out of bounds for the passed configuration.
     * @throws Error if the positions passed to TabbedContent components are not all unique.
     */
    private validateChildren;
    /**
     * Renders a tab.
     * @param ref The reference to assign to the tab's root element.
     * @param content The content for the tab to render.
     * @param isEnabled Whether the tab is enabled.
     * @param isSelected Whether the tab is selected.
     * @returns A tab, as a VNode.
     */
    private renderTab;
    /**
     * Generates the CSS classes of tabs
     * @param position The position of the tab being rendered
     * @returns The CSS classes of tabs
     */
    private generateTabClasses;
    /**
     * Renders a set of tab contents with wrapper.
     * @param contentNode The root VNode of the tab content.
     * @param isSelected Whether the tab is selected.
     * @returns A set of tab contents with wrapper, as a VNode.
     */
    private renderContent;
    /**
     * Returns whether the tab position is on the right-hand side
     * @param position The tab position to evaluate
     * @returns Whether the tab position is on the right-hand side
     */
    private isTabRight;
}
//# sourceMappingURL=TabbedContainer.d.ts.map