import { ComponentProps, DisplayComponent, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { MinimumsDataProvider } from '@microsoft/msfs-garminsdk';
import { GtcInteractionEvent, GtcInteractionHandler } from '../../GtcService/GtcInteractionEvent';
import { GtcService } from '../../GtcService/GtcService';
import { SidebarState } from '../../GtcService/Sidebar';
import '../../Components/TouchButton/NumPadTouchButton.css';
import './GtcMinimumsControl.css';
/**
 * Component props for GtcMinimumsControl.
 */
export interface GtcMinimumsControlProps extends ComponentProps {
    /** The GTC service. */
    gtcService: GtcService;
    /** A provider of minimums data. */
    minimumsDataProvider: MinimumsDataProvider;
    /** The SidebarState to use. */
    sidebarState?: SidebarState | Subscribable<SidebarState | null>;
}
/**
 * A GTC minimums control component. Provides a number pad and cursor input allowing the user to select a minimums
 * value, and a button which opens a dialog to allow the user to select a minimums mode.
 */
export declare class GtcMinimumsControl extends DisplayComponent<GtcMinimumsControlProps> implements GtcInteractionHandler {
    private static readonly BARO_FEET_MAX;
    private static readonly BARO_METERS_MAX;
    private static readonly RADAR_FEET_MAX;
    private static readonly RADAR_METERS_MAX;
    private static readonly FORMATTER;
    private readonly baroFeetInputRef;
    private readonly baroMetersInputRef;
    private readonly radarFeetInputRef;
    private readonly radarMetersInputRef;
    private readonly numpadRef;
    private readonly backspaceRef;
    private readonly modeRef;
    private readonly baroFeetInputCssClass;
    private readonly baroMetersInputCssClass;
    private readonly radarFeetInputCssClass;
    private readonly radarMetersInputCssClass;
    private readonly publisher;
    private readonly inputMode;
    private readonly altitudeUnitsSetting;
    private readonly baroFeetValue;
    private readonly baroMetersValue;
    private readonly radarFeetValue;
    private readonly radarMetersValue;
    private activeInput;
    private activeUnit;
    private activeValue;
    private showCancel;
    private readonly sidebarState;
    private modeSub?;
    private unitsSub?;
    private sidebarStateSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Resets the active input based on the currently active minimums mode and display units setting.
     * @param resetValue Whether to reset the input value to the active minimums value.
     */
    private resetActiveInput;
    /**
     * A callback which is called when this control's parent view is resumed.
     */
    onResume(): void;
    /**
     * A callback which is called when this control's parent view is opened.
     */
    onOpen(): void;
    /**
     * A callback which is called when this control's parent view is closed.
     */
    onClose(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Validates the currently selected value; if valid sets the active minimums value to the selected value and
     * closes this dialog, and if invalid opens the invalid value message dialog.
     */
    private validateValueAndClose;
    /**
     * Responds to when one of this page's number pad buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    private onNumberPressed;
    /**
     * Responds to when this page's backspace button is pressed.
     */
    private onBackspacePressed;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this page's baro minimums feet value input.
     * @returns This page's baro minimums feet value input, as a VNode.
     */
    private renderBaroFeetInput;
    /**
     * Renders this page's baro minimums meters value input.
     * @returns This page's baro minimums meters value input, as a VNode.
     */
    private renderBaroMetersInput;
    /**
     * Renders this page's radar minimums feet value input.
     * @returns This page's radar minimums feet value input, as a VNode.
     */
    private renderRadarFeetInput;
    /**
     * Renders this page's radar minimums meters value input.
     * @returns This page's radar minimums meters value input, as a VNode.
     */
    private renderRadarMetersInput;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcMinimumsControl.d.ts.map