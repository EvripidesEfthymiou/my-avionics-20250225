import { DisplayComponent, EventBus, FacilityWaypoint, MutableSubscribable, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { G3000WaypointSearchType } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionHandler } from '../../GtcService/GtcInteractionEvent';
import { SidebarState } from '../../GtcService/Sidebar';
import { GtcViewProps } from '../../GtcService/GtcView';
import { GtcPositionHeadingDataProvider } from '../../Navigation/GtcPositionHeadingDataProvider';
import './GtcNearestTab.css';
/** {@link GtcNearestTab} props. */
export interface GtcNearestTabProps extends GtcViewProps {
    /** An event bus. */
    bus: EventBus;
    /** A provider of airplane position and heading data. */
    posHeadingDataProvider: GtcPositionHeadingDataProvider;
    /** A function to execute when a waypoint is selected. */
    onSelected: (waypoint: FacilityWaypoint) => void;
    /** Type of facility to search. */
    facilitySearchType: G3000WaypointSearchType | Subscribable<G3000WaypointSearchType>;
    /** A reference to the parent {@link GtcView}'s `_activeComponent`. */
    activeComponent?: MutableSubscribable<GtcInteractionHandler | null>;
    /** The SidebarState to use. */
    sidebarState?: SidebarState | Subscribable<SidebarState | null>;
}
/**
 * A GTC tab which allows the user to select from a list of nearest waypoints.
 */
export declare class GtcNearestTab extends DisplayComponent<GtcNearestTabProps> {
    private readonly listRef;
    private readonly filterButtonRef;
    private readonly rootCssClass;
    private readonly nearestWptFilterClasses;
    private readonly nearestWptFilterAllClasses;
    private readonly nearestWptFilterAirportClasses;
    private readonly nearestWptFilterIntersectionClasses;
    private readonly nearestWptFilterNdbClasses;
    private readonly nearestWptFilterVorClasses;
    private readonly nearestWptFilterUserClasses;
    private readonly unitsSettingManager;
    /** The position of the airplane. */
    private readonly ppos;
    /** The true heading of the airplane, in degrees, or `NaN` if heading data is invalid. */
    private readonly planeHeadingTrue;
    private readonly wptArrayManager;
    private readonly nearestWaypointFilter;
    private readonly itemsPerPage;
    private isPaused;
    private pposPipe?;
    private headingPipe?;
    private nearestWaypointFilterSub?;
    private nearestFacilitiesUpdateSub?;
    private isGpsDataFailedSub?;
    private facilitySearchTypeSub?;
    private isGpsDrSub?;
    constructor(props: GtcNearestTabProps);
    /** Initializes this page's nearest waypoints search. */
    private initNearestSearch;
    /** @inheritDoc */
    onAfterRender(): void;
    /** Resume lifecycle method. */
    onResume(): void;
    /** Pause lifecycle method. */
    onPause(): void;
    /** Reset the nearest waypoint filter to its default value. */
    resetNearestWaypointFilter(): void;
    private getFacilityTypeName;
    private renderListItem;
    /** @inheritDoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcNearestTab.d.ts.map