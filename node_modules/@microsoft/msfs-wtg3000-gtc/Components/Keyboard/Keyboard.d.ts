import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
import './Keyboard.css';
/**
 * Component props for Keyboard.
 */
export interface KeyboardProps extends ComponentProps {
    /**
     * Whether to show the "Find" button. If `true`, then the "Find" button will replace the space button while the
     * keyboard is displaying letters, and the space button will instead be shown while the keyboard is displaying
     * numerals.
     */
    showFindButton: boolean;
    /** Whether the space button is enabled. */
    isSpaceButtonEnabled: boolean | Subscribable<boolean>;
    /** A callback function which is called when a character key button is pressed. */
    onKeyPressed?: (char: string) => void;
    /** A callback function which is called when the backspace button is pressed. */
    onBackspacePressed?: () => void;
    /** A callback function which is called when the "Find" button is pressed. */
    onFindPressed?: () => void;
    /** CSS class(es) to apply to the number pad's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A keyboard with buttons for all alphanumeric characters and the space character, a backspace button, and an optional
 * "Find" button. The display of letters and numerals is mutually exclusive, and the keyboard can be toggled between
 * the two states. The letters are ordered alphabetically.
 */
export declare class Keyboard extends DisplayComponent<KeyboardProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private thisNode?;
    private readonly rootRef;
    private readonly rootCssClass;
    private readonly showNumpad;
    private cssClassSub?;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Sets whether the keyboard shows the numpad keys instead of the alphabet keys.
     * @param show Whether to show the numpad keys.
     */
    setShowNumpad(show: boolean): void;
    /**
     * Responds to when this keyboard's mode button is pressed.
     */
    private onModePressed;
    /**
     * Responds to when one of this keyboard's character keys is pressed.
     * @param char The character of the key that was pressed.
     */
    private onKeyPressed;
    /**
     * Responds to when this keyboard's backspace button is pressed.
     */
    private onBackspacePressed;
    /**
     * Responds to when this keyboard's find button is pressed.
     */
    private onFindPressed;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders a character key.
     * @param cssClass CSS class(es) to apply to the key's root element.
     * @param char The character for which to render the key.
     * @param label The key's label text. Defaults to the same value as `char`.
     * @returns A key for the specified character, as a VNode.
     */
    protected renderKey(cssClass: string, char: string, label?: string): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=Keyboard.d.ts.map