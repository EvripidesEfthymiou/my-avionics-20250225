import { ComponentProps, DisplayComponent, MappedSubject, MutableSubscribable, SetSubject, Subject, Subscribable, SubscribableSet, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
import './CursorInputSlot.css';
/**
 * A type of character selection mode for a {@link CursorInputSlot}.
 */
export type CursorInputCharSelectionMode = 'none' | 'blink' | 'highlight';
/**
 * A slot for a scrolling cursor input.
 */
export interface CursorInputSlot<T> {
    /** Flags this object as a CursorInputSlot. */
    readonly isCursorInputSlot: true;
    /** Whether this slot supports backfill operations. */
    readonly allowBackfill: boolean;
    /** The number of characters contained in this slot. */
    readonly characterCount: number;
    /** The value of this slot's characters, in order. */
    readonly characters: Subscribable<readonly (string | null)[]>;
    /** The current value of this slot. */
    readonly value: Subscribable<T>;
    /**
     * Sets the value of this slot. The value of this slot after the operation is complete may be different from the
     * requested value, depending on whether this slot can accurately represent the requested value.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: T): T;
    /**
     * Increments this slot's value.
     * @returns Whether the operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     * @throws RangeError if `index` is out of bounds.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Checks if one of this slot's characters can accept a value.
     * @param index The index of the character to query.
     * @param char The value to query.
     * @param force Whether the character should be forced to accept a value that would normally be invalid. Defaults to
     * `false`.
     * @returns Whether the character can accept the specified value.
     * @throws RangeError if `index` is out of bounds.
     */
    canSetChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Sets the selection mode for one of this slot's characters.
     * @param index The index of the character for which to set a selection mode.
     * @param mode A character selection mode.
     * @throws RangeError if `index` is out of bounds.
     */
    setCharSelected(index: number, mode: CursorInputCharSelectionMode): void;
    /**
     * Populates all of this slot's characters with non-empty values, if possible, using this slot's current value as a
     * template.
     */
    populateCharsFromValue(): void;
    /**
     * Gets the x coordinate, in pixels, of the left edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The x coordinate, in pixels, of the left edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getLeft(): number;
    /**
     * Gets the x coordinate, in pixels, of the right edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The x coordinate, in pixels, of the right edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getRight(): number;
    /**
     * Gets the width, in pixels, of this slot's border box.
     * @returns The width, in pixels, of this slot's border box.
     */
    getWidth(): number;
    /**
     * Gets the y coordinate, in pixels, of the top edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The y coordinate, in pixels, of the top edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getTop(): number;
    /**
     * Gets the y coordinate, in pixels, of the bottom edge of this slot's border box, relative to its nearest positioned
     * ancestor.
     * @returns The y coordinate, in pixels, of the bottom edge of this slot's border box, relative to its nearest
     * positioned ancestor.
     */
    getBottom(): number;
    /**
     * Gets the height, in pixels, of this slot's border box.
     * @returns The height, in pixels, of this slot's border box.
     */
    getHeight(): number;
    /**
     * Gets the x coordinate, in pixels, of the left edge of the border box of one of this slot's characters, relative
     * to this slot's nearest positioned ancestor.
     * @param index The index of the character to query.
     * @returns The x coordinate, in pixels, of the left edge of the border box of one of the specified character,
     * relative to this slot's nearest positioned ancestor.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharLeft(index: number): number;
    /**
     * Gets the x coordinate, in pixels, of the right edge of the border box of one of this slot's characters, relative
     * to this slot's nearest positioned ancestor.
     * @param index The index of the character to query.
     * @returns The x coordinate, in pixels, of the right edge of the border box of one of the specified character,
     * relative to this slot's nearest positioned ancestor.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharRight(index: number): number;
    /**
     * Gets the width, in pixels, of one of this slot's characters.
     * @param index The index of the character to query.
     * @returns The width, in pixels, of one of the specified character.
     * @throws RangeError if `index` is out of bounds.
     */
    getCharWidth(index: number): number;
}
/**
 * Component props for GenericCursorInputSlot.
 */
export interface GenericCursorInputSlotProps<T> extends ComponentProps {
    /** Whether the slot supports backfill operations. */
    allowBackfill: boolean | Subscribable<boolean>;
    /** The number of characters contained in the slot. */
    characterCount: number;
    /**
     * A function which parses a slot value from individual character values.
     * @param characters An array of character values. The order of the values is the same as the order of the characters
     * in the slot (from left to right).
     * @returns The slot value parsed from the specified character values.
     */
    parseValue: (characters: readonly (string | null)[]) => T;
    /**
     * A function which assigns values to individual characters from a slot value.
     * @param value A slot value.
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     */
    digitizeValue: (value: T, setCharacters: readonly ((char: string | null) => void)[], characters: readonly (string | null)[]) => void;
    /**
     * A function which checks if two slot values are equal. If not defined, equality is checked using the strict
     * equality operator (`===`).
     */
    valueEquals?: (a: T, b: T) => boolean;
    /**
     * A function which renders a character value into a string.
     * @param charToRender The character to render.
     * @param index The index of the character to render.
     * @param characters An array of the slot's character values.
     */
    renderChar: (charToRender: string | null, index: number, characters: readonly (string | null)[]) => string;
    /**
     * A function which increments the slot value.
     * @param value The slot's current value.
     * @param setValue A function which sets the slot's value.
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @returns Whether the operation was accepted.
     */
    incrementValue: (value: T, setValue: (value: T) => void, characters: readonly (string | null)[], setCharacters: readonly ((char: string | null) => void)[]) => boolean;
    /**
     * A function which decrements the slot value.
     * @param value The slot's current value.
     * @param setValue A function which sets the slot's value.
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @returns Whether the operation was accepted.
     */
    decrementValue: (value: T, setValue: (value: T) => void, characters: readonly (string | null)[], setCharacters: readonly ((char: string | null) => void)[]) => boolean;
    /**
     * A function which sets the value of a slot character, and returns whether the operation was accepted.
     */
    setChar: (characters: readonly MutableSubscribable<string | null>[], index: number, charToSet: string | null, force: boolean) => boolean;
    /**
     * A function which checks if a slot character can accept a value.
     */
    canSetChar: (characters: readonly (string | null)[], index: number, charToSet: string | null, force: boolean) => boolean;
    /** CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A generic implementation of {@link CursorInputSlot} whose behavior is largely defined though props.
 */
export declare class GenericCursorInputSlot<T, P extends GenericCursorInputSlotProps<T> = GenericCursorInputSlotProps<T>> extends DisplayComponent<P> implements CursorInputSlot<T> {
    private static readonly RESERVED_CSS_CLASSES;
    /** @inheritdoc */
    readonly isCursorInputSlot = true;
    /** @inheritdoc */
    get allowBackfill(): boolean;
    /** @inheritdoc */
    readonly characterCount: number;
    protected readonly rootRef: import("@microsoft/msfs-sdk").NodeReference<HTMLDivElement>;
    protected readonly characterRefs: import("@microsoft/msfs-sdk").NodeReference<HTMLDivElement>[];
    protected readonly characterCssClasses: SetSubject<string>[];
    protected readonly characterArray: Subject<string | null>[];
    protected readonly characterSetFuncs: ((value: string | null) => void)[];
    protected readonly _characters: MappedSubject<(string | null)[], readonly (string | null)[]>;
    /** @inheritdoc */
    readonly characters: Subscribable<readonly (string | null)[]>;
    protected readonly charactersText: import("@microsoft/msfs-sdk").MappedSubscribable<string>[];
    protected readonly isEmpty: import("@microsoft/msfs-sdk").MappedSubscribable<boolean>[];
    protected readonly selectionMode: Subject<CursorInputCharSelectionMode>[];
    protected readonly valueEqualsFunc: (a: T, b: T) => boolean;
    protected readonly _value: import("@microsoft/msfs-sdk").MappedSubscribable<T>;
    /** @inheritdoc */
    readonly value: Subscribable<T>;
    protected readonly setValueFunc: (value: T) => T;
    private cssClassSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    setValue(value: T): T;
    /** @inheritdoc */
    incrementValue(): boolean;
    /** @inheritdoc */
    decrementValue(): boolean;
    /** @inheritdoc */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    canSetChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    setCharSelected(index: number, mode: CursorInputCharSelectionMode): void;
    /** @inheritdoc */
    populateCharsFromValue(): void;
    /** @inheritdoc */
    getLeft(): number;
    /** @inheritdoc */
    getRight(): number;
    /** @inheritdoc */
    getWidth(): number;
    /** @inheritdoc */
    getTop(): number;
    /** @inheritdoc */
    getBottom(): number;
    /** @inheritdoc */
    getHeight(): number;
    /** @inheritdoc */
    getCharLeft(index: number): number;
    /** @inheritdoc */
    getCharRight(index: number): number;
    /** @inheritdoc */
    getCharWidth(index: number): number;
    /**
     * Recomputes this slot's value from its characters and re-renders all characters.
     */
    refreshFromChars(): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=CursorInputSlot.d.ts.map