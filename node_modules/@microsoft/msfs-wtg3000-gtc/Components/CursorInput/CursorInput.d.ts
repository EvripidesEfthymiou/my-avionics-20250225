import { ComponentProps, DisplayComponent, MutableSubscribable, Subscribable, SubscribableSet, SubscribableType, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
import { CursorInputSlot } from './CursorInputSlot';
import './CursorInput.css';
/**
 * Component props for CursorInput.
 */
export interface CursorInputProps<M extends MutableSubscribable<any>> extends ComponentProps {
    /**
     * A mutable subscribable to bind to the input's composite value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    value: M;
    /**
     * A function which parses the input's individual slot values to generate a composite value.
     * @param slotValues An array of the bound values of the input's individual slots. The order of the values is the
     * same as the order of the slots in the input (from left to right).
     * @returns The composite value parsed from the specified slot values.
     */
    parseValue: (slotValues: readonly any[]) => SubscribableType<M>;
    /**
     * A function which assigns values to the input's individual slots based on a composite value.
     * @param value A composite value.
     * @param setSlotValues An array of functions which set the values of the input's individual slots. The order of the
     * functions is the same as the order of the their associated slots in the input (from left to right).
     * @param slotValues An array containing the current values of the input's individual slots. The order of the values
     * is the same as the order of the slots in the input (from left to right).
     */
    digitizeValue: (value: SubscribableType<M>, setSlotValues: readonly ((slotValue: any) => void)[], slotValues: readonly any[]) => void;
    /**
     * A function which checks if two composite values are equal.
     */
    valueEquals?: (a: SubscribableType<M>, b: SubscribableType<M>) => boolean;
    /**
     * Whether to allow backfill of character positions. If `true`, when directly inserting values into the last
     * character position, any existing values will be shifted to the left as long as there are empty positions to
     * accommodate them.
     */
    allowBackFill: boolean;
    /**
     * Checks whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters. Ignored if `allowBackFill` is `false`. If not defined, the designated character slot
     * will accept shifted characters if and only if its current character value is `null`.
     * @param char The current character in the designated character slot.
     * @param slot The designated character slot's parent input slot.
     * @returns Whether the designated character slot into which characters will shift during a backfill operation can
     * accept shifted characters.
     */
    canShiftForBackfill?: (char: string | null, slot: CursorInputSlot<any>) => boolean;
    /**
     * The character index to initially select with the cursor when editing is activated. If not defined, the initial
     * index will default to the last index if backfill is allowed and cursor selection is in per-character mode, or
     * the first index (`0`) otherwise.
     */
    initialEditIndex?: number | Subscribable<number>;
    /**
     * A function or {@link VNode} which renders the input's value when editing is not active. If defined, the rendered
     * inactive value replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: VNode | ((value: SubscribableType<M>) => string | VNode);
    /** CSS class(es) to apply to the component's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An input display with a scrolling cursor.
 *
 * Each input has zero or more child slots of type {@link CursorInputSlot} (though to be practically useful, at least
 * one slot is required). When editing is active, the input's cursor selects either one slot or one character (a slot
 * may have more than one character) at a time. The input supports incrementing or decrementing the value of a
 * selected slot, or directly setting/deleting the value of a selected character.
 *
 * Each input is bound to a composite value. This value is computed from the values of the input's individual slots,
 * and vice versa, so that changes in either will be reflected in the other.
 */
export declare class CursorInput<M extends MutableSubscribable<any>> extends DisplayComponent<CursorInputProps<M>> {
    private static readonly RESERVED_CLASSES;
    private readonly slotsContainerRef;
    private readonly cursorRef;
    private readonly inactiveRef;
    private readonly activeStyle;
    private readonly inactiveStyle;
    private readonly cursorStyle;
    private readonly rootCssClass;
    private readonly initialEditIndex;
    private slotsRootNode?;
    private readonly charPositions;
    private readonly slots;
    private readonly slotValueArray;
    private slotValueSetFuncs?;
    private readonly valueEqualsFunc;
    private slotsState?;
    private value?;
    private readonly canShiftForBackfillFunc;
    private readonly renderInactiveValueFunc;
    private renderedInactiveValue;
    /** -1 When it should highlight the whole input. */
    private readonly _cursorPosition;
    /** The index of the character position currently selected by this input's cursor. */
    readonly cursorPosition: Subscribable<number>;
    private readonly _isEditingActive;
    /** Whether editing is active for this input. */
    readonly isEditingActive: Subscribable<boolean>;
    private readonly _isSelectionPerSlot;
    /** Whether this input's cursor selection mode is per-slot. */
    readonly isSelectionPerSlot: Subscribable<boolean>;
    private readonly selectedCharIndexes;
    private readonly cursorUpdateTimer;
    private isInit;
    private cssClassSub?;
    private valuePipeOut?;
    private inactiveValueSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the composite value of this input. As part of the operation, all of this input's child slots will have their
     * values set according to this input's value digitizer, and all slot characters will be set to non-null
     * representations of their slot's value, if possible. The composite value of this input after the operation is
     * complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this input.
     * @param value The new composite value.
     * @returns The composite value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setValue(value: SubscribableType<M>): SubscribableType<M>;
    /**
     * Updates this input's rendered editing-inactive value. If editing is currently active, the rendered editing-
     * inactive value will be hidden. If editing is not active, it will be displayed and updated to reflect this input's
     * current value.
     */
    private updateInactiveDisplay;
    /**
     * Cleans up this input's rendered editing-inactive value, destroying any top-level DisplayComponents that are part
     * of the rendered value's VNode tree.
     */
    private cleanUpRenderedInactiveValue;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @param charToSet The value to set at the cursor's selected character position as the initial edit. If defined
     * and the character position cannot accept the value, editing will not be activated. Ignored if `isSelectionPerSlot`
     * is `true`.
     * @returns Whether editing is active.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean, charToSet?: string | null): boolean;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Moves the cursor right, if possible.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     */
    private moveCursorRight;
    /**
     * Moves the cursor left, if possible.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     */
    private moveCursorLeft;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @returns Whether the value of the slot was changed.
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): boolean;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value (unless the selected character cannot accept the value, in which case the
     * operation will be aborted). If cursor selection is in per-slot mode, it will be forced to per-character mode,
     * and the first character of the slot will be selected before setting the value. If the cursor is past the last
     * slot, this method does nothing.
     * @param value The value to set.
     * @returns Whether the operation was accepted.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): boolean;
    /**
     * Inserts a value into a character position and starts a backfill operation. Any existing character values are
     * shifted one position to the left as long as there is room.
     * @param charPosIndex The character position at which to insert the value.
     * @param valueToInsert The value to insert.
     * @returns Whether after the current operation is complete, a backfill operation will still be possible when
     * inserting a value into the same character position.
     */
    private backfillValues;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @param selectionPerSlot The selection per slot state to apply before carrying out the backspace operation. If not
     * defined, the selection per slot state will remain unchanged from its current value.
     * @throws Error if this input is not initialized.
     */
    backspace(selectionPerSlot?: boolean): void;
    /**
     * Finds the index of the left-most character position that is connected to a given character position (including
     * itself) by an unbroken chain of positions supporting backfill.
     * @param fromCharPosIndex The index of the query character position.
     * @returns The index of the left-most character position that is connected to a given character position (including
     * itself) by an unbroken chain of positions supporting backfill.
     */
    private findLeftMostBackfillCharPosIndex;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Moves the cursor to the correct position.
     */
    private updateCursorPosition;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=CursorInput.d.ts.map