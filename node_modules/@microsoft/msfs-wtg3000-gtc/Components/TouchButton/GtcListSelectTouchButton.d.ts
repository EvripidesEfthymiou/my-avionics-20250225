import { DisplayComponent, MutableSubscribable, MutableSubscribableInputType, VNode } from '@microsoft/msfs-sdk';
import { GtcService, GtcViewOcclusionType } from '../../GtcService/GtcService';
import { GtcListDialogParams } from '../../Dialog/GtcListDialog';
import { GtcValueTouchButtonProps } from './GtcValueTouchButton';
/**
 * Component props for GtcListSelectTouchButton.
 */
export interface GtcListSelectTouchButtonProps<S extends MutableSubscribable<any, any>> extends Omit<GtcValueTouchButtonProps<S>, 'state' | 'onPressed' | 'gtcOrientation'> {
    /** The GTC service. */
    gtcService: GtcService;
    /** The key of the GTC list dialog the button will open as a selection list. */
    listDialogKey: string;
    /** The occlusion type applied to views beneath the popup. Defaults to `'darken'`. */
    occlusionType?: GtcViewOcclusionType;
    /** A mutable subscribable whose state will be bound to the button. */
    state: S;
    /**
     * When true, the button will be highlighted while the list is open, and the isHighlighted prop will be ignored.
     * Defaults to false.
     */
    highlightButtonWhileListIsOpen?: boolean;
    /**
     * Parameters to pass to the selection list dialog, or a function which will return the parameters when called each
     * time the list is opened.
     */
    listParams: GtcListDialogParams<MutableSubscribableInputType<S>> | ((state: S) => GtcListDialogParams<MutableSubscribableInputType<S>>);
    /**
     * A callback function which will be called every time a value is selected from the list. If not defined, selecting
     * a value from the list will automatically set the button's bound state.
     */
    onSelected?: <B extends GtcListSelectTouchButton<S> = GtcListSelectTouchButton<S>>(value: MutableSubscribableInputType<S>, state: S, button: B) => void;
    /**
     * A callback function which will be when the list was opened, and then cancelled.
     */
    onCancelled?: <B extends GtcListSelectTouchButton<S> = GtcListSelectTouchButton<S>>(state: S, button: B) => void;
}
/**
 * A touchscreen button which displays the value of a bound state and when pressed, opens a selection list dialog to
 * optionally set the value of the bound state.
 *
 * The button uses a {@link ValueTouchButton} for rendering and touch functionality. All children are rendered as
 * children of the `ValueTouchButton`.
 */
export declare class GtcListSelectTouchButton<S extends MutableSubscribable<any>> extends DisplayComponent<GtcListSelectTouchButtonProps<S>> {
    private readonly buttonRef;
    private readonly isListOpen;
    private readonly listParamsFunc;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /**
     * The onPressed callback.
     * @param button The value touch button.
     * @param state The state.
     */
    private readonly onPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcListSelectTouchButton.d.ts.map