import { DisplayComponent, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { GtcWaypointDisplayProps } from '../Waypoint/GtcWaypointDisplay';
import { GtcTouchButtonProps } from './GtcTouchButton';
import './GtcWaypointButton.css';
/**
 * Component props for GtcWaypointButton.
 */
export interface GtcWaypointButtonProps extends Omit<GtcTouchButtonProps, 'label'>, GtcWaypointDisplayProps {
    /** The CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string>;
    /** Label to display on the button when waypoint is null. */
    nullLabel?: string | Subscribable<string>;
}
/**
 * A GTC button which displays the ident, name, and icon for a waypoint.
 */
export declare class GtcWaypointButton extends DisplayComponent<GtcWaypointButtonProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly buttonRef;
    private readonly displayRef;
    private readonly waypoint;
    private readonly nullLabel;
    private readonly classList;
    private readonly subs;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcWaypointButton.d.ts.map