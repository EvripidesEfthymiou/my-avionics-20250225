import { DisplayComponent, UserSettingManager, VNode } from '@microsoft/msfs-sdk';
import { DisplayPaneSettings } from '@microsoft/msfs-wtg3000-common';
import { GtcTouchButtonProps } from './GtcTouchButton';
import './GtcSelectedButton.css';
import './ImgTouchButton.css';
/**
 * Component props for GtcDesignatedPaneButton.
 */
export interface GtcDesignatedPaneButtonProps extends Omit<GtcTouchButtonProps, 'label' | 'onPressed'> {
    /** A manager of display pane settings for the display pane controlled by the button. */
    displayPaneSettingManager: UserSettingManager<DisplayPaneSettings>;
    /**
     * An iterable of keys for display pane views that, when set as the designated pane view for the button's display
     * pane, marks the button as selected.
     */
    selectedPaneViewKeys: Iterable<string>;
    /** The button's label when not selected. Also defines the label when selected if `selectedLabel` is not defined. */
    label?: string;
    /** The src of the button's image when not selected. Also defines the src when selected if `selectedImgSrc` is not defined. */
    imgSrc?: string;
    /** The button's label when selected. Defaults to the unselected label. */
    selectedLabel?: string;
    /** The src of the button's image when selected. Defaults to the unselected image src. */
    selectedImgSrc?: string;
    /**
     * A callback function which will be called every time the button is pressed. If not defined and
     * `getPaneViewKeyToSelect` is defined, the button will set the designated pane view and the displayed pane view to
     * the one returned by `getPaneViewKeyToSelect` when pressed and not selected.
     */
    onPressed?: (isSelected: boolean, button: GtcDesignatedPaneButton) => void;
    /**
     * A function which gets the key of the display pane view to set as the designated and displayed pane view when the
     * button is pressed and not considered to be selected. Ignored if `onPressed` is defined.
     */
    getPaneViewKeyToDesignate?: () => string;
    /**
     * A call back function which will be called every time the button is pressed and considered to be selected. Ignored
     * if `onPressed` is defined.
     */
    onPressedSelected?: (button: GtcDesignatedPaneButton) => void;
}
/**
 * A touchscreen button displaying a label and image whose state is dependent on the designated pane view of a display
 * pane. The button is considered selected when the designated pane view is one of a set of specified views. When
 * selected, the button is marked with a cyan border and optionally displays a different label and image. The button
 * can be configured to execute certain actions based on whether it is selected, including setting the designated and
 * displayed pane views to a specific view.
 */
export declare class GtcDesignatedPaneButton extends DisplayComponent<GtcDesignatedPaneButtonProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly buttonRef;
    private readonly rootCssClass;
    private readonly imgCssClass;
    private readonly selectedImgCssClass;
    private readonly paneKeys;
    private readonly isSelected;
    private readonly unselectedLabel;
    private readonly selectedLabel;
    private readonly label;
    private cssClassSub?;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcDesignatedPaneButton.d.ts.map