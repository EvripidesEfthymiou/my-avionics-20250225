import { DisplayComponent, FacilitySearchType, FacilityWaypoint, IntersectionFacility, NdbFacility, Subscribable, SubscribableSet, UserFacility, VNode, VorFacility } from '@microsoft/msfs-sdk';
import { AirportWaypoint, GarminFacilityWaypointCache } from '@microsoft/msfs-garminsdk';
import { GtcService } from '../../GtcService/GtcService';
import { GtcWaypointButtonProps } from './GtcWaypointButton';
/**
 * Waypoint search types supported by {@link GtcWaypointSelectButton}.
 */
export type WaypointSelectType = Extract<FacilitySearchType, FacilitySearchType.AllExceptVisual | FacilitySearchType.Airport | FacilitySearchType.Vor | FacilitySearchType.Ndb | FacilitySearchType.Intersection | FacilitySearchType.User>;
/**
 * A map from waypoint search types to waypoint types.
 */
export type WaypointSelectTypeMap = {
    /** All waypoints. */
    [FacilitySearchType.AllExceptVisual]: FacilityWaypoint;
    /** Airports. */
    [FacilitySearchType.Airport]: AirportWaypoint;
    /** VORs. */
    [FacilitySearchType.Vor]: FacilityWaypoint<VorFacility>;
    /** NDBs. */
    [FacilitySearchType.Ndb]: FacilityWaypoint<NdbFacility>;
    /** Intersections. */
    [FacilitySearchType.Intersection]: FacilityWaypoint<IntersectionFacility>;
    /** User waypoints. */
    [FacilitySearchType.User]: FacilityWaypoint<UserFacility>;
};
/**
 * Component props for GtcWaypointSelectButton.
 */
export interface GtcWaypointSelectButtonProps<T extends WaypointSelectType, S extends Subscribable<WaypointSelectTypeMap[T] | null>> extends Omit<GtcWaypointButtonProps, 'waypoint' | 'onPressed' | 'gtcOrientation'> {
    /** The GTC service. */
    gtcService: GtcService;
    /** The type of facility allowed to be selected by the button. */
    type: T;
    /** The waypoint state bound to the button. */
    waypoint: S;
    /** A cache used by the button to retrieve waypoints for facilities. */
    waypointCache: GarminFacilityWaypointCache;
    /**
     * A callback function which will be called every time a value is selected from the list. If not defined and the
     * button's bound waypoint state is a mutable subscribable, the bound state will be set to the selected waypoint.
     * @param selectedWaypoint The waypoint that was selected.
     * @param waypointState The waypoint state bound to the button.
     * @param button The button used to initiate the selection.
     */
    onSelected?: <B extends GtcWaypointSelectButton<T, S> = GtcWaypointSelectButton<T, S>>(selectedWaypoint: WaypointSelectTypeMap[T], waypointState: S, button: B) => void;
    /**
     * A callback function which will be called every time a waypoint selection from the button is cancelled.
     * @param button The button used to initiate the selection that was cancelled.
     * @param waypointState The waypoint state bound to the button.
     */
    onCancelled?: <B extends GtcWaypointSelectButton<T, S> = GtcWaypointSelectButton<T, S>>(button: B, waypointState: S) => void;
    /** The CSS class(es) to apply to the button's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A GTC button which displays the ident, name, and icon for a waypoint and when pressed allows the user to select
 * a facility waypoint by ident.
 */
export declare class GtcWaypointSelectButton<T extends WaypointSelectType, S extends Subscribable<WaypointSelectTypeMap[T] | null>> extends DisplayComponent<GtcWaypointSelectButtonProps<T, S>> {
    private static readonly DIALOG_LABEL_TEXT;
    private readonly buttonRef;
    private readonly mutableWaypoint;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcWaypointSelectButton.d.ts.map