import { DisplayComponent, UserSetting, UserSettingManager, UserSettingValueFilter, VNode } from '@microsoft/msfs-sdk';
import { UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
import { G3000MapUserSettingTypes } from '@microsoft/msfs-wtg3000-common';
import { GtcService } from '../../GtcService/GtcService';
import { GtcListSelectTouchButtonProps } from './GtcListSelectTouchButton';
/**
 * Component props for GtcMapRangeSelectButton.
 */
export interface GtcMapRangeSettingSelectButtonProps extends Omit<GtcListSelectTouchButtonProps<UserSetting<number>>, 'state' | 'listParams'> {
    /** The GTC service. */
    gtcService: GtcService;
    /** A manager for display units user settings. */
    unitsSettingManager: UnitsUserSettingManager;
    /** A manager for map user settings used to retrieve the displayed setting value. */
    mapReadSettingManager: UserSettingManager<G3000MapUserSettingTypes>;
    /** The name of the bound setting. */
    settingName: keyof UserSettingValueFilter<G3000MapUserSettingTypes, number>;
    /** The index of the smallest selectable map range, inclusive. */
    startIndex: number;
    /** The index of the largest selectable map range, inclusive. */
    endIndex: number;
    /**
     * A function which writes the selected value to the setting. If not defined, selected values will be written to
     * the setting retrieved from `mapReadSettingManager`.
     */
    writeToSetting?: <K extends keyof G3000MapUserSettingTypes & string>(settingName: K, value: NonNullable<G3000MapUserSettingTypes[K]>) => void;
    /** The title of the selection list dialog. */
    title?: string;
    /** CSS class(es) to apply to the selection list dialog when opened. */
    dialogCssClass?: string;
}
/**
 * A touchscreen button which displays the value of a map range setting and when pressed, opens a selection list dialog
 * to set the value of the setting.
 */
export declare class GtcMapRangeSettingSelectButton extends DisplayComponent<GtcMapRangeSettingSelectButtonProps> {
    private readonly buttonRef;
    private readonly writeToSetting;
    private readonly mapRangeArray;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcMapRangeSettingSelectButton.d.ts.map