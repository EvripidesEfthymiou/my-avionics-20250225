import { DisplayComponent, MutableSubscribable, VNode } from '@microsoft/msfs-sdk';
import { SetValueTouchButtonProps } from '@microsoft/msfs-garminsdk';
import { GtcOrientation } from '@microsoft/msfs-wtg3000-common';
/**
 * Component props for GtcSetValueTouchButton.
 */
export interface GtcSetValueTouchButtonProps<S extends MutableSubscribable<any>> extends SetValueTouchButtonProps<S> {
    /**
     * Whether the pad should focus all mouse events when dragging, preventing them from bubbling up to any ancestors
     * in the DOM tree. Defaults to `true`.
     */
    focusOnDrag?: boolean;
    /**
     * Whether the button is in a scrollable list. If `true`, will enable the inhibit on drag function unless otherwise
     * specified by the `inhibitOnDrag` prop. Defaults to `false`.
     */
    isInList?: boolean;
    /**
     * The scroll axis of the button's parent list. Ignored if `isInList` is `false`. Sets the button's inhibit on drag
     * axis unless otherwise specified by the `inhibitOnDragAxis` prop. Defaults to `y`.
     */
    listScrollAxis?: 'x' | 'y';
    /**
     * The orientation of the button's parent GTC. Used to set the button's inhibit on drag threshold unless otherwise
     * specified by the `dragThresholdPx` prop. Defaults to `'horizontal'`.
     */
    gtcOrientation?: GtcOrientation;
}
/**
 * A GTC version of {@link SetValueTouchButton}. Enables focus on drag by default, and provides convenience props for
 * handling drag behavior while in a scrollable list.
 */
export declare class GtcSetValueTouchButton<S extends MutableSubscribable<any>> extends DisplayComponent<GtcSetValueTouchButtonProps<S>> {
    private readonly ref;
    /**
     * Simulates this button being pressed. This will execute the `onPressed()` callback if one is defined.
     * @param ignoreDisabled Whether to simulate the button being pressed regardless of whether the button is disabled.
     * Defaults to `false`.
     */
    simulatePressed(ignoreDisabled?: boolean): void;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcSetValueTouchButton.d.ts.map