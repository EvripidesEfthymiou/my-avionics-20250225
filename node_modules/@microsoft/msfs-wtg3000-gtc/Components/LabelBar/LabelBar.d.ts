import { ComponentProps, DisplayComponent, SetSubject, Subscribable, VNode } from '@microsoft/msfs-sdk';
import { GtcService } from '../../GtcService/GtcService';
import './LabelBar.css';
/**
 * A set of plugin-defined functions which return labels to apply to the GTC label bar.
 */
export type LabelBarPluginHandlers = {
    /** A function which returns a GTC dual concentric knob label, or `null` to defer label generation. */
    dualKnobLabel?: (knobState: string) => string | null;
    /** A function which returns a GTC center knob label, or `null` to defer label generation. */
    centerKnobLabel?: (knobState: string) => string | null;
    /** A function which returns a GTC map knob label, or `null` to defer label generation. */
    mapKnobLabel?: (knobState: string) => string | null;
};
/**
 * Component props for LabelBar.
 */
export interface LabelBarProps extends ComponentProps {
    /** The GtcService. */
    gtcService: GtcService;
    /**
     * An array of plugin label handlers. The array should be ordered such that the handlers appear in the order in which
     * their parent plugins were loaded.
     */
    pluginHandlers: readonly Readonly<LabelBarPluginHandlers>[];
}
/**
 * A GTC label bar which displays text describing the context-sensitive functions of the GTC knobs.
 */
export declare class LabelBar extends DisplayComponent<LabelBarProps> {
    private readonly selectedPaneDisplayRef;
    private readonly selectedPaneIconColorRef;
    private readonly paneBoxRefs;
    private readonly dualKnobLabelRef;
    private readonly sidebarState;
    private readonly pilotOrCopilot;
    private readonly isHoz;
    private readonly dualKnobPluginHandlers;
    private readonly centerKnobPluginHandlers;
    private readonly mapKnobPluginHandlers;
    private readonly dualKnobLabel;
    private readonly centerKnobLabel;
    private readonly mapKnobLabel;
    private subs;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Updates the visibility of this label bar's display pane indicators.
     */
    private updatePaneIndicatorVisibility;
    /**
     * Responds to when the display pane selected by this label bar's parent GTC changes.
     * @param selectedPaneIndex The index of the new selected display pane, or `-1` if no pane is selected.
     */
    private onSelectedPaneChanged;
    /**
     * Updates one of this label bar's display pane availability indicators.
     * @param paneIndex The index of the display pane of the indicator to update.
     */
    private updatePaneAvailability;
    /**
     * Updates no pane selected.
     * @param selectedPaneIndex The index of the new selected display pane, or `-1` if no pane is selected.
     */
    private updateNoPaneSelected;
    /** @inheritDoc */
    render(): VNode;
}
/** The properties for the LabelBar component. */
interface LabelBarLabelProps extends ComponentProps {
    /** Whether the button is or not. Defaults to `true`. */
    readonly isVisible?: Subscribable<boolean>;
    /** Extra classes. */
    readonly class: readonly string[];
    /** Whether this label is active or not, only applies to the soft key labels. */
    readonly isActive?: Subscribable<boolean>;
}
/** The LabelBarLabel component. */
export declare class LabelBarLabel extends DisplayComponent<LabelBarLabelProps> {
    readonly classes: SetSubject<string>;
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    render(): VNode;
}
export {};
//# sourceMappingURL=LabelBar.d.ts.map