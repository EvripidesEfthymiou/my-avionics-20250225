import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { GtcOrientation } from '@microsoft/msfs-wtg3000-common';
import '../../Components/TouchButton/NumPadTouchButton.css';
import './NumberPad.css';
/** The properties for the NumberPad component. */
export interface NumberPadProps extends ComponentProps {
    /** A callback function to execute when a number pad button is pressed. */
    onNumberPressed?: (value: number) => void;
    /** A callback function to execute when the sign button is pressed. */
    onSignPressed?: () => void;
    /** A callback function to execute when the decimal button is pressed. */
    onDecimalPressed?: () => void;
    /** CSS class(es) to apply to the number pad's root element. */
    class?: string | SubscribableSet<string>;
    /** Whether the button is to be used in the vertical or horizontal orientation. */
    orientation: GtcOrientation;
    /** Whether to show the sign button. Defaults to `false`. */
    showSignButton?: Subscribable<boolean> | boolean;
    /** Whether to show the decimal button. Defaults to `false`. */
    showDecimalButton?: Subscribable<boolean> | boolean;
}
/**
 * A number pad with buttons for each integer from zero to nine, inclusive, and optional sign (`+/âˆ’`) and decimal
 * (`.`) buttons.
 */
export declare class NumberPad extends DisplayComponent<NumberPadProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly numButtonRefs;
    private readonly signButtonRef;
    private readonly decimalButtonRef;
    private readonly classList;
    private cssClassSub?;
    private showSignButtonSub?;
    private showDecimalButtonSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Responds to when one of this number pad's numeric buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    private onNumButtonPressed;
    /**
     * Responds to when this number pad's sign button is pressed.
     */
    private onSignButtonPressed;
    /**
     * Responds to when this number pad's decimal button is pressed.
     */
    private onDecimalButtonPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=NumberPad.d.ts.map