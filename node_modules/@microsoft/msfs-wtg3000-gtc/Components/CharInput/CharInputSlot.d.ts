import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
/**
 * Component props for CharInputSlot.
 */
export interface CharInputSlotProps extends ComponentProps {
    /**
     * An array of valid character values for the slot. The order of characters in the array determines the order in
     * which the slot will cycle through characters when incrementing/decrementing its value.
     */
    charArray: readonly string[];
    /**
     * Whether the slot should wrap from the last valid character to the first valid character and vice-versa when
     * incrementing/decrementing its value.
     */
    wrap: boolean | Subscribable<boolean>;
    /** The default character value for the slot when the character value is `null`. */
    defaultCharValue: string | Subscribable<string>;
    /**
     * A function which renders slot characters into string. If not defined, non-null characters will be rendered as-is,
     * and null characters will be rendered according to the default value assigned to that character.
     */
    renderChar?: (character: string | null, index: number) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * A cursor input slot which allows the user to select a single arbitrary character.
 */
export declare class CharInputSlot extends DisplayComponent<CharInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly defaultCharValue;
    private readonly parseValue;
    private readonly digitizeValue;
    private readonly renderChar;
    private readonly wrap;
    /** The value bound to this slot. */
    get value(): Subscribable<string>;
    private allowEmptyValue;
    private readonly subscriptions;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets whether this slot should allow its value to be set to the empty string. Disallowing empty string values will
     * not cause this slot's current value to change, even if the current value is the empty string.
     * @param allow Whether this slot should allow its value to be set to the empty string.
     */
    setAllowEmptyValue(allow: boolean): void;
    /**
     * Sets the value of this slot. As part of the operation, this slot's character will be set to a non-null
     * representation of the new value, if possible. The value of this slot after the operation is complete may differ
     * from the requested value depending on whether the requested value can be accurately represented by this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: string): string;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of this slot's character.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(char: string | null, force?: boolean): boolean;
    /**
     * Changes this slot's value in a specified direction.
     * @param direction The direction in which to change the value.
     * @param value This slot's current value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=CharInputSlot.d.ts.map