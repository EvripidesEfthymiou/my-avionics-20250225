import { ComponentProps, DisplayComponent, MutableSubscribable, Subscribable, SubscribableSet, ToggleableClassNameRecord, VNode } from '@microsoft/msfs-sdk';
/**
 * Component props for CharInput.
 */
export interface CharInputProps extends ComponentProps {
    /**
     * A mutable subscribable to bind to the input's composite value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    value: MutableSubscribable<string>;
    /** The character index to initially select with the cursor when editing is activated. Defaults to `0`. */
    initialEditIndex?: number;
    /**
     * A function or {@link VNode} which renders the input's value when editing is not active. If defined, the rendered
     * inactive value replaces all rendered child components when editing is not active.
     */
    renderInactiveValue?: VNode | ((value: string) => string | VNode);
    /**
     * Whether to force the input's character slots to accept otherwise invalid characters when setting the input's
     * composite value. Defaults to `false`.
     */
    forceSetValue?: boolean;
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string> | ToggleableClassNameRecord;
}
/**
 * An input with a scrolling cursor that allows users to select an arbitrary string. The composite value bound to the
 * input is derived from the in-order concatenation of the values of all child `CharInputSlot` components.
 */
export declare class CharInput extends DisplayComponent<CharInputProps> {
    private static readonly LAST_NON_EMPTY_SLOT_INDEX;
    private readonly inputRef;
    private readonly value;
    private readonly slots;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private isInit;
    private valuePipeOut?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Updates whether each of this input's slots should allow empty values.
     * @param lastNonEmptySlotIndex The index of the last slot with a non-empty value.
     */
    private updateAllowEmptySlotValues;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the composite value of this input. As part of the operation, all of this input's child slots will have their
     * values set according to this input's value digitizer, and all slot characters will be set to non-null
     * representations of their slot's value, if possible. The composite value of this input after the operation is
     * complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this input.
     * @param value The new composite value.
     * @returns The composite value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setValue(value: string): string;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, then it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, then this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @param eraseCharsToRightOnEdit Whether to erase (set to `null`) all characters to the right of the edited
     * character. Defaults to `false`.
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1, eraseCharsToRightOnEdit?: boolean): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, then it will be
     * activated before setting the value. If the cursor is past the last slot, then this method does nothing.
     * @param value The value to set.
     * @param eraseCharsToRightOnEdit Whether to erase (set to `null`) all characters to the right of the edited
     * character. Defaults to `false`.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string, eraseCharsToRightOnEdit?: boolean): void;
    /**
     * Removes the character at the cursor's current position and shifts the cursor one position to the left after the
     * character is removed.
     * @throws Error if this input is not initialized.
     */
    backspace(): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Parses a composite value from this input's individual slots.
     * @returns The composite value represented by this input's individual slots.
     */
    private parseValue;
    /**
     * Digitizes a composite value into individual slot values to assign to this input's slots.
     * @param value The value to digitize.
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=CharInput.d.ts.map