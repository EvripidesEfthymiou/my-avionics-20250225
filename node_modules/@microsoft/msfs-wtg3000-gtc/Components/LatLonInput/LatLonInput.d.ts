import { ComponentProps, DisplayComponent, LatLonInterface, MutableSubscribable, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { LatLonDisplayFormat } from '@microsoft/msfs-garminsdk';
import './LatLonInput.css';
/**
 * Display formats for {@link LatLonInput} supported by the G3000.
 */
export type G3000LatLonDisplayFormat = LatLonDisplayFormat.HDDD_MMmm | LatLonDisplayFormat.HDDD_MM_SSs;
/**
 * Component props for LatLonInput.
 */
export interface LatLonInputProps extends ComponentProps {
    /** The format supported by the input. */
    format: G3000LatLonDisplayFormat;
    /**
     * A mutable subscribable to bind to the input's latitude/longitude value. The binding is one-way: changes in the
     * input value will be piped to the subscribable, but changes in the subscribable's value will not trigger any
     * changes to the input.
     */
    latLon: MutableSubscribable<LatLonInterface>;
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string>;
}
/**
 * An input with a scrolling cursor which allows users to select a set of latitude/longitude coordinates.
 */
export declare class LatLonInput extends DisplayComponent<LatLonInputProps> {
    private static readonly FORMAT_PARAMS;
    private static readonly SCALED_VALUE_EQUALS;
    private static readonly RESERVED_CSS_CLASSES;
    private readonly inputRef;
    private readonly params;
    private readonly scaledValue;
    private readonly unscaledValue;
    private cssClassSub?;
    private valuePipeOut?;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private isInit;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the latitude/longitude values of this input. As part of the operation, all of this input's characters will be
     * set to non-null representations of the new values, if possible. The latitude/longitude values of this input after
     * the operation is complete may differ from the requested values depending on whether the requested values can be
     * accurately represented by this input.
     * @param latLon The new latitude/longitude values.
     * @returns The latitude/longitude values of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setLatLon(latLon: LatLonInterface): Readonly<LatLonInterface>;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Places the cursor at a specific character position.
     * @param index The index of the character position at which to place the cursor.
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     * @throws RangeError if `index` does not point to a valid character position.
     */
    placeCursor(index: number, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value. If cursor selection is in per-slot mode, it will be forced to per-character
     * mode, and the first character of the slot will be selected before setting the value. If the cursor is past the
     * last slot, this method does nothing.
     * @param value The value to set.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): void;
    /**
     * Sets the sign of this input's latitude value, and places the cursor at the character position immediately after
     * the latitude sign character.
     * @param sign The sign to set.
     * @throws Error if this input is not initialized.
     */
    setLatSign(sign: 1 | -1): void;
    /**
     * Sets the sign of this input's longitude value, and places the cursor at the character position immediately after
     * the longitude sign character.
     * @param sign The sign to set.
     * @throws Error if this input is not initialized.
     */
    setLonSign(sign: 1 | -1): void;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @throws Error if this input is not initialized.
     */
    backspace(): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Parses latitude/longitude values from this input's individual slots.
     * @param slotValues The values of this input's slots.
     * @returns The latitude/longitude values represented by this input's slots.
     */
    private parseValue;
    /**
     * Digitizes latitude/longitude values into individual values to assign to this input's slots.
     * @param value The value to digitize.
     * @param setSlotValues An array of functions which set the values of this input's individual slots. The order of the
     * functions is the same as the order of the their associated slots in this input (from left to right).
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this input's slots.
     * @returns This input's slots, as a VNode.
     */
    private renderSlots;
    /**
     * Renders slots for the HDDD MM.mm format.
     * @returns Slots for the HDDD MM.mm format, as a VNode.
     */
    private renderHDDDMMmmSlots;
    /**
     * Renders slots for the HDDD MM SS.s format.
     * @returns Slots for the HDDD MM SS.s format, as a VNode.
     */
    private renderHDDDMMSSsSlots;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=LatLonInput.d.ts.map