import { ComponentProps, DisplayComponent, MutableSubscribable, RadioType, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
import { GtcInteractionEvent, GtcInteractionHandler } from '../../GtcService/GtcInteractionEvent';
import { ChannelSpacing } from './ChannelInputSlot';
import './FrequencyInput.css';
/**
 * Component props for FrequencyInput.
 */
export interface FrequencyInputProps extends ComponentProps {
    /**
     * The radio type supported by the input. This determines the range of frequencies and the frequency spacing accepted
     * by the input as follows:
     * * NAV: 108.00 to 117.95 Mhz, 50 Khz spacing.
     * * COM: 118.00 to 136.99 Mhz, 25 or 8.33 Khz spacing.
     * * ADF: 190.0 to 1799.5 Khz, 0.5 Khz spacing.
     */
    radioType: RadioType;
    /** The COM channel spacing to use. Ignored if `radioType` is not `RadioType.Com`. Defaults to 25 Khz. */
    comChannelSpacing?: ChannelSpacing.Spacing25Khz | ChannelSpacing.Spacing8_33Khz;
    /**
     * A mutable subscribable to bind to the input's frequency value. The binding is one-way: changes in the input value
     * will be piped to the subscribable, but changes in the subscribable's value will not trigger any changes to the
     * input.
     */
    frequency: MutableSubscribable<number>;
    /** CSS class(es) to apply to the root of the component. */
    class?: string | SubscribableSet<string>;
}
/**
 * An input with a scrolling cursor which allows users to select a radio frequency.
 */
export declare class FrequencyInput extends DisplayComponent<FrequencyInputProps> implements GtcInteractionHandler {
    private static readonly DEFAULT_ZERO;
    private static readonly DEFAULT_ONE;
    private static readonly DEFAULT_EIGHT;
    private static readonly DEFAULT_NINE;
    private static readonly PRECISION;
    private static readonly BASE_FREQ_PARAMS;
    private readonly inputRef;
    private readonly channelSlotRef;
    private readonly comHundredMhzSlotRef;
    private readonly comHundredMhzSlotCssClass;
    private readonly navComTenMhzSlotRef;
    private readonly adfOneMhzSlotRef;
    private readonly adfHundredKhzSlotRef;
    private readonly navComOneMhzSlotMin;
    private readonly navComOneMhzSlotMax;
    private readonly navComOneMhzSlotDefault;
    private readonly adfHundredKhzSlotMin;
    private readonly adfHundredKhzSlotMax;
    private readonly adfHundredKhzSlotDefault;
    private readonly adfTenKhzSlotMin;
    private readonly adfTenKhzSlotMax;
    private readonly adfTenKhzSlotDefault;
    private readonly precision;
    private readonly baseFreqParams;
    private readonly digitSlots;
    /**
     * The base frequency value represented by this input's digit slots. The base frequency value is the truncated
     * megahertz component of the frequency for nav and com radios, and the truncated kilohertz component for ADF radios.
     */
    private readonly inputBaseValue;
    private frequency?;
    private freqPipeOut?;
    /** The index of the character position currently selected by this input's cursor. */
    get cursorPosition(): Subscribable<number>;
    /** Whether editing is active for this input. */
    get isEditingActive(): Subscribable<boolean>;
    /** Whether this input's cursor selection mode is per-slot. */
    get isSelectionPerSlot(): Subscribable<boolean>;
    private comAutoShiftArmed;
    private isInit;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /**
     * Checks whether this input is initialized.
     * @returns Whether this input is initialized.
     */
    isInitialized(): boolean;
    /**
     * Sets the frequency value of this slot. As part of the operation, all of this slot's characters will be set to
     * non-null representations of the new slot value, if possible. The frequency value of this slot after the operation
     * is complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this slot.
     * @param freq The new frequency value, in hertz.
     * @returns The frequency value of this input after the operation is complete.
     * @throws Error if this input is not initialized.
     */
    setFrequency(freq: number): number;
    /**
     * Activates editing for this input.
     * @param isSelectionPerSlot Whether cursor selection should be initialized to per-slot mode. If `false`, cursor
     * selection will be initialized to per-character mode instead.
     * @throws Error if this input is not initialized.
     */
    activateEditing(isSelectionPerSlot: boolean): void;
    /**
     * Deactivates editing for this input.
     * @throws Error if this input is not initialized.
     */
    deactivateEditing(): void;
    /**
     * Moves the cursor.
     * @param direction The direction in which to move (`1` = to the right, `-1` = to the left).
     * @param forceSelectionPerSlot Whether to force cursor selection to per slot mode.
     * @throws Error if this input is not initialized.
     */
    moveCursor(direction: 1 | -1, forceSelectionPerSlot: boolean): void;
    /**
     * Increments or decrements the value of the slot currently selected by the cursor. If editing is not active, it
     * will be activated instead of changing any slot value. If cursor selection is in per-character mode, it will be
     * forced to per-slot mode. If the cursor is past the last slot, this method does nothing.
     * @param direction The direction in which to change the slot value (`1` = increment, `-1` = decrement).
     * @throws Error if this input is not initialized.
     */
    changeSlotValue(direction: 1 | -1): void;
    /**
     * Sets the value of the slot character currently selected by the cursor. If editing is not active, it will be
     * activated before setting the value. If cursor selection is in per-slot mode, it will be forced to per-character
     * mode, and the first character of the slot will be selected before setting the value. If the cursor is past the
     * last slot, this method does nothing.
     * @param value The value to set.
     * @throws Error if this input is not initialized.
     */
    setSlotCharacterValue(value: string): void;
    /**
     * Removes the character at the cursor's current position. If backfill is allowed, this will also shift all non-empty
     * characters to the left of the cursor's current position one position to the right. If backfill is not allowed,
     * this will shift the cursor one position to the left after the character is removed.
     * @throws Error if this input is not initialized.
     */
    backspace(): void;
    /**
     * Populates all of this input's character positions with non-empty values, if possible, using this input's value
     * digitizer function and the current composite value as a template.
     */
    populateCharsFromValue(): void;
    /**
     * Refreshes this input, updating the size and position of the cursor.
     */
    refresh(): void;
    /**
     * Arms this input's COM auto-shift function. When armed, and the user attempts to enter a '1', '2', '3' after
     * entering a '1' into the ten Mhz slot, the digit will be entered into the ten Mhz slot instead of the one Mhz
     * slot.
     */
    private armComAutoShift;
    /**
     * Disarm's this input's COM auto-shift function.
     */
    private disarmComAutoShift;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Changes this input's base frequency value by a specified amount.
     * @param delta The amount by which to change the value.
     */
    private changeBaseFreqValue;
    /**
     * Parses a base frequency value from this input's individual digit slots.
     * @param slotValues The values of this input's individual input slots.
     * @returns The base frequency value represented by this input's digit slots.
     */
    private parseValue;
    /**
     * Digitizes a base frequency value into individual values to assign to this input's digit slots.
     * @param value The value to digitize.
     */
    private digitizeValue;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this input's slots.
     * @returns This input's slots, as a VNode.
     */
    private renderSlots;
    /**
     * Renders slots for nav radio frequencies.
     * @returns Slots for nav radio frequencies, as a VNode.
     */
    private renderNavSlots;
    /**
     * Renders slots for com radio frequencies.
     * @returns Slots for com radio frequencies, as a VNode.
     */
    private renderComSlots;
    /**
     * Renders slots for ADF radio frequencies.
     * @returns Slots for ADF radio frequencies, as a VNode.
     */
    private renderAdfSlots;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=FrequencyInput.d.ts.map