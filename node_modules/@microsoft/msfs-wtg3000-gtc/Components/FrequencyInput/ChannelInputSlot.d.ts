import { ComponentProps, DisplayComponent, Subscribable, VNode } from '@microsoft/msfs-sdk';
/**
 * Channel spacing modes supported by {@link ChannelInputSlot}.
 */
export declare enum ChannelSpacing {
    Spacing50Khz = "50Khz",
    Spacing25Khz = "25Khz",
    Spacing8_33Khz = "8.33Khz",
    Spacing500Hz = "500Hz"
}
/**
 * Component props for ChannelInputSlot.
 */
export interface ChannelInputSlotProps extends ComponentProps {
    /** The channel spacing supported by the slot. */
    spacing: ChannelSpacing;
}
/**
 * A cursor input slot which allows the user to select a radio frequency channel.
 */
export declare class ChannelInputSlot extends DisplayComponent<ChannelInputSlotProps> {
    private static readonly SPACING;
    private static readonly COM_833_BASE_CHAR_ARRAY;
    private static readonly CHAR_ARRAYS;
    private static readonly COM_833_BASE_FREQ_ARRAY;
    private static readonly FREQ_ARRAYS;
    private readonly slotRef;
    private readonly characterCount;
    private readonly spacing;
    private readonly charArray;
    private readonly freqArray;
    /** The number of unique channels supported by this slot. */
    readonly channelCount: number;
    /** This slot's channel value. */
    get value(): Subscribable<number>;
    private readonly _frequency;
    /** The frequency associated with this slot's channel value. */
    readonly frequency: Subscribable<number>;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the frequency value of this slot. As part of the operation, all of this slot's characters will be set to
     * non-null representations of the new slot value, if possible. The frequency value of this slot after the operation
     * is complete may differ from the requested value depending on whether the requested value can be accurately
     * represented by this slot.
     * @param freq The new frequency value, in hertz.
     * @returns The frequency value of this slot after the operation is complete.
     */
    setFrequency(freq: number): number;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Populates all of this slot's characters with non-empty values, if possible, using this slot's current value as a
     * template.
     */
    populateCharsFromValue(): void;
    /**
     * Changes this slot's value by a specified amount.
     * @param value This slot's value.
     * @param delta The amount by which to change the value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param characters This slot's current character values.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /**
     * Parses a channel value from individual character values.
     * @param characters An array of character values.
     * @returns The channel value parsed from the specified characters.
     */
    private parseValue;
    /**
     * Assigns values to individual characters from a channel value.
     * @param value A channel value.
     * @param setCharacters An array of functions which set this slot's character values. Each function is indexed
     * according to its associated character.
     */
    private digitizeValue;
    /**
     * Renders one of this slot's character value into a string.
     * @param charToRender The character to render.
     * @param index The index of the character to render.
     * @param characters An array of this slot's characters.
     * @returns The rendered character.
     */
    private renderChar;
    /**
     * Gets the default numeric value of one of this slot's characters.
     * @param characters An array of this slot's characters.
     * @param index The index of the character to query.
     * @returns The default numeric value of the specified character.
     */
    private getDefaultCharValue;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=ChannelInputSlot.d.ts.map