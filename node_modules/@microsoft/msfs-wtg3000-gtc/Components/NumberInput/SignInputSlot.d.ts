import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
/**
 * Component props for SignInputSlot.
 */
export interface SignInputSlotProps extends ComponentProps {
    /**
     * A function which renders a character value into a string.
     * @param charToRender The character to render.
     */
    renderChar?: (character: string | null) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A cursor input slot which allows the user to select a numeric sign, either `+1` or `-1`.
 */
export declare class SignInputSlot extends DisplayComponent<SignInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly renderChar;
    /** The value bound to this slot. */
    get value(): Subscribable<1 | -1>;
    private cssClassSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the value of this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: 1 | -1): 1 | -1;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=SignInputSlot.d.ts.map