import { ComponentProps, DisplayComponent, Subscribable, SubscribableSet, VNode } from '@microsoft/msfs-sdk';
/**
 * Component props for DigitInputSlot.
 */
export interface DigitInputSlotProps extends ComponentProps {
    /** Whether the slot supports backfill operations. Defaults to `true`. */
    allowBackfill?: boolean | Subscribable<boolean>;
    /** The number of characters in the slot. */
    characterCount: number;
    /** The minimum un-scaled value of the input, or a subscribable which provides it. */
    minValue: Subscribable<number> | number;
    /** The maximum un-scaled value of the input (exclusive if `wrap` is true), or a subscribable which provides it. */
    maxValue: Subscribable<number> | number;
    /**
     * The amount to increment/decrement the input's un-scaled value when the inner FMS knob is scrolled, or a
     * subscribable which provides it.
     */
    increment: Subscribable<number> | number;
    /** Whether the input should wrap from the max value to the min value, or a subscribable which provides it. */
    wrap: Subscribable<boolean> | boolean;
    /**
     * The scaling factor applied to this input's value, or a subscribable which provides it. The scaling factor
     * determines the relationship between this input's bound data value and the displayed value as follows:
     * `data_value = display_value * scale`. When the scaling factor changes, this input's displayed value is
     * preserved, and the bound data value is changed to reflect the new scaling factor.
     */
    scale: Subscribable<number> | number;
    /** The default numeric values for each of the slot's character positions when the character value is `null`. */
    defaultCharValues: readonly number[] | Subscribable<readonly number[]>;
    /**
     * A function which parses a slot value from individual character values. If not defined, characters will be parsed
     * as standard base-10 integers.
     * @param characters An array of character values. The order of the values is the same as the order of the characters
     * in the slot (from left to right).
     * @returns The slot value parsed from the specified character values.
     */
    parseValue?: (characters: readonly (string | null)[]) => number;
    /**
     * A function which assigns values to individual characters from a slot value. If not defined, values will be
     * digitized according to their standard base-10 string representations, with each character assigned to exactly one
     * base-10 digit ("0" through "9") in right-to-left order (the last character is assigned to the right-most digit,
     * the second-to-last character to the second right-most digit, etc, until there are no more characters or digits).
     * @param value A slot value.
     * @param setCharacters An array of functions which set the values of the slot's character values. The order of
     * the functions is the same as order of their associated characters in the slot (from left to right).
     * @param characters An array containing the slot's current character values. The order of the values is the same as
     * the order of the characters in the slot (from left to right).
     */
    digitizeValue?: (value: number, setCharacters: readonly ((char: string | null) => void)[], characters: readonly (string | null)[]) => void;
    /**
     * A function which renders slot characters into string. If not defined, non-null characters will be rendered as-is,
     * and null characters will be rendered according to the default value assigned to that character.
     */
    renderChar?: (character: string | null, index: number) => string;
    /** CSS class(es) to apply to the slot's root element. */
    class?: string | SubscribableSet<string>;
}
/**
 * A cursor input slot which allows the user to select a numeric digit. Digits are integers, but are not necessarily
 * constrained to be in the range [0, 9].
 */
export declare class DigitInputSlot extends DisplayComponent<DigitInputSlotProps> {
    private static readonly RESERVED_CSS_CLASSES;
    private readonly slotRef;
    private readonly defaultCharValues;
    private readonly parseValue;
    private readonly digitizeValue;
    private readonly renderChar;
    private readonly characterCount;
    private readonly minValue;
    private readonly maxValue;
    private readonly increment;
    private readonly wrap;
    private readonly scale;
    /** The value bound to this slot. */
    get value(): Subscribable<number>;
    private cssClassSub?;
    private valueSub?;
    private scaleSub?;
    private defaultCharsSub?;
    /** @inheritdoc */
    onAfterRender(): void;
    /**
     * Sets the value of this slot. As part of the operation, all of this slot's characters will be set to non-null
     * representations of the new value, if possible. The value of this slot after the operation is complete may differ
     * from the requested value depending on whether the requested value can be accurately represented by this slot.
     * @param value The new value.
     * @returns The value of this slot after the operation is complete.
     */
    setValue(value: number): number;
    /**
     * Sets the unscaled value of this slot. The unscaled value of this slot after the operation is complete may be
     * different from the requested value, depending on whether this slot can accurately represent the requested value.
     * @param unscaled The new unscaled value.
     * @returns The new unscaled value of this slot after the operation is complete.
     */
    setUnscaledValue(unscaled: number): number;
    /**
     * Increments this slot's value.
     * @returns Whether the increment operation was accepted.
     */
    incrementValue(): boolean;
    /**
     * Decrements this slot's value.
     * @returns Whether the decrement operation was accepted.
     */
    decrementValue(): boolean;
    /**
     * Sets the value of one of this slot's characters.
     * @param index The index of the character to set.
     * @param char The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    setChar(index: number, char: string | null, force?: boolean): boolean;
    /**
     * Changes this slot's value by a specified amount.
     * @param value This slot's value.
     * @param delta The amount by which to change the value.
     * @param setValue A function which sets this slot's value.
     * @returns Whether the value was successfully changed.
     */
    private changeValue;
    /**
     * Sets the value of one of this slot's characters.
     * @param characters An array of characters.
     * @param index The index of the character to set.
     * @param charToSet The value to set.
     * @param force Whether to force the character to accept a value that would normally be invalid. Defaults to `false`.
     * @returns Whether the operation was accepted.
     */
    private _setChar;
    /**
     * Checks whether one of this slot's characters can be set to a given value.
     * @param index The index of the character to set.
     * @param character The value to set.
     * @param force Whether the character should accept a value that would normally be invalid.
     * @returns Whether the specified character can be set to the specified value.
     */
    private canSetChar;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=DigitInputSlot.d.ts.map