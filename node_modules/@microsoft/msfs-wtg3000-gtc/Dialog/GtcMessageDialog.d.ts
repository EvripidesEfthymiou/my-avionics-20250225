import { VNode } from '@microsoft/msfs-sdk';
import { GtcView } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import './GtcMessageDialog.css';
/**
 * A request input for {@link GtcMessageDialog}.
 */
export type GtcMessageDialogInput = {
    /** The message to display. */
    message: string | VNode;
    /** Whether to show the reject button. */
    showRejectButton: boolean;
    /** The GTC view title to display with the message. */
    title?: string;
    /** The label to display for the accept button. Defaults to `'OK'`. */
    acceptButtonLabel?: string | VNode;
    /** The label to display for the reject button. Defaults to `'Cancel'`. */
    rejectButtonLabel?: string | VNode;
    /** CSS class(es) to apply to the dialog's root element. */
    class?: string;
};
/**
 * A pop-up dialog which allows the user to accept or optionally reject a displayed message.
 */
export declare class GtcMessageDialog extends GtcView implements GtcDialogView<GtcMessageDialogInput, boolean> {
    private readonly contentRef;
    private readonly acceptButtonRef;
    private readonly acceptButtonLabelRef;
    private readonly rejectButtonRef;
    private readonly rejectButtonLabelRef;
    private readonly rootCssClass;
    private readonly isCancelButtonVisible;
    private cssClassesToAdd?;
    private renderedContent?;
    private renderedOkLabel?;
    private renderedCancelLabel?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritdoc */
    request(input: GtcMessageDialogInput): Promise<GtcDialogResult<boolean>>;
    /** @inheritDoc */
    onClose(): void;
    /**
     * Clears this dialog's message and resolves the pending request Promise if one exists.
     */
    private cleanupMessage;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcMessageDialog.d.ts.map