import { BasicNavAngleSubject, Facility, FacilityLoader, FacilityRepository, GeoPointSubject, LatLonInterface, NumberUnitSubject, Subject, Subscribable, Unit, UnitFamily, UserFacility } from '@microsoft/msfs-sdk';
import { UnitsUserSettingManager } from '@microsoft/msfs-garminsdk';
/**
 * Types of user waypoint.
 */
export declare enum GtcUserWaypointType {
    RadialDistance = "RAD / DIS",
    RadialRadial = "RAD / RAD",
    LatLon = "LAT / LON",
    PPos = "P.POS"
}
/**
 * A store which holds data used to create and edit user waypoints (facilities) from the GTC.
 */
export declare class GtcUserWaypointDialogStore {
    private readonly facRepo;
    private readonly facLoader;
    private readonly ppos;
    private readonly unitsSettingManager;
    private static readonly REFERENCE_FORMATTER;
    private static readonly RADIAL_FORMATTER;
    private static readonly DISTANCE_FORMATTER;
    private static readonly LAT_FORMATTER;
    private static readonly LON_FORMATTER;
    private static readonly geoPointCache;
    /** The selected ident. */
    readonly ident: Subject<string>;
    /** The selected waypoint temporary flag. */
    readonly isTemporary: Subject<boolean>;
    /** The selected waypoint type. */
    readonly type: Subject<GtcUserWaypointType>;
    /** The selected waypoint comment. */
    readonly comment: Subject<string>;
    /** The first reference. */
    readonly ref1: Subject<Facility | null>;
    /** The radial from the first reference. */
    readonly rad1: BasicNavAngleSubject;
    /** The distance from the first reference. */
    readonly dis1: NumberUnitSubject<UnitFamily.Distance, Unit<UnitFamily.Distance>>;
    /** The second reference. */
    readonly ref2: Subject<Facility | null>;
    /** The radial from the second reference. */
    readonly rad2: BasicNavAngleSubject;
    /** The most recent valid latitude/longitude coordinates entered into the store or computed from references. */
    readonly latLon: GeoPointSubject;
    private autoComment;
    private readonly commentSub;
    private syncOpId;
    private readonly internalSyncSubs;
    private readonly autoCommentSubs;
    /**
     * Constructor.
     * @param facRepo The facility repository.
     * @param facLoader The facility loader.
     * @param ppos The airplane's present position.
     * @param unitsSettingManager A manager for display unit user settings.
     */
    constructor(facRepo: FacilityRepository, facLoader: FacilityLoader, ppos: Subscribable<LatLonInterface>, unitsSettingManager: UnitsUserSettingManager);
    /**
     * Responds to when this store's selected user waypoint type changes.
     * @param type The selected user waypoint type.
     */
    private onTypeChanged;
    /**
     * Responds to when this store's first reference facility changes.
     * @param reference The first reference facility.
     */
    private onReference1Changed;
    /**
     * Responds to when this store's second reference facility changes.
     * @param reference The second reference facility.
     */
    private onReference2Changed;
    /**
     * Responds to when this store's first radial changes.
     */
    private onRadial1Changed;
    /**
     * Responds to when this store's second radial changes.
     */
    private onRadial2Changed;
    /**
     * Responds to when this store's first distance changes.
     */
    private onDistance1Changed;
    /**
     * Updates a radial for a reference facility such that it intersects this store's latitude/longitude coordinates. If
     * the reference facility is `null`, then the radial will be set to zero degrees magnetic. If the reference facility
     * is not `null` but a unique radial which intersects the coordinates cannot be found, then the radial will be left
     * unchanged.
     * @param reference The reference facility.
     * @param subject The subject holding the radial to update.
     */
    private updateRadialFromReference;
    /**
     * Updates a distance from a reference facility such that it equals the great-circle distance from the reference
     * facility to this store's latitude/longitude coordinates. If the reference facility is `null`, then the distance
     * will be set to zero.
     * @param reference The reference facility.
     * @param subject The subject holding the distance to update.
     */
    private updateDistanceFromReference;
    /**
     * Updates the magnetic variation of a radial according to a reference facility.
     * @param reference A reference facility. If `null`, the magnetic variation of the radial will remain unchanged.
     * @param subject The subject containing the radial to update.
     */
    private updateMagVarFromReference;
    /**
     * Recomputes this store's latitude/longitude coordinates using radial and distance from the first reference. If the
     * first reference is `null`, then the coordinates will be left unchanged.
     */
    private recomputeRadialDistanceLatLon;
    /**
     * Recomputes this store's latitude/longitude coordinates using the intersection of radials from the first and second
     * references. If either the first or second reference is `null`, then the coordinates will be left unchanged.
     */
    private recomputeRadialRadialLatLon;
    /**
     * Updates this store's selected comment with an automatically generated version.
     */
    private updateAutoComment;
    /**
     * Resumes this store's logic for syncing radials and distances with references and latitude/longitude coordinates.
     */
    private resumeInternalSync;
    /**
     * Pauses this store's logic for syncing radials and distances with references and latitude/longitude coordinates.
     */
    private pauseInternalSync;
    /**
     * Resumes this store's automatic comment generation logic.
     */
    private resumeAutoComment;
    /**
     * Pauses this store's automatic comment generation logic.
     */
    private pauseAutoComment;
    /**
     * Resets this store's automatic comment generation state. Once reset, the store will automatically generate
     * comments based on the selected waypoint type and parameters until the comment is manually selected.
     */
    resetAutoComment(): void;
    /**
     * Sets this store's selected ident to an automatically generated one of the form `USRNNN`, where `NNN` is the
     * smallest three-digit number not already assigned to an existing user waypoint. If all three-digit numbers have
     * been assigned, then the selected ident is set to the empty string.
     */
    setAutoIdent(): void;
    /**
     * Syncs this store's latitude/longitude coordinates from a specific set of coordinates, and sets this store's
     * selected waypoint type to LAT/LON.
     * @param lat The latitude coordinate, in degrees, to sync from.
     * @param lon The longitude coordinate, in degrees, to sync from.
     */
    syncFromLatLon(lat: number, lon: number): void;
    /**
     * Syncs this store's parameters from an existing user facility.
     * @param fac The user facility to sync from.
     */
    syncFromFacility(fac: UserFacility): Promise<void>;
    /**
     * Syncs this store's parameters from an existing RAD/DIS user facility.
     * @param fac The user facility to sync from.
     * @param opId The sync operation's unique ID.
     */
    private syncRadialDistance;
    /**
     * Syncs this store's parameters from an existing RAD/RAD user facility.
     * @param fac The user facility to sync from.
     * @param opId The sync operation's unique ID.
     */
    private syncRadialRadial;
    /**
     * Gets the magnetic variation, in degrees, at a reference facility.
     * @param reference A reference facility.
     * @returns The magnetic variation, in degrees, at the specified reference facility, or `0` if the facility is
     * `null`.
     */
    private static getMagVarFromReference;
    /**
     * Gets the magnetic radial, in degrees, from a reference facility that intersects a point. If the facility is
     * `null` or a unique intersecting radial cannot be found, `undefined` will be returned.
     * @param latLon The point to intersect.
     * @param reference The reference facility.
     * @returns The magnetic radial, in degrees, from a reference facility that intersects the specified point.
     */
    private static getRadialFromReference;
    /**
     * Gets the distance, in nautical miles, from a reference facility to a point. If the facility is `null`, `undefined`
     * will be returned.
     * @param latLon The point to measure.
     * @param reference The reference facility.
     * @returns The distance, in nautical miles, from the reference facility to the specified point.
     */
    private static getDistanceFromReference;
}
//# sourceMappingURL=GtcUserWaypointDialogStore.d.ts.map