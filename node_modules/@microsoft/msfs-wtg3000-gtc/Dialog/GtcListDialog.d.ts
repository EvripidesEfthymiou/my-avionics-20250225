import { GtcView } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import { Subscribable, VNode } from '@microsoft/msfs-sdk';
import './GtcListDialog.css';
/** The parameters needed to display a selection list for {@link GtcListDialog}. */
export type GtcListDialogParams<T> = {
    /**
     * An array of list item definitions. Each definition defines one selectable value and how the value is to be
     * displayed in the list.
     */
    inputData: ListDialogItemDefinition<T>[];
    /** The GTC view title to display with the selection list. */
    title?: string;
    /** The currently selected value. The list item associated with the selected value will be highlighted. */
    selectedValue?: T | Subscribable<T>;
    /** Scrolls to the given value when opened, overrides the scrolling behavior of selectedValue. */
    scrollToValue?: T;
    /** CSS class(es) to apply to the dialog's root element. */
    class?: string;
    /** Height of each list item in pixels. */
    listItemHeightPx?: number;
    /** How much space between each list item in pixels. */
    listItemSpacingPx?: number;
    /** The number of list items per page to display. Defaults to 5. */
    itemsPerPage?: number;
    /**
     * The maximum number of list items that can be rendered simultaneously. The value will be clamped to be greater than
     * or equal to `itemsPerPage * 3`. Defaults to 25.
     */
    maxRenderedItemCount?: number;
};
/**
 * A definition for a selection list item in a {@link GtcListDialog}.
 */
export type ListDialogItemDefinition<T> = {
    /** A function which renders the list item button's label. */
    labelRenderer: () => string | VNode;
    /** The value to return out of the dialog when the list item is selected. */
    value: T;
    /**
     * A callback function to execute when a list item button is pressed. The function should accept the value of the
     * item as a parameter and return whether the pending request should be fulfilled with the value. If not defined,
     * pressing the button will always fulfill the pending request with the value of the list item.
     */
    onPressed?: (value: T) => boolean | Promise<boolean>;
    /** Whether the list item button is enabled or not. Defaults to true. */
    isEnabled?: boolean;
    /** A callback function to execute when the list item is destroyed. */
    onDestroy?: () => void;
};
/**
 * A pop-up dialog which allows the user to select an item from a scrolling list.
 */
export declare class GtcListDialog extends GtcView implements GtcDialogView<GtcListDialogParams<any>, any> {
    private readonly listRef;
    private readonly rootCssClass;
    private readonly listItemHeightPxDefault;
    private readonly listItemSpacingPxDefault;
    private readonly listItemHeightPx;
    private readonly listItemSpacingPx;
    private readonly itemsPerPage;
    private readonly maxRenderedItemCount;
    private readonly data;
    private cssClassesToAdd?;
    private readonly selectedValue;
    private selectedValuePipe?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritDoc */
    onAfterRender(): void;
    /**
     * Requests a selected value from this dialog. Based on the input parameters, the dialog will display a list of
     * buttons, each one causing a certain value to be selected when pressed.
     * @param input The input parameters.
     * @returns A Promise which is fulfilled with the selected value when a selection is made, or with an empty payload
     * if this dialog is closed or `request()` is called again before a selection is made.
     * @throws Error if the dialog has been destroyed.
     */
    request<T>(input: GtcListDialogParams<T>): Promise<GtcDialogResult<T>>;
    /** @inheritDoc */
    onClose(): void;
    /**
     * Clears this dialog's list and resolves the pending request Promise if one exists.
     */
    private cleanupList;
    private readonly renderButton;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcListDialog.d.ts.map