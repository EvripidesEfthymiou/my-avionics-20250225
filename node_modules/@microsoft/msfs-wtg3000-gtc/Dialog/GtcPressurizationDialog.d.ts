import { MutableSubscribable, NodeReference, Unit, UnitFamily, VNode } from '@microsoft/msfs-sdk';
import { NumberInput } from '../Components/NumberInput/NumberInput';
import { GtcViewProps } from '../GtcService/GtcView';
import { GtcNumberDialogInput } from './AbstractGtcNumberDialog';
import { AbstractSimpleGtcNumberDialog } from './AbstractSimpleGtcNumberDialog';
import './GtcPressurizationDialog.css';
/**
 * A request result returned by {@link GtcPressurizationDialog} that defines a selected altitude.
 */
export interface GtcPressurizationDialogAltitudeOutput {
    /** The numeric value of the selected altitude. */
    altitude: number;
    /** The unit type of the selected altitude. */
    altitudeUnit: Unit<UnitFamily.Distance>;
}
/**
 * A request result returned by {@link GtcPressurizationDialog}.
 */
export type GtcPressurizationDialogOutput = GtcPressurizationDialogAltitudeOutput | 'use-fms-destination';
/**
 * A request input for {@link GtcPressurizationDialog}.
 */
export interface GtcPressurizationDialogInput extends GtcNumberDialogInput {
    /** The type of dialog to use. */
    type: 'landing' | 'cabin';
    /**
     * The initial altitude unit. If not defined, the initial unit will default to a value based on the units mode.
     */
    initialUnit?: Unit<UnitFamily.Distance>;
    /** Whether the dialog should operate in units of feet or meters. */
    unitsMode: 'feet' | 'meters';
}
/**
 * A dialog which allows the user to select a landing elevation or cabin pressurization altitude.
 */
export declare class GtcPressurizationDialog extends AbstractSimpleGtcNumberDialog<GtcPressurizationDialogInput, GtcPressurizationDialogOutput> {
    private static readonly UNIT_MODE_PARAMS;
    private readonly signDigitRef;
    private readonly fmsButtonRef;
    private readonly unitText;
    private unitsMode;
    private useFmsDestinationPressed;
    /**
     * Creates an instance of a GtcPressurizationDialog.
     * @param props The props for this component.
     */
    constructor(props: GtcViewProps);
    /** @inheritdoc */
    protected onRequest(input: GtcPressurizationDialogInput): number;
    /** @inheritdoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritdoc */
    protected getPayload(value: number): GtcPressurizationDialogOutput;
    /** @inheritdoc */
    protected getRootCssClassName(): string;
    /** @inheritdoc */
    protected isValueValid(value: number): boolean;
    /** @inheritdoc */
    protected onBackspacePressed(): void;
    /** @inheritdoc */
    protected onSignPressed(): void;
    /** @inheritdoc */
    protected renderOtherContents(): VNode | null;
    /** @inheritdoc */
    protected renderInput(ref: NodeReference<NumberInput>, value: MutableSubscribable<number>): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcPressurizationDialog.d.ts.map