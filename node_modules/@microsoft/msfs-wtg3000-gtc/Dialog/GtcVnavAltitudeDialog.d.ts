import { VNode } from '@microsoft/msfs-sdk';
import { GtcView } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import { GtcInteractionEvent } from '../GtcService/GtcInteractionEvent';
import '../Components/TouchButton/NumPadTouchButton.css';
import './GtcVnavAltitudeDialog.css';
/** A request input for {@link GtcVnavAltitudeDialog}. */
export interface GtcVnavAltitudeDialogInput {
    /** The value initially loaded into the dialog at the start of a request. */
    initialAltitudeFeet: number;
    /** Whether this is for advanced vnav mode or not.*/
    isAdvancedMode: boolean;
    /** The leg ident to display on the VNAV DTO button.*/
    legName: string;
    /** Whether the constraint is different from the published constraint.*/
    isDifferentFromPublished: boolean;
    /** Whether this is for a user constraint or not.*/
    isDesignatedConstraint: boolean;
    /** The published altitude in feet, or undefined.*/
    publishedAltitudeFeet?: number;
    /** Whether the constraint is a flight level or not.*/
    isFlightLevel: boolean;
    /** The leg's fix elevation in meters, if defined, AGL will be an option. */
    fixElevationMeters?: number;
    /** What title to show on the title bar. */
    title?: string;
    /** A max altitude to use. If undefined, no max will be applied. */
    maxAltitudeFeet?: number;
    /** Whether to display max altitude as a flight level. */
    isMaxAltitudeFlightLevel?: boolean;
}
/** A result type for the altitude dialog. */
export type GtcVnavAltitudeDialogResult = GtcVnavAltitudeDialogResultSet | GtcVnavAltitudeDialogResultRevert | GtcVnavAltitudeDialogResultRemove | GtcVnavAltitudeDialogResultDirect;
/** A set result for {@link GtcVnavAltitudeDialog}. */
export interface GtcVnavAltitudeDialogResultSet {
    /** A result to set the constraint. */
    result: 'set';
    /** The altitude in feet. */
    altitudeFeet: number;
    /** Whether to display the altitude as a flight level. */
    isFlightLevel: boolean;
}
/** A revert result for {@link GtcVnavAltitudeDialog}. */
export interface GtcVnavAltitudeDialogResultRevert {
    /** A result to revert the constraint to published values. */
    result: 'revert';
}
/** A remove result for {@link GtcVnavAltitudeDialog}. */
export interface GtcVnavAltitudeDialogResultRemove {
    /** A result to remove the constraint. */
    result: 'remove';
}
/** A vnav direct to result for {@link GtcVnavAltitudeDialog}. */
export interface GtcVnavAltitudeDialogResultDirect {
    /** A result to do a vnav direct to. */
    result: 'direct';
    /** The altitude in feet for the vnav direct to constraint. */
    altitudeFeet: number;
    /** Whether the altitude should be displayed as a flight level. */
    isFlightLevel: boolean;
}
/** Dialog to set an altitude constraint. */
export declare class GtcVnavAltitudeDialog extends GtcView implements GtcDialogView<GtcVnavAltitudeDialogInput, GtcVnavAltitudeDialogResult> {
    private static readonly FORMATTER;
    private thisNode?;
    private readonly mslInputRef;
    private readonly flInputRef;
    private readonly numpadRef;
    private readonly backspaceRef;
    private activeInput;
    private readonly mslInputCssClass;
    private readonly flInputCssClass;
    private readonly valueMSL;
    private readonly valueFL;
    private resolveFunction?;
    private resultObject;
    private readonly legName;
    private readonly isDifferentFromPublished;
    private readonly isDesignatedConstraint;
    private readonly flightLevelModeEnabled;
    private readonly meanSeaLevelModeEnabled;
    private readonly aboveGroundLevelModeEnabled;
    private readonly isFlightLevel;
    private readonly isAboveGroundLevel;
    private readonly showAgl;
    private publishedAltitudeFeet?;
    private fixElevationFeet?;
    private maxAltitudeFeet?;
    private isMaxAltitudeFlightLevel?;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    request(input: GtcVnavAltitudeDialogInput): Promise<GtcDialogResult<GtcVnavAltitudeDialogResult>>;
    /**
     * Converts feet to flight level.
     * @param feet Feet.
     * @returns FL.
     */
    private convertFeetToFl;
    /**
     * Converts fl to feet.
     * @param fl flight level.
     * @returns feet.
     */
    private convertFlToFeet;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Responds to when the editing state of this dialog's number input changes.
     * @param isEditingActive Whether editing is active for this dialog's number input.
     */
    private onEditingActiveChanged;
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    private cleanupRequest;
    /** @inheritdoc */
    private isValueValid;
    /** @inheritdoc */
    private getInvalidValueMessage;
    /**
     * Responds to when one of this dialog's number pad buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    private onNumberPressed;
    /** Responds to when this dialog's backspace button is pressed. */
    private onBackspacePressed;
    /**
     * Validates the currently selected value, and if valid sets the value to be returned for the currently pending
     * request and closes this dialog.
     * @param vnavDirectTo Whether to do a vnav direct to or not.
     */
    private validateValueAndClose;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this dialog's number pad.
     * @param ref The reference to which to assign the rendered number pad.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's number pad, as a VNode.
     */
    private renderNumberPad;
    /**
     * Renders this dialog's backspace button.
     * @param ref The reference to which to assign the rendered button.
     * @param rootCssClassName The CSS class name for this dialog's root element.
     * @returns This dialog's backspace button, as a VNode, or `null` if this dialog does not have a backspace button.
     */
    private renderBackspaceButton;
    /** @inheritdoc */
    private renderInputMsl;
    /** @inheritdoc */
    private renderInputFL;
    /** Sets result to 'revert' and closes the dialog. */
    private closeWithRevert;
    /** Sets result to 'remove' and closes the dialog. */
    private closeWithRemove;
    /** @inheritdoc */
    private renderOtherContents;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcVnavAltitudeDialog.d.ts.map