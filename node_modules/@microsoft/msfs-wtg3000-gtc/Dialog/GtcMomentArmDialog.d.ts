import { MutableSubscribable, NodeReference, Subscribable, Unit, UnitFamily, VNode } from '@microsoft/msfs-sdk';
import { NumberInput } from '../Components/NumberInput/NumberInput';
import { SignInputSlot } from '../Components/NumberInput/SignInputSlot';
import { GtcViewProps } from '../GtcService/GtcView';
import { AbstractGtcNumberDialog, GtcNumberDialogInput, GtcNumberDialogInputDefinition } from './AbstractGtcNumberDialog';
import '../Components/TouchButton/NumPadTouchButton.css';
import './GtcMomentArmDialog.css';
/**
 * A request input for {@link GtcMomentArmDialog}.
 */
export interface GtcMomentArmDialogInput extends GtcNumberDialogInput {
    /**
     * The unit type in which the initial value is expressed. If not defined, then the initial unit will default to the
     * dialog's unit type.
     */
    initialUnit?: Unit<UnitFamily.Distance>;
    /** The unit type in which the dialog should operate. */
    unitType: Unit<UnitFamily.Distance>;
    /**
     * The number of digits to the left of the decimal point supported by the dialog's input. If not defined, the number
     * of digits will default to the minimum number of digits required to accommodate both the minimum and maximum valid
     * values.
     */
    digitCount?: 3 | 4;
    /** The minimum valid numeric value allowed by the dialog's input. */
    minimumValue: number;
    /** The maximum valid numeric value allowed by the dialog's input. */
    maximumValue: number;
    /** The GTC view title to display with the dialog. */
    title?: string;
}
/**
 * A request result returned by {@link GtcMomentArmDialog}.
 */
export interface GtcMomentArmDialogOutput {
    /** The selected moment arm. */
    value: number;
    /** The unit type of the selected moment arm. */
    unit: Unit<UnitFamily.Distance>;
}
/**
 * A definition for a {@link NumberInput} used in a {@link GtcMomentArmDialog}.
 */
interface GtcMomentArmDialogInputDefinition extends GtcNumberDialogInputDefinition {
    /** A reference to this definition's input's sign input slot. */
    readonly signRef: NodeReference<SignInputSlot>;
    /** The number of digits to the left of the decimal point supported by this definition's input. */
    readonly digitCount: number;
}
/**
 * A pop-up dialog that allows the user to select a moment arm. The dialog can operate with any arbitrary distance unit
 * type and supports inputs with one digit to the right of the decimal point plus three or four digits to the left.
 */
export declare class GtcMomentArmDialog extends AbstractGtcNumberDialog<GtcMomentArmDialogInput, GtcMomentArmDialogOutput, GtcMomentArmDialogInputDefinition> {
    private static readonly UNIT_FORMATTER;
    private readonly unitType;
    private readonly unitText;
    private minValue;
    private maxValue;
    /** @inheritDoc */
    constructor(props: GtcViewProps);
    /** @inheritDoc */
    onAfterRender(): void;
    /** @inheritDoc */
    protected onRequest(input: GtcMomentArmDialogInput): void;
    /** @inheritDoc */
    protected onSignPressed(): void;
    /** @inheritDoc */
    protected onDecimalPressed(): void;
    /** @inheritDoc */
    protected isValueValid(value: number): boolean;
    /** @inheritDoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritDoc */
    protected getRootCssClassName(): string | undefined;
    /** @inheritDoc */
    protected getPayload(value: number): GtcMomentArmDialogOutput;
    /** @inheritDoc */
    protected renderInput(ref: NodeReference<NumberInput>, signRef: NodeReference<SignInputSlot>, value: MutableSubscribable<number>, isVisible: Subscribable<boolean>, digitCount: 3 | 4): VNode;
}
export {};
//# sourceMappingURL=GtcMomentArmDialog.d.ts.map