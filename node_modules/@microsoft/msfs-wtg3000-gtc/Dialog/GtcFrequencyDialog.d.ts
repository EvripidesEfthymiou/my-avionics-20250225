import { Subscribable, VNode } from '@microsoft/msfs-sdk';
import { TunableRadio } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent } from '../GtcService/GtcInteractionEvent';
import { GtcView } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import './GtcFrequencyDialog.css';
/**
 * Frequency input types supported by {@link GtcFrequencyDialog}
 */
export declare enum GtcFrequencyDialogInputType {
    /** Nav radio frequencies. */
    Nav = "Nav",
    /** Com radio frequencies with 25 Khz spacing. */
    Com25 = "Com25",
    /** Com radio frequencies with 8.33 Khz spacing. */
    Com833 = "Com833",
    /** ADF radio frequencies. */
    Adf = "Adf"
}
/**
 * A request input for {@link GtcFrequencyDialog}.
 */
export type GtcFrequencyDialogInput = {
    /** The frequency input type to use. */
    type: GtcFrequencyDialogInputType;
    /** The frequency, in hertz, initially loaded into the dialog at the start of the request. */
    initialValue: number;
    /** Whether to show the transfer frequency button. */
    showTransferButton: boolean;
    /** Whether to show the find button. */
    showFindButton: boolean;
    /** The active frequency to display above the dialog's input. If not defined, nothing will be displayed above the input. */
    activeFrequency?: number | Subscribable<number>;
    /** The GTC view title to display while the request is active. */
    title?: string;
    /** The radio for which the request is being made. */
    radio?: TunableRadio;
    /** Whether to show the ADF mode selection buttons. Ignored if the input type is not ADF. Defaults to `false`. */
    showAdfModeButtons?: boolean;
};
/**
 * A request result returned from {@link GtcFrequencyDialog}.
 */
export type GtcFrequencyDialogResult = {
    /** The selected frequency, in hertz. */
    frequency: number;
    /** Whether a frequency transfer was selected. */
    transfer: boolean;
};
/**
 * A GTC dialog view which allows the user to select a radio frequency.
 */
export declare class GtcFrequencyDialog extends GtcView implements GtcDialogView<GtcFrequencyDialogInput, GtcFrequencyDialogResult> {
    private readonly contexts;
    private readonly numpadRef;
    private readonly backspaceRef;
    private readonly findRef;
    private readonly transferRef;
    private readonly rootCssClass;
    private readonly isTransferVisible;
    private readonly isFindVisible;
    private readonly activeFrequencyText;
    private activeContext?;
    private activeFrequencyPipe?;
    private resolveFunction?;
    private resultObject;
    private _radio?;
    /** The radio for the current request. */
    get radio(): TunableRadio | undefined;
    private isAlive;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    request(input: GtcFrequencyDialogInput): Promise<GtcDialogResult<GtcFrequencyDialogResult>>;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Validates the currently selected value, and if valid sets the value to be returned for the currently pending
     * request and closes this dialog.
     * @param transfer Whether a transfer was selected.
     */
    private validateValueAndClose;
    /**
     * Clears this dialog's pending request and resolves the pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's number pad buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    protected onNumberPressed(value: number): void;
    /**
     * Responds to when this dialog's backspace button is pressed.
     */
    protected onBackspacePressed(): void;
    /**
     * Responds to when the editing state of this dialog's number input changes.
     * @param isEditingActive Whether editing is active for this dialog's number input.
     */
    private onEditingActiveChanged;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this dialog's nav radio frequency input.
     * @returns This dialog's nav radio frequency input, as a VNode.
     */
    private renderNavInput;
    /**
     * Renders this dialog's com radio frequency input with 25 Khz spacing.
     * @returns This dialog's com radio frequency input with 25 Khz spacing, as a VNode.
     */
    private renderCom25Input;
    /**
     * Renders this dialog's com radio frequency input with 8.33 Khz spacing.
     * @returns This dialog's com radio frequency input with 8.33 Khz spacing, as a VNode.
     */
    private renderCom833Input;
    /**
     * Renders this dialog's ADF radio frequency input.
     * @returns This dialog's ADF radio frequency input, as a VNode.
     */
    private renderAdfInput;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcFrequencyDialog.d.ts.map