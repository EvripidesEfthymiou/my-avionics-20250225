import { LatLonInterface, VNode } from '@microsoft/msfs-sdk';
import { GtcInteractionEvent } from '../GtcService/GtcInteractionEvent';
import { GtcView } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import { G3000LatLonDisplayFormat } from '../Components/LatLonInput/LatLonInput';
import './GtcLatLonDialog.css';
/**
 * A request input for {@link GtcLatLonDialog}.
 */
export type GtcLatLonDialogInput = {
    /** The input format type to use. */
    format: G3000LatLonDisplayFormat;
    /** The latitude/longitude coordinates initially loaded into the dialog at the start of the request. */
    initialValue: LatLonInterface;
    /** The GTC view title to display while the request is active. */
    title?: string;
};
/**
 * A GTC dialog view which allows the user to select a set of latitude/longitude coordinates.
 */
export declare class GtcLatLonDialog extends GtcView implements GtcDialogView<GtcLatLonDialogInput, Readonly<LatLonInterface>> {
    private static readonly LATLON_EQUALS;
    private static readonly LATLON_MUTATOR;
    private readonly contexts;
    private readonly numpadRef;
    private readonly backspaceRef;
    private readonly nRef;
    private readonly sRef;
    private readonly eRef;
    private readonly wRef;
    private activeContext?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritdoc */
    onAfterRender(): void;
    /** @inheritdoc */
    request(input: GtcLatLonDialogInput): Promise<GtcDialogResult<LatLonInterface>>;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritDoc */
    onClose(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    /**
     * Validates the currently selected value, and if valid sets the value to be returned for the currently pending
     * request and closes this dialog.
     */
    private validateValueAndClose;
    /**
     * Clears this dialog's pending request and resolves the pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's number pad buttons is pressed.
     * @param value The value of the button that was pressed.
     */
    protected onNumberPressed(value: number): void;
    /**
     * Responds to when this dialog's backspace button is pressed.
     */
    protected onBackspacePressed(): void;
    /**
     * Responds to when the editing state of this dialog's active input changes.
     * @param isEditingActive Whether editing is active for this dialog's active input.
     */
    private onEditingActiveChanged;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders this dialog's input for the HDDD MM.mm format.
     * @returns This dialog's input for the HDDD MM.mm format, as a VNode.
     */
    private renderHDDDMMmmInput;
    /**
     * Renders this dialog's input for the HDDD MM SS.s format.
     * @returns This dialog's input for the HDDD MM SS.s format, as a VNode.
     */
    private renderHDDDMMSSsInput;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcLatLonDialog.d.ts.map