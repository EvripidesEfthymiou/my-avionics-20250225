import { VNode } from '@microsoft/msfs-sdk';
import { GtcViewProps } from '../GtcService/GtcView';
import { AbstractGtcNumberDialog, GtcNumberDialogInput, GtcNumberDialogInputDefinition } from './AbstractGtcNumberDialog';
import './GtcIntegerDialog.css';
/**
 * A request input for {@link GtcIntegerDialog}.
 */
export interface GtcIntegerDialogInput extends GtcNumberDialogInput {
    /**
     * The number of digits supported by the dialog's input. If not defined, the number of digits will default to the
     * minimum number of digits required to accommodate the maximum valid value.
     */
    digitCount?: 1 | 2 | 3 | 4;
    /** The minimum valid numeric value allowed by the dialog's input, defaults to 0. */
    minimumValue?: number;
    /** The maximum valid numeric value allowed by the dialog's input. */
    maximumValue: number;
    /** The GTC view title to display with the message. */
    title?: string;
}
/**
 * A definition for a {@link NumberInput} used in a {@link GtcIntegerDialog}.
 */
interface GtcIntegerDialogInputDefinition extends GtcNumberDialogInputDefinition {
    /** The number of digits supported by this definition's input. */
    readonly digitCount: number;
}
/**
 * A dialog which allows the user to enter a 1- to 4-digit unitless non-negative integer.
 */
export declare class GtcIntegerDialog extends AbstractGtcNumberDialog<GtcIntegerDialogInput, number, GtcIntegerDialogInputDefinition> {
    private minValue;
    private maxValue;
    /** @inheritdoc */
    constructor(props: GtcViewProps);
    /** @inheritdoc */
    protected onRequest(input: GtcIntegerDialogInput): void;
    /** @inheritdoc */
    protected isValueValid(value: number): boolean;
    /** @inheritdoc */
    protected getInvalidValueMessage(): string | VNode;
    /** @inheritdoc */
    protected getPayload(value: number): number;
    /** @inheritdoc */
    protected getRootCssClassName(): string;
    /**
     * Renders one of this dialog's value inputs.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @param digitCount The number of digits in the input.
     * @returns A value input with the specified number of digits, as a VNode.
     */
    private renderInput;
}
export {};
//# sourceMappingURL=GtcIntegerDialog.d.ts.map