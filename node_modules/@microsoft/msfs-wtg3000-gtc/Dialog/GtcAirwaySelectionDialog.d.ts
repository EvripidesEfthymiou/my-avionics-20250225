import { AirwayData, FlightPathCalculator, IntersectionFacility, LegDefinition, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { FlightPlanListManager, FlightPlanStore } from '@microsoft/msfs-wtg3000-common';
import { GtcView, GtcViewProps } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import './GtcAirwaySelectionDialog.css';
/**
 * A request input for {@link GtcAirwaySelectionDialog}.
 */
export interface GtcAirwaySelectionDialogInput {
    /** The leg to use as the airway entry. Required when inserting a new airway. */
    leg?: LegDefinition;
    /** The flight plan index to use. */
    planIndex: number;
    /** For editing an airway, the airway segment index to edit. */
    editAirwaySegmentIndex?: number;
    /** The flight plan list manager. */
    listManager: FlightPlanListManager;
}
/**
 * A request result returned by {@link GtcAirwaySelectionDialog}.
 */
export interface GtcAirwaySelectionDialogOutput {
    /** The selected airway. */
    airway: AirwayData;
    /** The selected airway entry. */
    entry: IntersectionFacility;
    /** The selected airway exit. */
    exit: IntersectionFacility;
    /** The index of the flight plan segment containing the airway entry leg. */
    segmentIndex: number;
    /** The index of the airway entry leg in its flight plan segment. */
    segmentLegIndex: number;
    /** The index of the airway segment selected for editing, or `undefined` if there is no airway selected for editing. */
    editSegmentIndex?: number;
    /**
     * Whether the airway segment selected for editing is currently collapsed, or `undefined` if there is no airway
     * selected for editing.
     */
    isEditedAirwayCollapsed?: boolean;
}
/**
 * The properties for the {@link GtcAirwaySelectionDialog} component.
 */
export interface GtcAirwaySelectionDialogProps extends GtcViewProps {
    /** An instance of the Fms. */
    fms: Fms;
    /** The flight plan store. */
    store: FlightPlanStore;
    /** The calculator to use for generating previews. */
    calculator: FlightPathCalculator;
}
/**
 * A dialog which allows the user to select and load an airway sequence into a flight plan.
 */
export declare class GtcAirwaySelectionDialog extends GtcView<GtcAirwaySelectionDialogProps> implements GtcDialogView<GtcAirwaySelectionDialogInput, GtcAirwaySelectionDialogOutput> {
    private thisNode?;
    private readonly fms;
    private readonly waypointCache;
    private readonly entryButtonRef;
    private readonly sequenceListRef;
    private readonly selectedEntry;
    private readonly selectedAirwayRoute;
    private readonly selectedAirway;
    private readonly selectedExit;
    private readonly sortAZ;
    private readonly airways;
    private readonly exits;
    private readonly isLoadButtonEnabled;
    private readonly sequence;
    private readonly isAirwayListOpen;
    private readonly isExitListOpen;
    private readonly listParams;
    private readonly goBackToDialogSelector;
    private initSelectionOpId;
    private loadSelectedAirwayOpId;
    private airwayPressedOpId;
    private exitPressedOpId;
    private input;
    private resolveFunction?;
    private resultObject;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    request(input: GtcAirwaySelectionDialogInput): Promise<GtcDialogResult<GtcAirwaySelectionDialogOutput>>;
    /** @inheritDoc */
    onClose(): void;
    /** Initializes this page's airway selection. */
    private initSelection;
    /**
     * Initializes the selected entry waypoint.
     * @param opId The ID for the current initialization operation.
     */
    private initEntry;
    /**
     * Choose the appropriate entry to use.
     * @returns The entry to use.
     */
    private getEntry;
    /**
     * Initializes the selected airway.
     * @param opId The ID for the current initialization operation.
     * @returns A promise that resolves when the airway is initialized.
     */
    private initAirway;
    /**
     * Initializes the selected exit waypoint.
     */
    private initExit;
    /**
     * Choose the appropriate exit to use.
     * @returns The exit to use.
     */
    private getExit;
    /**
     * Responds to when the airway button is pressed.
     */
    private onAirwayButtonPressed;
    /**
     * Handles the airway being selected, showing the next list dialog if necessary.
     */
    private onAirwaySelected;
    /**
     * Responds to when the exit button is pressed.
     */
    private onExitButtonPressed;
    /**
     * Handles the exit waypoint being selected.
     */
    private onExitSelected;
    /**
     * Responds to when the sort button is pressed.
     */
    private onSortButtonPressed;
    /**
     * Creates a procedure preview plan with the current selections.
     */
    private buildSequence;
    /**
     * Responds to when the load button is pressed.
     */
    private onLoadButtonPressed;
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    private cleanupRequest;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders a leg for the sequence box.
     * @param leg The leg.
     * @returns The leg VNode.
     */
    private readonly renderLeg;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcAirwaySelectionDialog.d.ts.map