import { SpeedUnit, VNode } from '@microsoft/msfs-sdk';
import { FmsSpeedsGeneralLimits } from '@microsoft/msfs-wtg3000-common';
import { GtcViewProps } from '../GtcService/GtcView';
import { AbstractGtcNumberDialog, GtcNumberDialogInput, GtcNumberDialogInputDefinition } from './AbstractGtcNumberDialog';
import './GtcFmsSpeedDialog.css';
/**
 * Component props for GtcFmsSpeedDialog.
 */
export interface GtcFmsSpeedDialogProps extends GtcViewProps {
    /** General speed limits for the airplane. */
    generalSpeedLimits: FmsSpeedsGeneralLimits;
}
/**
 * A request input for {@link GtcFmsSpeedDialog}.
 */
export interface GtcFmsSpeedDialogInput extends GtcNumberDialogInput {
    /**
     * The initial speed unit. If not defined, the initial unit will default to a value based on the allowed unit type
     * (if both unit types are allowed, then it will default to IAS).
     */
    initialUnit?: SpeedUnit;
    /**
     * The types of speed units allowed by the input. If `both` is selected, then the dialog will display a pair of
     * buttons allowing the user to switch between IAS (KT) and mach.
     */
    unitsAllowed: 'ias' | 'mach' | 'both';
    /** The GTC view title to display with the message. */
    title?: string;
}
/**
 * A request result returned by {@link GtcFmsSpeedDialog}.
 */
export interface GtcFmsSpeedDialogOutput {
    /** The selected speed. */
    value: number;
    /** The unit type of the selected speed. */
    unit: SpeedUnit;
}
/**
 * A definition for a {@link NumberInput} used in a {@link GtcFmsSpeedDialog}.
 */
interface GtcFmsSpeedDialogInputDefinition extends GtcNumberDialogInputDefinition {
    /** The minimum value allowed to be returned from this definition's input. */
    readonly min: number;
    /** The maximum value allowed to be returned from this definition's input. */
    readonly max: number;
    /** The unit type associated with this definition's input. */
    readonly unit: SpeedUnit;
}
/**
 * A dialog which allows the user to enter an FMS speed. The dialog supports both indicated airspeed (knots) and mach
 * number entry.
 */
export declare class GtcFmsSpeedDialog extends AbstractGtcNumberDialog<GtcFmsSpeedDialogInput, GtcFmsSpeedDialogOutput, GtcFmsSpeedDialogInputDefinition, GtcFmsSpeedDialogProps> {
    private readonly unitMode;
    /** @inheritdoc */
    constructor(props: GtcFmsSpeedDialogProps);
    /** @inheritdoc */
    protected onRequest(input: GtcFmsSpeedDialogInput): void;
    /** @inheritdoc */
    protected isValueValid(value: number, activeInputDef: GtcFmsSpeedDialogInputDefinition): boolean;
    /** @inheritdoc */
    protected getInvalidValueMessage(value: number, activeInputDef: GtcFmsSpeedDialogInputDefinition): string | VNode;
    /** @inheritdoc */
    protected getPayload(value: number, activeInputDef: GtcFmsSpeedDialogInputDefinition): GtcFmsSpeedDialogOutput;
    /** @inheritdoc */
    protected getRootCssClassName(): string;
    /**
     * Renders this dialog's IAS value input.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @returns This dialog's IAS value input, as a VNode.
     */
    private renderIasInput;
    /**
     * Renders this dialog's mach value input.
     * @param ref The reference to which to assign the rendered input.
     * @param value The value to bind to the rendered input.
     * @param isVisible A subscribable to which to bind the visibility of the rendered input.
     * @returns This dialog's mach value input, as a VNode.
     */
    private renderMachInput;
    /**
     * Renders other contents for the dialog.
     * @returns The other contents.
     */
    protected renderOtherContents(): VNode;
}
export {};
//# sourceMappingURL=GtcFmsSpeedDialog.d.ts.map