import { Facility, SearchTypeMap, VNode } from '@microsoft/msfs-sdk';
import { Fms } from '@microsoft/msfs-garminsdk';
import { G3000WaypointSearchType } from '@microsoft/msfs-wtg3000-common';
import { GtcInteractionEvent } from '../GtcService/GtcInteractionEvent';
import { GtcView, GtcViewProps } from '../GtcService/GtcView';
import { GtcDialogResult, GtcDialogView } from './GtcDialogView';
import './GtcWaypointDialog.css';
/**
 * A request input for {@link GtcWaypointDialog}.
 */
export interface GtcWaypointDialogInput<T extends G3000WaypointSearchType> {
    /** The type of waypoint to search for. */
    searchType: T;
    /** The initial label text to display when the dialog's identifier input is empty. */
    emptyLabelText: string;
    /** The waypoint value initially loaded into the dialog at the start of the request. */
    initialValue?: SearchTypeMap[T] | null;
}
/**
 * Component props for GtcWaypointDialog.
 */
export interface GtcWaypointDialogProps extends GtcViewProps {
    /** The Fms instance to use. */
    fms: Fms;
}
/**
 * A dialog which allows the user to select a waypoint.
 */
export declare class GtcWaypointDialog extends GtcView<GtcWaypointDialogProps> implements GtcDialogView<GtcWaypointDialogInput<G3000WaypointSearchType>, Facility> {
    private static readonly CHAR_ARRAY;
    private thisNode?;
    private readonly inputRef;
    private readonly keyboardRef;
    private readonly inputSlotEntries;
    private readonly inputText;
    private readonly inputTextSub;
    private readonly autocompleteText;
    private readonly autocompleteTextSub;
    private readonly inputLabelText;
    private readonly selectedFacility;
    private readonly waypoint;
    private facilityMatches?;
    private readonly searchDebounce;
    private searchOpId;
    private facilitySearchType?;
    private resolveFunction?;
    private resultObject;
    /** @inheritDoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritDoc */
    request<T extends G3000WaypointSearchType>(input: GtcWaypointDialogInput<T>): Promise<GtcDialogResult<SearchTypeMap[T]>>;
    /** @inheritdoc */
    onClose(): void;
    /** @inheritdoc */
    onGtcInteractionEvent(event: GtcInteractionEvent): boolean;
    private readonly updateSearchHandler;
    /**
     * A callback called when the search input box is updated.
     * @param debounce Whether to debounce the call to update autocomplete.
     */
    private onInputTextChanged;
    /**
     * Checks for matches with current input, and updates the label and suggested text.
     */
    private updateSearch;
    /**
     * Searches facilities with a given ident and returns matches.
     * @param searchString The ident to search.
     * @param opId The search operation ID.
     * @returns A Promise which will be fulfilled with the results of the facility search.
     */
    private searchFacilities;
    /**
     * Get the label text to display for a facility.
     * @param facility The facility for which to get label text.
     * @returns The label text to display for the specified facility.
     */
    private getFacilityLabel;
    /**
     * Updates the default character values of this dialog's character input to match the current autocomplete state.
     * @param root0 The current autocomplete state.
     * @param root0."0" The current input text.
     * @param root0."1" The current autocomplete text.
     */
    private updateAutocomplete;
    /**
     * Attempts to resolve the current request.
     *
     * If this dialog searches for facilities, then the currently selected facility will be returned if one exists. If
     * there is no selected facility, duplicate matches will attempted to be resolved if they exist. If neither a
     * selected facility or duplicate matches exist, the request will be cancelled.
     *
     * If this dialog does not search for facilities, the current input text is returned.
     */
    private resolve;
    /**
     * Attempts to resolve duplicate matched facilities. Opens the duplicate waypoint dialog to allow the user to
     * select one of the duplicates. If the user selects a duplicate, the current request will be resolved with the
     * selected facility and this dialog will be closed. If the user does not select a duplicate, the current request
     * will remain unresolved and this dialog will remain open.
     * @param matches The search results of the duplicate matched facilities.
     */
    private resolveDuplicates;
    /**
     * Clears this dialog's pending request and fulfills the pending request Promise if one exists.
     */
    private cleanupRequest;
    /**
     * Responds to when one of this dialog's character keys is pressed.
     * @param char The character of the key that was pressed.
     */
    private onKeyPressed;
    /**
     * Responds to when this dialog's backspace button is pressed.
     */
    private onBackspacePressed;
    /**
     * Responds to when this dialog's Find button is pressed.
     */
    private onFindPressed;
    /** @inheritdoc */
    render(): VNode;
    /** @inheritdoc */
    destroy(): void;
}
//# sourceMappingURL=GtcWaypointDialog.d.ts.map