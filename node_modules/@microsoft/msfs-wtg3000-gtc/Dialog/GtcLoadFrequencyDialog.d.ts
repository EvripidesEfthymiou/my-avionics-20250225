import { VNode, ComSpacing } from '@microsoft/msfs-sdk';
import { GtcView } from '../GtcService/GtcView';
import { GtcDialogView, GtcDialogResult } from './GtcDialogView';
import './GtcLoadFrequencyDialog.css';
/** A type of radio. */
type RadioType = 'NAV' | 'COM';
/** A request input for {@link GtcLoadFrequencyDialog}. */
export type GtcLoadFrequencyDialogInput = {
    /** The radio type to load the frequency to. */
    type: RadioType;
    /** The COM channel spacing mode to use. Ignored if `type` is not `COM`. Defaults to 25 kHz. */
    comChannelSpacing?: ComSpacing;
    /** The frequency, in megahertz, to be loaded. */
    frequency: number;
    /** The label to show after the frequency. */
    label: string;
};
/**
 * A GTC dialog view which allows the user to load a frequency into a radio.
 */
export declare class GtcLoadFrequencyDialog extends GtcView implements GtcDialogView<GtcLoadFrequencyDialogInput, void> {
    private static readonly NAV_FORMATTER;
    private static readonly COM_25_FORMATTER;
    private static readonly COM_833_FORMATTER;
    private thisNode?;
    private readonly panelTitle;
    private readonly radioType;
    private input?;
    private resolveFunction?;
    private resultObject;
    private isAlive;
    /** @inheritdoc */
    onAfterRender(thisNode: VNode): void;
    /** @inheritdoc */
    request(input: GtcLoadFrequencyDialogInput): Promise<GtcDialogResult<void>>;
    /** @inheritDoc */
    onResume(): void;
    /** @inheritdoc */
    onClose(): void;
    /**
     * Clears this dialog's message and resolves the pending request Promise if one exists.
     */
    private cleanupRequest;
    /** @inheritdoc */
    render(): VNode;
    /**
     * Renders a radio load panel.
     * @param index The radio index.
     * @returns The radio load panel.
     */
    private renderLoadPanel;
    /**
     * Handles a load button being pressed.
     * @param index The radio index.
     * @param isStandby Whether this is standby radio or not.
     */
    private handlePressed;
    /** @inheritdoc */
    destroy(): void;
}
export {};
//# sourceMappingURL=GtcLoadFrequencyDialog.d.ts.map